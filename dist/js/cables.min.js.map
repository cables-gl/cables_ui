{"version":3,"sources":["timer.js","utils.js","cgl_mesh.js","cgl_shader.js","cgl_state.js","cgl_texture.js","cgl_textureeffect.js","holo.js","ops.devices.js","ops.gl.imgeffects.js","ops.gl.js","ops.gl.meshes.js","ops.js","ops.json.js","ops.math.js","ops.net.js"],"names":["Timer","getTime","lastTime","Date","now","timeStart","timeOffset","self","this","currentTime","paused","update","togglePlay","play","pause","setOffset","val","generateUUID","d","uuid","replace","c","r","Math","random","floor","toString","ajaxRequest","url","callback","request","XMLHttpRequest","open","responseType","onload","e","target","response","send","CGL","DEG2RAD","Mesh","geom","bufTexCoords","bufVertexNormals","bufVertices","gl","createBuffer","bufVerticesIndizes","setGeom","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","vertices","STATIC_DRAW","itemSize","numItems","length","ELEMENT_ARRAY_BUFFER","Uint16Array","verticesIndices","vertexNormals","console","log","texCoords","render","shader","bind","GL","enableVertexAttribArray","getAttrVertexPos","getAttrVertexNormals","getAttrTexCoords","vertexAttribPointer","FLOAT","drawElements","TRIANGLES","UNSIGNED_SHORT","Geometry","faceVertCount","texCoordsIndices","clear","addFace","a","b","face","iv","push","parseOBJ","buff","_readline","off","s","String","fromCharCode","groups","vertexNormalIndices","cg","from","to","Uint8Array","line","cds","split","x","parseFloat","y","z","v0a","v1a","v2a","vi0","parseInt","vi1","vi2","ui0","ui1","ui2","ni0","ni1","ni2","vlen","ulen","nlen","v3a","vi3","ui3","ni3","Uniform","_shader","_type","_name","_value","loc","name","type","value","needsUpdate","addUniform","getType","getName","resetLoc","updateValueF","getUniformLocation","getProgram","uniform1f","setValueF","v","updateValueT","uniform1i","setValueT","setValue","updateValue","Shader","program","uniforms","needsRecompile","removeUniform","i","splice","uni","getDefaultVertexShader","getDefaultFragmentShader","srcVert","srcFrag","setSource","projMatrixUniform","mvMatrixUniform","attrTexCoords","attrVertexNormals","attrVertexPos","hasTextureUniforms","compile","defines","endl","vs","fs","createProgram","getAttribLocation","useProgram","uniformMatrix4fv","cgl","pMatrix","mvMatrix","createShader","str","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","VERTEX_SHADER","FRAGMENT_SHADER","warn","getShaderInfoLog","lines","match","j","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","vstr","fstr","vshader","fshader","attachShader","State","mvMatrixStack","pMatrixStack","shaderStack","mat4","create","identity","simpleShader","currentShader","canvasWidth","canvasHeight","beginFrame","setShader","endFrame","setPreviousShader","getShader","pop","pushMvMatrix","copy","popMvMatrix","pushPMatrix","popPMatrix","Texture","tex","createTexture","width","height","slot","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","setSize","w","h","arr","uarr","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR","texImage2D","RGBA","UNSIGNED_BYTE","initTexture","img","image","TEXTURE_MAG_FILTER","NEAREST","load","finishedCallback","texture","Image","src","TextureEffect","mesh","textureSource","textureTarget","frameBuf","createFramebuffer","renderbuffer","createRenderbuffer","switched","startEffect","setSourceTexture","bindFramebuffer","FRAMEBUFFER","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","framebufferTexture2D","COLOR_ATTACHMENT0","framebufferRenderbuffer","DEPTH_ATTACHMENT","getCurrentTargetTexture","getCurrentSourceTexture","viewport","perspective","clearColor","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","finish","PORT_DIR_IN","PORT_DIR_OUT","OP_PORT_TYPE_VALUE","OP_PORT_TYPE_FUNCTION","OP_PORT_TYPE_OBJECT","OP_PORT_TYPE_TEXTURE","Ops","Op","objName","portsOut","portsIn","posts","uiAttribs","id","addOutPort","p","direction","parent","addInPort","execute","exec","printInfo","ipo","removeLinks","getPort","ipi","findFittingPort","otherPort","Link","canLink","getSerialized","op","getPortByName","Port","links","valueBeforeLink","__defineGetter__","__defineSetter__","isLinked","onValueChanged","onTriggered","addLink","l","removeLinkTo","p2","portIn","portOut","remove","isLinkedTo","call","goals","getTypeString","obj","removeLink","link","scene","getOtherPort","onUnLink","p1","objIn","objOut","canLinkText","Scene","ops","timer","animFrameOps","deleteOp","addOp","eval","hasOwnProperty","onAdd","opid","tryRelink","reLinkP1","reLinkP2","onDelete","requestAnimationFrame","time","onAnimFrame","op1","port1Name","op2","port2Name","port1","port2","onLink","serialize","JSON","stringify","getOpById","deSerialize","opinid","opoutid","inName","outName","found","parse","iop","port","ipi2","ili","prototype","Devices","GamePad","apply","arguments","exe","numPads","axis1","axis2","axis3","axis4","button0","button1","button2","button3","button4","gamePads","navigator","getGamepads","count","gp","axes","buttons","pressed","LeapMotion","transX","transY","transZ","finger0X","finger0Y","finger0Z","Leap","loop","frame","_translation","fingers","tipPosition","Gl","TextureEffects","texOut","trigger","ready","effect","currentTextureEffect","Invert","Desaturate","amount","amountUniform","RgbMultiply","g","uniformR","uniformG","uniformB","Vignette","lensRadius1","lensRadius2","uniLensRadius1","uniLensRadius2","Blur","uniDirX","uniDirY","Renderer","initTranslate","vec3","set","canvas","clientWidth","clientHeight","enable","DEPTH_TEST","translate","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","document","getElementById","getContext","ClearColor","ClearDepth","TextureEmpty","textureOut","sizeChanged","filename","Meshes","Plotter","lineWidth","buffer","num","drawArrays","LINE_STRIP","BasicMaterial","doRender","uniform","textureUniform","ShowNormalsMaterial","Schwurbel","uniLoc","Noise","timeUniform","Matrix","Translate","vec","Scale","scale","vScale","transMatrix","doScale","multiply","updateMatrix","scaleChanged","Transform","posX","posY","posZ","scaleX","scaleY","scaleZ","rotX","rotY","rotZ","vPos","doTranslate","rotateX","rotateY","rotateZ","translateChanged","rotChanged","RandomCluster","reset","randoms","randomsRot","randomsFloats","fromValues","size","idx","rnd","Render2Texture","Triangle","Rectangle","rebuild","FullscreenRectangle","Circle","calc","oldPosX","oldPosY","segments","percent","degInRad","posx","cos","radius","posy","sin","ObjMesh","unwrap","ind","crd","cpi","ncrd","Array","Cube","Log","input","CallsPerSecond","cps","Value","result","TimeLineTime","theTime","Repeat","IfTrueThen","bool","triggerThen","triggerElse","Group","triggers","Interval","timeOutId","interval","setTimeout","Anim","SinusAnim","RelativeTime","startTime","Json","jsonValue","data","key","Random","Clamp","clamp","min","max","SmoothStep","smoothstep","MapRange","old_min","old_max","new_min","new_max","nMin","nMax","oMin","oMax","reverseInput","oldMin","oldMax","reverseOutput","newMin","newMax","portion","Abs","number","abs","Sin","Sum","number1","number2","Multiply","Divide","Compare","IsEven","Greater","Between","Lesser","Equals","Net","Websocket","checkConnection","connected","connect","timeout","connectedTo","connection","close","window","WebSocket","MozWebSocket","error","onerror","message","onclose","onopen","onmessage","json"],"mappings":"AAEA,QAAAA,SAUA,QAAAC,KAGA,MADAC,IAAAC,KAAAC,MAAAC,GAAA,IACAH,EAAAI,EAXA,GAAAC,GAAAC,KACAH,EAAAF,KAAAC,MACAE,EAAA,EAEAG,EAAA,EACAP,EAAA,EACAQ,GAAA,CASAF,MAAAG,OAAA,WAEA,MAAAD,GAAA,OACAD,EAAAR,KAKAO,KAAAP,QAAA,WAEA,MAAAQ,IAGAD,KAAAI,WAAA,WAEAF,EAAAH,EAAAM,OACAN,EAAAO,SAGAN,KAAAO,UAAA,SAAAC,GAEA,EAAAP,EAAAO,GAEAX,EAAAF,KAAAC,MACAE,EAAA,EACAG,EAAA,IAIAH,GAAAU,EACAP,EAAAP,EAAAI,IAMAE,KAAAK,KAAA,WAEAR,EAAAF,KAAAC,MACAM,GAAA,GAGAF,KAAAM,MAAA,WAEAR,EAAAG,EACAC,GAAA,GChEA,QAAAO,gBAEA,GAAAC,IAAA,GAAAf,OAAAF,UACAkB,EAAA,uCAAAC,QAAA,QAAA,SAAAC,GAEA,GAAAC,IAAAJ,EAAA,GAAAK,KAAAC,UAAA,GAAA,CAEA,OADAN,GAAAK,KAAAE,MAAAP,EAAA,KACA,KAAAG,EAAAC,EAAA,EAAAA,EAAA,GAAAI,SAAA,KAEA,OAAAP,GAIA,QAAAQ,aAAAC,EAAAC,GAEA,GAAAC,GAAA,GAAAC,eACAD,GAAAE,KAAA,MAAAJ,GAAA,GACAE,EAAAG,aAAA,cACAH,EAAAI,OAAA,SAAAC,GAEAN,EAAAM,EAAAC,OAAAC,WAEAP,EAAAQ,OCtBA,GAAAC,KAAAA,MAEAC,QAAA,QAAA,IAKAD,KAAAE,KAAA,SAAAC,GAEA,GAAAC,GAAA,GACAC,EAAA,GACAC,EAAAC,GAAAC,eACAC,EAAAF,GAAAC,cAEAvC,MAAAyC,QAAA,SAAAP,GAGAI,GAAAI,WAAAJ,GAAAK,aAAAN,GACAC,GAAAM,WAAAN,GAAAK,aAAA,GAAAE,cAAAX,EAAAY,UAAAR,GAAAS,aACAV,EAAAW,SAAA,EACAX,EAAAY,SAAAf,EAAAY,SAAAI,OAAA,EAGAZ,GAAAI,WAAAJ,GAAAa,qBAAAX,GACAF,GAAAM,WAAAN,GAAAa,qBAAA,GAAAC,aAAAlB,EAAAmB,iBAAAf,GAAAS,aACAP,EAAAQ,SAAA,EACAR,EAAAS,SAAAf,EAAAmB,gBAAAH,OAKAhB,EAAAoB,cAAAJ,OAAA,IAEA,IAAAd,IAAAA,EAAAE,GAAAC,gBAEAD,GAAAI,WAAAJ,GAAAK,aAAAP,GACAE,GAAAM,WAAAN,GAAAK,aAAA,GAAAE,cAAAX,EAAAoB,eAAAhB,GAAAS,aACAX,EAAAY,SAAA,EACAZ,EAAAa,SAAAf,EAAAoB,cAAAJ,OAAAd,EAAAY,SACAO,QAAAC,IAAA,oBAAApB,EAAAa,WAIAf,EAAAuB,UAAAP,OAAA,IAEA,IAAAf,IAAAA,EAAAG,GAAAC,gBACAD,GAAAI,WAAAJ,GAAAK,aAAAR,GACAG,GAAAM,WAAAN,GAAAK,aAAA,GAAAE,cAAAX,EAAAuB,WAAAnB,GAAAS,aACAZ,EAAAa,SAAA,EACAb,EAAAc,SAAAf,EAAAuB,UAAAP,OAAAf,EAAAa,WAKAhD,KAAAyC,QAAAP,GAGAlC,KAAA0D,OAAA,SAAAC,GAEAA,EAAAC,OAEAC,GAAAC,wBAAAH,EAAAI,oBACA,IAAA3B,GAAAyB,GAAAC,wBAAAH,EAAAK,wBACA,IAAA7B,GAAA0B,GAAAC,wBAAAH,EAAAM,oBAEA3B,GAAAI,WAAAJ,GAAAK,aAAAN,GACAC,GAAA4B,oBAAAP,EAAAI,mBAAA1B,EAAAW,SAAAV,GAAA6B,OAAA,EAAA,EAAA,GAEA,IAAA/B,IAEAE,GAAAI,WAAAJ,GAAAK,aAAAP,GACAE,GAAA4B,oBAAAP,EAAAK,uBAAA5B,EAAAY,SAAAV,GAAA6B,OAAA,EAAA,EAAA,IAGA,IAAAhC,IAEAG,GAAAI,WAAAJ,GAAAK,aAAAR,GACAG,GAAA4B,oBAAAP,EAAAM,mBAAA9B,EAAAa,SAAAV,GAAA6B,OAAA,EAAA,EAAA,IAGA7B,GAAAI,WAAAJ,GAAAa,qBAAAX,GACAF,GAAA8B,aAAA9B,GAAA+B,UAAA7B,EAAAS,SAAAX,GAAAgC,eAAA,KAKAvC,IAAAwC,SAAA,WAEAvE,KAAAwE,cAAA,EACAxE,KAAA8C,YACA9C,KAAAqD,mBACArD,KAAAyD,aACAzD,KAAAyE,oBACAzE,KAAAsD,iBAEAtD,KAAA0E,MAAA,WAEA1E,KAAA8C,SAAAI,OAAA,EACAlD,KAAAqD,gBAAAH,OAAA,EACAlD,KAAAyD,UAAAP,OAAA,EACAlD,KAAAyE,iBAAAvB,OAAA,GAGAlD,KAAA2E,QAAA,SAAAC,EAAAC,EAAAhE,GAIA,IAAA,GAFAiE,IAAA,GAAA,GAAA,IAEAC,EAAA,EAAAA,EAAA/E,KAAA8C,SAAAiC,GAAA,EAEA/E,KAAA8C,SAAAiC,EAAA,IAAAH,EAAA,IACA5E,KAAA8C,SAAAiC,EAAA,IAAAH,EAAA,IACA5E,KAAA8C,SAAAiC,EAAA,IAAAH,EAAA,KAAAE,EAAA,GAAAC,EAAA,GAEA/E,KAAA8C,SAAAiC,EAAA,IAAAF,EAAA,IACA7E,KAAA8C,SAAAiC,EAAA,IAAAF,EAAA,IACA7E,KAAA8C,SAAAiC,EAAA,IAAAF,EAAA,KAAAC,EAAA,GAAAC,EAAA,GAEA/E,KAAA8C,SAAAiC,EAAA,IAAAlE,EAAA,IACAb,KAAA8C,SAAAiC,EAAA,IAAAlE,EAAA,IACAb,KAAA8C,SAAAiC,EAAA,IAAAlE,EAAA,KAAAiE,EAAA,GAAAC,EAAA,EAGA,KAAAD,EAAA,KAEA9E,KAAA8C,SAAAkC,KAAAJ,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACAE,EAAA,IAAA9E,KAAA8C,SAAAI,OAAA,GAAA,GAGA,IAAA4B,EAAA,KAEA9E,KAAA8C,SAAAkC,KAAAH,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACAC,EAAA,IAAA9E,KAAA8C,SAAAI,OAAA,GAAA,GAGA,IAAA4B,EAAA,KAEA9E,KAAA8C,SAAAkC,KAAAnE,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACAiE,EAAA,IAAA9E,KAAA8C,SAAAI,OAAA,GAAA,GAGAlD,KAAAqD,gBAAA2B,KAAAF,EAAA,IACA9E,KAAAqD,gBAAA2B,KAAAF,EAAA,IACA9E,KAAAqD,gBAAA2B,KAAAF,EAAA,MAQAG,SAAA,SAAAC,GAGAC,UAAA,SAAAP,EAAAQ,GAGA,IADA,GAAAC,GAAA,GACA,IAAAT,EAAAQ,IAAAC,GAAAC,OAAAC,aAAAX,EAAAQ,KACA,OAAAC,GAGA,IAAAnD,GAAA,GAAAH,KAAAwC,QACArC,GAAAsD,UAEAtD,EAAAoB,iBACApB,EAAAuD,sBAMA,KAJA,GAAAC,IAAAC,KAAA,EAAAC,GAAA,GACAR,EAAA,EACAR,EAAA,GAAAiB,YAAAX,GAEAE,EAAAR,EAAA1B,QACA,CACA,GAAA4C,GAAAX,UAAAP,EAAAQ,EACAA,IAAAU,EAAA5C,OAAA,EACA4C,EAAAA,EAAAlF,QAAA,WAAA,IACAkF,EAAAA,EAAAlF,QAAA,eAAA,GACA,IAAAmF,GAAAD,EAAAE,MAAA,IAOA,IANA,KAAAD,EAAA,KAEAL,EAAAE,GAAA1D,EAAAmB,gBAAAH,OACA,MAAAhB,EAAAsD,OAAAO,EAAA,MAAA7D,EAAAsD,OAAAO,EAAA,KAAAJ,KAAAzD,EAAAmB,gBAAAH,OAAA0C,GAAA,IACAF,EAAAxD,EAAAsD,OAAAO,EAAA,KAEA,KAAAA,EAAA,GACA,CACA,GAAAE,GAAAC,WAAAH,EAAA,IACAI,EAAAD,WAAAH,EAAA,IACAK,EAAAF,WAAAH,EAAA,GACA7D,GAAAY,SAAAkC,KAAAiB,EAAAE,EAAAC,GAEA,GAAA,MAAAL,EAAA,GACA,CACA,GAAAE,GAAAC,WAAAH,EAAA,IACAI,EAAA,EAAAD,WAAAH,EAAA,GACA7D,GAAAuB,UAAAuB,KAAAiB,EAAAE,GAEA,GAAA,MAAAJ,EAAA,GACA,CACA,GAAAE,GAAAC,WAAAH,EAAA,IACAI,EAAAD,WAAAH,EAAA,IACAK,EAAAF,WAAAH,EAAA,GACA7D,GAAAoB,cAAA0B,KAAAiB,EAAAE,EAAAC,GAEA,GAAA,KAAAL,EAAA,GACA,CACA,GAAAM,GAAAN,EAAA,GAAAC,MAAA,KAAAM,EAAAP,EAAA,GAAAC,MAAA,KAAAO,EAAAR,EAAA,GAAAC,MAAA,KACAQ,EAAAC,SAAAJ,EAAA,IAAA,EAAAK,EAAAD,SAAAH,EAAA,IAAA,EAAAK,EAAAF,SAAAF,EAAA,IAAA,EACAK,EAAAH,SAAAJ,EAAA,IAAA,EAAAQ,EAAAJ,SAAAH,EAAA,IAAA,EAAAQ,EAAAL,SAAAF,EAAA,IAAA,EACAQ,EAAAN,SAAAJ,EAAA,IAAA,EAAAW,EAAAP,SAAAH,EAAA,IAAA,EAAAW,EAAAR,SAAAF,EAAA,IAAA,EAEAW,EAAAhF,EAAAY,SAAAI,OAAA,EAAAiE,EAAAjF,EAAAuB,UAAAP,OAAA,EAAAkE,EAAAlF,EAAAoB,cAAAJ,OAAA,CAQA,IAPA,EAAAsD,IAAAA,EAAAU,EAAAV,EAAA,GAAA,EAAAE,IAAAA,EAAAQ,EAAAR,EAAA,GAAA,EAAAC,IAAAA,EAAAO,EAAAP,EAAA,GACA,EAAAC,IAAAA,EAAAO,EAAAP,EAAA,GAAA,EAAAC,IAAAA,EAAAM,EAAAN,EAAA,GAAA,EAAAC,IAAAA,EAAAK,EAAAL,EAAA,GACA,EAAAC,IAAAA,EAAAK,EAAAL,EAAA,GAAA,EAAAC,IAAAA,EAAAI,EAAAJ,EAAA,GAAA,EAAAC,IAAAA,EAAAG,EAAAH,EAAA,GAEA/E,EAAAmB,gBAAA2B,KAAAwB,EAAAE,EAAAC,GACAzE,EAAAuC,iBAAAO,KAAA4B,EAAAC,EAAAC,GACA5E,EAAAuD,oBAAAT,KAAA+B,EAAAC,EAAAC,GACA,GAAAlB,EAAA7C,OACA,CACA,GAAAmE,GAAAtB,EAAA,GAAAC,MAAA,KACAsB,EAAAb,SAAAY,EAAA,IAAA,EAAAE,EAAAd,SAAAY,EAAA,IAAA,EAAAG,EAAAf,SAAAY,EAAA,IAAA,CACA,GAAAC,IAAAA,EAAAJ,EAAAI,EAAA,GACA,EAAAC,IAAAA,EAAAJ,EAAAI,EAAA,GACA,EAAAC,IAAAA,EAAAJ,EAAAI,EAAA,GACAtF,EAAAmB,gBAAA2B,KAAAwB,EAAAG,EAAAW,GACApF,EAAAuC,iBAAAO,KAAA4B,EAAAE,EAAAS,GACArF,EAAAuD,oBAAAT,KAAA+B,EAAAE,EAAAO,KAMA,MAFA9B,GAAAE,GAAA1D,EAAAmB,gBAAAH,OAEAhB,ECzOA,IAAAH,KAAAA,OAIAA,KAAA0F,QAAA,SAAAC,EAAAC,EAAAC,EAAAC,GAEA,GAAA9H,GAAAC,KACA8H,EAAA,GACAC,EAAAH,EACAI,EAAAL,EACAM,EAAA,EACAtE,EAAA+D,CACA1H,MAAAkI,aAAA,EAEAvE,EAAAwE,WAAAnI,MAEAA,KAAAoI,QAAA,WAAA,MAAAJ,IACAhI,KAAAqI,QAAA,WAAA,MAAAN,IAEA/H,KAAAsI,SAAA,WAAAR,EAAA,IAEA9H,KAAAuI,aAAA,WAEA,IAAAT,IAAAA,EAAAxF,GAAAkG,mBAAA7E,EAAA8E,aAAAV,IACAzF,GAAAoG,UAAAZ,EAAAG,IAGAjI,KAAA2I,UAAA,SAAAC,GAEA7I,EAAAmI,aAAA,EACAD,EAAAW,GAGA5I,KAAA6I,aAAA,WAEA,IAAAf,IAEAA,EAAAxF,GAAAkG,mBAAA7E,EAAA8E,aAAAV,GACA,IAAAD,GAAAvE,QAAAC,IAAA,0BAGAlB,GAAAwG,UAAAhB,EAAA,IAGA9H,KAAA+I,UAAA,SAAAH,GAEA7I,EAAAmI,aAAA,EACAD,EAAAW,GAGA,KAAAZ,IAEAhI,KAAAgJ,SAAAhJ,KAAA2I,UACA3I,KAAAiJ,YAAAjJ,KAAAuI,cAGA,KAAAP,IAEAhI,KAAAgJ,SAAAhJ,KAAA+I,UACA/I,KAAAiJ,YAAAjJ,KAAA6I,cAGA7I,KAAAgJ,SAAAnB,IAKA9F,IAAAmH,OAAA,WAEA,GAAAnJ,GAAAC,KACAmJ,GAAA,EACAC,KACAC,GAAA,CAEArJ,MAAAsJ,cAAA,SAAAvB,GAEA,IAAA,GAAAwB,KAAAH,GAEAA,EAAAG,GAAAlB,WAAAN,GAEAqB,EAAAI,OAAAD,EAAA,EAGAF,IAAA,GAGArJ,KAAAmI,WAAA,SAAAsB,GAEAL,EAAApE,KAAAyE,GACAJ,GAAA,GAGArJ,KAAA0J,uBAAA,WAEA,MAAA,mUAiBA1J,KAAA2J,yBAAA,WAEA,MAAA,6GAWA3J,KAAA4J,QAAA5J,KAAA0J,yBACA1J,KAAA6J,QAAA7J,KAAA2J,2BAEA3J,KAAA8J,UAAA,SAAAF,EAAAC,GAEA7J,KAAA4J,QAAAA,EACA5J,KAAA6J,QAAAA,EAGA,IAAAE,GAAA,GACAC,EAAA,GAEAC,EAAA,GACAC,EAAA,GACAC,EAAA,EAEAnK,MAAAgE,qBAAA,WAAA,MAAAkG,IACAlK,KAAAiE,iBAAA,WAAA,MAAAgG,IACAjK,KAAA+D,iBAAA,WAAA,MAAAoG,IAEAnK,KAAAoK,mBAAA,WAEA,IAAA,GAAAb,KAAAH,GAEA,GAAA,KAAAA,EAAAG,GAAAnB,UAAA,OAAA,CAEA,QAAA,GAGApI,KAAAqK,QAAA,WAEA,GAAAC,GAAA,EACAvK,GAAAqK,uBAAAE,GAAA,uBAAAC,QAEAhH,QAAAC,IAAA,qBACAD,QAAAC,IAAA,iBAAAzD,EAAAqK,qBAEA,IAAAI,GAAAF,EAAAvK,EAAA6J,QACAa,EAAAH,EAAAvK,EAAA8J,OAEA,IAAAV,EAOA,CACA5F,QAAAC,IAAA,wBAKA2F,EAAAuB,cAAAF,EAAAC,EAAAtB,GAEAa,EAAA,EAEA,KAAA,GAAAT,KAAAH,GAAAA,EAAAG,GAAAjB,eAfA/E,SAAAC,IAAA,wBAEA2F,EAAAuB,cAAAF,EAAAC,EAAAtB,EAgBAE,IAAA,GAGArJ,KAAA4D,KAAA,aAEAuF,GAAAE,IAAAtJ,EAAAsK,UAEA,IAAAL,IAEAE,EAAA5H,GAAAqI,kBAAAxB,EAAA,kBACAc,EAAA3H,GAAAqI,kBAAAxB,EAAA,gBACAgB,EAAA7H,GAAAqI,kBAAAxB,EAAA,aAEAY,EAAAzH,GAAAkG,mBAAAW,EAAA,cACAa,EAAA1H,GAAAkG,mBAAAW,EAAA,aAGAtF,GAAA+G,WAAAzB,EAEA,KAAA,GAAAI,KAAAH,GAEAA,EAAAG,GAAArB,aAAAkB,EAAAG,GAAAN,aAGA3G,IAAAuI,iBAAAd,GAAA,EAAAe,IAAAC,SACAzI,GAAAuI,iBAAAb,GAAA,EAAAc,IAAAE,WAGAhL,KAAAyI,WAAA,WAEA,MAAAU,IAIA8B,aAAA,SAAAC,EAAAlD,EAAAN,GAEA,GAAA/D,GAAA+D,GAAApF,GAAA2I,aAAAjD,EAGA,IAFA1F,GAAA6I,aAAAxH,EAAAuH,GACA5I,GAAA8I,cAAAzH,IACArB,GAAA+I,mBAAA1H,EAAArB,GAAAgJ,gBACA,CACA/H,QAAAC,IAAA,oBAEAwE,GAAA1F,GAAAiJ,eAAAhI,QAAAC,IAAA,iBACAwE,GAAA1F,GAAAkJ,iBAAAjI,QAAAC,IAAA,mBAEAD,QAAAkI,KAAAnJ,GAAAoJ,iBAAA/H,GAEA,IAAAgI,GAAAT,EAAAU,MAAA,wBACA,KAAA,GAAArC,KAAAoC,GACA,CACA,GAAAE,GAAApF,SAAA8C,EAAA,IAAA,CACAhG,SAAAC,IAAAqI,EAAA,KAAAF,EAAApC,IAGAhG,QAAAkI,KAAAnJ,GAAAoJ,iBAAA/H,IAEA,MAAAA,IAGAmI,YAAA,SAAA3C,GAGA,GADA7G,GAAAwJ,YAAA3C,IACA7G,GAAAyJ,oBAAA5C,EAAA7G,GAAA0J,aAEA,KAAA1J,IAAA2J,kBAAA9C,IAKAuB,cAAA,SAAAwB,EAAAC,GAEA,GAAAhD,GAAA7G,GAAAoI,eAOA,OANA3K,GAAAqM,QAAAnB,aAAAiB,EAAA5J,GAAAiJ,eACAxL,EAAAsM,QAAApB,aAAAkB,EAAA7J,GAAAkJ,iBACAlJ,GAAAgK,aAAAnD,EAAApJ,EAAAqM,SACA9J,GAAAgK,aAAAnD,EAAApJ,EAAAsM,SAEAP,YAAA3C,GACAA,GCtQA,IAAApH,KAAAA,OAEAA,KAAAwK,MAAA,WAEA,GAAAxM,GAAAC,KACAwM,KACAC,KACAC,IAEA1M,MAAA+K,QAAA4B,KAAAC,SACA5M,KAAAgL,SAAA2B,KAAAC,SAEAD,KAAAE,SAAA9M,EAAAiL,SAEA,IAAA8B,GAAA,GAAA/K,KAAAmH,OACA6D,EAAAD,CAGA9M,MAAAgN,YAAA,IACAhN,KAAAiN,aAAA,IAIAjN,KAAAkN,WAAA,WAEAnN,EAAAoN,UAAAL,IAGA9M,KAAAoN,SAAA,WAEArN,EAAAsN,oBACAb,EAAAtJ,OAAA,GAAAK,QAAAkI,KAAA,oDACAgB,EAAAvJ,OAAA,GAAAK,QAAAkI,KAAA,mDACAiB,EAAAxJ,OAAA,GAAAK,QAAAkI,KAAA,kDAKAzL,KAAAsN,UAAA,WAEA,MAAAP,IAGA/M,KAAAmN,UAAA,SAAAxJ,GAEA+I,EAAA1H,KAAArB,GACAoJ,EAAApJ,GAGA3D,KAAAqN,kBAAA,WAEA,GAAA,IAAAX,EAAAxJ,OAAA,KAAA,8BACAwJ,GAAAa,MACAR,EAAAL,EAAAA,EAAAxJ,OAAA,IAKAlD,KAAAwN,aAAA,WAEA,GAAAC,GAAAd,KAAAC,QACAD,MAAAc,KAAAA,EAAA1N,EAAAiL,UACAwB,EAAAxH,KAAAyI,IAGAzN,KAAA0N,YAAA,WAEA,GAAA,IAAAlB,EAAAtJ,OAAA,KAAA,8BACAnD,GAAAiL,SAAAwB,EAAAe,OAKAvN,KAAA2N,YAAA,WAEA,GAAAF,GAAAd,KAAAC,QACAD,MAAAc,KAAAA,EAAA1N,EAAAgL,SACA0B,EAAAzH,KAAAyI,IAGAzN,KAAA4N,WAAA,WAEA,GAAA,IAAAnB,EAAAvJ,OAAA,KAAA,+BACAnD,GAAAgL,QAAA0B,EAAAc,QAMAzC,IAAA,GAAA/I,KAAAwK,KC1FA,IAAAxK,KAAAA,OAEAA,KAAA8L,QAAA,WAEA,GAAA9N,GAAAC,IACAA,MAAA8N,IAAAxL,GAAAyL,gBACA/N,KAAAgO,MAAA,EACAhO,KAAAiO,OAAA,EAMAjO,KAAA4D,KAAA,SAAAsK,GAEA5L,GAAA6L,cAAA7L,GAAA8L,SAAAF,GACA5L,GAAA+L,YAAA/L,GAAAgM,WAAAvO,EAAA+N,MAGA9N,KAAAuO,QAAA,SAAAC,EAAAC,GAEA1O,EAAAiO,MAAAQ,EACAzO,EAAAkO,OAAAQ,EAEAnM,GAAA+L,YAAA/L,GAAAgM,WAAAvO,EAAA+N,IAEA,IAAAY,KACAA,GAAAxL,OAAAsL,EAAAC,EAAA,CAYA,IAAAE,GAAA,GAAA9I,YAAA6I,EAEApM,IAAAsM,cAAAtM,GAAAgM,WAAAhM,GAAAuM,eAAAvM,GAAAwM,eACAxM,GAAAsM,cAAAtM,GAAAgM,WAAAhM,GAAAyM,eAAAzM,GAAAwM,eACAxM,GAAAsM,cAAAtM,GAAAgM,WAAAhM,GAAA0M,mBAAA1M,GAAA2M,QAEA3M,GAAA4M,WAAA5M,GAAAgM,WAAA,EAAAhM,GAAA6M,KAAAX,EAAAC,EAAA,EAAAnM,GAAA6M,KAAA7M,GAAA8M,cAAAT,GAEArM,GAAA+L,YAAA/L,GAAAgM,WAAA,OAGAtO,KAAAqP,YAAA,SAAAC,GAEAvP,EAAAiO,MAAAsB,EAAAtB,MACAjO,EAAAkO,OAAAqB,EAAArB,OAGA3L,GAAA+L,YAAA/L,GAAAgM,WAAAvO,EAAA+N,KAEAxL,GAAA4M,WAAA5M,GAAAgM,WAAA,EAAAhM,GAAA6M,KAAA7M,GAAA6M,KAAA7M,GAAA8M,cAAArP,EAAAwP,OAEAjN,GAAAsM,cAAAtM,GAAAgM,WAAAhM,GAAAkN,mBAAAlN,GAAAmN,SACAnN,GAAAsM,cAAAtM,GAAAgM,WAAAhM,GAAA0M,mBAAA1M,GAAAmN,SAOAnN,GAAA+L,YAAA/L,GAAAgM,WAAA,OAGAtO,KAAAuO,QAAA,EAAA,IAGAxM,IAAA8L,QAAA6B,KAAA,SAAAtO,EAAAuO,GAEA,GAAAC,GAAA,GAAA7N,KAAA8L,OASA,OARA+B,GAAAL,MAAA,GAAAM,OACAD,EAAAL,MAAA7N,OAAA,WAEA6B,QAAAC,IAAAoM,EAAAL,OACAK,EAAAP,YAAAO,EAAAL,OACAI,KAEAC,EAAAL,MAAAO,IAAA1O,EACAwO,ECrFA,IAAA7N,KAAAA,OAEAA,KAAAgO,cAAA,WAEA,GAAAhQ,GAAAC,KACAkC,EAAA,GAAAH,KAAAwC,QAEArC,GAAAY,UACA,EAAA,EAAA,EACA,GAAA,EAAA,EACA,EAAA,GAAA,EACA,GAAA,GAAA,GAGAZ,EAAAuB,WACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,GAGAvB,EAAAmB,iBACA,EAAA,EAAA,EACA,EAAA,EAAA,EAGA,IAAA2M,GAAA,GAAAjO,KAAAE,KAAAC,GAEA+N,EAAA,KACAC,EAAA,GAAAnO,KAAA8L,QAEAsC,EAAAtM,GAAAuM,oBACAC,EAAAxM,GAAAyM,qBAEAC,GAAA,CAEAvQ,MAAAwQ,YAAA,WAEAD,GAAA,GAGAvQ,KAAAyQ,iBAAA,SAAA3C,GAEA,OAAAA,GAEAmC,EAAA,GAAAlO,KAAA8L,QACAoC,EAAA1B,QAAA,GAAA,KAIA0B,EAAAnC,EAEAvK,QAAAC,IAAAyM,EAAAjC,MAAAiC,EAAAhC,QAEAiC,EAAA3B,QAAA0B,EAAAjC,MAAAiC,EAAAhC,QAEApK,GAAA6M,gBAAA7M,GAAA8M,YAAAR,GAEAtM,GAAA+M,iBAAA/M,GAAAgN,aAAAR,GACAxM,GAAAiN,oBAAAjN,GAAAgN,aAAAhN,GAAAkN,kBAAAd,EAAAjC,MAAAiC,EAAAhC,QACApK,GAAAmN,qBAAAnN,GAAA8M,YAAA9M,GAAAoN,kBAAApN,GAAAyK,WAAA4B,EAAApC,IAAA,GACAjK,GAAAqN,wBAAArN,GAAA8M,YAAA9M,GAAAsN,iBAAAtN,GAAAgN,aAAAR,GACAxM,GAAAwK,YAAAxK,GAAAyK,WAAA,MACAzK,GAAA+M,iBAAA/M,GAAAgN,aAAA,MACAhN,GAAA6M,gBAAA7M,GAAA8M,YAAA,MAEApN,QAAAC,IACAzD,EAAAqR,0BAAAnD,OACAlO,EAAAsR,0BAAApD,SAKAjO,KAAAoR,wBAAA,WAEA,MAAAb,GAAAN,EACAC,GAGAlQ,KAAAqR,wBAAA,WAEA,MAAAd,GAAAL,EACAD,GAGAjQ,KAAA4D,KAAA,WAEA,GAAA,OAAAqM,EAAA,KAAA,sBAIAnF,KAAA0C,eAMA3J,GAAA6M,gBAAA7M,GAAA8M,YAAAR,GACAtM,GAAAmN,qBAAAnN,GAAA8M,YAAA9M,GAAAoN,kBAAApN,GAAAyK,WAAAvO,EAAAqR,0BAAAtD,IAAA,GAEAhD,IAAA6C,cACArL,GAAAgP,SAAA,EAAA,EAAAvR,EAAAqR,0BAAApD,MAAAjO,EAAAqR,0BAAAnD,QACAtB,KAAA4E,YAAAzG,IAAAC,QAAA,GAAAhL,EAAAqR,0BAAApD,MAAAjO,EAAAqR,0BAAAnD,OAAA,IAAA,MAGAnD,IAAA6C,cACAhB,KAAAE,SAAA/B,IAAAC,SAEAD,IAAA0C,eACAb,KAAAE,SAAA/B,IAAAE,UAGAnH,GAAA2N,WAAA,EAAA,EAAA,EAAA,GACA3N,GAAAa,MAAAb,GAAA4N,iBAAA5N,GAAA6N,mBAGA1R,KAAA2R,OAAA,WAEA3B,EAAAtM,OAAAoH,IAAAwC,aAEAxC,IAAA8C,aACA9C,IAAA4C,cAEA5C,IAAA8C,aAEA/J,GAAA6M,gBAAA7M,GAAA8M,YAAA,MAEA7F,IAAA4C,cACApL,GAAAgP,SAAA,EAAA,EAAAxG,IAAAkC,YAAAlC,IAAAmC,cAEAsD,GAAAA,GCjIA,IAAAqB,aAAA,EACAC,aAAA,EAEAC,mBAAA,EACAC,sBAAA,EACAC,oBAAA,EACAC,qBAAA,EAEAC,OAGAC,GAAA,WAEAnS,KAAAoS,QAAA,GACApS,KAAAqS,YACArS,KAAAsS,WACAtS,KAAAuS,SACAvS,KAAAwS,aACAxS,KAAA+H,KAAA,UACA/H,KAAAyS,GAAAhS,eAEAT,KAAAqI,QAAA,WAEA,MAAArI,MAAA+H,MAEA/H,KAAA0S,WAAA,SAAAC,GAKA,MAHAA,GAAAC,UAAAf,aACAc,EAAAE,OAAA7S,KACAA,KAAAqS,SAAArN,KAAA2N,GACAA,GAEA3S,KAAA8S,UAAA,SAAAH,GAKA,MAHAA,GAAAC,UAAAhB,YACAe,EAAAE,OAAA7S,KACAA,KAAAsS,QAAAtN,KAAA2N,GACAA,GAEA3S,KAAA+S,QAAA,WAEA/S,KAAAgT,QAEAhT,KAAAiT,UAAA,WAEA,IAAA,GAAA1J,GAAA,EAAAA,EAAAvJ,KAAAsS,QAAApP,OAAAqG,IACAhG,QAAAC,IAAA,OAAAxD,KAAAsS,QAAA/I,GAAAlB,UAEA,KAAA,GAAA6K,KAAAlT,MAAAqS,SACA9O,QAAAC,IAAA,QAAAxD,KAAAqS,SAAAa,GAAA7K,YAGArI,KAAAmT,YAAA,WAEA,IAAA,GAAA5J,GAAA,EAAAA,EAAAvJ,KAAAsS,QAAApP,OAAAqG,IACAvJ,KAAAsS,QAAA/I,GAAA4J,aACA,KAAA,GAAAD,KAAAlT,MAAAqS,SACArS,KAAAqS,SAAAa,GAAAC,eAGAnT,KAAAoT,QAAA,SAAArL,GAEA,IAAA,GAAAsL,KAAArT,MAAAsS,QACA,GAAAtS,KAAAsS,QAAAe,GAAAhL,WAAAN,EAAA,MAAA/H,MAAAsS,QAAAe,EAEA,KAAA,GAAAH,KAAAlT,MAAAqS,SACA,GAAArS,KAAAqS,SAAAa,GAAA7K,WAAAN,EAAA,MAAA/H,MAAAqS,SAAAa,IAGAlT,KAAAsT,gBAAA,SAAAC,GAEA,IAAA,GAAAL,KAAAlT,MAAAqS,SAGA,GADA9O,QAAAC,IAAA,KACAgQ,KAAAC,QAAAF,EAAAvT,KAAAqS,SAAAa,IAAA,MAAAlT,MAAAqS,SAAAa,EAGA,KAAA,GAAAG,KAAArT,MAAAsS,QAGA,GADA/O,QAAAC,IAAA,KACAgQ,KAAAC,QAAAF,EAAAvT,KAAAsS,QAAAe,IAAA,MAAArT,MAAAsS,QAAAe,IAMArT,KAAA0T,cAAA,WAEA,GAAAC,KACAA,GAAA5L,KAAA/H,KAAAqI,UACAsL,EAAAvB,QAAApS,KAAAoS,QACAuB,EAAAlB,GAAAzS,KAAAyS,GACAkB,EAAAnB,UAAAxS,KAAAwS,UAEAmB,EAAArB,WACAqB,EAAAtB,WAEA,KAAA,GAAA9I,GAAA,EAAAA,EAAAvJ,KAAAsS,QAAApP,OAAAqG,IACAoK,EAAArB,QAAAtN,KAAAhF,KAAAsS,QAAA/I,GAAAmK,gBAEA,KAAA,GAAAR,KAAAlT,MAAAqS,SACAsB,EAAAtB,SAAArN,KAAAhF,KAAAqS,SAAAa,GAAAQ,gBAEA,OAAAC,IAGA3T,KAAA4T,cAAA,SAAA7L,GAEA,IAAA,GAAAwB,GAAA,EAAAA,EAAAvJ,KAAAsS,QAAApP,OAAAqG,IACA,GAAAvJ,KAAAsS,QAAA/I,GAAAxB,MAAAA,EAAA,MAAA/H,MAAAsS,QAAA/I,EAEA,KAAA,GAAA2J,KAAAlT,MAAAqS,SACA,GAAArS,KAAAqS,SAAAa,GAAAnL,MAAAA,EAAA,MAAA/H,MAAAqS,SAAAa,KAOAW,KAAA,SAAAhB,EAAA9K,EAAAC,GAEA,GAAAjI,GAAAC,IACAA,MAAA4S,UAAAhB,YACA5R,KAAAyS,GAAAhS,eACAT,KAAA6S,OAAAA,EACA7S,KAAA8T,SACA9T,KAAAiI,MAAA,KACAjI,KAAA+H,KAAAA,EACA/H,KAAAgI,KAAAA,GAAA8J,kBACA,IAAAiC,GAAA,IAEA/T,MAAAgU,iBAAA,MAAA,WAEA,MAAAhU,MAAAiI,QAGAjI,KAAAiU,iBAAA,MAAA,SAAArL,GAEA5I,KAAAgJ,SAAAJ,KAGA5I,KAAAoI,QAAA,WAAA,MAAApI,MAAAgI,MACAhI,KAAAkU,SAAA,WAAA,MAAAlU,MAAA8T,MAAA5Q,OAAA,GACAlD,KAAAmU,eAAA,aACAnU,KAAAoU,YAAA,aAEApU,KAAAgJ,SAAA,SAAAJ,GAEA,GAAAA,GAAA5I,KAAAiI,OAAAjI,KAAAgI,MAAAiK,qBACA,CACAjS,KAAAiI,MAAAW,EACA5I,KAAAmU,gBAEA,KAAA,GAAA5K,KAAAvJ,MAAA8T,MAEA9T,KAAA8T,MAAAvK,GAAAP,aAKAhJ,KAAAqI,QAAA,WAEA,MAAArI,MAAA+H,MAGA/H,KAAAqU,QAAA,SAAAC,GAEAP,EAAAhU,EAAAkI,MACAjI,KAAA8T,MAAA9O,KAAAsP,IAGAtU,KAAAuU,aAAA,SAAAC,GAEA,IAAA,GAAAjL,KAAAvJ,MAAA8T,OAEA9T,KAAA8T,MAAAvK,GAAAkL,QAAAD,GAAAxU,KAAA8T,MAAAvK,GAAAmL,SAAAF,IAEAxU,KAAA8T,MAAAvK,GAAAoL,UAMA3U,KAAA4U,WAAA,SAAAJ,GAEA,IAAA,GAAAjL,KAAAvJ,MAAA8T,MAEA,GAAA9T,KAAA8T,MAAAvK,GAAAkL,QAAAD,GAAAxU,KAAA8T,MAAAvK,GAAAmL,SAAAF,EAAA,OAAA,CAEA,QAAA,GAGAxU,KAAA6U,KAAA,WAEA,IAAA,GAAAtL,KAAAvJ,MAAA8T,MAEA9T,KAAA8T,MAAAvK,GAAAkL,QAAAzU,MAAAA,KAAA8T,MAAAvK,GAAAkL,OAAAL,cACApU,KAAA8T,MAAAvK,GAAAmL,SAAA1U,MAAAA,KAAA8T,MAAAvK,GAAAmL,QAAAN,eAKApU,KAAA+S,QAAA,WAEAxP,QAAAC,IAAA,qBAAAxD,KAAAqI,UAAArI,KAAA8U,MAAA5R,SAGAlD,KAAA+U,cAAA,WAEA,MAAA/U,MAAAgI,MAAA8J,mBAAA,QACA9R,KAAAgI,MAAA+J,sBAAA,WACA/R,KAAAgI,MAAAiK,qBAAA,UAAA,QAGAjS,KAAA0T,cAAA,WAEA,GAAAsB,KAIA,IAHAA,EAAAjN,KAAA/H,KAAAqI,UACA2M,EAAA/M,MAAAjI,KAAAiI,MAEAjI,KAAA4S,WAAAhB,aAAA5R,KAAA8T,MAAA5Q,OAAA,EACA,CACA8R,EAAAlB,QACA,KAAA,GAAAvK,KAAAvJ,MAAA8T,MAEAkB,EAAAlB,MAAA9O,KAAAhF,KAAA8T,MAAAvK,GAAAmK,iBAGA,MAAAsB,IAGAhV,KAAAmT,YAAA,WAEA,KAAAnT,KAAA8T,MAAA5Q,OAAA,GAEAlD,KAAA8T,MAAA,GAAAa,UAIA3U,KAAAiV,WAAA,SAAAC,GAEA,IAAA,GAAA3L,KAAAvJ,MAAA8T,MAEA9T,KAAA8T,MAAAvK,IAAA2L,GAAAlV,KAAA8T,MAAAtK,OAAAD,EAAA,EAEAxJ,GAAAiJ,SAAA+K,KAQAP,KAAA,SAAA2B,GAEAnV,KAAAyU,OAAA,KACAzU,KAAA0U,QAAA,KACA1U,KAAAmV,MAAAA,EAEAnV,KAAAgJ,SAAA,WAEAhJ,KAAAyU,OAAAjU,KAAAR,KAAA0U,QAAAlU,MACAR,KAAAyU,OAAAjU,IAAAR,KAAA0U,QAAAlU,MAGAR,KAAAoV,aAAA,SAAAzC,GAEA,MAAAA,IAAA3S,KAAAyU,OAAAzU,KAAA0U,QACA1U,KAAAyU,QAGAzU,KAAA2U,OAAA,WAEA3U,KAAAyU,OAAAQ,WAAAjV,MACAA,KAAA0U,QAAAO,WAAAjV,MACAA,KAAAmV,MAAAE,SAAArV,KAAAyU,OAAAzU,KAAA0U,SACA1U,KAAAyU,OAAA,KACAzU,KAAA0U,QAAA,KACA1U,KAAAmV,MAAA,MAIAnV,KAAAkV,KAAA,SAAAI,EAAAd,GAEA,MAAAhB,MAAAC,QAAA6B,EAAAd,IAKAc,EAAA1C,WAAAhB,aAEA5R,KAAAyU,OAAAa,EACAtV,KAAA0U,QAAAF,IAIAxU,KAAAyU,OAAAD,EACAxU,KAAA0U,QAAAY,GAGAA,EAAAjB,QAAArU,MACAwU,EAAAH,QAAArU,UACAA,MAAAgJ,aAhBAzF,QAAAC,IAAA,uBACA,IAkBAxD,KAAA0T,cAAA,WAEA,GAAAsB,KAOA,OALAA,GAAAP,OAAAzU,KAAAyU,OAAApM,UACA2M,EAAAN,QAAA1U,KAAA0U,QAAArM,UACA2M,EAAAO,MAAAvV,KAAAyU,OAAA5B,OAAAJ,GACAuC,EAAAQ,OAAAxV,KAAA0U,QAAA7B,OAAAJ,GAEAuC,GAKAxB,MAAAiC,YAAA,SAAAH,EAAAd,GAEA,MAAAc,GACAd,EACAc,EAAA1C,WAAAhB,aAAA0D,EAAAxB,MAAA5Q,OAAA,EAAA,0BACAsR,EAAA5B,WAAAhB,aAAA4C,EAAAV,MAAA5Q,OAAA,EAAA,0BACAoS,EAAAV,WAAAJ,GAAA,uBACAc,EAAA1C,WAAA4B,EAAA5B,UAAA,+BACA0C,EAAAtN,MAAAwM,EAAAxM,KAAA,+BACAsN,EAAAzC,QAAA2B,EAAA3B,OAAA,wBACA,WAPA,+BADA,gCAWAW,KAAAC,QAAA,SAAA6B,EAAAd,GAEA,MAAAc,IACAd,EACAc,EAAA1C,WAAAhB,aAAA0D,EAAAxB,MAAA5Q,OAAA,GAAA,EACAsR,EAAA5B,WAAAhB,aAAA4C,EAAAV,MAAA5Q,OAAA,GAAA,EACAoS,EAAAV,WAAAJ,IAAA,EACAc,EAAA1C,WAAA4B,EAAA5B,WAAA,EACA0C,EAAAtN,MAAAwM,EAAAxM,MAAA,EACAsN,EAAAzC,QAAA2B,EAAA3B,QAAA,GAEA,GATA,EAgBA,IAAA6C,OAAA,WAEA,GAAA3V,MAAAC,IACAA,MAAA2V,OACA3V,KAAA4V,MAAA,GAAApW,OACAQ,KAAA6V,gBAGA7V,KAAA0E,MAAA,WAGA,IADA1E,KAAA4V,MAAA,GAAApW,OACAQ,KAAA2V,IAAAzS,OAAA,GAEAlD,KAAA8V,SAAA9V,KAAA2V,IAAA,GAAAlD,KAIAzS,KAAA+V,MAAA,SAAA3D,QAAAI,WAEA,GAAAmB,IAAAqC,KAAA,OAAA5D,QAAA,MAQA,OAPAuB,IAAAvB,QAAAA,QACAuB,GAAAnB,UAAAA,UAEAmB,GAAAsC,eAAA,gBAAAjW,KAAA6V,aAAA7Q,KAAA2O,IAEA3T,KAAA2V,IAAA3Q,KAAA2O,IACA3T,KAAAkW,OAAAlW,KAAAkW,MAAAvC,IACAA,IAGA3T,KAAA8V,SAAA,SAAAK,EAAAC,GAGA,IAAA,GAAA7M,KAAAvJ,MAAA2V,IAEA,GAAA3V,KAAA2V,IAAApM,GAAAkJ,IAAA0D,EACA,CACA,GAAAxC,GAAA3T,KAAA2V,IAAApM,GACA8M,EAAA,KACAC,EAAA,IAEA3C,KAEAyC,GAEApW,KAAA2V,IAAApM,GAAA+I,QAAA,GAAA4B,YAAAlU,KAAA2V,IAAApM,GAAA8I,SAAA,GAAA6B,YAEAlU,KAAA2V,IAAApM,GAAA+I,QAAA,GAAAlK,WAAApI,KAAA2V,IAAApM,GAAA8I,SAAA,GAAAjK,YAEAiO,EAAArW,KAAA2V,IAAApM,GAAA+I,QAAA,GAAAwB,MAAA,GAAAsB,aAAApV,KAAA2V,IAAApM,GAAA+I,QAAA,IACAgE,EAAAtW,KAAA2V,IAAApM,GAAA8I,SAAA,GAAAyB,MAAA,GAAAsB,aAAApV,KAAA2V,IAAApM,GAAA8I,SAAA,KAKArS,KAAA2V,IAAApM,GAAA4J,cACAnT,KAAAuW,SAAAvW,KAAA2V,IAAApM,IACAvJ,KAAA2V,IAAAnM,OAAAD,EAAA,GAEA,OAAA8M,GAAA,OAAAC,GAEAvW,KAAAmV,KACAmB,EAAAxD,OACAwD,EAAAhO,UACAiO,EAAAzD,OACAyD,EAAAjO,cAWArI,KAAAgT,KAAA,WAEAwD,sBAAAzW,KAAAiT,MACAjT,KAAA6V,MAAAzV,QAEA,IAAAsW,GAAA1W,KAAA6V,MAAAnW,SAEA,KAAA,GAAA8J,KAAAxJ,MAAA8V,aAEA9V,KAAA8V,aAAAtM,GAAAmN,YAAAD,IAKAzW,KAAAkV,KAAA,SAAAyB,EAAAC,EAAAC,EAAAC,GAEA,GAAAC,GAAAJ,EAAAvD,QAAAwD,GACAI,EAAAH,EAAAzD,QAAA0D,EAEA,IAAAtD,KAAAC,QAAAsD,EAAAC,GACA,CACA,GAAA9B,GAAA,GAAA1B,MAAAxT,KAGA,OAFAkV,GAAAA,KAAA6B,EAAAC,GACAhX,KAAAiX,OAAAF,EAAAC,GACA9B,EAIA3R,QAAAC,IAAAgQ,KAAAiC,YAAAsB,EAAAC,KAGAhX,KAAAkW,MAAA,SAAAvC,KACA3T,KAAAuW,SAAA,SAAA5C,KACA3T,KAAAiX,OAAA,SAAA3B,EAAAd,KACAxU,KAAAqV,SAAA,SAAAC,EAAAd,KACAxU,KAAAkX,UAAA,WAEA,GAAAlC,KAEAA,GAAAW,MACA,KAAA,GAAApM,KAAAvJ,MAAA2V,IAEAX,EAAAW,IAAA3Q,KAAAhF,KAAA2V,IAAApM,GAAAmK,gBAGA,OAAAyD,MAAAC,UAAApC,IAEAhV,KAAAqX,UAAA,SAAAlB,GAEA,IAAA,GAAA5M,KAAAvJ,MAAA2V,IAEA,GAAA3V,KAAA2V,IAAApM,GAAAkJ,IAAA0D,EAAA,MAAAnW,MAAA2V,IAAApM,IAIAvJ,KAAAsX,YAAA,SAAAtC,GAKA,QAAAX,GAAAkD,EAAAC,EAAAC,EAAAC,GAEA,GAAAC,IAAA,CACAA,IAEA5X,EAAAmV,KACAnV,EAAAsX,UAAAE,GACAE,EACA1X,EAAAsX,UAAAG,GACAE,GAZA,gBAAA1C,KAAAA,EAAAmC,KAAAS,MAAA5C,GACA,IAAAjV,GAAAC,IAiBA,KAAA,GAAA6X,KAAA7C,GAAAW,IACA,CACA,GAAAhC,GAAA3T,KAAA+V,MAAAf,EAAAW,IAAAkC,GAAAzF,QAAA4C,EAAAW,IAAAkC,GAAArF,UACAmB,GAAAlB,GAAAuC,EAAAW,IAAAkC,GAAApF,EAEA,KAAA,GAAAY,KAAA2B,GAAAW,IAAAkC,GAAAvF,QACA,CACA,GAAAwF,GAAAnE,EAAAC,cAAAoB,EAAAW,IAAAkC,GAAAvF,QAAAe,GAAAtL,KACA+P,IAAAA,EAAA9P,MAAAiK,uBAAA6F,EAAAtX,IAAAwU,EAAAW,IAAAkC,GAAAvF,QAAAe,GAAApL,OAGA,IAAA,GAAAiL,KAAA8B,GAAAW,IAAAkC,GAAAxF,SACA,CACA,GAAA2E,GAAArD,EAAAC,cAAAoB,EAAAW,IAAAkC,GAAAxF,SAAAa,GAAAnL,KACAiP,IAAAA,EAAAhP,MAAAiK,uBAAA+E,EAAAxW,IAAAwU,EAAAW,IAAAkC,GAAAxF,SAAAa,GAAAjL,QAQA,IAAA4P,IAAA7C,GAAAW,IAEA,IAAA,GAAAoC,KAAA/C,GAAAW,IAAAkC,GAAAvF,QAGA,IAAA,GAAA0F,KAAAhD,GAAAW,IAAAkC,GAAAvF,QAAAyF,GAAAjE,MAEAO,EACAW,EAAAW,IAAAkC,GAAAvF,QAAAyF,GAAAjE,MAAAkE,GAAAzC,MACAP,EAAAW,IAAAkC,GAAAvF,QAAAyF,GAAAjE,MAAAkE,GAAAxC,OACAR,EAAAW,IAAAkC,GAAAvF,QAAAyF,GAAAjE,MAAAkE,GAAAvD,OACAO,EAAAW,IAAAkC,GAAAvF,QAAAyF,GAAAjE,MAAAkE,GAAAtD,QAoBA,KAAA,GAAAnL,KAAAvJ,MAAA2V,IAEA3V,KAAA2V,IAAApM,GAAAkJ,GAAAhS,gBAOAT,KAAAgT,ON3hBA1N,QAAA2S,UAAA1N,KAAA,WAAA,MAAAvK,MAAA,MOvBAkS,IAAAgG,QAAAhG,IAAAgG,YAEAhG,IAAAgG,QAAAC,QAAA,WAEAhG,GAAAiG,MAAApY,KAAAqY,WAEArY,KAAA+H,KAAA,UACA/H,KAAAsY,IAAAtY,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,MAAA+R,wBACA/R,KAAAuY,QAAAvY,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,YACAA,KAAAwY,MAAAxY,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,UACAA,KAAAyY,MAAAzY,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,UACAA,KAAA0Y,MAAA1Y,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,UACAA,KAAA2Y,MAAA3Y,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,UACAA,KAAA4Y,QAAA5Y,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,YACAA,KAAA6Y,QAAA7Y,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,YACAA,KAAA8Y,QAAA9Y,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,YACAA,KAAA+Y,QAAA/Y,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,YACAA,KAAAgZ,QAAAhZ,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,WAEA,EAAA,GAAAD,GAAAC,IACAL,MAAAC,MAAA,IAEAI,KAAAsY,IAAAlE,YAAA,WAEA,GAAA6E,GAAAC,UAAAC,cACAC,EAAA,CAEA,KAAA,GAAAC,KAAAJ,GAEAA,EAAAI,GAAAC,OAEAvZ,EAAAyY,MAAAhY,IAAAyY,EAAAI,GAAAC,KAAA,GACAvZ,EAAA0Y,MAAAjY,IAAAyY,EAAAI,GAAAC,KAAA,GACAvZ,EAAA2Y,MAAAlY,IAAAyY,EAAAI,GAAAC,KAAA,GACAvZ,EAAA4Y,MAAAnY,IAAAyY,EAAAI,GAAAC,KAAA,GAEAvZ,EAAA6Y,QAAApY,IAAAyY,EAAAI,GAAAE,QAAA,GAAAC,QACAzZ,EAAA6Y,QAAApY,IAAAyY,EAAAI,GAAAE,QAAA,GAAAC,QACAzZ,EAAA+Y,QAAAtY,IAAAyY,EAAAI,GAAAE,QAAA,GAAAC,QACAzZ,EAAAgZ,QAAAvY,IAAAyY,EAAAI,GAAAE,QAAA,GAAAC,QACAzZ,EAAAiZ,QAAAxY,IAAAyY,EAAAI,GAAAE,QAAA,GAAAC,QAEAJ,IAIArZ,GAAAwY,QAAA/X,IAAA4Y,GAGApZ,KAAAsY,IAAAlE,eAIAlC,IAAAgG,QAAAC,QAAAF,UAAA,GAAA9F,IAKAD,IAAAgG,QAAAuB,WAAA,WAEAtH,GAAAiG,MAAApY,KAAAqY,UACA,IAAAtY,GAAAC,IAEAA,MAAA+H,KAAA,aAEA/H,KAAA0Z,OAAA1Z,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,iBACAA,KAAA2Z,OAAA3Z,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,iBACAA,KAAA4Z,OAAA5Z,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,iBAEAA,KAAA6Z,SAAA7Z,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,aACAA,KAAA8Z,SAAA9Z,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,aACAA,KAAA+Z,SAAA/Z,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,aAEAga,KAAAC,KAAA,SAAAC,GAEAna,EAAA2Z,OAAAlZ,IAAA0Z,EAAAC,aAAA,GACApa,EAAA4Z,OAAAnZ,IAAA0Z,EAAAC,aAAA,GACApa,EAAA6Z,OAAApZ,IAAA0Z,EAAAC,aAAA,GAEAD,EAAAE,QAAAlX,OAAA,IAEAnD,EAAA8Z,SAAArZ,IAAA0Z,EAAAE,QAAA,GAAAC,YAAA,GACAta,EAAA+Z,SAAAtZ,IAAA0Z,EAAAE,QAAA,GAAAC,YAAA,GACAta,EAAAga,SAAAvZ,IAAA0Z,EAAAE,QAAA,GAAAC,YAAA,OAKAnI,IAAAgG,QAAAuB,WAAAxB,UAAA,GAAA9F,ICzFAD,IAAAoI,GAAApI,IAAAoI,OACApI,IAAAoI,GAAAC,eAAArI,IAAAoI,GAAAC,mBAIArI,IAAAoI,GAAAC,eAAAxK,cAAA,WAEAoC,GAAAiG,MAAApY,KAAAqY,UACA,IAAAtY,GAAAC,IAEAA,MAAA+H,KAAA,iBACA/H,KAAA0D,OAAA1D,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,SAAA+R,wBACA/R,KAAAwa,OAAAxa,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,cAAAiS,uBAEAjS,KAAA8N,IAAA9N,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,aAAAiS,uBACAjS,KAAAya,QAAAza,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,UAAA+R,uBAEA,IAAA2I,IAAA,EACAC,EAAA,GAAA5Y,KAAAgO,aAEAjF,KAAA8P,qBAAAD,EAEA3a,KAAA8N,IAAAqG,eAAA,WAEAwG,EAAAlK,iBAAA1Q,EAAA+N,IAAAtN,KACAT,EAAAya,OAAAha,IAAAsK,IAAA8P,qBAAAvJ,0BACAqJ,GAAA,GAGA1a,KAAA0D,OAAA0Q,YAAA,WAEAsG,GACA3a,EAAA+N,IAAAtN,MACAsK,IAAA8P,qBAAAD,EAEAA,EAAAnK,cACAzQ,EAAA0a,QAAA5F,OACA9U,EAAAya,OAAAha,IAAAsK,IAAA8P,qBAAAvJ,6BAIAa,IAAAoI,GAAAC,eAAAxK,cAAAkI,UAAA,GAAA9F,IAIAD,IAAAoI,GAAAC,eAAAM,OAAA,WAEA1I,GAAAiG,MAAApY,KAAAqY,UACA,IAAAtY,GAAAC,IAEAA,MAAA+H,KAAA,SACA/H,KAAA0D,OAAA1D,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,SAAA+R,wBACA/R,KAAAya,QAAAza,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,UAAA+R,uBAEA,IAAApO,GAAA,GAAA5B,KAAAmH,OAEAW,EAAA,GACAU,OAAA,yBACAA,OAAA,sBACAA,OAAA,2BACAA,OAAA,2BACAA,OAAA,SACAA,OAAA,GACAA,OAAA,GACAA,OAAA,cACAA,OAAA,IACAA,OAAA,qCACAA,OAAA,yBACAA,OAAA,sCACAA,OAAA,8BACAA,OAAA,YACAA,OAAA,yBACAA,OAAA,KAEA5G,GAAAmG,UAAAnG,EAAA+F,yBAAAG,EACA,IAAA9H,KAAA0F,QAAA9D,EAAA,IAAA,MAAA,EAGA3D,MAAA0D,OAAA0Q,YAAA,WAEAtJ,IAAA8P,uBAEA9P,IAAAqC,UAAAxJ,GACAmH,IAAA8P,qBAAAhX,OAEAtB,GAAA6L,cAAA7L,GAAA8L,UACA9L,GAAA+L,YAAA/L,GAAAgM,WAAAxD,IAAA8P,qBAAAvJ,0BAAAvD,KAEAhD,IAAA8P,qBAAAjJ,SACA7G,IAAAuC,oBAEAtN,EAAA0a,QAAA5F,UAIA3C,IAAAoI,GAAAC,eAAAM,OAAA5C,UAAA,GAAA9F,IAIAD,IAAAoI,GAAAC,eAAAO,WAAA,WAEA3I,GAAAiG,MAAApY,KAAAqY,UACA,IAAAtY,GAAAC,IAEAA,MAAA+H,KAAA,aAEA/H,KAAA+a,OAAA/a,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,WACAA,KAAA0D,OAAA1D,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,SAAA+R,wBACA/R,KAAAya,QAAAza,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,UAAA+R,uBAEA,IAAApO,GAAA,GAAA5B,KAAAmH,OAEAW,EAAA,GACAU,OAAA,yBACAA,OAAA,sBACAA,OAAA,2BACAA,OAAA,2BACAA,OAAA,SACAA,OAAA,wBACAA,OAAA,GACAA,OAAA,GACAA,OAAA,4CACAA,OAAA,IACAA,OAAA,+DACAA,OAAA,4CACAA,OAAA,IACAA,OAAA,GACAA,OAAA,cACAA,OAAA,IACAA,OAAA,qCACAA,OAAA,yBACAA,OAAA,sCACAA,OAAA,6CACAA,OAAA,YACAA,OAAA,yBACAA,OAAA,GAEA5G,GAAAmG,UAAAnG,EAAA+F,yBAAAG,EACA,IACAmR,IADA,GAAAjZ,KAAA0F,QAAA9D,EAAA,IAAA,MAAA,GACA,GAAA5B,KAAA0F,QAAA9D,EAAA,IAAA,SAAA,GAEA3D,MAAA+a,OAAA5G,eAAA,WAEA6G,EAAAhS,SAAAjJ,EAAAgb,OAAAva,MAGAR,KAAA0D,OAAA0Q,YAAA,WAEAtJ,IAAA8P,uBAEA9P,IAAAqC,UAAAxJ,GACAmH,IAAA8P,qBAAAhX,OAEAtB,GAAA6L,cAAA7L,GAAA8L,UACA9L,GAAA+L,YAAA/L,GAAAgM,WAAAxD,IAAA8P,qBAAAvJ,0BAAAvD,KAEAhD,IAAA8P,qBAAAjJ,SACA7G,IAAAuC,oBAEAtN,EAAA0a,QAAA5F,UAIA3C,IAAAoI,GAAAC,eAAAO,WAAA7C,UAAA,GAAA9F,IAIAD,IAAAoI,GAAAC,eAAAU,YAAA,WAEA9I,GAAAiG,MAAApY,KAAAqY,UACA,IAAAtY,GAAAC,IAEAA,MAAA+H,KAAA,cAEA/H,KAAAc,EAAAd,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,MACAA,KAAAkb,EAAAlb,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,MACAA,KAAA6E,EAAA7E,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,MACAA,KAAA0D,OAAA1D,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,SAAA+R,wBACA/R,KAAAya,QAAAza,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,UAAA+R,uBAEA,IAAApO,GAAA,GAAA5B,KAAAmH,OAEAW,EAAA,GACAU,OAAA,yBACAA,OAAA,sBACAA,OAAA,2BACAA,OAAA,2BACAA,OAAA,SACAA,OAAA,mBACAA,OAAA,mBACAA,OAAA,mBACAA,OAAA,GACAA,OAAA,GACAA,OAAA,cACAA,OAAA,IACAA,OAAA,qCACAA,OAAA,yBACAA,OAAA,sCACAA,OAAA,mBACAA,OAAA,mBACAA,OAAA,mBACAA,OAAA,YACAA,OAAA,yBACAA,OAAA,GAEA5G,GAAAmG,UAAAnG,EAAA+F,yBAAAG,EACA,IACAsR,IADA,GAAApZ,KAAA0F,QAAA9D,EAAA,IAAA,MAAA,GACA,GAAA5B,KAAA0F,QAAA9D,EAAA,IAAA,IAAA,IACAyX,EAAA,GAAArZ,KAAA0F,QAAA9D,EAAA,IAAA,IAAA,GACA0X,EAAA,GAAAtZ,KAAA0F,QAAA9D,EAAA,IAAA,IAAA,EAGA3D,MAAAc,EAAAqT,eAAA,WAEAgH,EAAAnS,SAAAjJ,EAAAe,EAAAN,MAGAR,KAAAkb,EAAA/G,eAAA,WAEAiH,EAAApS,SAAAjJ,EAAAmb,EAAA1a,MAGAR,KAAA6E,EAAAsP,eAAA,WAEAkH,EAAArS,SAAAjJ,EAAA8E,EAAArE,MAGAR,KAAA0D,OAAA0Q,YAAA,WAEAtJ,IAAA8P,uBAEA9P,IAAAqC,UAAAxJ,GACAmH,IAAA8P,qBAAAhX,OAEAtB,GAAA6L,cAAA7L,GAAA8L,UACA9L,GAAA+L,YAAA/L,GAAAgM,WAAAxD,IAAA8P,qBAAAvJ,0BAAAvD,KAEAhD,IAAA8P,qBAAAjJ,SACA7G,IAAAuC,oBAEAtN,EAAA0a,QAAA5F,UAIA3C,IAAAoI,GAAAC,eAAAU,YAAAhD,UAAA,GAAA9F,IAIAD,IAAAoI,GAAAC,eAAAe,SAAA,WAEAnJ,GAAAiG,MAAApY,KAAAqY,UACA,IAAAtY,GAAAC,IAEAA,MAAA+H,KAAA,WAEA/H,KAAAub,YAAAvb,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,gBACAA,KAAAwb,YAAAxb,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,gBACAA,KAAA0D,OAAA1D,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,SAAA+R,wBACA/R,KAAAya,QAAAza,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,UAAA+R,uBAEA,IAAApO,GAAA,GAAA5B,KAAAmH,OAEAW,EAAA,GACAU,OAAA,yBACAA,OAAA,sBACAA,OAAA,2BACAA,OAAA,2BACAA,OAAA,SACAA,OAAA,6BACAA,OAAA,6BACAA,OAAA,GACAA,OAAA,GACAA,OAAA,cACAA,OAAA,IACAA,OAAA,qCACAA,OAAA,yBACAA,OAAA,sCACAA,OAAA,yDACAA,OAAA,gEACAA,OAAA,YACAA,OAAA,yBACAA,OAAA,GAEA5G,GAAAmG,UAAAnG,EAAA+F,yBAAAG,EACA,IACA4R,IADA,GAAA1Z,KAAA0F,QAAA9D,EAAA,IAAA,MAAA,GACA,GAAA5B,KAAA0F,QAAA9D,EAAA,IAAA,cAAA,KACA+X,EAAA,GAAA3Z,KAAA0F,QAAA9D,EAAA,IAAA,cAAA,GAEA3D,MAAAub,YAAApH,eAAA,WAEAsH,EAAAzS,SAAAjJ,EAAAwb,YAAA/a,MAGAR,KAAAwb,YAAArH,eAAA,WAEAuH,EAAA1S,SAAAjJ,EAAAyb,YAAAhb,MAGAR,KAAAub,YAAA/a,IAAA,GACAR,KAAAwb,YAAAhb,IAAA,GAEAR,KAAA0D,OAAA0Q,YAAA,WAEAtJ,IAAA8P,uBAEA9P,IAAAqC,UAAAxJ,GACAmH,IAAA8P,qBAAAhX,OAEAtB,GAAA6L,cAAA7L,GAAA8L,UACA9L,GAAA+L,YAAA/L,GAAAgM,WAAAxD,IAAA8P,qBAAAvJ,0BAAAvD,KAEAhD,IAAA8P,qBAAAjJ,SACA7G,IAAAuC,oBAEAtN,EAAA0a,QAAA5F,UAIA3C,IAAAoI,GAAAC,eAAAe,SAAArD,UAAA,GAAA9F,IAIAD,IAAAoI,GAAAC,eAAAoB,KAAA,WAEAxJ,GAAAiG,MAAApY,KAAAqY,UACA,IAAAtY,GAAAC,IAEAA,MAAA+H,KAAA,OACA/H,KAAA0D,OAAA1D,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,SAAA+R,wBACA/R,KAAAya,QAAAza,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,UAAA+R,uBAEA,IAAApO,GAAA,GAAA5B,KAAAmH,OAEAW,EAAA,GACAU,OAAA,yBACAA,OAAA,sBACAA,OAAA,2BACAA,OAAA,2BACAA,OAAA,wBACAA,OAAA,wBACAA,OAAA,SACAA,OAAA,GACAA,OAAA,6DACAA,OAAA,IACAA,OAAA,6BACAA,OAAA,8CACAA,OAAA,8CACAA,OAAA,qDACAA,OAAA,uEACAA,OAAA,uEACAA,OAAA,uEACAA,OAAA,uEACAA,OAAA,mBACAA,OAAA,IACAA,OAAA,GACAA,OAAA,cACAA,OAAA,IACAA,OAAA,qCACAA,OAAA,yBACAA,OAAA,oEAEAA,OAAA,YACAA,OAAA,yBACAA,OAAA,KAEA5G,GAAAmG,UAAAnG,EAAA+F,yBAAAG,EACA,IACA+R,IADA,GAAA7Z,KAAA0F,QAAA9D,EAAA,IAAA,MAAA,GACA,GAAA5B,KAAA0F,QAAA9D,EAAA,IAAA,OAAA,IACAkY,EAAA,GAAA9Z,KAAA0F,QAAA9D,EAAA,IAAA,OAAA,EAEA3D,MAAA0D,OAAA0Q,YAAA,WAEAtJ,IAAA8P,uBACA9P,IAAAqC,UAAAxJ,GAIAmH,IAAA8P,qBAAAhX,OACAtB,GAAA6L,cAAA7L,GAAA8L,UACA9L,GAAA+L,YAAA/L,GAAAgM,WAAAxD,IAAA8P,qBAAAvJ,0BAAAvD,KAEA8N,EAAA5S,SAAA,GACA6S,EAAA7S,SAAA,GAEA8B,IAAA8P,qBAAAjJ,SAIA7G,IAAA8P,qBAAAhX,OACAtB,GAAA6L,cAAA7L,GAAA8L,UACA9L,GAAA+L,YAAA/L,GAAAgM,WAAAxD,IAAA8P,qBAAAvJ,0BAAAvD,KAEA8N,EAAA5S,SAAA,GACA6S,EAAA7S,SAAA,GAEA8B,IAAA8P,qBAAAjJ,SAEA7G,IAAAuC,oBAEAtN,EAAA0a,QAAA5F,UAIA3C,IAAAoI,GAAAC,eAAAoB,KAAA1D,UAAA,GAAA9F,IC/YAD,IAAAoI,GAAApI,IAAAoI,MAGA,IAAAzW,IAAA,IAEAqO,KAAAoI,GAAAwB,SAAA,WAEA3J,GAAAiG,MAAApY,KAAAqY,UACA,IAAAtY,GAAAC,IAEAA,MAAA+H,KAAA,SAEA/H,KAAAya,QAAAza,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,UAAA+R,uBAEA,IAAAgK,GAAAC,KAAApP,QACAoP,MAAAC,IAAAF,EAAA,EAAA,EAAA,IAEA/b,KAAA0W,YAAA,SAAAD,GAEA3L,IAAAkC,YAAAjN,EAAAmc,OAAAC,YACArR,IAAAmC,aAAAlN,EAAAmc,OAAAE,aAEA9Z,GAAA+Z,OAAA/Z,GAAAga,YACAzY,GAAA2N,WAAA,EAAA,EAAA,EAAA,GACA3N,GAAAa,MAAAb,GAAA4N,iBAAA5N,GAAA6N,kBACApP,GAAAgP,SAAA,EAAA,EAAAvR,EAAAmc,OAAAC,YAAApc,EAAAmc,OAAAE,cACAzP,KAAA4E,YAAAzG,IAAAC,QAAA,GAAAD,IAAAkC,YAAAlC,IAAAmC,aAAA,IAAA,MAEAnC,IAAA6C,cACA7C,IAAA0C,eAEAb,KAAAE,SAAA/B,IAAAE,UACA2B,KAAA4P,UAAAzR,IAAAE,SAAAF,IAAAE,SAAA+Q,GAEAlY,GAAAwY,OAAAxY,GAAA2Y,OACA3Y,GAAA4Y,UAAA5Y,GAAA6Y,UAAA7Y,GAAA8Y,qBAEA7R,IAAAoC,aAEAnN,EAAA0a,QAAA5F,OAEA/J,IAAA4C,cACA5C,IAAA8C,aACA9C,IAAAsC,YAGApN,KAAAkc,OAAAU,SAAAC,eAAA;AACAhZ,GAAA7D,KAAAkc,OAAAY,WAAA,sBACAxa,GAAAtC,KAAAkc,OAAAY,WAAA,uBAIA5K,IAAAoI,GAAAwB,SAAA7D,UAAA,GAAA9F,IAKAD,IAAAoI,GAAAyC,WAAA,WAEA5K,GAAAiG,MAAApY,KAAAqY,UACA,IAAAtY,GAAAC,IAEAA,MAAA+H,KAAA,aACA/H,KAAA0D,OAAA1D,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,SAAA+R,wBACA/R,KAAAya,QAAAza,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,UAAA+R,wBAEA/R,KAAAc,EAAAd,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,MACAA,KAAAkb,EAAAlb,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,MACAA,KAAA6E,EAAA7E,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,MAEAA,KAAAc,EAAAN,IAAA,GACAR,KAAAkb,EAAA1a,IAAA,GACAR,KAAA6E,EAAArE,IAAA,GACAR,KAAA0D,OAAA0Q,YAAA,WAEAvQ,GAAA2N,WAAAzR,EAAAe,EAAAN,IAAAT,EAAAmb,EAAA1a,IAAAT,EAAA8E,EAAArE,IAAA,GACAqD,GAAAa,MAAAb,GAAA4N,iBAAA5N,GAAA6N,kBAEA3R,EAAA0a,QAAA5F,SAIA3C,IAAAoI,GAAAyC,WAAA9E,UAAA,GAAA9F,IAIAD,IAAAoI,GAAA0C,WAAA,WAEA7K,GAAAiG,MAAApY,KAAAqY,UACA,IAAAtY,GAAAC,IAEAA,MAAA+H,KAAA,aACA/H,KAAA0D,OAAA1D,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,SAAA+R,wBACA/R,KAAAya,QAAAza,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,UAAA+R,wBAEA/R,KAAA0D,OAAA0Q,YAAA,WAEAvQ,GAAAa,MAAAb,GAAA6N,kBACA3R,EAAA0a,QAAA5F,SAIA3C,IAAAoI,GAAA0C,WAAA/E,UAAA,GAAA9F,IAKAD,IAAAoI,GAAA2C,aAAA,WAEA9K,GAAAiG,MAAApY,KAAAqY,UACA,IAAAtY,GAAAC,IAEAA,MAAA+H,KAAA,gBACA/H,KAAAgO,MAAAhO,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,QAAA8R,qBACA9R,KAAAiO,OAAAjO,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,SAAA8R,qBAEA9R,KAAAkd,WAAAld,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,UAAAiS,uBACAjS,KAAA8N,IAAA,GAAA/L,KAAA8L,OAEA,IAAAsP,GAAA,WAEApd,EAAA+N,IAAAS,QAAAxO,EAAAiO,MAAAxN,IAAAT,EAAAkO,OAAAzN,KACAT,EAAAmd,WAAA1c,IAAAT,EAAA+N,IAGA9N,MAAAgO,MAAAmG,eAAAgJ,EACAnd,KAAAiO,OAAAkG,eAAAgJ,EAEAnd,KAAAgO,MAAAxN,IAAA,EACAR,KAAAiO,OAAAzN,IAAA,GAGA0R,IAAAoI,GAAA2C,aAAAhF,UAAA,GAAA9F,IAIAD,IAAAoI,GAAAzM,QAAA,WAEAsE,GAAAiG,MAAApY,KAAAqY,UACA,IAAAtY,GAAAC,IAEAA,MAAA+H,KAAA,UACA/H,KAAAod,SAAApd,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,OAAA8R,qBACA9R,KAAAkd,WAAAld,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,UAAAiS,uBAEAjS,KAAAod,SAAAjJ,eAAA,WAEA5Q,QAAAC,IAAA,mBACAzD,EAAA+N,IAAA/L,IAAA8L,QAAA6B,KAAA3P,EAAAqd,SAAA5c,IAAA,WAEA+C,QAAAC,IAAA,wBAEAzD,EAAAmd,WAAA1c,IAAAT,EAAA+N,MAEA/N,EAAAmd,WAAA1c,IAAAT,EAAA+N,KAIA9N,KAAAod,SAAA5c,IAAA,oBAGA0R,IAAAoI,GAAAzM,QAAAoK,UAAA,GAAA9F,IAGAD,IAAAoI,GAAA+C,OAAAnL,IAAAoI,GAAA+C,WACAnL,IAAAoI,GAAA+C,OAAAC,QAAA,WA+BA,QAAA1a,KAEAN,GAAAib,UAAA,GAEAjb,GAAAI,WAAAJ,GAAAK,aAAA5C,EAAAyd,QACAlb,GAAAM,WAAAN,GAAAK,aAAA,GAAAE,cAAA9C,EAAA+C,UAAAR,GAAAS,aACAhD,EAAAyd,OAAAxa,SAAA,EACAjD,EAAAyd,OAAAva,SAAAwa,EApCAtL,GAAAiG,MAAApY,KAAAqY,UACA,IAAAtY,GAAAC,IAEAA,MAAA+H,KAAA,UACA/H,KAAA0D,OAAA1D,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,SAAA+R,wBACA/R,KAAA4I,EAAA5I,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,UACAA,KAAAya,QAAAza,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,UAAA+R,wBAEA/R,KAAA0D,OAAA0Q,YAAA,WAEA9R,GAAA4B,oBAAA4G,IAAAwC,YAAAvJ,mBAAAhE,EAAAyd,OAAAxa,SAAAV,GAAA6B,OAAA,EAAA,EAAA,GACA2G,IAAAwC,YAAA1J,OACAtB,GAAAI,WAAAJ,GAAAK,aAAA5C,EAAAyd,QACAlb,GAAAob,WAAApb,GAAAqb,WAAA,EAAA5d,EAAAyd,OAAAva,UAEAlD,EAAA0a,QAAA5F,QAGA7U,KAAAwd,OAAAlb,GAAAC,cAEA,IAAAkb,GAAA,EACAzd,MAAA8C,WACA,KAAA,GAAAyG,GAAA,EAAAkU,EAAAlU,EAAAA,IAEAvJ,KAAA8C,SAAAkC,KAAA,EAAAyY,EAAAlU,GACAvJ,KAAA8C,SAAAkC,KAAAjE,KAAAC,SAAA,IACAhB,KAAA8C,SAAAkC,KAAA,EAYApC,KAEA5C,KAAA4I,EAAAuL,eAAA,WAEApU,EAAA+C,SAAA0G,OAAA,EAAA,GACAzJ,EAAA+C,SAAAkC,KAAA,GACAjF,EAAA+C,SAAAkC,KAAAjF,EAAA6I,EAAApI,KACAT,EAAA+C,SAAAkC,KAAA,EAEA,KAAA,GAAAuE,GAAA,EAAA,EAAAkU,EAAAlU,EAAAA,GAAA,EAEAxJ,EAAA+C,SAAAyG,GAAA,EAAAkU,EAAAlU,CAGA3G,OAIAsP,IAAAoI,GAAA+C,OAAAC,QAAArF,UAAA,GAAA9F,IAKAD,IAAAoI,GAAApR,UAEAgJ,IAAAoI,GAAApR,OAAA0U,cAAA,WAEAzL,GAAAiG,MAAApY,KAAAqY,UACA,IAAAtY,GAAAC,IAEAA,MAAA+H,KAAA,gBACA/H,KAAA0D,OAAA1D,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,SAAA+R,wBACA/R,KAAAya,QAAAza,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,UAAA+R,wBAEA/R,KAAA6d,SAAA,WAEA/S,IAAAqC,UAAAxJ,GAEA5D,EAAA6P,QAAApP,MAEA8B,GAAA6L,cAAA7L,GAAA8L,UACA9L,GAAA+L,YAAA/L,GAAAgM,WAAAvO,EAAA6P,QAAApP,IAAAsN,MAGA/N,EAAA0a,QAAA5F,OAEA/J,IAAAuC,oBAGA,IAAAxD,GAAA,qRAgBA,YAAAU,OACA,mCAKA5G,EAAA,GAAA5B,KAAAmH,MACAvF,GAAAmG,UAAAnG,EAAA+F,yBAAAG,GAEA7J,KAAAc,EAAAd,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,MACAA,KAAAc,EAAAqT,eAAA,WAEApU,EAAAe,EAAAgd,QACA/d,EAAAe,EAAAgd,QAAA9U,SAAAjJ,EAAAe,EAAAN,KADAT,EAAAe,EAAAgd,QAAA,GAAA/b,KAAA0F,QAAA9D,EAAA,IAAA,IAAA5D,EAAAe,EAAAN,MAIAR,KAAAkb,EAAAlb,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,MACAA,KAAAkb,EAAA/G,eAAA,WAEApU,EAAAmb,EAAA4C,QACA/d,EAAAmb,EAAA4C,QAAA9U,SAAAjJ,EAAAmb,EAAA1a,KADAT,EAAAmb,EAAA4C,QAAA,GAAA/b,KAAA0F,QAAA9D,EAAA,IAAA,IAAA5D,EAAAmb,EAAA1a,MAIAR,KAAA6E,EAAA7E,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,MACAA,KAAA6E,EAAAsP,eAAA,WAEApU,EAAA8E,EAAAiZ,QACA/d,EAAA8E,EAAAiZ,QAAA9U,SAAAjJ,EAAA8E,EAAArE,KADAT,EAAA8E,EAAAiZ,QAAA,GAAA/b,KAAA0F,QAAA9D,EAAA,IAAA,IAAA5D,EAAA8E,EAAArE,MAIAR,KAAA4E,EAAA5E,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,MACAA,KAAA4E,EAAAuP,eAAA,WAEApU,EAAA6E,EAAAkZ,QACA/d,EAAA6E,EAAAkZ,QAAA9U,SAAAjJ,EAAA6E,EAAApE,KADAT,EAAA6E,EAAAkZ,QAAA,GAAA/b,KAAA0F,QAAA9D,EAAA,IAAA,IAAA5D,EAAA6E,EAAApE,MAIAR,KAAAc,EAAAN,IAAAO,KAAAC,SACAhB,KAAAkb,EAAA1a,IAAAO,KAAAC,SACAhB,KAAA6E,EAAArE,IAAAO,KAAAC,SACAhB,KAAA4E,EAAApE,IAAA,EAGAR,KAAA0D,OAAA0Q,YAAApU,KAAA6d,SACA7d,KAAA4P,QAAA5P,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,UAAAiS,uBACAjS,KAAA+d,eAAA,KAEA/d,KAAA4P,QAAAuE,eAAA,WAEA,GAAApU,EAAA6P,QAAApP,IACA,CACA,GAAA,OAAAT,EAAAge,eAAA,MACAxa,SAAAC,IAAA,iBACAG,EAAA2F,cAAA,OACAvJ,EAAAge,eAAA,GAAAhc,KAAA0F,QAAA9D,EAAA,IAAA,MAAA,OAIAJ,SAAAC,IAAA,mBACAG,EAAA2F,cAAA,OACAvJ,EAAAge,eAAA,MAIA/d,KAAA6d,YAGA3L,IAAAoI,GAAApR,OAAA0U,cAAA3F,UAAA,GAAA9F,IAQAD,IAAAoI,GAAApR,OAAA8U,oBAAA,WAEA7L,GAAAiG,MAAApY,KAAAqY,UACA,IAAAtY,GAAAC,IAEAA,MAAA+H,KAAA,sBACA/H,KAAA0D,OAAA1D,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,SAAA+R,wBACA/R,KAAAya,QAAAza,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,UAAA+R,wBAEA/R,KAAA6d,SAAA,WAEA/S,IAAAqC,UAAAxJ,GAEA5D,EAAA0a,QAAA5F,OAEA/J,IAAAuC,oBAGA,IAAAxD,GAAA,mIAWAlG,EAAA,GAAA5B,KAAAmH,MACAvF,GAAAmG,UAAAnG,EAAA+F,yBAAAG,GAEA7J,KAAA0D,OAAA0Q,YAAApU,KAAA6d,SAEA7d,KAAA6d,YAGA3L,IAAAoI,GAAApR,OAAA8U,oBAAA/F,UAAA,GAAA9F,IAKAD,IAAAoI,GAAApR,OAAA+U,UAAA,WAEA9L,GAAAiG,MAAApY,KAAAqY,UACA,IAAAtY,GAAAC,IAEAA,MAAA+H,KAAA,YACA/H,KAAA0D,OAAA1D,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,SAAA+R,wBACA/R,KAAA4V,MAAA5V,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,SACAA,KAAAya,QAAAza,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,UAAA+R,wBAEA/R,KAAA6d,SAAA,WAEA/S,IAAAqC,UAAAxJ,GAEA5D,EAAA6V,MAAAsI,SAEAva,EAAAC,OACA7D,EAAA6V,MAAAsI,OAAA5b,GAAAkG,mBAAA7E,EAAA8E,aAAA,SAEAnG,GAAAoG,UAAA3I,EAAA6V,MAAAsI,OAAAne,EAAA6V,MAAApV,KAEAsK,IAAAuC,kBAAA1J,GAEA5D,EAAA0a,QAAA5F,OAGA,IAAAhL,GAAA,oOAUAlG,EAAA,GAAA5B,KAAAmH,MACAvF,GAAA0G,QAAA1G,EAAA+F,yBAAAG,GAEA7J,KAAA6d,WACA7d,KAAA0D,OAAA0Q,YAAApU,KAAA6d,UAGA3L,IAAAoI,GAAApR,OAAA+U,UAAAhG,UAAA,GAAA9F,IAIAD,IAAAoI,GAAApR,OAAAiV,MAAA,WAEAhM,GAAAiG,MAAApY,KAAAqY,UACA,IAAAtY,GAAAC,IAEAA,MAAA+H,KAAA,QACA/H,KAAA0D,OAAA1D,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,SAAA+R,wBACA/R,KAAAya,QAAAza,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,UAAA+R,uBAEA,IAAAqM,GAAA,GACAve,EAAA,EAEAG,MAAA6d,SAAA,WAEA/S,IAAAqC,UAAAxJ,GACA,IAAAya,IAEAve,EAAAF,KAAAC,MACA+D,EAAAC,OACAwa,EAAA9b,GAAAkG,mBAAA7E,EAAA8E,aAAA,SAGAnG,GAAAoG,UAAA0V,GAAAze,KAAAC,MAAAC,GAAA,KACAiL,IAAAuC,oBAEAtN,EAAA0a,QAAA5F,OAGA,IAAAhL,GAAA,uPAeAlG,EAAA,GAAA5B,KAAAmH,MACAvF,GAAA0G,QAAA1G,EAAA+F,yBAAAG,GAEA7J,KAAA6d,WACA7d,KAAA0D,OAAA0Q,YAAApU,KAAA6d,UAGA3L,IAAAoI,GAAApR,OAAAiV,MAAAlG,UAAA,GAAA9F,IAIAD,IAAAoI,GAAA+D,UAEAnM,IAAAoI,GAAA+D,OAAAC,UAAA,WAEAnM,GAAAiG,MAAApY,KAAAqY,UACA,IAAAtY,GAAAC,IAEAA,MAAA+H,KAAA,YACA/H,KAAA0D,OAAA1D,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,SAAA+R,wBACA/R,KAAAya,QAAAza,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,UAAA+R,wBAEA/R,KAAAiG,EAAAjG,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,MACAA,KAAAmG,EAAAnG,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,MACAA,KAAAoG,EAAApG,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,MACAA,KAAAiG,EAAAzF,IAAA,EACAR,KAAAmG,EAAA3F,IAAA,EACAR,KAAAoG,EAAA5F,IAAA,CAEA,IAAA+d,GAAAvC,KAAApP,QAEA5M,MAAA0D,OAAA0Q,YAAA,WAEA4H,KAAAC,IAAAsC,EAAAxe,EAAAkG,EAAAzF,IAAAT,EAAAoG,EAAA3F,IAAAT,EAAAqG,EAAA5F,KACAsK,IAAA0C,eACAb,KAAA4P,UAAAzR,IAAAE,SAAAF,IAAAE,SAAAuT,GACAxe,EAAA0a,QAAA5F,OACA/J,IAAA4C,gBAIAwE,IAAAoI,GAAA+D,OAAAC,UAAArG,UAAA,GAAA9F,IAIAD,IAAAoI,GAAA+D,OAAAG,MAAA,WAEArM,GAAAiG,MAAApY,KAAAqY,UACA,IAAAtY,GAAAC,IAEAA,MAAA+H,KAAA,QACA/H,KAAA0D,OAAA1D,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,SAAA+R,wBACA/R,KAAAya,QAAAza,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,UAAA+R,wBAEA/R,KAAAye,MAAAze,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,SAEA,IAAA0e,GAAA1C,KAAApP,SACA+R,EAAAhS,KAAAC,QACAD,MAAAE,SAAA8R,EAEA,IAAAC,IAAA,CAEA5e,MAAA0D,OAAA0Q,YAAA,WAEAtJ,IAAA0C,eACAb,KAAAkS,SAAA/T,IAAAE,SAAAF,IAAAE,SAAA2T,GACA5e,EAAA0a,QAAA5F,OACA/J,IAAA4C,cAGA,IAAAoR,GAAA,WAEAnS,KAAAE,SAAA8R,GACAhS,KAAA8R,MAAAE,EAAAA,EAAAD,GAGA1e,MAAA+e,aAAA,WAEAH,GAAA,EACA5C,KAAAC,IAAAyC,EAAA3e,EAAA0e,MAAAje,IAAAT,EAAA0e,MAAAje,IAAAT,EAAA0e,MAAAje,KACAse,KAGA9e,KAAAye,MAAAtK,eAAAnU,KAAA+e,aACA/e,KAAAye,MAAAje,IAAA,EACAse,KAGA5M,IAAAoI,GAAA+D,OAAAG,MAAAvG,UAAA,GAAA9F,IAIAD,IAAAoI,GAAA+D,OAAAW,UAAA,WAEA7M,GAAAiG,MAAApY,KAAAqY,UACA,IAAAtY,GAAAC,IACAA,MAAA+H,KAAA,YACA/H,KAAA0D,OAAA1D,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,SAAA+R,wBACA/R,KAAAya,QAAAza,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,UAAA+R,wBAEA/R,KAAAif,KAAAjf,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,SACAA,KAAAkf,KAAAlf,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,SACAA,KAAAmf,KAAAnf,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,SAEAA,KAAAof,OAAApf,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,WACAA,KAAAqf,OAAArf,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,WACAA,KAAAsf,OAAAtf,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,WAEAA,KAAAuf,KAAAvf,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,SACAA,KAAAwf,KAAAxf,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,SACAA,KAAAyf,KAAAzf,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,QAEA,IAAA0f,GAAA1D,KAAApP,SACA8R,EAAA1C,KAAApP,SACA+R,EAAAhS,KAAAC,QACAD,MAAAE,SAAA8R,EAEA,IAAAC,IAAA,EACAe,GAAA,CAEA3f,MAAA0D,OAAA0Q,YAAA,WAEAtJ,IAAA0C,eACAb,KAAAkS,SAAA/T,IAAAE,SAAAF,IAAAE,SAAA2T,GACA5e,EAAA0a,QAAA5F,OACA/J,IAAA4C,cAGA,IAAAoR,GAAA,WAEAnS,KAAAE,SAAA8R,GACAgB,GAAAhT,KAAA4P,UAAAoC,EAAAA,EAAAe,GAEA,IAAA3f,EAAAwf,KAAA/e,KAAAmM,KAAAiT,QAAAjB,EAAAA,EAAA5e,EAAAwf,KAAA/e,IAAAuB,IAAAC,SACA,IAAAjC,EAAAyf,KAAAhf,KAAAmM,KAAAkT,QAAAlB,EAAAA,EAAA5e,EAAAyf,KAAAhf,IAAAuB,IAAAC,SACA,IAAAjC,EAAA0f,KAAAjf,KAAAmM,KAAAmT,QAAAnB,EAAAA,EAAA5e,EAAA0f,KAAAjf,IAAAuB,IAAAC,SAEA4c,GAAAjS,KAAA8R,MAAAE,EAAAA,EAAAD,GAGA1e,MAAA+f,iBAAA,WAEAJ,GAAA,GACA,IAAA5f,EAAAkf,KAAAze,KAAA,IAAAT,EAAAmf,KAAA1e,KAAA,IAAAT,EAAAof,KAAA3e,OAAAmf,GAAA,GACA3D,KAAAC,IAAAyD,EAAA3f,EAAAkf,KAAAze,IAAAT,EAAAmf,KAAA1e,IAAAT,EAAAof,KAAA3e,KACAse,KAGA9e,KAAA+e,aAAA,WAEAH,GAAA,GACA,IAAA7e,EAAAqf,OAAA5e,KAAA,IAAAT,EAAAsf,OAAA7e,KAAA,IAAAT,EAAAuf,OAAA9e,OAAAoe,GAAA,GACA5C,KAAAC,IAAAyC,EAAA3e,EAAAqf,OAAA5e,IAAAT,EAAAsf,OAAA7e,IAAAT,EAAAuf,OAAA9e,KACAse,KAGA9e,KAAAggB,WAAA,WAEAlB,KAGA9e,KAAAuf,KAAApL,eAAAnU,KAAAggB,WACAhgB,KAAAwf,KAAArL,eAAAnU,KAAAggB,WACAhgB,KAAAyf,KAAAtL,eAAAnU,KAAAggB,WAEAhgB,KAAAof,OAAAjL,eAAAnU,KAAA+e,aACA/e,KAAAqf,OAAAlL,eAAAnU,KAAA+e,aACA/e,KAAAsf,OAAAnL,eAAAnU,KAAA+e,aAEA/e,KAAAif,KAAA9K,eAAAnU,KAAA+f,iBACA/f,KAAAkf,KAAA/K,eAAAnU,KAAA+f,iBACA/f,KAAAmf,KAAAhL,eAAAnU,KAAA+f,iBAEA/f,KAAAuf,KAAA/e,IAAA,EACAR,KAAAwf,KAAAhf,IAAA,EACAR,KAAAyf,KAAAjf,IAAA,EAEAR,KAAAof,OAAA5e,IAAA,EACAR,KAAAqf,OAAA7e,IAAA,EACAR,KAAAsf,OAAA9e,IAAA,EAEAR,KAAAif,KAAAze,IAAA,EACAR,KAAAkf,KAAA1e,IAAA,EACAR,KAAAmf,KAAA3e,IAAA,EAEAse,KAGA5M,IAAAoI,GAAA+D,OAAAW,UAAA/G,UAAA,GAAA9F,IAIAD,IAAA+N,cAAA,WAwCA,QAAAC,KAEAngB,EAAAogB,WACApgB,EAAAqgB,cACArgB,EAAAsgB,gBAEA,KAAA,GAAA9W,GAAA,EAAAA,EAAAxJ,EAAA0d,IAAAjd,IAAA+I,IAEAxJ,EAAAsgB,cAAArb,KAAAjE,KAAAC,UACAjB,EAAAogB,QAAAnb,KAAAgX,KAAAsE,YACAvf,KAAAC,SAAA,IAAAjB,EAAAwgB,KAAA/f,KACAO,KAAAC,SAAA,IAAAjB,EAAAwgB,KAAA/f,KACAO,KAAAC,SAAA,IAAAjB,EAAAwgB,KAAA/f,MAEAT,EAAAqgB,WAAApb,KAAAgX,KAAAsE,WACA,IAAAvf,KAAAC,SAAAe,IAAAC,QACA,IAAAjB,KAAAC,SAAAe,IAAAC,QACA,IAAAjB,KAAAC,SAAAe,IAAAC,UAvDAmQ,GAAAiG,MAAApY,KAAAqY,UACA,IAAAtY,GAAAC,IAEAA,MAAA+H,KAAA,iBACA/H,KAAAsY,IAAAtY,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,MAAA+R,wBACA/R,KAAAyd,IAAAzd,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,QACAA,KAAAugB,KAAAvgB,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,SAEAA,KAAAya,QAAAza,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,UAAA+R,wBACA/R,KAAAwgB,IAAAxgB,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,UACAA,KAAAygB,IAAAzgB,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,QACAA,KAAAmgB,WACAngB,KAAAogB,cACApgB,KAAAqgB,gBAEArE,MAAApP,QAEA5M,MAAAsY,IAAAlE,YAAA,WAEA,IAAA,GAAA7K,GAAA,EAAAA,EAAAxJ,EAAAogB,QAAAjd,OAAAqG,IAEAuB,IAAA0C,eAEAb,KAAA4P,UAAAzR,IAAAE,SAAAF,IAAAE,SAAAjL,EAAAogB,QAAA5W,IAEAoD,KAAAiT,QAAA9U,IAAAE,SAAAF,IAAAE,SAAAjL,EAAAqgB,WAAA7W,GAAA,IACAoD,KAAAkT,QAAA/U,IAAAE,SAAAF,IAAAE,SAAAjL,EAAAqgB,WAAA7W,GAAA,IACAoD,KAAAmT,QAAAhV,IAAAE,SAAAF,IAAAE,SAAAjL,EAAAqgB,WAAA7W,GAAA,IAEAxJ,EAAAygB,IAAAhgB,IAAA+I,EACAxJ,EAAA0gB,IAAAjgB,IAAAT,EAAAsgB,cAAA9W,GAEAxJ,EAAA0a,QAAA5F,OAEA/J,IAAA4C,eA0BA1N,KAAAyd,IAAAtJ,eAAA+L,EACAlgB,KAAAugB,KAAApM,eAAA+L,EAEAlgB,KAAAyd,IAAAjd,IAAA,KAGA0R,IAAA+N,cAAAhI,UAAA,GAAA9F,IASAD,IAAAoI,GAAAoG,eAAA,WAEAvO,GAAAiG,MAAApY,KAAAqY,UACA,IAAAtY,GAAAC,IAEAA,MAAA+H,KAAA,oBACA/H,KAAA0D,OAAA1D,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,SAAA+R,wBACA/R,KAAAya,QAAAza,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,UAAA+R,uBAEA,IAAA5B,GACAP,EAAA,GAAA7N,KAAA8L,OAEA7N,MAAAgO,MAAAhO,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,kBACAA,KAAAiO,OAAAjO,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,mBACAA,KAAA8N,IAAA9N,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,UAAAiS,uBAEAjS,KAAAgO,MAAAxN,IAAA,KACAR,KAAAiO,OAAAzN,IAAA,KAEAoP,EAAArB,QAAAvO,KAAAgO,MAAAxN,IAAAR,KAAAiO,OAAAzN,KAEA2P,EAAAtM,GAAAuM,oBACAvM,GAAA6M,gBAAA7M,GAAA8M,YAAAR,EAEA,IAAAE,GAAAxM,GAAAyM,oBACAzM,IAAA+M,iBAAA/M,GAAAgN,aAAAR,GACAxM,GAAAiN,oBAAAjN,GAAAgN,aAAAhN,GAAAkN,kBAAA/Q,KAAAgO,MAAAxN,IAAAR,KAAAiO,OAAAzN,KACAqD,GAAAmN,qBAAAnN,GAAA8M,YAAA9M,GAAAoN,kBAAApN,GAAAyK,WAAAsB,EAAA9B,IAAA,GACAjK,GAAAqN,wBAAArN,GAAA8M,YAAA9M,GAAAsN,iBAAAtN,GAAAgN,aAAAR,GACAxM,GAAAwK,YAAAxK,GAAAyK,WAAA,MACAzK,GAAA+M,iBAAA/M,GAAAgN,aAAA,MACAhN,GAAA6M,gBAAA7M,GAAA8M,YAAA,MAEA5Q,EAAA+N,IAAAtN,IAAAoP,EAEA5P,KAAA0D,OAAA0Q,YAAA,WAEAtJ,IAAA0C,eAEA3J,GAAA6M,gBAAA7M,GAAA8M,YAAAR,GAEArF,IAAA6C,cACArL,GAAAgP,SAAA,EAAA,EAAA,KAAA,MACA3E,KAAA4E,YAAAzG,IAAAC,QAAA,GAAAhL,EAAAiO,MAAAxN,IAAAT,EAAAkO,OAAAzN,IAAA,IAAA,MAEAT,EAAA0a,QAAA5F,OAEA/J,IAAA8C,aAEA/J,GAAA6M,gBAAA7M,GAAA8M,YAAA,MAEA7F,IAAA4C,cACApL,GAAAgP,SAAA,EAAA,EAAAxG,IAAAkC,YAAAlC,IAAAmC,gBAMAiF,IAAAoI,GAAAoG,eAAAzI,UAAA,GAAA9F,ICxyBAD,IAAAoI,GAAA+C,OAAAnL,IAAAoI,GAAA+C,WAIAnL,IAAAoI,GAAA+C,OAAAsD,SAAA,WAEAxO,GAAAiG,MAAApY,KAAAqY,UACA,IAAAtY,GAAAC,IAEAA,MAAA+H,KAAA,WACA/H,KAAA0D,OAAA1D,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,SAAA+R,wBACA/R,KAAAya,QAAAza,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,UAAA+R,wBAEA/R,KAAA0D,OAAA0Q,YAAA,WAEArU,EAAAiQ,KAAAtM,OAAAoH,IAAAwC,aACAvN,EAAA0a,QAAA5F,OAGA,IAAA3S,GAAA,GAAAH,KAAAwC,QACArC,GAAAY,UACA,EAAA,EAAA,EACA,GAAA,GAAA,EACA,EAAA,GAAA,GAGAZ,EAAAmB,iBACA,EAAA,EAAA,GAEArD,KAAAgQ,KAAA,GAAAjO,KAAAE,KAAAC,IAGAgQ,IAAAoI,GAAA+C,OAAAsD,SAAA1I,UAAA,GAAA9F,IAIAD,IAAAoI,GAAA+C,OAAAuD,UAAA,WAsBA,QAAAC,KAEA3e,EAAAY,UACA/C,EAAAiO,MAAAxN,IAAA,EAAAT,EAAAkO,OAAAzN,IAAA,EAAA,GACAT,EAAAiO,MAAAxN,IAAA,EAAAT,EAAAkO,OAAAzN,IAAA,EAAA,EACAT,EAAAiO,MAAAxN,IAAA,GAAAT,EAAAkO,OAAAzN,IAAA,EAAA,GACAT,EAAAiO,MAAAxN,IAAA,GAAAT,EAAAkO,OAAAzN,IAAA,EAAA,GAGA0B,EAAAuB,WACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,GAGAvB,EAAAmB,iBACA,EAAA,EAAA,EACA,EAAA,EAAA,GAEAtD,EAAAiQ,OAAAjQ,EAAAiQ,KAAA,GAAAjO,KAAAE,KAAAC,IACAnC,EAAAiQ,KAAAvN,QAAAP,GAzCAiQ,GAAAiG,MAAApY,KAAAqY,UACA,IAAAtY,GAAAC,IAEAA,MAAA+H,KAAA,YACA/H,KAAA0D,OAAA1D,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,SAAA+R,wBACA/R,KAAAya,QAAAza,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,UAAA+R,wBACA/R,KAAAgO,MAAAhO,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,UACAA,KAAAiO,OAAAjO,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,WACAA,KAAAgO,MAAAxN,IAAA,EACAR,KAAAiO,OAAAzN,IAAA,EAEAR,KAAA0D,OAAA0Q,YAAA,WAEArU,EAAAiQ,KAAAtM,OAAAoH,IAAAwC,aACAvN,EAAA0a,QAAA5F,OAGA,IAAA3S,GAAA,GAAAH,KAAAwC,QACAvE,MAAAgQ,KAAA,KAyBA6Q,IAEA7gB,KAAAgO,MAAAmG,eAAA0M,EACA7gB,KAAAiO,OAAAkG,eAAA0M,GAGA3O,IAAAoI,GAAA+C,OAAAuD,UAAA3I,UAAA,GAAA9F,IAIAD,IAAAoI,GAAA+C,OAAAyD,oBAAA,WAEA3O,GAAAiG,MAAApY,KAAAqY,UACA,IAAAtY,GAAAC,IAEAA,MAAA+H,KAAA,uBACA/H,KAAA0D,OAAA1D,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,SAAA+R,wBACA/R,KAAAya,QAAAza,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,UAAA+R,wBAEA/R,KAAA0D,OAAA0Q,YAAA,WAEAtJ,IAAA6C,cACAhB,KAAAE,SAAA/B,IAAAC,SAEAD,IAAA0C,eACAb,KAAAE,SAAA/B,IAAAE,UAEAjL,EAAAiQ,KAAAtM,OAAAoH,IAAAwC,aACAvN,EAAA0a,QAAA5F,OAEA/J,IAAA8C,aACA9C,IAAA4C,cAIA,IAAAxL,GAAA,GAAAH,KAAAwC,QACArC,GAAAY,UACA,EAAA,EAAA,EACA,GAAA,EAAA,EACA,EAAA,GAAA,EACA,GAAA,GAAA,GAGAZ,EAAAuB,WACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,GAGAvB,EAAAmB,iBACA,EAAA,EAAA,EACA,EAAA,EAAA,GAEArD,KAAAgQ,KAAA,GAAAjO,KAAAE,KAAAC,IAGAgQ,IAAAoI,GAAA+C,OAAAyD,oBAAA7I,UAAA,GAAA9F,IAIAD,IAAAoI,GAAA+C,OAAA0D,OAAA,WA2BA,QAAAC,KAEA9e,EAAAwC,OAIA,KAAA,GAHAuc,GAAA,EACAC,EAAA,EAEA3X,EAAA,EAAAA,GAAAxJ,EAAAohB,SAAA3gB,IAAAT,EAAAqhB,QAAA5gB,IAAA+I,IACA,CACA,GAAA8X,GAAA,IAAAthB,EAAAohB,SAAA3gB,IAAA+I,EAAAxH,IAAAC,QACAsf,EAAAvgB,KAAAwgB,IAAAF,GAAAthB,EAAAyhB,OAAAhhB,IACAihB,EAAA1gB,KAAA2gB,IAAAL,GAAAthB,EAAAyhB,OAAAhhB,GAEA0B,GAAAyC,SACA2c,EAAAG,EAAA,IACAR,EAAAC,EAAA,IACA,EAAA,EAAA,IAGAhf,EAAAuB,UAAAuB,KAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAEAic,EAAAK,EACAJ,EAAAO,EAGAzR,EAAAvN,QAAAP,GAjDAiQ,GAAAiG,MAAApY,KAAAqY,UACA,IAAAtY,GAAAC,IAEAA,MAAA+H,KAAA,SACA/H,KAAA0D,OAAA1D,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,SAAA+R,wBAEA/R,KAAAmhB,SAAAnhB,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,aACAA,KAAAwhB,OAAAxhB,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,WACAA,KAAAohB,QAAAphB,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,YAEAA,KAAAya,QAAAza,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,UAAA+R,wBAEA/R,KAAA0D,OAAA0Q,YAAA,WAEApE,EAAAtM,OAAAoH,IAAAwC,aACAvN,EAAA0a,QAAA5F,QAGA7U,KAAAmhB,SAAA3gB,IAAA,GACAR,KAAAwhB,OAAAhhB,IAAA,EACAR,KAAAohB,QAAA5gB,IAAA,CAEA,IAAA0B,GAAA,GAAAH,KAAAwC,SACAyL,EAAA,GAAAjO,KAAAE,KAAAC,EA6BAlC,MAAAmhB,SAAAhN,eAAA6M,EACAhhB,KAAAwhB,OAAArN,eAAA6M,EACAhhB,KAAAohB,QAAAjN,eAAA6M,EACAA,KAGA9O,IAAAoI,GAAA+C,OAAA0D,OAAA9I,UAAA,GAAA9F,IAIAD,IAAAoI,GAAA+C,OAAAsE,QAAA,WAEAxP,GAAAiG,MAAApY,KAAAqY,UACA,IAAAtY,GAAAC,IAEAA,MAAA+H,KAAA,WACA/H,KAAA0D,OAAA1D,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,SAAA+R,wBACA/R,KAAAya,QAAAza,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,UAAA+R,wBAEA/R,KAAAgQ,KAAA,KAEAhQ,KAAA0D,OAAA0Q,YAAA,WAEArU,EAAAiQ,MAAAjQ,EAAAiQ,KAAAtM,OAAAoH,IAAAwC,aAEAvN,EAAA0a,QAAA5F,QAGA1T,YAAA,mBAAA,SAAAU,GAEA0B,QAAAC,IAAA3B,EAEA,IAAAf,GAAAmE,SAAApD,EAEA+f,QAAA,SAAAC,EAAAC,EAAAC,GAGA,IAAA,GADAC,GAAA,GAAAC,OAAAlhB,KAAAE,MAAA4gB,EAAA3e,OAAA,GAAA6e,GACAxY,EAAA,EAAAA,EAAAsY,EAAA3e,OAAAqG,IAEA,IAAA,GAAAsC,GAAA,EAAAkW,EAAAlW,EAAAA,IAEAmW,EAAAzY,EAAAwY,EAAAlW,GAAAiW,EAAAD,EAAAtY,GAAAwY,EAAAlW,EAGA,OAAAmW,GAGA,IAAA1N,GAAAxT,EAAAuC,gBAAAH,MACApC,GAAAgC,SAAA8e,OAAA9gB,EAAAuC,gBAAAvC,EAAAgC,SAAA,GACAhC,EAAA2C,UAAAme,OAAA9gB,EAAA2D,iBAAA3D,EAAA2C,UAAA,GACA3C,EAAAwC,cAAAse,OAAA9gB,EAAA2E,oBAAA3E,EAAAwC,cAAA,GACAxC,EAAAuC,kBACA,KAAA,GAAAkG,GAAA,EAAA+K,EAAA/K,EAAAA,IAAAzI,EAAAuC,gBAAA2B,KAAAuE,EAEAxJ,GAAAiQ,KAAA,GAAAjO,KAAAE,KAAAnB,MAIAoR,IAAAoI,GAAA+C,OAAAsE,QAAA1J,UAAA,GAAA9F,IAIAD,IAAAoI,GAAA+C,OAAA6E,KAAA,WAEA/P,GAAAiG,MAAApY,KAAAqY,UACA,IAAAtY,GAAAC,IAEAA,MAAA+H,KAAA,OACA/H,KAAA0D,OAAA1D,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,SAAA+R,wBACA/R,KAAAya,QAAAza,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,UAAA+R,wBAEA/R,KAAAgQ,KAAA,KAEAhQ,KAAA0D,OAAA0Q,YAAA,WAEA,OAAArU,EAAAiQ,MAAAjQ,EAAAiQ,KAAAtM,OAAAoH,IAAAwC,aACAvN,EAAA0a,QAAA5F,OAGA,IAAA3S,GAAA,GAAAH,KAAAwC,QAEArC,GAAAY,UAEA,GAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,EAAA,EACA,GAAA,EAAA,EAEA,GAAA,GAAA,GACA,GAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,GAAA,GAEA,GAAA,EAAA,GACA,GAAA,EAAA,EACA,EAAA,EAAA,EACA,EAAA,EAAA,GAEA,GAAA,GAAA,GACA,EAAA,GAAA,GACA,EAAA,GAAA,EACA,GAAA,GAAA,EAEA,EAAA,GAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,EACA,EAAA,GAAA,EAEA,GAAA,GAAA,GACA,GAAA,GAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,IAGAZ,EAAAuB,WAEA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EAEA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EAEA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EAEA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EAEA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EAEA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,GAGAvB,EAAAoB,eAEA,EAAA,EAAA,EACA,EAAA,EAAA,EACA,EAAA,EAAA,EACA,EAAA,EAAA,EAGA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,GAGA,EAAA,EAAA,EACA,EAAA,EAAA,EACA,EAAA,EAAA,EACA,EAAA,EAAA,EAGA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EAGA,EAAA,EAAA,EACA,EAAA,EAAA,EACA,EAAA,EAAA,EACA,EAAA,EAAA,EAGA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,GAIApB,EAAAmB,iBACA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,GAAA,EAAA,GAAA,GACA,GAAA,GAAA,GAAA,GAAA,GAAA,GACA,GAAA,GAAA,GAAA,GAAA,GAAA,GACA,GAAA,GAAA,GAAA,GAAA,GAAA,IAGArD,KAAAgQ,KAAA,GAAAjO,KAAAE,KAAAC,IAGAgQ,IAAAoI,GAAA+C,OAAA6E,KAAAjK,UAAA,GAAA9F,ICtYAD,IAAAiQ,IAAA,WAEAhQ,GAAAiG,MAAApY,KAAAqY,UACA,IAAAtY,GAAAC,IAEAA,MAAA+H,KAAA,SACA/H,KAAAsY,IAAAtY,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,MAAA+R,wBACA/R,KAAAoiB,MAAApiB,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,UACAA,KAAAoiB,MAAA5hB,IAAA,GAEAR,KAAAgT,KAAA,WAEAzP,QAAAC,IAAA,SAAAzD,EAAAqiB,MAAA5hB,MAGAR,KAAAsY,IAAAlE,YAAApU,KAAAgT,KACAhT,KAAAoiB,MAAAjO,eAAAnU,KAAAgT,MAEAd,IAAAiQ,IAAAlK,UAAA,GAAA9F,IAMAD,IAAAmQ,eAAA,WAEAlQ,GAAAiG,MAAApY,KAAAqY,UACA,IAAAtY,GAAAC,IAEAA,MAAA+H,KAAA,iBACA/H,KAAAsY,IAAAtY,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,MAAA+R,wBAEA/R,KAAAH,UAAA,EACAG,KAAAsiB,IAAA,EAEAtiB,KAAAsY,IAAAlE,YAAA,WAEA,IAAArU,EAAAF,YAAAE,EAAAF,UAAAF,KAAAC,MACA,IAAAA,GAAAD,KAAAC,KAEAA,GAAAG,EAAAF,UAAA,MAEAE,EAAAF,UAAAF,KAAAC,MACA2D,QAAAC,IAAA,QAAAzD,EAAAuiB,KACAviB,EAAAuiB,IAAA,GAGAviB,EAAAuiB,QAGApQ,IAAAmQ,eAAApK,UAAA,GAAA9F,IAKAD,IAAAqQ,MAAA,WAEApQ,GAAAiG,MAAApY,KAAAqY,UACA,IAAAtY,GAAAC,IAEAA,MAAA+H,KAAA,QACA/H,KAAA4I,EAAA5I,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,UACAA,KAAAwiB,OAAAxiB,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,WAEAA,KAAAgT,KAAA,WAEAjT,EAAAyiB,OAAAhiB,IAAAT,EAAA6I,EAAApI,KAGAR,KAAA4I,EAAAuL,eAAAnU,KAAAgT,MAGAd,IAAAqQ,MAAAtK,UAAA,GAAA9F,IAMAD,IAAAuQ,aAAA,WAEAtQ,GAAAiG,MAAApY,KAAAqY,UAGArY,MAAA+H,KAAA,eACA/H,KAAA0iB,QAAA1iB,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,SAEAA,KAAA0W,YAAA,SAAAD,GAEAzW,KAAA0iB,QAAAliB,IAAAiW,IAIAvE,IAAAuQ,aAAAxK,UAAA,GAAA9F,IAQAD,IAAAyQ,OAAA,WAEAxQ,GAAAiG,MAAApY,KAAAqY,UACA,IAAAtY,GAAAC,IAEAA,MAAA+H,KAAA,SACA/H,KAAAsY,IAAAtY,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,MAAA+R,wBAEA/R,KAAAyd,IAAAzd,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,QACAA,KAAAyd,IAAAjd,IAAA,EAEAR,KAAAya,QAAAza,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,UAAA+R,wBACA/R,KAAAwgB,IAAAxgB,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,UAEAA,KAAAsY,IAAAlE,YAAA,WAGA,IAAA,GAAA7K,GAAA,EAAAA,EAAAxJ,EAAA0d,IAAAxV,MAAAsB,IAEAxJ,EAAAygB,IAAAhgB,IAAA+I,EACAxJ,EAAA0a,QAAA5F,SAKA3C,IAAAyQ,OAAA1K,UAAA,GAAA9F,IAQAD,IAAA0Q,WAAA,WAEAzQ,GAAAiG,MAAApY,KAAAqY,UACA,IAAAtY,GAAAC,IAEAA,MAAA+H,KAAA,eACA/H,KAAAsY,IAAAtY,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,MAAA+R,wBAEA/R,KAAA6iB,KAAA7iB,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,YACAA,KAAA6iB,KAAAriB,KAAA,EAEAR,KAAA8iB,YAAA9iB,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,OAAA+R,wBACA/R,KAAA+iB,YAAA/iB,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,OAAA+R,wBAEA/R,KAAAsY,IAAAlE,YAAA,WAEArU,EAAA8iB,KAAAriB,OAAA,EAEAT,EAAA+iB,YAAAjO,OAIA9U,EAAAgjB,YAAAlO,QAIA7U,KAAA6iB,KAAA1O,eAAA,WAEApU,EAAAuY,IAAAlE,gBAIAlC,IAAA0Q,WAAA3K,UAAA,GAAA9F,IAOAD,IAAA8Q,MAAA,WAEA7Q,GAAAiG,MAAApY,KAAAqY,UACA,IAAAtY,GAAAC,IAEAA,MAAA+H,KAAA,QACA/H,KAAAsY,IAAAtY,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,MAAA+R,wBAEA/R,KAAAijB,WAEA,KAAA,GAAA1Z,GAAA,EAAA,GAAAA,EAAAA,IAEAvJ,KAAAijB,SAAAje,KAAAhF,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,WAAAuJ,EAAAwI,wBAGA/R,MAAAsY,IAAAlE,YAAA,WAEA,IAAA,GAAA7K,KAAAxJ,GAAAkjB,SAEAljB,EAAAkjB,SAAA1Z,GAAAsL,SAOA3C,IAAA8Q,MAAA/K,UAAA,GAAA9F,IAOAD,IAAAgR,SAAA,WAEA/Q,GAAAiG,MAAApY,KAAAqY,WAEArY,KAAA+H,KAAA,WACA/H,KAAAmjB,UAAA,GACAnjB,KAAAojB,SAAApjB,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,aACAA,KAAAojB,SAAA5iB,IAAA,IACAR,KAAAya,QAAAza,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,UAAA+R,wBAEA/R,KAAAgT,KAAA,WAEA,GAAA,IAAAhT,KAAAmjB,UAAA,CACA,GAAApjB,GAAAC,IAEAA,MAAAmjB,UAAAE,WAAA,WAEAtjB,EAAAojB,UAAA,GACApjB,EAAA0a,QAAA5F,OACA9U,EAAAiT,QAEAhT,KAAAojB,SAAA5iB,OAGAR,KAAAgT,QAIAd,IAAAgR,SAAAjL,UAAA,GAAA9F,IAOAD,IAAAoR,QAEApR,IAAAoR,KAAAC,UAAA,WAEApR,GAAAiG,MAAApY,KAAAqY,WAEArY,KAAA+H,KAAA,YACA/H,KAAAsY,IAAAtY,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,MAAA+R,wBACA/R,KAAAwiB,OAAAxiB,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,UAEA,IAAAD,GAAAC,IAEAA,MAAAsY,IAAAlE,YAAA,WAEArU,EAAAyiB,OAAAhiB,IAAAO,KAAA2gB,IAAA/hB,KAAAC,MAAA,MAGAI,KAAAsY,IAAAlE,eAIAlC,IAAAoR,KAAAC,UAAAtL,UAAA,GAAA9F,IAQAD,IAAAoR,KAAAE,aAAA,WAEArR,GAAAiG,MAAApY,KAAAqY,WAEArY,KAAA+H,KAAA,eACA/H,KAAAsY,IAAAtY,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,MAAA+R,wBACA/R,KAAAwiB,OAAAxiB,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,UAEA,IAAAD,GAAAC,KACAyjB,EAAA9jB,KAAAC,MAAA,GAEAI,MAAAsY,IAAAlE,YAAA,WAEArU,EAAAyiB,OAAAhiB,IAAAb,KAAAC,MAAA,IAAA6jB,GAGAzjB,KAAAsY,IAAAlE,eAIAlC,IAAAoR,KAAAE,aAAAvL,UAAA,GAAA9F,ICrSAD,IAAAwR,KAAAxR,IAAAwR,SAGAxR,IAAAwR,KAAAC,UAAA,WAEA,GAAA5jB,GAAAC,IACAmS,IAAAiG,MAAApY,KAAAqY,WAEArY,KAAA+H,KAAA,YAEA/H,KAAA4jB,KAAA5jB,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,OAAAiS,uBACAjS,KAAA6jB,IAAA7jB,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,QACAA,KAAAwiB,OAAAxiB,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,WAEAA,KAAA4jB,KAAAzP,eAAA,WAEApU,EAAA6jB,KAAApjB,KAAAT,EAAA6jB,KAAApjB,IAAAyV,eAAAlW,EAAA8jB,IAAArjB,OAEAT,EAAAyiB,OAAAhiB,IAAAT,EAAA6jB,KAAApjB,IAAAT,EAAA8jB,IAAArjB,QAMA0R,IAAAwR,KAAAC,UAAA1L,UAAA,GAAA9F,ICtBAD,IAAAnR,KAAAmR,IAAAnR,SAGAmR,IAAAnR,KAAA+iB,OAAA,WAEA,GAAA/jB,GAAAC,IACAmS,IAAAiG,MAAApY,KAAAqY,WAEArY,KAAA+H,KAAA,SACA/H,KAAAsY,IAAAtY,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,MAAA+R,wBACA/R,KAAAwiB,OAAAxiB,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,WAEAA,KAAAsY,IAAAlE,YAAA,WAEArU,EAAAyiB,OAAAhiB,IAAAO,KAAAC,UAGAhB,KAAAsY,IAAAlE,eAGAlC,IAAAnR,KAAA+iB,OAAA7L,UAAA,GAAA9F,IAIAD,IAAAnR,KAAAgjB,MAAA,WAWA,QAAAC,KAEAjkB,EAAAyiB,OAAAhiB,IAAAO,KAAAkjB,IAAAljB,KAAAmjB,IAAAnkB,EAAAS,IAAAA,IAAAT,EAAAkkB,IAAAzjB,KAAAT,EAAAmkB,IAAA1jB,KAXA,GAAAT,GAAAC,IACAmS,IAAAiG,MAAApY,KAAAqY,WAEArY,KAAA+H,KAAA,QACA/H,KAAAQ,IAAAR,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,QACAA,KAAAikB,IAAAjkB,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,QACAA,KAAAkkB,IAAAlkB,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,QACAA,KAAAwiB,OAAAxiB,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,WAOAA,KAAAikB,IAAAzjB,IAAA,EACAR,KAAAkkB,IAAA1jB,IAAA,EAEAR,KAAAQ,IAAA2T,eAAA6P,EACAhkB,KAAAikB,IAAA9P,eAAA6P,EACAhkB,KAAAkkB,IAAA/P,eAAA6P,EAEAhkB,KAAAQ,IAAAA,IAAA,IAGA0R,IAAAnR,KAAAgjB,MAAA9L,UAAA,GAAA9F,IAKAD,IAAAnR,KAAAojB,WAAA,WAWA,QAAAC,KAEA,GAAAne,GAAAlF,KAAAmjB,IAAA,EAAAnjB,KAAAkjB,IAAA,GAAAlkB,EAAAS,IAAAA,IAAAT,EAAAkkB,IAAAzjB,MAAAT,EAAAmkB,IAAA1jB,IAAAT,EAAAkkB,IAAAzjB,MACAT,GAAAyiB,OAAAhiB,IAAAyF,EAAAA,GAAA,EAAA,EAAAA,GAZA,GAAAlG,GAAAC,IACAmS,IAAAiG,MAAApY,KAAAqY,WAEArY,KAAA+H,KAAA,aACA/H,KAAAQ,IAAAR,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,QACAA,KAAAikB,IAAAjkB,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,QACAA,KAAAkkB,IAAAlkB,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,QACAA,KAAAwiB,OAAAxiB,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,WAQAA,KAAAikB,IAAAzjB,IAAA,EACAR,KAAAkkB,IAAA1jB,IAAA,EAEAR,KAAAQ,IAAA2T,eAAAiQ,EACApkB,KAAAikB,IAAA9P,eAAAiQ,EACApkB,KAAAkkB,IAAA/P,eAAAiQ,EAEApkB,KAAAQ,IAAAA,IAAA,IAGA0R,IAAAnR,KAAAojB,WAAAlM,UAAA,GAAA9F,IAKAD,IAAAnR,KAAAsjB,SAAA,WAEAlS,GAAAiG,MAAApY,KAAAqY,UACA,IAAAtY,GAAAC,IAEAA,MAAA+H,KAAA,kBACA/H,KAAAwiB,OAAAxiB,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,WACAA,KAAA4I,EAAA5I,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,UACAA,KAAAskB,QAAAtkB,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,YACAA,KAAAukB,QAAAvkB,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,YACAA,KAAAwkB,QAAAxkB,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,YACAA,KAAAykB,QAAAzkB,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,YAEAA,KAAAgT,KAAA,WAEA,GAAAjT,EAAA6I,EAAApI,IAAAT,EAAAwkB,QAAA/jB,IAGA,YADAT,EAAAyiB,OAAAhiB,IAAAT,EAAA0kB,QAAAjkB,IAIA,IAAAT,EAAA6I,EAAApI,IAAAT,EAAAukB,QAAA9jB,IAGA,YADAT,EAAAyiB,OAAAhiB,IAAAT,EAAAykB,QAAAhkB,IAIA,IAAAkkB,GAAAxe,WAAAnG,EAAAykB,QAAAhkB,KACAmkB,EAAAze,WAAAnG,EAAA0kB,QAAAjkB,KACAokB,EAAA1e,WAAAnG,EAAAukB,QAAA9jB,KACAqkB,EAAA3e,WAAAnG,EAAAwkB,QAAA/jB,KACAyF,EAAAC,WAAAnG,EAAA6I,EAAApI,KAEAskB,GAAA,EACAC,EAAAhkB,KAAAkjB,IAAAW,EAAAC,GACAG,EAAAjkB,KAAAmjB,IAAAU,EAAAC,EACAE,IAAAH,IAAAE,GAAA,EAEA,IAAAG,IAAA,EACAC,EAAAnkB,KAAAkjB,IAAAS,EAAAC,GACAQ,EAAApkB,KAAAmjB,IAAAQ,EAAAC,EACAO,IAAAR,IAAAO,GAAA,EAEA,IAAAG,GAAA,CAEAA,GAAAN,GAAAE,EAAA/e,IAAAkf,EAAAD,IAAAF,EAAAD,IACA9e,EAAA8e,IAAAI,EAAAD,IAAAF,EAAAD,GAEAhlB,EAAAyiB,OAAAhiB,IAAAykB,EAAAE,EAAAC,EACAA,EAAAF,GAIAllB,KAAA4I,EAAApI,IAAA,EACAR,KAAAskB,QAAA9jB,IAAA,GACAR,KAAAukB,QAAA/jB,IAAA,EACAR,KAAAwkB,QAAAhkB,IAAA,EACAR,KAAAykB,QAAAjkB,IAAA,EAGAR,KAAA4I,EAAAuL,eAAAnU,KAAAgT,KACAhT,KAAAskB,QAAAnQ,eAAAnU,KAAAgT,KACAhT,KAAAukB,QAAApQ,eAAAnU,KAAAgT,KACAhT,KAAAwkB,QAAArQ,eAAAnU,KAAAgT,KACAhT,KAAAykB,QAAAtQ,eAAAnU,KAAAgT,KAEAhT,KAAAgT,QAIAd,IAAAnR,KAAAsjB,SAAApM,UAAA,GAAA9F,IAMAD,IAAAnR,KAAAskB,IAAA,WAEAlT,GAAAiG,MAAApY,KAAAqY,UACA,IAAAtY,GAAAC,IACAA,MAAA+H,KAAA,MACA/H,KAAAslB,OAAAtlB,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,WACAA,KAAAwiB,OAAAxiB,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,WAEAA,KAAAslB,OAAAnR,eAAA,WAEApU,EAAAyiB,OAAAhiB,IAAAO,KAAAwkB,IAAAxlB,EAAAulB,OAAA9kB,OAIA0R,IAAAnR,KAAAskB,IAAApN,UAAA,GAAA9F,IAIAD,IAAAnR,KAAAykB,IAAA,WAEArT,GAAAiG,MAAApY,KAAAqY,UACA,IAAAtY,GAAAC,IACAA,MAAA+H,KAAA,QACA/H,KAAAslB,OAAAtlB,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,WACAA,KAAAwiB,OAAAxiB,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,WAEAA,KAAAslB,OAAAnR,eAAA,WAEApU,EAAAyiB,OAAAhiB,IAAAO,KAAA2gB,IAAA3hB,EAAAulB,OAAA9kB,OAIA0R,IAAAnR,KAAAykB,IAAAvN,UAAA,GAAA9F,IAKAD,IAAAnR,KAAA0kB,IAAA,WAEAtT,GAAAiG,MAAApY,KAAAqY,UACA,IAAAtY,GAAAC,IAEAA,MAAA+H,KAAA,MACA/H,KAAAwiB,OAAAxiB,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,WACAA,KAAA0lB,QAAA1lB,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,YACAA,KAAA2lB,QAAA3lB,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,YAEAA,KAAAgT,KAAA,WAEAjT,EAAAyiB,OAAAhiB,IAAA0F,WAAAnG,EAAA2lB,QAAAllB,KAAA0F,WAAAnG,EAAA4lB,QAAAnlB,MAGAR,KAAA0lB,QAAAvR,eAAAnU,KAAAgT,KACAhT,KAAA2lB,QAAAxR,eAAAnU,KAAAgT,KAEAhT,KAAA0lB,QAAAllB,IAAA,EACAR,KAAA2lB,QAAAnlB,IAAA,GAGA0R,IAAAnR,KAAA0kB,IAAAxN,UAAA,GAAA9F,IAMAD,IAAAnR,KAAA6kB,SAAA,WAEAzT,GAAAiG,MAAApY,KAAAqY,UACA,IAAAtY,GAAAC,IAEAA,MAAA+H,KAAA,WACA/H,KAAAwiB,OAAAxiB,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,WACAA,KAAA0lB,QAAA1lB,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,YACAA,KAAA2lB,QAAA3lB,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,YAEAA,KAAAgT,KAAA,WAEAjT,EAAAyiB,OAAAhiB,IAAAT,EAAA2lB,QAAAllB,IAAAT,EAAA4lB,QAAAnlB,KAGAR,KAAA0lB,QAAAvR,eAAAnU,KAAAgT,KACAhT,KAAA2lB,QAAAxR,eAAAnU,KAAAgT,KAEAhT,KAAA0lB,QAAAllB,IAAA,EACAR,KAAA2lB,QAAAnlB,IAAA,GAIA0R,IAAAnR,KAAA6kB,SAAA3N,UAAA,GAAA9F,IAIAD,IAAAnR,KAAA8kB,OAAA,WAEA1T,GAAAiG,MAAApY,KAAAqY,UACA,IAAAtY,GAAAC,IAEAA,MAAA+H,KAAA,SACA/H,KAAAwiB,OAAAxiB,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,WACAA,KAAA0lB,QAAA1lB,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,YACAA,KAAA2lB,QAAA3lB,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,YAEAA,KAAAgT,KAAA,WAEAjT,EAAAyiB,OAAAhiB,IAAAT,EAAA2lB,QAAAllB,IAAAT,EAAA4lB,QAAAnlB,KAGAR,KAAA0lB,QAAAvR,eAAAnU,KAAAgT,KACAhT,KAAA2lB,QAAAxR,eAAAnU,KAAAgT,MAGAd,IAAAnR,KAAA8kB,OAAA5N,UAAA,GAAA9F,IAKAD,IAAAnR,KAAA+kB,WAKA5T,IAAAnR,KAAA+kB,QAAAC,OAAA,WAEA5T,GAAAiG,MAAApY,KAAAqY,UACA,IAAAtY,GAAAC,IAEAA,MAAA+H,KAAA,SACA/H,KAAAwiB,OAAAxiB,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,WACAA,KAAA0lB,QAAA1lB,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,YAEAA,KAAAgT,KAAA,WAEAjT,EAAAyiB,OAAAhiB,MAAA,EAAAT,EAAA2lB,QAAAllB,MAGAR,KAAA0lB,QAAAvR,eAAAnU,KAAAgT,MAGAd,IAAAnR,KAAA+kB,QAAAC,OAAA9N,UAAA,GAAA9F,IAMAD,IAAAnR,KAAA+kB,QAAAE,QAAA,WAEA7T,GAAAiG,MAAApY,KAAAqY,UACA,IAAAtY,GAAAC,IAEAA,MAAA+H,KAAA,UACA/H,KAAAwiB,OAAAxiB,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,WACAA,KAAA0lB,QAAA1lB,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,YACAA,KAAA2lB,QAAA3lB,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,YAEAA,KAAAgT,KAAA,WAEAjT,EAAAyiB,OAAAhiB,IAAAT,EAAA2lB,QAAAllB,IAAAT,EAAA4lB,QAAAnlB,KAGAR,KAAA0lB,QAAAvR,eAAAnU,KAAAgT,KACAhT,KAAA2lB,QAAAxR,eAAAnU,KAAAgT,MAGAd,IAAAnR,KAAA+kB,QAAAE,QAAA/N,UAAA,GAAA9F,IAMAD,IAAAnR,KAAA+kB,QAAAG,QAAA,WAEA9T,GAAAiG,MAAApY,KAAAqY,UACA,IAAAtY,GAAAC,IAEAA,MAAA+H,KAAA,UACA/H,KAAAwiB,OAAAxiB,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,WACAA,KAAAslB,OAAAtlB,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,UACAA,KAAA0lB,QAAA1lB,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,YACAA,KAAA2lB,QAAA3lB,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,YACAA,KAAAslB,OAAA9kB,IAAA,EACAR,KAAA0lB,QAAAllB,IAAA,EACAR,KAAA2lB,QAAAnlB,IAAA,EAEAR,KAAAgT,KAAA,WAEAjT,EAAAyiB,OAAAhiB,IAEAT,EAAAulB,OAAA9kB,IAAAO,KAAAkjB,IAAAlkB,EAAA2lB,QAAAllB,IAAAT,EAAA4lB,QAAAnlB,MACAT,EAAAulB,OAAA9kB,IAAAO,KAAAmjB,IAAAnkB,EAAA2lB,QAAAllB,IAAAT,EAAA4lB,QAAAnlB,MAIAR,KAAA0lB,QAAAvR,eAAAnU,KAAAgT,KACAhT,KAAA2lB,QAAAxR,eAAAnU,KAAAgT,KACAhT,KAAAslB,OAAAnR,eAAAnU,KAAAgT,MAEAd,IAAAnR,KAAA+kB,QAAAG,QAAAhO,UAAA,GAAA9F,IAKAD,IAAAnR,KAAA+kB,QAAAI,OAAA,WAEA/T,GAAAiG,MAAApY,KAAAqY,UACA,IAAAtY,GAAAC,IAEAA,MAAA+H,KAAA,SACA/H,KAAAwiB,OAAAxiB,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,WACAA,KAAA0lB,QAAA1lB,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,YACAA,KAAA2lB,QAAA3lB,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,YAEAA,KAAAgT,KAAA,WAEAjT,EAAAyiB,OAAAhiB,IAAAT,EAAA2lB,QAAAllB,IAAAT,EAAA4lB,QAAAnlB,KAGAR,KAAA0lB,QAAAvR,eAAAnU,KAAAgT,KACAhT,KAAA2lB,QAAAxR,eAAAnU,KAAAgT,MAIAd,IAAAnR,KAAA+kB,QAAAI,OAAAjO,UAAA,GAAA9F,IAMAD,IAAAnR,KAAA+kB,QAAAK,OAAA,WAEAhU,GAAAiG,MAAApY,KAAAqY,UACA,IAAAtY,GAAAC,IAEAA,MAAA+H,KAAA,SACA/H,KAAAwiB,OAAAxiB,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,WACAA,KAAA0lB,QAAA1lB,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,YACAA,KAAA2lB,QAAA3lB,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,YAEAA,KAAAgT,KAAA,WAEAjT,EAAAyiB,OAAAhiB,IAAAT,EAAA2lB,QAAAllB,KAAAT,EAAA4lB,QAAAnlB,KAGAR,KAAA0lB,QAAAvR,eAAAnU,KAAAgT,KACAhT,KAAA2lB,QAAAxR,eAAAnU,KAAAgT,MAGAd,IAAAnR,KAAA+kB,QAAAK,OAAAlO,UAAA,GAAA9F,IC3ZAD,IAAAkU,IAAAlU,IAAAkU,QAEAlU,IAAAkU,IAAAC,UAAA,WAcA,QAAAC,KAEAvmB,EAAAwmB,UAAA/lB,OAAA,GAEAgmB,IAEAC,EAAApD,WAAAiD,EAAA,KAGA,QAAAE,KAEA,GAAAzmB,EAAAwmB,UAAA/lB,OAAA,GAAAkmB,GAAA3mB,EAAAqB,IAAAZ,IAAA,CAEAT,EAAAwmB,UAAA/lB,OAAA,GAAAmmB,EAAAC,QAEAC,OAAAC,UAAAD,OAAAC,WAAAD,OAAAE,aAEAF,OAAAC,WACAvjB,QAAAyjB,MAAA,sDAGA,KAEA,MAAAL,GAAAA,EAAAC,QACAD,EAAA,GAAAG,WAAA/mB,EAAAqB,IAAAZ,KACA,MAAAmB,GAEA4B,QAAAC,IAAA,uBAAAzD,EAAAqB,IAAAZ,KAIAmmB,EAAAM,QAAA,SAAAC,GAEAnnB,EAAAwmB,UAAA/lB,KAAA,GAGAmmB,EAAAQ,QAAA,SAAAD,GAEAnnB,EAAAwmB,UAAA/lB,KAAA,GAGAmmB,EAAAS,OAAA,SAAAF,GAEAnnB,EAAAwmB,UAAA/lB,KAAA,EACAkmB,EAAA3mB,EAAAqB,IAAAZ,KAGAmmB,EAAAU,UAAA,SAAAH,GAEA,IAEA,GAAAI,GAAAnQ,KAAAS,MAAAsP,EAAAtD,KACA7jB,GAAAyiB,OAAAhiB,IAAA8mB,EAEA,MAAA3lB,GAEA,WADA4B,SAAAC,IAAA,wCAAA0jB,EAAAtD,SAnEA,GAAA7jB,GAAAC,IACAmS,IAAAiG,MAAApY,KAAAqY,WAEArY,KAAA+H,KAAA,YACA/H,KAAAoB,IAAApB,KAAA8S,UAAA,GAAAe,MAAA7T,KAAA,QACAA,KAAAwiB,OAAAxiB,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,SAAAgS,sBACAhS,KAAAumB,UAAAvmB,KAAA0S,WAAA,GAAAmB,MAAA7T,KAAA,aAEA,IAAA2mB,GAAA,KACAF,EAAA,KACAC,EAAA,EAkEA1mB,MAAAoB,IAAA+S,eAAAqS,EACAC,EAAApD,WAAAiD,EAAA,KAEAtmB,KAAAoB,IAAAZ,IAAA,uBAGA0R,IAAAkU,IAAAC,UAAApO,UAAA,GAAA9F","file":"cables.min.js","sourcesContent":["\n\nfunction Timer()\n{\n    var self=this;\n    var timeStart=Date.now();\n    var timeOffset=0;\n\n    var currentTime=0;\n    var lastTime=0;\n    var paused=true;\n\n    function getTime()\n    {\n        lastTime=(Date.now()-timeStart)/1000;\n        return lastTime+timeOffset;\n\n    }\n\n    this.update=function()\n    {\n        if(paused) return;\n        currentTime=getTime();\n\n        return currentTime;\n    };\n\n    this.getTime=function()\n    {\n        return currentTime;\n    };\n\n    this.togglePlay=function()\n    {\n        if(paused)self.play();\n            else self.pause();\n    };\n\n    this.setOffset=function(val)\n    {\n        if(currentTime+val<0)\n        {\n            timeStart=Date.now();\n            timeOffset=0;\n            currentTime=0;\n        }\n        else\n        {\n            timeOffset+=val;\n            currentTime=lastTime+timeOffset;\n        }\n        \n\n    };\n\n    this.play=function()\n    {\n        timeStart=Date.now();\n        paused=false;\n    };\n\n    this.pause=function()\n    {\n        timeOffset=currentTime;\n        paused=true;\n    };\n\n}","function generateUUID()\n{\n    var d = new Date().getTime();\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c)\n    {\n        var r = (d + Math.random()*16)%16 | 0;\n        d = Math.floor(d/16);\n        return (c=='x' ? r : (r&0x3|0x8)).toString(16);\n    });\n    return uuid;\n}\n\n// ----------------------------------------------------------------\nfunction ajaxRequest(url, callback)\n{\n    var request = new XMLHttpRequest();\n    request.open(\"GET\", url, true);\n    request.responseType = \"arraybuffer\";\n    request.onload = function(e)\n    {\n        callback(e.target.response);\n    };\n    request.send();\n}\n\nString.prototype.endl = function(){return this+'\\n';};\n\n\n","var CGL=CGL ||\n{\n    DEG2RAD:3.14159/180.0\n};\n\n\n\nCGL.Mesh=function(geom)\n{\n    var bufTexCoords=-1;\n    var bufVertexNormals=-1;\n    var bufVertices = gl.createBuffer();\n    var bufVerticesIndizes = gl.createBuffer();\n\n    this.setGeom=function(geom)\n    {\n        \n        gl.bindBuffer(gl.ARRAY_BUFFER, bufVertices);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(geom.vertices), gl.STATIC_DRAW);\n        bufVertices.itemSize = 3;\n        bufVertices.numItems = geom.vertices.length/3;\n\n\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufVerticesIndizes);\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(geom.verticesIndices), gl.STATIC_DRAW);\n        bufVerticesIndizes.itemSize = 1;\n        bufVerticesIndizes.numItems = geom.verticesIndices.length;\n\n\n\n\n        if(geom.vertexNormals.length>0)\n        {\n            if(bufVertexNormals==-1)bufVertexNormals = gl.createBuffer();\n\n            gl.bindBuffer(gl.ARRAY_BUFFER, bufVertexNormals);\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(geom.vertexNormals), gl.STATIC_DRAW);\n            bufVertexNormals.itemSize = 3;\n            bufVertexNormals.numItems = geom.vertexNormals.length/bufVertexNormals.itemSize;\nconsole.log('bufVertexNormals.'+bufVertexNormals.numItems);\n                    \n        }\n\n        if(geom.texCoords.length>0)\n        {\n            if(bufTexCoords==-1)bufTexCoords = gl.createBuffer();\n            gl.bindBuffer(gl.ARRAY_BUFFER, bufTexCoords);\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(geom.texCoords), gl.STATIC_DRAW);\n            bufTexCoords.itemSize = 2;\n            bufTexCoords.numItems = geom.texCoords.length/bufTexCoords.itemSize;\n        }\n\n    };\n\n    this.setGeom(geom);\n\n\n    this.render=function(shader)\n    {\n        shader.bind();\n\n        GL.enableVertexAttribArray(shader.getAttrVertexPos());\n        if(bufVertexNormals!=-1) GL.enableVertexAttribArray(shader.getAttrVertexNormals());\n        if(bufTexCoords!=-1) GL.enableVertexAttribArray(shader.getAttrTexCoords());\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, bufVertices);\n        gl.vertexAttribPointer(shader.getAttrVertexPos(),bufVertices.itemSize, gl.FLOAT, false, 0, 0);\n\n        if(bufVertexNormals!=-1)\n        {\n            gl.bindBuffer(gl.ARRAY_BUFFER, bufVertexNormals);\n            gl.vertexAttribPointer(shader.getAttrVertexNormals(),bufVertexNormals.itemSize, gl.FLOAT, false, 0, 0);\n        }\n\n        if(bufTexCoords!=-1)\n        {\n            gl.bindBuffer(gl.ARRAY_BUFFER, bufTexCoords);\n            gl.vertexAttribPointer(shader.getAttrTexCoords(),bufTexCoords.itemSize, gl.FLOAT, false, 0, 0);\n        }\n\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufVerticesIndizes);\n        gl.drawElements(gl.TRIANGLES, bufVerticesIndizes.numItems, gl.UNSIGNED_SHORT, 0);\n    };\n\n};\n\nCGL.Geometry=function()\n{\n    this.faceVertCount=3;\n    this.vertices=[];\n    this.verticesIndices=[];\n    this.texCoords=[];\n    this.texCoordsIndices=[];\n    this.vertexNormals=[];\n\n    this.clear=function()\n    {\n        this.vertices.length=0;\n        this.verticesIndices.length=0;\n        this.texCoords.length=0;\n        this.texCoordsIndices.length=0;\n    };\n\n    this.addFace=function(a,b,c)\n    {\n        var face=[-1,-1,-1];\n\n        for(var iv=0;iv<this.vertices;iv+=3)\n        {\n            if( this.vertices[iv+0]==a[0] &&\n                this.vertices[iv+1]==a[1] &&\n                this.vertices[iv+2]==a[2]) face[0]=iv/3;\n\n            if( this.vertices[iv+0]==b[0] &&\n                this.vertices[iv+1]==b[1] &&\n                this.vertices[iv+2]==b[2]) face[1]=iv/3;\n\n            if( this.vertices[iv+0]==c[0] &&\n                this.vertices[iv+1]==c[1] &&\n                this.vertices[iv+2]==c[2]) face[2]=iv/3;\n        }\n\n        if(face[0]==-1)\n        {\n            this.vertices.push(a[0],a[1],a[2]);\n            face[0]=(this.vertices.length-1)/3;\n        }\n\n        if(face[1]==-1)\n        {\n            this.vertices.push(b[0],b[1],b[2]);\n            face[1]=(this.vertices.length-1)/3;\n        }\n\n        if(face[2]==-1)\n        {\n            this.vertices.push(c[0],c[1],c[2]);\n            face[2]=(this.vertices.length-1)/3;\n        }\n\n        this.verticesIndices.push(face[0]);\n        this.verticesIndices.push(face[1]);\n        this.verticesIndices.push(face[2]);\n\n    };\n\n\n\n};\n\nparseOBJ = function(buff)\n{\n\n    _readline = function(a, off)  // Uint8Array, offset\n    {\n        var s = \"\";\n        while(a[off] != 10) s += String.fromCharCode(a[off++]);\n        return s;\n    };\n\n    var geom = new CGL.Geometry();\n    geom.groups = {};\n\n    geom.vertexNormals = [];\n    geom.vertexNormalIndices = [];\n\n    var cg = {from: 0, to:0};   // current group\n    var off = 0;\n    var a = new Uint8Array(buff);\n    \n    while(off < a.length)\n    {\n        var line = _readline(a, off);\n        off += line.length + 1;\n        line = line.replace(/ +(?= )/g,'');\n        line = line.replace(/(^\\s+|\\s+$)/g, '');\n        var cds = line.split(\" \");\n        if(cds[0] == \"g\")\n        {\n            cg.to = geom.verticesIndices.length;\n            if(geom.groups[cds[1]] == null) geom.groups[cds[1]] = {from:geom.verticesIndices.length, to:0};\n            cg = geom.groups[cds[1]];\n        }\n        if(cds[0] == \"v\")\n        {\n            var x = parseFloat(cds[1]);\n            var y = parseFloat(cds[2]);\n            var z = parseFloat(cds[3]);\n            geom.vertices.push(x,y,z);\n        }\n        if(cds[0] == \"vt\")\n        {\n            var x = parseFloat(cds[1]);\n            var y = 1-parseFloat(cds[2]);\n            geom.texCoords.push(x,y);\n        }\n        if(cds[0] == \"vn\")\n        {\n            var x = parseFloat(cds[1]);\n            var y = parseFloat(cds[2]);\n            var z = parseFloat(cds[3]);\n            geom.vertexNormals.push(x,y,z);\n        }\n        if(cds[0] == \"f\")\n        {\n            var v0a = cds[1].split(\"/\"), v1a = cds[2].split(\"/\"), v2a = cds[3].split(\"/\");\n            var vi0 = parseInt(v0a[0])-1, vi1 = parseInt(v1a[0])-1, vi2 = parseInt(v2a[0])-1;\n            var ui0 = parseInt(v0a[1])-1, ui1 = parseInt(v1a[1])-1, ui2 = parseInt(v2a[1])-1;\n            var ni0 = parseInt(v0a[2])-1, ni1 = parseInt(v1a[2])-1, ni2 = parseInt(v2a[2])-1;\n            \n            var vlen = geom.vertices.length/3, ulen = geom.texCoords.length/2, nlen = geom.vertexNormals.length/3;\n            if(vi0<0) vi0 = vlen + vi0+1; if(vi1<0) vi1 = vlen + vi1+1; if(vi2<0) vi2 = vlen + vi2+1;\n            if(ui0<0) ui0 = ulen + ui0+1; if(ui1<0) ui1 = ulen + ui1+1; if(ui2<0) ui2 = ulen + ui2+1;\n            if(ni0<0) ni0 = nlen + ni0+1; if(ni1<0) ni1 = nlen + ni1+1; if(ni2<0) ni2 = nlen + ni2+1;\n            \n            geom.verticesIndices.push(vi0, vi1, vi2);  //cg.verticesIndices.push(vi0, vi1, vi2)\n            geom.texCoordsIndices  .push(ui0, ui1, ui2);  //cg.texCoordsIndices  .push(ui0, ui1, ui2);\n            geom.vertexNormalIndices.push(ni0, ni1, ni2);  //cg.vertexNormalIndices.push(ni0, ni1, ni2);\n            if(cds.length == 5)\n            {\n                var v3a = cds[4].split(\"/\");\n                var vi3 = parseInt(v3a[0])-1, ui3 = parseInt(v3a[1])-1, ni3 = parseInt(v3a[2])-1;\n                if(vi3<0) vi3 = vlen + vi3+1;\n                if(ui3<0) ui3 = ulen + ui3+1;\n                if(ni3<0) ni3 = nlen + ni3+1;\n                geom.verticesIndices.push(vi0, vi2, vi3);  //cg.verticesIndices.push(vi0, vi2, vi3);\n                geom.texCoordsIndices  .push(ui0, ui2, ui3);  //cg.texCoordsIndices  .push(ui0, ui2, ui3);\n                geom.vertexNormalIndices.push(ni0, ni2, ni3);  //cg.vertexNormalIndices.push(ni0, ni2, ni3);\n            }\n        }\n    }\n    cg.to = geom.verticesIndices.length;\n    \n    return geom;\n};\n\n\n","var CGL=CGL || {};\n\n// ---------------------------------------------------------------------------\n\nCGL.Uniform=function(_shader,_type,_name,_value)\n{\n    var self=this;\n    var loc=-1;\n    var name=_name;\n    var type=_type;\n    var value=0;\n    var shader=_shader;\n    this.needsUpdate=true;\n\n    shader.addUniform(this);\n\n    this.getType=function() {return type;};\n    this.getName=function() {return name;};\n\n    this.resetLoc=function() { loc=-1;};\n\n    this.updateValueF=function()\n    {\n        if(loc==-1) loc=gl.getUniformLocation(shader.getProgram(), name);\n        gl.uniform1f(loc, value);\n    };\n\n    this.setValueF=function(v)\n    {\n        self.needsUpdate=true;\n        value=v;\n    };\n\n    this.updateValueT=function()\n    {\n        if(loc==-1)\n        {\n            loc=gl.getUniformLocation(shader.getProgram(), name);\n            if(loc==-1) console.log('texture loc unknown!!');\n        }\n\n        gl.uniform1i(loc, 0);\n    };\n\n    this.setValueT=function(v)\n    {\n        self.needsUpdate=true;\n        value=v;\n    };\n\n    if(type=='f')\n    {\n        this.setValue=this.setValueF;\n        this.updateValue=this.updateValueF;\n    }\n\n    if(type=='t')\n    {\n        this.setValue=this.setValueT;\n        this.updateValue=this.updateValueT;\n    }\n\n    this.setValue(_value);\n};\n\n// ---------------------------------------------------------------------------\n\nCGL.Shader=function()\n{\n    var self=this;\n    var program=false;\n    var uniforms=[];\n    var needsRecompile=true;\n\n    this.removeUniform=function(name)\n    {\n        for(var i in uniforms)\n        {\n            if(uniforms[i].getName()==name)\n            {\n                uniforms.splice(i,1);\n            }\n        }\n        needsRecompile=true;\n    };\n\n    this.addUniform=function(uni)\n    {\n        uniforms.push(uni);\n        needsRecompile=true;\n    };\n\n    this.getDefaultVertexShader=function()\n    {\n        return ''+\n        'attribute vec3 vPosition;\\n'+\n        'attribute vec2 attrTexCoord;\\n'+\n        'attribute vec3 attrVertNormal;\\n'+\n        'varying vec2 texCoord;\\n'+\n        'varying vec3 norm;\\n'+\n        'uniform mat4 projMatrix;\\n'+\n        'uniform mat4 mvMatrix;\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        '   texCoord=attrTexCoord;\\n'+\n        '   norm=attrVertNormal;\\n'+\n        // '   gl_PointSize=3.0;\\n'+\n        '   gl_Position = projMatrix * mvMatrix * vec4(vPosition,  1.0);\\n'+\n        '}\\n';\n    };\n\n    this.getDefaultFragmentShader=function()\n    {\n        return ''+\n        'precision mediump float;\\n'+\n        'varying vec3 norm;'+\n        'void main()\\n'+\n        '{\\n'+\n\n        '   gl_FragColor = vec4(0.5,0.5,0.5,1.0);\\n'+\n        // '   gl_FragColor = vec4(norm.x,norm.y,1.0,1.0);\\n'+\n        '}\\n';\n    };\n\n    this.srcVert=this.getDefaultVertexShader();\n    this.srcFrag=this.getDefaultFragmentShader();\n\n    this.setSource=function(srcVert,srcFrag)\n    {\n        this.srcVert=srcVert;\n        this.srcFrag=srcFrag;\n    };\n\n    var projMatrixUniform=-1;\n    var mvMatrixUniform=-1;\n\n    var attrTexCoords = -1;\n    var attrVertexNormals = -1;\n    var attrVertexPos = -1;\n\n    this.getAttrVertexNormals=function(){return attrVertexNormals;};\n    this.getAttrTexCoords=function(){return attrTexCoords;};\n    this.getAttrVertexPos=function(){return attrVertexPos;};\n\n    this.hasTextureUniforms=function()\n    {\n        for(var i in uniforms)\n        {\n            if(uniforms[i].getType()=='t') return true;\n        }\n        return false;\n    };\n\n    this.compile=function()\n    {\n        var defines='';\n        if(self.hasTextureUniforms()) defines+='#define HAS_TEXTURES'.endl();\n\n        console.log('shader compile...');\n        console.log('has textures: '+self.hasTextureUniforms() );\n\n        var vs=defines+self.srcVert;\n        var fs=defines+self.srcFrag;\n\n        if(!program)\n        {\n            console.log('create shaderprogram');\n                    \n            program=createProgram(vs,fs, program);\n        }\n        else\n        {\n            console.log('recompile shaders...');\n\n            // self.vshader=createShader(vs, gl.VERTEX_SHADER, self.vshader );\n            // self.fshader=createShader(fs, gl.FRAGMENT_SHADER, self.fshader );\n            // linkProgram(program);\n            program=createProgram(vs,fs, program);\n            \n            mvMatrixUniform=-1;\n\n            for(var i in uniforms)uniforms[i].resetLoc();\n        }\n\n        needsRecompile=false;\n    };\n\n    this.bind=function()\n    {\n        if(!program || needsRecompile) self.compile();\n\n        if(mvMatrixUniform==-1)\n        {\n            attrVertexNormals = gl.getAttribLocation(program, 'attrVertNormal');\n            attrTexCoords = gl.getAttribLocation(program, 'attrTexCoord');\n            attrVertexPos = gl.getAttribLocation(program, 'vPosition');\n\n            projMatrixUniform = gl.getUniformLocation(program, \"projMatrix\");\n            mvMatrixUniform = gl.getUniformLocation(program, \"mvMatrix\");\n        }\n\n        GL.useProgram(program);\n\n        for(var i in uniforms)\n        {\n            if(uniforms[i].needsUpdate)uniforms[i].updateValue();\n        }\n\n        gl.uniformMatrix4fv(projMatrixUniform, false, cgl.pMatrix);\n        gl.uniformMatrix4fv(mvMatrixUniform, false, cgl.mvMatrix);\n    };\n\n    this.getProgram=function()\n    {\n        return program;\n    };\n\n\n    createShader =function(str, type,_shader)\n    {\n        var shader = _shader || gl.createShader(type);\n        gl.shaderSource(shader, str);\n        gl.compileShader(shader);\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\n        {\n            console.log('compile status: ');\n\n            if(type==gl.VERTEX_SHADER)console.log('VERTEX_SHADER');\n            if(type==gl.FRAGMENT_SHADER)console.log('FRAGMENT_SHADER');\n            \n            console.warn( gl.getShaderInfoLog(shader) );\n\n            var lines = str.match(/^.*((\\r\\n|\\n|\\r)|$)/gm);\n            for(var i in lines)\n            {\n                var j=parseInt(i,10)+1;\n                console.log(j+': ',lines[i]);\n            }\n\n            console.warn( gl.getShaderInfoLog(shader) );\n        }\n        return shader;\n    };\n\n    linkProgram=function(program)\n    {\n        gl.linkProgram(program);\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS))\n        {\n            throw gl.getProgramInfoLog(program);\n        }\n\n    };\n\n    createProgram=function(vstr, fstr)\n    {\n        var program = gl.createProgram();\n        self.vshader = createShader(vstr, gl.VERTEX_SHADER);\n        self.fshader = createShader(fstr, gl.FRAGMENT_SHADER);\n        gl.attachShader(program, self.vshader);\n        gl.attachShader(program, self.fshader);\n\n        linkProgram(program);\n        return program;\n    };\n\n\n\n};\n\n","\nvar CGL=CGL || {};\n\nCGL.State=function()\n{\n    var self=this;\n    var mvMatrixStack=[];\n    var pMatrixStack=[];\n    var shaderStack=[];\n\n    this.pMatrix=mat4.create();\n    this.mvMatrix=mat4.create();\n\n    mat4.identity(self.mvMatrix);\n\n    var simpleShader=new CGL.Shader();\n    var currentShader=simpleShader;\n\n\n    this.canvasWidth=640;\n    this.canvasHeight=360;\n\n\n\n    this.beginFrame=function()\n    {\n        self.setShader(simpleShader);\n    };\n\n    this.endFrame=function()\n    {\n        self.setPreviousShader();\n        if(mvMatrixStack.length>0) console.warn('mvmatrix stack length !=0 at end of rendering...');\n        if(pMatrixStack.length>0) console.warn('pmatrix stack length !=0 at end of rendering...');\n        if(shaderStack.length>0) console.warn('shaderStack length !=0 at end of rendering...');\n    };\n\n    // shader stack\n\n    this.getShader=function()\n    {\n        return currentShader;\n    };\n\n    this.setShader=function(shader)\n    {\n        shaderStack.push(shader);\n        currentShader=shader;\n    };\n\n    this.setPreviousShader=function()\n    {\n        if(shaderStack.length===0) throw \"Invalid movelview popMatrix!\";\n        shaderStack.pop();\n        currentShader = shaderStack[shaderStack.length-1];\n    };\n\n    // modelview matrix stack\n\n    this.pushMvMatrix=function()\n    {\n        var copy = mat4.create();\n        mat4.copy(copy,self.mvMatrix);\n        mvMatrixStack.push(copy);\n    };\n\n    this.popMvMatrix=function()\n    {\n        if(mvMatrixStack.length===0) throw \"Invalid movelview popMatrix!\";\n        self.mvMatrix = mvMatrixStack.pop();\n    };\n\n    // projection matrix stack\n\n    this.pushPMatrix=function()\n    {\n        var copy = mat4.create();\n        mat4.copy(copy,self.pMatrix);\n        pMatrixStack.push(copy);\n    };\n\n    this.popPMatrix=function()\n    {\n        if(pMatrixStack.length===0) throw \"Invalid projection popMatrix!\";\n        self.pMatrix = pMatrixStack.pop();\n    };\n\n\n};\n\ncgl=new CGL.State();\n\n","var CGL=CGL || {};\n\nCGL.Texture=function()\n{\n    var self=this;\n    this.tex = gl.createTexture();\n    this.width=0;\n    this.height=0;\n\n    // gl.bindTexture(gl.TEXTURE_2D, this.tex);\n    // gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([111, 111, 111, 255]));\n    // gl.bindTexture(gl.TEXTURE_2D, null);\n\n    this.bind=function(slot)\n    {\n        gl.activeTexture(gl.TEXTURE0+slot);\n        gl.bindTexture(gl.TEXTURE_2D, self.tex);\n    };\n\n    this.setSize=function(w,h)\n    {\n        self.width=w;\n        self.height=h;\n\n        gl.bindTexture(gl.TEXTURE_2D, self.tex);\n        \n        var arr=[];\n        arr.length=w*h*4;\n        // for(var x=0;x<w;x++)\n        // {\n        //     for(var y=0;y<h;y++)\n        //     {\n        //         // var index=x+y*w;\n        //         arr.push( parseInt( (x/w)*255,10) );\n        //         arr.push(0);\n        //         arr.push( parseInt((y/w)*255,10));\n        //         arr.push(255);\n        //     }\n        // }\n        var uarr=new Uint8Array(arr);\n\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, w, h, 0, gl.RGBA, gl.UNSIGNED_BYTE, uarr);\n\n        gl.bindTexture(gl.TEXTURE_2D, null);\n    };\n\n    this.initTexture=function(img)\n    {\n        self.width=img.width;\n        self.height=img.height;\n\n\n        gl.bindTexture(gl.TEXTURE_2D, self.tex);\n        // gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, self.image);\n\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\n        // non power of two:\n        // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n\n        gl.bindTexture(gl.TEXTURE_2D, null);\n    };\n\n    this.setSize(8,8);\n};\n\nCGL.Texture.load=function(url,finishedCallback)\n{\n    var texture=new CGL.Texture();\n    texture.image = new Image();\n    texture.image.onload = function ()\n    {\n        console.log(texture.image);\n        texture.initTexture(texture.image);\n        finishedCallback();\n    };\n    texture.image.src = url;\n    return texture;\n};\n\n// ---------------------------------------------------------------------------\n","var CGL=CGL || {};\n\nCGL.TextureEffect=function()\n{\n    var self=this;\n    var geom=new CGL.Geometry();\n\n    geom.vertices = [\n         1.0,  1.0,  0.0,\n        -1.0,  1.0,  0.0,\n         1.0, -1.0,  0.0,\n        -1.0, -1.0,  0.0\n    ];\n\n    geom.texCoords = [\n         1.0, 1.0,\n         0.0, 1.0,\n         1.0, 0.0,\n         0.0, 0.0\n    ];\n\n    geom.verticesIndices = [\n        0, 1, 2,\n        3, 1, 2\n    ];\n\n    var mesh=new CGL.Mesh(geom);\n\n    var textureSource=null;\n    var textureTarget=new CGL.Texture();\n\n    var frameBuf = GL.createFramebuffer();\n    var renderbuffer = GL.createRenderbuffer();\n\n    var switched=false;\n\n    this.startEffect=function()\n    {\n        switched=false;\n    };\n\n    this.setSourceTexture=function(tex)\n    {\n        if(tex===null)\n        {\n            textureSource=new CGL.Texture();\n            textureSource.setSize(16,16);\n        }\n        else\n        {\n            textureSource=tex;\n        }\n        console.log(textureSource.width,textureSource.height);\n        \n        textureTarget.setSize(textureSource.width,textureSource.height);\n\n        GL.bindFramebuffer(GL.FRAMEBUFFER, frameBuf);\n\n        GL.bindRenderbuffer(GL.RENDERBUFFER, renderbuffer);\n        GL.renderbufferStorage(GL.RENDERBUFFER, GL.DEPTH_COMPONENT16, textureSource.width,textureSource.height);\n        GL.framebufferTexture2D(GL.FRAMEBUFFER, GL.COLOR_ATTACHMENT0, GL.TEXTURE_2D, textureTarget.tex, 0);\n        GL.framebufferRenderbuffer(GL.FRAMEBUFFER, GL.DEPTH_ATTACHMENT, GL.RENDERBUFFER, renderbuffer);\n        GL.bindTexture(GL.TEXTURE_2D, null);\n        GL.bindRenderbuffer(GL.RENDERBUFFER, null);\n        GL.bindFramebuffer(GL.FRAMEBUFFER, null);\n\n        console.log(\n            self.getCurrentTargetTexture().height,\n            self.getCurrentSourceTexture().height\n            );\n    };\n\n\n    this.getCurrentTargetTexture=function()\n    {\n        if(switched)return textureSource;\n            else return textureTarget;\n    };\n\n    this.getCurrentSourceTexture=function()\n    {\n        if(switched)return textureTarget;\n            else return textureSource;\n    };\n\n    this.bind=function()\n    {\n        if(textureSource===null) throw 'no base texture set!';\n\n        // GL.bindFramebuffer(GL.FRAMEBUFFER, frameBuf);\n\n        cgl.pushMvMatrix();\n\n        // cgl.currentTextureEffect=effect;\n\n\n\n        GL.bindFramebuffer(GL.FRAMEBUFFER, frameBuf);\n        GL.framebufferTexture2D(GL.FRAMEBUFFER, GL.COLOR_ATTACHMENT0, GL.TEXTURE_2D, self.getCurrentTargetTexture().tex, 0);\n\n        cgl.pushPMatrix();\n        gl.viewport(0, 0, self.getCurrentTargetTexture().width,self.getCurrentTargetTexture().height);\n        mat4.perspective(cgl.pMatrix,45, self.getCurrentTargetTexture().width/self.getCurrentTargetTexture().height, 0.01, 1100.0);\n\n\n        cgl.pushPMatrix();\n        mat4.identity(cgl.pMatrix);\n\n        cgl.pushMvMatrix();\n        mat4.identity(cgl.mvMatrix);\n\n\n        GL.clearColor(0,1,0,1);\n        GL.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n    };\n\n    this.finish=function()\n    {\n        mesh.render(cgl.getShader());\n\n        cgl.popPMatrix();\n        cgl.popMvMatrix();\n\n        cgl.popPMatrix();\n\n        GL.bindFramebuffer(GL.FRAMEBUFFER, null);\n\n        cgl.popMvMatrix();\n        gl.viewport(0, 0, cgl.canvasWidth,cgl.canvasHeight);\n\n        switched=!switched;\n\n    };\n\n};","\nvar PORT_DIR_IN=0;\nvar PORT_DIR_OUT=1;\n\nvar OP_PORT_TYPE_VALUE =0;\nvar OP_PORT_TYPE_FUNCTION =1;\nvar OP_PORT_TYPE_OBJECT =2;\nvar OP_PORT_TYPE_TEXTURE =2;\n\nvar Ops = {};\n\n\nvar Op = function()\n{\n    this.objName='';\n    this.portsOut=[];\n    this.portsIn=[];\n    this.posts=[];\n    this.uiAttribs={};\n    this.name='unknown';\n    this.id=generateUUID();\n\n    this.getName= function()\n    {\n        return this.name;\n    };\n    this.addOutPort=function(p)\n    {\n        p.direction=PORT_DIR_OUT;\n        p.parent=this;\n        this.portsOut.push(p);\n        return p;\n    };\n    this.addInPort=function(p)\n    {\n        p.direction=PORT_DIR_IN;\n        p.parent=this;\n        this.portsIn.push(p);\n        return p;\n    };\n    this.execute=function()\n    {\n        this.exec();\n    };\n    this.printInfo=function()\n    {\n        for(var i=0;i<this.portsIn.length;i++)\n            console.log('in: '+this.portsIn[i].getName());\n\n        for(var ipo in this.portsOut)\n            console.log('out: '+this.portsOut[ipo].getName());\n    };\n\n    this.removeLinks=function()\n    {\n        for(var i=0;i<this.portsIn.length;i++)\n            this.portsIn[i].removeLinks();\n        for(var ipo in this.portsOut)\n            this.portsOut[ipo].removeLinks();\n    };\n\n    this.getPort=function(name)\n    {\n        for(var ipi in this.portsIn)\n            if(this.portsIn[ipi].getName()==name)return this.portsIn[ipi];\n\n        for(var ipo in this.portsOut)\n            if(this.portsOut[ipo].getName()==name)return this.portsOut[ipo];\n    };\n\n    this.findFittingPort=function(otherPort)\n    {\n        for(var ipo in this.portsOut)\n        {\n            console.log('.');\n            if(Link.canLink(otherPort,this.portsOut[ipo]))return this.portsOut[ipo];\n        }\n    \n        for(var ipi in this.portsIn)\n        {\n            console.log('.');\n            if(Link.canLink(otherPort,this.portsIn[ipi]))return this.portsIn[ipi];\n        }\n\n    };\n\n\n    this.getSerialized=function()\n    {\n        var op={};\n        op.name=this.getName();\n        op.objName=this.objName;\n        op.id=this.id;\n        op.uiAttribs=this.uiAttribs;\n\n        op.portsIn=[];\n        op.portsOut=[];\n\n        for(var i=0;i<this.portsIn.length;i++)\n            op.portsIn.push( this.portsIn[i].getSerialized() );\n\n        for(var ipo in this.portsOut)\n            op.portsOut.push( this.portsOut[ipo].getSerialized() );\n\n        return op;\n    };\n\n    this.getPortByName=function(name)\n    {\n        for(var i=0;i<this.portsIn.length;i++)\n            if(this.portsIn[i].name==name)return this.portsIn[i];\n        \n        for(var ipo in this.portsOut)\n            if(this.portsOut[ipo].name==name)return this.portsOut[ipo];\n    };\n\n};\n\n// ------------------------------------------------------------------------------------\n\nvar Port=function(parent,name,type)\n{\n    var self=this;\n    this.direction=PORT_DIR_IN;\n    this.id=generateUUID();\n    this.parent=parent;\n    this.links=[];\n    this.value=null;\n    this.name=name;\n    this.type=type || OP_PORT_TYPE_VALUE;\n    var valueBeforeLink=null;\n\n    this.__defineGetter__(\"val\", function()\n    {\n        return this.value;\n    });\n\n    this.__defineSetter__(\"val\", function(v)\n    {\n        this.setValue(v);\n    });\n\n    this.getType=function(){ return this.type; };\n    this.isLinked=function(){ return this.links.length>0; };\n    this.onValueChanged=function(){};\n    this.onTriggered=function(){};\n\n    this.setValue=function(v)\n    {\n        if(v!=this.value || this.type==OP_PORT_TYPE_TEXTURE)\n        {\n            this.value=v;\n            this.onValueChanged();\n\n            for(var i in this.links)\n            {\n                this.links[i].setValue();\n            }\n        }\n    };\n\n    this.getName= function()\n    {\n        return this.name;\n    };\n\n    this.addLink=function(l)\n    {\n        valueBeforeLink=self.value;\n        this.links.push(l);\n    };\n\n    this.removeLinkTo=function(p2)\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i].portIn==p2 || this.links[i].portOut==p2)\n            {\n                this.links[i].remove();\n            }\n        }\n\n    };\n\n    this.isLinkedTo=function(p2)\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i].portIn==p2 || this.links[i].portOut==p2)return true;\n        }\n        return false;\n    };\n\n    this.call=function()\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i].portIn !=this)this.links[i].portIn.onTriggered();\n            if(this.links[i].portOut!=this)this.links[i].portOut.onTriggered();\n        }\n    };\n\n\n    this.execute=function()\n    {\n        console.log('### execute port: '+this.getName() , this.goals.length);\n    };\n\n    this.getTypeString=function()\n    {\n        if(this.type==OP_PORT_TYPE_VALUE)return 'value';\n        if(this.type==OP_PORT_TYPE_FUNCTION)return 'function';\n        if(this.type==OP_PORT_TYPE_TEXTURE)return 'texture';\n    };\n\n    this.getSerialized=function()\n    {\n        var obj={};\n        obj.name=this.getName();\n        obj.value=this.value;\n\n        if(this.direction==PORT_DIR_IN && this.links.length>0)\n        {\n            obj.links=[];\n            for(var i in this.links)\n            {\n                obj.links.push( this.links[i].getSerialized() );\n            }\n        }\n        return obj;\n    };\n\n    this.removeLinks=function()\n    {\n        while(this.links.length>0)\n        {\n            this.links[0].remove();\n        }\n    };\n\n    this.removeLink=function(link)\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i]==link)this.links.splice( i, 1 );\n        }\n        self.setValue(valueBeforeLink);\n    };\n};\n\n\n\n// ---------------------------------------------------------------------------\n\nvar Link = function(scene)\n{\n    this.portIn=null;\n    this.portOut=null;\n    this.scene=scene;\n\n    this.setValue=function()\n    {\n        if(this.portIn.val!=this.portOut.val)\n            this.portIn.val=this.portOut.val;\n    };\n\n    this.getOtherPort=function(p)\n    {\n        if(p==this.portIn)return this.portOut;\n        return this.portIn;\n    };\n\n    this.remove=function()\n    {\n        this.portIn.removeLink(this);\n        this.portOut.removeLink(this);\n        this.scene.onUnLink(this.portIn,this.portOut);\n        this.portIn=null;\n        this.portOut=null;\n        this.scene=null;\n    };\n\n\n    this.link=function(p1,p2)\n    {\n        if(!Link.canLink(p1,p2))\n        {\n            console.log('cannot link ports!');\n            return false;\n        }\n        if(p1.direction==PORT_DIR_IN)\n        {\n            this.portIn=p1;\n            this.portOut=p2;\n        }\n        else\n        {\n            this.portIn=p2;\n            this.portOut=p1;\n        }\n\n        p1.addLink(this);\n        p2.addLink(this);\n        this.setValue();\n    };\n\n    this.getSerialized=function()\n    {\n        var obj={};\n\n        obj.portIn=this.portIn.getName();\n        obj.portOut=this.portOut.getName();\n        obj.objIn=this.portIn.parent.id;\n        obj.objOut=this.portOut.parent.id;\n\n        return obj;\n    };\n};\n\n\nLink.canLinkText=function(p1,p2)\n{\n    if(!p1)return 'can not link: port 1 invalid';\n    if(!p2)return 'can not link: port 2 invalid';\n    if(p1.direction==PORT_DIR_IN && p1.links.length>0)return 'input port already busy';\n    if(p2.direction==PORT_DIR_IN && p2.links.length>0)return 'input port already busy';\n    if(p1.isLinkedTo(p2))return 'ports already linked';\n    if(p1.direction==p2.direction)return 'can not link: same direction';\n    if(p1.type!=p2.type)return 'can not link: different type';\n    if(p1.parent==p2.parent)return 'can not link: same op';\n    return 'can link';\n};\n\nLink.canLink=function(p1,p2)\n{\n    if(!p1)return false;\n    if(!p2)return false;\n    if(p1.direction==PORT_DIR_IN && p1.links.length>0)return false;\n    if(p2.direction==PORT_DIR_IN && p2.links.length>0)return false;\n    if(p1.isLinkedTo(p2))return false;\n    if(p1.direction==p2.direction)return false;\n    if(p1.type!=p2.type)return false;\n    if(p1.parent==p2.parent)return false;\n\n    return true;\n};\n\n\n// ------------------------------------------------------------------------------------\n\n\nvar Scene = function()\n{\n    var self=this;\n    this.ops=[];\n    this.timer=new Timer();\n    this.animFrameOps=[];\n    \n\n    this.clear=function()\n    {\n        this.timer=new Timer();\n        while(this.ops.length>0)\n        {\n            this.deleteOp(this.ops[0].id);\n        }\n    };\n\n    this.addOp=function(objName,uiAttribs)\n    {\n        var op=eval('new '+objName+'();');\n        op.objName=objName;\n        op.uiAttribs=uiAttribs;\n\n        if(op.hasOwnProperty('onAnimFrame')) this.animFrameOps.push(op);\n\n        this.ops.push(op);\n        if(this.onAdd)this.onAdd(op);\n        return op;\n    };\n\n    this.deleteOp=function(opid,tryRelink)\n    {\n\n        for(var i in this.ops)\n        {\n            if(this.ops[i].id==opid)\n            {\n                var op=this.ops[i];\n                var reLinkP1=null;\n                var reLinkP2=null;\n\n                if(op)\n                {\n                    if(tryRelink)\n                    {\n                        if(this.ops[i].portsIn[0].isLinked() && this.ops[i].portsOut[0].isLinked())\n                        {\n                            if(this.ops[i].portsIn[0].getType()==this.ops[i].portsOut[0].getType())\n                            {\n                                reLinkP1=this.ops[i].portsIn[0].links[0].getOtherPort(this.ops[i].portsIn[0]);\n                                reLinkP2=this.ops[i].portsOut[0].links[0].getOtherPort(this.ops[i].portsOut[0]);\n                            }\n                        }\n                    }\n\n                    this.ops[i].removeLinks();\n                    this.onDelete(this.ops[i]);\n                    this.ops.splice( i, 1 );\n\n                    if(reLinkP1!==null && reLinkP2!==null)\n                    {\n                        self.link(\n                            reLinkP1.parent,\n                            reLinkP1.getName(),\n                            reLinkP2.parent,\n                            reLinkP2.getName()\n                            );\n                    }\n                }\n            }\n\n        }\n\n\n    };\n\n    this.exec=function()\n    {\n        requestAnimationFrame(self.exec);\n        self.timer.update();\n\n        var time=self.timer.getTime();\n\n        for(var i in self.animFrameOps)\n        {\n            self.animFrameOps[i].onAnimFrame(time);\n        }\n\n    };\n\n    this.link=function(op1,port1Name,op2,port2Name)\n    {\n        var port1=op1.getPort(port1Name);\n        var port2=op2.getPort(port2Name);\n\n        if(Link.canLink(port1,port2))\n        {\n            var link=new Link(this);\n            link.link(port1,port2);\n            this.onLink(port1,port2);\n            return link;\n        }\n        else\n        {\n            console.log(Link.canLinkText(port1,port2));\n        }\n    };\n    this.onAdd=function(op){};\n    this.onDelete=function(op){};\n    this.onLink=function(p1,p2){};\n    this.onUnLink=function(p1,p2){};\n    this.serialize=function()\n    {\n        var obj={};\n\n        obj.ops=[];\n        for(var i in this.ops)\n        {\n            obj.ops.push( this.ops[i].getSerialized() );\n        }\n        \n        return JSON.stringify(obj);\n    };\n    this.getOpById=function(opid)\n    {\n        for(var i in this.ops)\n        {\n            if(this.ops[i].id==opid)return this.ops[i];\n        }\n\n    };\n    this.deSerialize=function(obj)\n    {\n        if (typeof obj === \"string\") obj=JSON.parse(obj);\n        var self=this;\n\n        function addLink(opinid,opoutid,inName,outName)\n        {\n            var found=false;\n            if(!found)\n            {\n                self.link(\n                    self.getOpById(opinid),\n                    inName,\n                    self.getOpById(opoutid),\n                    outName\n                    );\n            }\n        }\n\n        // add ops...\n        for(var iop in obj.ops)\n        {\n            var op=this.addOp(obj.ops[iop].objName,obj.ops[iop].uiAttribs);\n            op.id=obj.ops[iop].id;\n\n            for(var ipi in obj.ops[iop].portsIn)\n            {\n                var port=op.getPortByName(obj.ops[iop].portsIn[ipi].name);\n                if(port && port.type!=OP_PORT_TYPE_TEXTURE)port.val=obj.ops[iop].portsIn[ipi].value;\n            }\n\n            for(var ipo in obj.ops[iop].portsOut)\n            {\n                var port2=op.getPortByName(obj.ops[iop].portsOut[ipo].name);\n                if(port2&& port2.type!=OP_PORT_TYPE_TEXTURE)port2.val=obj.ops[iop].portsOut[ipo].value;\n            }\n\n\n            // op.uiAttribs=obj.ops[iop].uiAttribs;\n        }\n\n        // create links...\n        for(iop in obj.ops)\n        {\n            for(var ipi2 in obj.ops[iop].portsIn)\n            {\n\n                for(var ili in obj.ops[iop].portsIn[ipi2].links)\n                {\n                    addLink(\n                        obj.ops[iop].portsIn[ipi2].links[ili].objIn,\n                        obj.ops[iop].portsIn[ipi2].links[ili].objOut,\n                        obj.ops[iop].portsIn[ipi2].links[ili].portIn,\n                        obj.ops[iop].portsIn[ipi2].links[ili].portOut);\n                }\n            }\n\n\n            // for(var ipo in obj.ops[iop].portsOut)\n            // {\n            //     for(var ili in obj.ops[iop].portsOut[ipo].links)\n            //     {\n            //         addLink(\n            //             obj.ops[iop].portsOut[ipo].links[ili].objIn,\n            //             obj.ops[iop].portsOut[ipo].links[ili].objOut,\n            //             obj.ops[iop].portsOut[ipo].links[ili].portIn,\n            //             obj.ops[iop].portsOut[ipo].links[ili].portOut);\n\n            //     }\n            // }\n        }\n\n\n        for(var i in this.ops)\n        {\n            this.ops[i].id=generateUUID();\n        }\n\n\n\n    };\n\n    this.exec();\n\n};\n\n\n\n\n","\n\nOps.Devices= Ops.Devices || {};\n\nOps.Devices.GamePad = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='GamePad';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.numPads=this.addOutPort(new Port(this,\"numPads\"));\n    this.axis1=this.addOutPort(new Port(this,\"axis1\"));\n    this.axis2=this.addOutPort(new Port(this,\"axis2\"));\n    this.axis3=this.addOutPort(new Port(this,\"axis3\"));\n    this.axis4=this.addOutPort(new Port(this,\"axis4\"));\n    this.button0=this.addOutPort(new Port(this,\"button0\"));\n    this.button1=this.addOutPort(new Port(this,\"button1\"));\n    this.button2=this.addOutPort(new Port(this,\"button2\"));\n    this.button3=this.addOutPort(new Port(this,\"button3\"));\n    this.button4=this.addOutPort(new Port(this,\"button4\"));\n\n    var self=this;\n    var startTime=Date.now()/1000.0;\n\n    this.exe.onTriggered=function()\n    {\n        var gamePads=navigator.getGamepads();\n        var count=0;\n\n        for(var gp in gamePads)\n        {\n            if(gamePads[gp].axes)\n            {\n                self.axis1.val=gamePads[gp].axes[0];\n                self.axis2.val=gamePads[gp].axes[1];\n                self.axis3.val=gamePads[gp].axes[2];\n                self.axis4.val=gamePads[gp].axes[3];\n\n                self.button0.val=gamePads[gp].buttons[0].pressed;\n                self.button0.val=gamePads[gp].buttons[1].pressed;\n                self.button2.val=gamePads[gp].buttons[2].pressed;\n                self.button3.val=gamePads[gp].buttons[3].pressed;\n                self.button4.val=gamePads[gp].buttons[4].pressed;\n\n                count++;\n            }\n        }\n\n        self.numPads.val=count;\n    };\n\n    this.exe.onTriggered();\n\n};\n\nOps.Devices.GamePad.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Devices.LeapMotion = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='LeapMotion';\n\n    this.transX=this.addOutPort(new Port(this,\"translationX\"));\n    this.transY=this.addOutPort(new Port(this,\"translationY\"));\n    this.transZ=this.addOutPort(new Port(this,\"translationZ\"));\n\n    this.finger0X=this.addOutPort(new Port(this,\"finger0X\"));\n    this.finger0Y=this.addOutPort(new Port(this,\"finger0Y\"));\n    this.finger0Z=this.addOutPort(new Port(this,\"finger0Z\"));\n\n    Leap.loop(function (frame)\n    {\n        self.transX.val=frame._translation[0];\n        self.transY.val=frame._translation[1];\n        self.transZ.val=frame._translation[2];\n\n        if(frame.fingers.length>0)\n        {\n            self.finger0X.val=frame.fingers[0].tipPosition[0];\n            self.finger0Y.val=frame.fingers[0].tipPosition[1];\n            self.finger0Z.val=frame.fingers[0].tipPosition[2];\n        }\n    });\n};\n\nOps.Devices.LeapMotion.prototype = new Op();\n\n// --------------------------------------------------------------------------\n","\nOps.Gl=Ops.Gl || {};\nOps.Gl.TextureEffects=Ops.Gl.TextureEffects || {};\n\n// ---------------------------------------------------------------------------------------------\n\nOps.Gl.TextureEffects.TextureEffect = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='texture effect';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.texOut=this.addOutPort(new Port(this,\"texture_out\",OP_PORT_TYPE_TEXTURE));\n\n    this.tex=this.addInPort(new Port(this,\"texture_in\",OP_PORT_TYPE_TEXTURE));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var ready=false;\n    var effect=new CGL.TextureEffect();\n\n    cgl.currentTextureEffect=effect;\n\n    this.tex.onValueChanged=function()\n    {\n        effect.setSourceTexture(self.tex.val);\n        self.texOut.val=cgl.currentTextureEffect.getCurrentSourceTexture();\n        ready=true;\n    };\n\n    this.render.onTriggered=function()\n    {\n        if(!ready)return;\n        if(!self.tex.val) return;\n        cgl.currentTextureEffect=effect;\n\n        effect.startEffect();\n        self.trigger.call();\n        self.texOut.val=cgl.currentTextureEffect.getCurrentSourceTexture();\n    };\n};\n\nOps.Gl.TextureEffects.TextureEffect.prototype = new Op();\n\n// ---------------------------------------------------------------------------------------------\n\nOps.Gl.TextureEffects.Invert = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Invert';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var shader=new CGL.Shader();\n\n    var srcFrag=''\n        .endl()+'precision highp float;'\n        .endl()+'#ifdef HAS_TEXTURES'\n        .endl()+'  varying vec2 texCoord;'\n        .endl()+'  uniform sampler2D tex;'\n        .endl()+'#endif'\n        .endl()+''\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   vec4 col=vec4(1.0,0.0,0.0,1.0);'\n        .endl()+'   #ifdef HAS_TEXTURES'\n        .endl()+'       col=texture2D(tex,texCoord);'\n        .endl()+'       col.rgb=1.0-col.rgb;'\n        .endl()+'   #endif'\n        .endl()+'   gl_FragColor = col;'\n        .endl()+'}\\n';\n\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n    var textureUniform=new CGL.Uniform(shader,'t','tex',0);\n\n\n    this.render.onTriggered=function()\n    {\n        if(!cgl.currentTextureEffect)return;\n        \n        cgl.setShader(shader);\n        cgl.currentTextureEffect.bind();\n\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, cgl.currentTextureEffect.getCurrentSourceTexture().tex );\n\n        cgl.currentTextureEffect.finish();\n        cgl.setPreviousShader();\n\n        self.trigger.call();\n    };\n};\n\nOps.Gl.TextureEffects.Invert.prototype = new Op();\n\n// ---------------------------------------------------------------------------------------------\n\nOps.Gl.TextureEffects.Desaturate = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Desaturate';\n\n    this.amount=this.addInPort(new Port(this,\"amount\"));\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var shader=new CGL.Shader();\n\n    var srcFrag=''\n        .endl()+'precision highp float;'\n        .endl()+'#ifdef HAS_TEXTURES'\n        .endl()+'  varying vec2 texCoord;'\n        .endl()+'  uniform sampler2D tex;'\n        .endl()+'#endif'\n        .endl()+'uniform float amount;'\n        .endl()+''\n        .endl()+''\n        .endl()+'vec3 desaturate(vec3 color, float amount)'\n        .endl()+'{'\n        .endl()+'   vec3 gray = vec3(dot(vec3(0.2126,0.7152,0.0722), color));'\n        .endl()+'   return vec3(mix(color, gray, amount));'\n        .endl()+'}'\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   vec4 col=vec4(1.0,0.0,0.0,1.0);'\n        .endl()+'   #ifdef HAS_TEXTURES'\n        .endl()+'       col=texture2D(tex,texCoord);'\n        .endl()+'       col.rgb=desaturate(col.rgb,amount);'\n        .endl()+'   #endif'\n        .endl()+'   gl_FragColor = col;'\n        .endl()+'}';\n\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n    var textureUniform=new CGL.Uniform(shader,'t','tex',0);\n    var amountUniform=new CGL.Uniform(shader,'f','amount',1.0);\n\n    this.amount.onValueChanged=function()\n    {\n        amountUniform.setValue(self.amount.val);\n    };\n\n    this.render.onTriggered=function()\n    {\n        if(!cgl.currentTextureEffect)return;\n        \n        cgl.setShader(shader);\n        cgl.currentTextureEffect.bind();\n\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, cgl.currentTextureEffect.getCurrentSourceTexture().tex );\n\n        cgl.currentTextureEffect.finish();\n        cgl.setPreviousShader();\n\n        self.trigger.call();\n    };\n};\n\nOps.Gl.TextureEffects.Desaturate.prototype = new Op();\n\n// ---------------------------------------------------------------------------------------------\n\nOps.Gl.TextureEffects.RgbMultiply = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='RgbMultiply';\n\n    this.r=this.addInPort(new Port(this,\"r\"));\n    this.g=this.addInPort(new Port(this,\"g\"));\n    this.b=this.addInPort(new Port(this,\"b\"));\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var shader=new CGL.Shader();\n\n    var srcFrag=''\n        .endl()+'precision highp float;'\n        .endl()+'#ifdef HAS_TEXTURES'\n        .endl()+'  varying vec2 texCoord;'\n        .endl()+'  uniform sampler2D tex;'\n        .endl()+'#endif'\n        .endl()+'uniform float r;'\n        .endl()+'uniform float g;'\n        .endl()+'uniform float b;'\n        .endl()+''\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   vec4 col=vec4(1.0,0.0,0.0,1.0);'\n        .endl()+'   #ifdef HAS_TEXTURES'\n        .endl()+'       col=texture2D(tex,texCoord);'\n        .endl()+'       col.r*=r;'\n        .endl()+'       col.g*=g;'\n        .endl()+'       col.b*=b;'\n        .endl()+'   #endif'\n        .endl()+'   gl_FragColor = col;'\n        .endl()+'}';\n\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n    var textureUniform=new CGL.Uniform(shader,'t','tex',0);\n    var uniformR=new CGL.Uniform(shader,'f','r',1.0);\n    var uniformG=new CGL.Uniform(shader,'f','g',1.0);\n    var uniformB=new CGL.Uniform(shader,'f','b',1.0);\n\n\n    this.r.onValueChanged=function()\n    {\n        uniformR.setValue(self.r.val);\n    };\n\n    this.g.onValueChanged=function()\n    {\n        uniformG.setValue(self.g.val);\n    };\n\n    this.b.onValueChanged=function()\n    {\n        uniformB.setValue(self.b.val);\n    };\n\n    this.render.onTriggered=function()\n    {\n        if(!cgl.currentTextureEffect)return;\n        \n        cgl.setShader(shader);\n        cgl.currentTextureEffect.bind();\n\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, cgl.currentTextureEffect.getCurrentSourceTexture().tex );\n\n        cgl.currentTextureEffect.finish();\n        cgl.setPreviousShader();\n\n        self.trigger.call();\n    };\n};\n\nOps.Gl.TextureEffects.RgbMultiply.prototype = new Op();\n\n// ---------------------------------------------------------------------------------------------\n\nOps.Gl.TextureEffects.Vignette = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Vignette';\n\n    this.lensRadius1=this.addInPort(new Port(this,\"lensRadius1\"));\n    this.lensRadius2=this.addInPort(new Port(this,\"lensRadius2\"));\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var shader=new CGL.Shader();\n\n    var srcFrag=''\n        .endl()+'precision highp float;'\n        .endl()+'#ifdef HAS_TEXTURES'\n        .endl()+'  varying vec2 texCoord;'\n        .endl()+'  uniform sampler2D tex;'\n        .endl()+'#endif'\n        .endl()+'uniform float lensRadius1;'\n        .endl()+'uniform float lensRadius2;'\n        .endl()+''\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   vec4 col=vec4(1.0,0.0,0.0,1.0);'\n        .endl()+'   #ifdef HAS_TEXTURES'\n        .endl()+'       col=texture2D(tex,texCoord);'\n        .endl()+'       float dist = distance(texCoord, vec2(0.5,0.5));'\n        .endl()+'       col.rgb *= smoothstep(lensRadius1, lensRadius2, dist);'\n        .endl()+'   #endif'\n        .endl()+'   gl_FragColor = col;'\n        .endl()+'}';\n\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n    var textureUniform=new CGL.Uniform(shader,'t','tex',0);\n    var uniLensRadius1=new CGL.Uniform(shader,'f','lensRadius1',0.4);\n    var uniLensRadius2=new CGL.Uniform(shader,'f','lensRadius2',0.3);\n\n    this.lensRadius1.onValueChanged=function()\n    {\n        uniLensRadius1.setValue(self.lensRadius1.val);\n    };\n\n    this.lensRadius2.onValueChanged=function()\n    {\n        uniLensRadius2.setValue(self.lensRadius2.val);\n    };\n\n    this.lensRadius1.val=0.8;\n    this.lensRadius2.val=0.4;\n\n    this.render.onTriggered=function()\n    {\n        if(!cgl.currentTextureEffect)return;\n        \n        cgl.setShader(shader);\n        cgl.currentTextureEffect.bind();\n\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, cgl.currentTextureEffect.getCurrentSourceTexture().tex );\n\n        cgl.currentTextureEffect.finish();\n        cgl.setPreviousShader();\n\n        self.trigger.call();\n    };\n};\n\nOps.Gl.TextureEffects.Vignette.prototype = new Op();\n\n// ---------------------------------------------------------------------------------------------\n\nOps.Gl.TextureEffects.Blur = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Blur';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var shader=new CGL.Shader();\n\n    var srcFrag=''\n        .endl()+'precision highp float;'\n        .endl()+'#ifdef HAS_TEXTURES'\n        .endl()+'  varying vec2 texCoord;'\n        .endl()+'  uniform sampler2D tex;'\n        .endl()+'  uniform float dirX;'\n        .endl()+'  uniform float dirY;'\n        .endl()+'#endif'\n        .endl()+''\n        .endl()+'vec4 blur9(sampler2D texture, vec2 uv, vec2 red, vec2 dir)'\n        .endl()+'{'\n        .endl()+'   vec4 color = vec4(0.0);'\n        .endl()+'   vec2 offset1 = vec2(1.3846153846) * dir;'\n        .endl()+'   vec2 offset2 = vec2(3.2307692308) * dir;'\n        .endl()+'   color += texture2D(texture, uv) * 0.2270270270;'\n        .endl()+'   color += texture2D(texture, uv + (offset1 / red)) * 0.3162162162;'\n        .endl()+'   color += texture2D(texture, uv - (offset1 / red)) * 0.3162162162;'\n        .endl()+'   color += texture2D(texture, uv + (offset2 / red)) * 0.0702702703;'\n        .endl()+'   color += texture2D(texture, uv - (offset2 / red)) * 0.0702702703;'\n        .endl()+'   return color;'\n        .endl()+'}'\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   vec4 col=vec4(1.0,0.0,0.0,1.0);'\n        .endl()+'   #ifdef HAS_TEXTURES'\n        .endl()+'       col=blur9(tex,texCoord,vec2(512.0,512.0),vec2(dirX,dirY));'\n        // .endl()+ '       col=blur9(tex,texCoord,vec2(512.0,512.0),vec2(dirX*1.4,dirY*1.4));'\n        .endl()+'   #endif'\n        .endl()+'   gl_FragColor = col;'\n        .endl()+'}\\n';\n\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n    var textureUniform=new CGL.Uniform(shader,'t','tex',0);\n    var uniDirX=new CGL.Uniform(shader,'f','dirX',0);\n    var uniDirY=new CGL.Uniform(shader,'f','dirY',0);\n\n    this.render.onTriggered=function()\n    {\n        if(!cgl.currentTextureEffect)return;\n        cgl.setShader(shader);\n\n        // first pass\n\n        cgl.currentTextureEffect.bind();\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, cgl.currentTextureEffect.getCurrentSourceTexture().tex );\n\n        uniDirX.setValue(0.0);\n        uniDirY.setValue(1.0);\n\n        cgl.currentTextureEffect.finish();\n\n        // second pass\n\n        cgl.currentTextureEffect.bind();\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, cgl.currentTextureEffect.getCurrentSourceTexture().tex );\n\n        uniDirX.setValue(1.0);\n        uniDirY.setValue(0.0);\n\n        cgl.currentTextureEffect.finish();\n        \n        cgl.setPreviousShader();\n\n        self.trigger.call();\n    };\n};\n\nOps.Gl.TextureEffects.Blur.prototype = new Op();\n\n\n","\n//http://k3d.ivank.net/K3D.js\n//http://fhtr.blogspot.de/2009/12/3d-models-and-parsing-binary-data-with.html\n//https://github.com/gpjt/webgl-lessons/blob/master/lesson05/index.html\n\nOps.Gl=Ops.Gl || {};\n\n\nvar GL=null;\n\nOps.Gl.Renderer = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='render';\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var initTranslate=vec3.create();\n    vec3.set(initTranslate, 0,0,-2);\n\n    this.onAnimFrame=function(time)\n    {\n        cgl.canvasWidth=self.canvas.clientWidth;\n        cgl.canvasHeight=self.canvas.clientHeight;\n\n        gl.enable(gl.DEPTH_TEST);\n        GL.clearColor(0,0,0,1);\n        GL.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n        gl.viewport(0,0,self.canvas.clientWidth,self.canvas.clientHeight);\n        mat4.perspective(cgl.pMatrix,45, cgl.canvasWidth/cgl.canvasHeight, 0.01, 1100.0);\n\n        cgl.pushPMatrix();\n        cgl.pushMvMatrix();\n\n        mat4.identity(cgl.mvMatrix);\n        mat4.translate(cgl.mvMatrix,cgl.mvMatrix, initTranslate);\n\n        GL.enable(GL.BLEND);\n        GL.blendFunc(GL.SRC_ALPHA,GL.ONE_MINUS_SRC_ALPHA);\n\n        cgl.beginFrame();\n\n        self.trigger.call();\n\n        cgl.popMvMatrix();\n        cgl.popPMatrix();\n        cgl.endFrame();\n    };\n\n    this.canvas = document.getElementById(\"glcanvas\");\n    GL = this.canvas.getContext(\"experimental-webgl\");\n    gl = this.canvas.getContext(\"experimental-webgl\");\n\n};\n\nOps.Gl.Renderer.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.ClearColor = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='ClearColor';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.r=this.addInPort(new Port(this,\"r\"));\n    this.g=this.addInPort(new Port(this,\"g\"));\n    this.b=this.addInPort(new Port(this,\"b\"));\n\n    this.r.val=0.3;\n    this.g.val=0.3;\n    this.b.val=0.3;\n    this.render.onTriggered=function()\n    {\n        GL.clearColor(self.r.val,self.g.val,self.b.val,1);\n        GL.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n\n        self.trigger.call();\n    };\n};\n\nOps.Gl.ClearColor.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.ClearDepth = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='ClearDepth';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        GL.clear(GL.DEPTH_BUFFER_BIT);\n        self.trigger.call();\n    };\n};\n\nOps.Gl.ClearDepth.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n    \nOps.Gl.TextureEmpty = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='texture empty';\n    this.width=this.addInPort(new Port(this,\"width\",OP_PORT_TYPE_VALUE));\n    this.height=this.addInPort(new Port(this,\"height\",OP_PORT_TYPE_VALUE));\n\n    this.textureOut=this.addOutPort(new Port(this,\"texture\",OP_PORT_TYPE_TEXTURE));\n    this.tex=new CGL.Texture();\n    \n    var sizeChanged=function()\n    {\n        self.tex.setSize(self.width.val,self.height.val);\n        self.textureOut.val=self.tex;\n    };\n\n    this.width.onValueChanged=sizeChanged;\n    this.height.onValueChanged=sizeChanged;\n\n    this.width.val=8;\n    this.height.val=8;\n};\n\nOps.Gl.TextureEmpty.prototype = new Op();\n\n// --------------------------------------------------------------------------\n    \nOps.Gl.Texture = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='texture';\n    this.filename=this.addInPort(new Port(this,\"file\",OP_PORT_TYPE_VALUE));\n    this.textureOut=this.addOutPort(new Port(this,\"texture\",OP_PORT_TYPE_TEXTURE));\n    \n    this.filename.onValueChanged=function()\n    {\n        console.log('load texture...');\n        self.tex=CGL.Texture.load(self.filename.val,function()\n            {\n                console.log('tex load FINISHED!!!');\n\n                self.textureOut.val=self.tex;\n            });\n        self.textureOut.val=self.tex;\n\n    };\n\n    this.filename.val='assets/skull.png';\n};\n\nOps.Gl.Texture.prototype = new Op();\n\n// --------------------------------------------------------------------------\nOps.Gl.Meshes=Ops.Gl.Meshes || {};\nOps.Gl.Meshes.Plotter = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Plotter';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.v=this.addInPort(new Port(this,\"value\"));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        gl.vertexAttribPointer(cgl.getShader().getAttrVertexPos(),self.buffer.itemSize, gl.FLOAT, false, 0, 0);\n        cgl.getShader().bind();\n        gl.bindBuffer(gl.ARRAY_BUFFER, self.buffer);\n        gl.drawArrays(gl.LINE_STRIP, 0, self.buffer.numItems);\n\n        self.trigger.call();\n    };\n\n    this.buffer = gl.createBuffer();\n    \n    var num=50;\n    this.vertices = [];\n    for(var i=0;i<num;i++)\n    {\n        this.vertices.push(1/num*i);\n        this.vertices.push(Math.random()-0.5);\n        this.vertices.push(0);\n    }\n\n    function bufferData()\n    {\n        gl.lineWidth(4);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, self.buffer);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(self.vertices), gl.STATIC_DRAW);\n        self.buffer.itemSize = 3;\n        self.buffer.numItems = num;\n    }\n    bufferData();\n\n    this.v.onValueChanged=function()\n    {\n        self.vertices.splice(0,3);\n        self.vertices.push(1);\n        self.vertices.push(self.v.val);\n        self.vertices.push(0);\n\n        for(var i=0;i<num*3;i+=3)\n        {\n            self.vertices[i]=1/num*i;\n        }\n\n        bufferData();\n    };\n};\n\nOps.Gl.Meshes.Plotter.prototype = new Op();\n\n// ----------------------------------------------------------------\n\n\nOps.Gl.Shader={};\n\nOps.Gl.Shader.BasicMaterial = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='BasicMaterial';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.doRender=function()\n    {\n        cgl.setShader(shader);\n\n        if(self.texture.val)\n        {\n            gl.activeTexture(gl.TEXTURE0);\n            gl.bindTexture(gl.TEXTURE_2D, self.texture.val.tex);\n        }\n\n        self.trigger.call();\n\n        cgl.setPreviousShader();\n    };\n\n    var srcFrag=''+\n        'precision highp float;\\n'+\n        '#ifdef HAS_TEXTURES\\n'+\n        '  varying vec2 texCoord;\\n'+\n        '  uniform sampler2D tex;\\n'+\n        '#endif\\n'+\n        'uniform float r;\\n'+\n        'uniform float g;\\n'+\n        'uniform float b;\\n'+\n        'uniform float a;\\n'+\n        '\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        'vec4 col=vec4(r,g,b,a);\\n'+\n        '#ifdef HAS_TEXTURES\\n'+\n        '   col=texture2D(tex,texCoord);\\n'+\n        'col.a*=a;'.endl()+\n        '#endif\\n'+\n        'gl_FragColor = col;\\n'+\n        '}\\n';\n\n\n    var shader=new CGL.Shader();\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n\n    this.r=this.addInPort(new Port(this,\"r\"));\n    this.r.onValueChanged=function()\n    {\n        if(!self.r.uniform) self.r.uniform=new CGL.Uniform(shader,'f','r',self.r.val);\n        else self.r.uniform.setValue(self.r.val);\n    };\n\n    this.g=this.addInPort(new Port(this,\"g\"));\n    this.g.onValueChanged=function()\n    {\n        if(!self.g.uniform) self.g.uniform=new CGL.Uniform(shader,'f','g',self.g.val);\n        else self.g.uniform.setValue(self.g.val);\n    };\n\n    this.b=this.addInPort(new Port(this,\"b\"));\n    this.b.onValueChanged=function()\n    {\n        if(!self.b.uniform) self.b.uniform=new CGL.Uniform(shader,'f','b',self.b.val);\n        else self.b.uniform.setValue(self.b.val);\n    };\n\n    this.a=this.addInPort(new Port(this,\"a\"));\n    this.a.onValueChanged=function()\n    {\n        if(!self.a.uniform) self.a.uniform=new CGL.Uniform(shader,'f','a',self.a.val);\n        else self.a.uniform.setValue(self.a.val);\n    };\n\n    this.r.val=Math.random();\n    this.g.val=Math.random();\n    this.b.val=Math.random();\n    this.a.val=1.0;\n\n\n    this.render.onTriggered=this.doRender;\n    this.texture=this.addInPort(new Port(this,\"texture\",OP_PORT_TYPE_TEXTURE));\n    this.textureUniform=null;\n\n    this.texture.onValueChanged=function()\n    {\n        if(self.texture.val)\n        {\n            if(self.textureUniform!==null)return;\n            console.log('TEXTURE ADDED');\n            shader.removeUniform('tex');\n            self.textureUniform=new CGL.Uniform(shader,'t','tex',0);\n        }\n        else\n        {\n            console.log('TEXTURE REMOVED');\n            shader.removeUniform('tex');\n            self.textureUniform=null;\n        }\n    };\n\n    this.doRender();\n};\n\nOps.Gl.Shader.BasicMaterial.prototype = new Op();\n\n\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.Shader.ShowNormalsMaterial = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='ShowNormalsMaterial';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.doRender=function()\n    {\n        cgl.setShader(shader);\n\n        self.trigger.call();\n\n        cgl.setPreviousShader();\n    };\n\n    var srcFrag=''+\n        'precision highp float;\\n'+\n        'varying vec3 norm;\\n'+\n        '\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        'vec4 col=vec4(norm.x,norm.y,norm.z,1.0);\\n'+\n        'gl_FragColor = col;\\n'+\n        '}\\n';\n\n\n    var shader=new CGL.Shader();\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n\n    this.render.onTriggered=this.doRender;\n\n    this.doRender();\n};\n\nOps.Gl.Shader.ShowNormalsMaterial.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Shader.Schwurbel = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Schwurbel';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.timer=this.addInPort(new Port(this,\"time\"));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.doRender=function()\n    {\n        cgl.setShader(shader);\n\n        if(!self.timer.uniLoc)\n        {\n            shader.bind();\n            self.timer.uniLoc=gl.getUniformLocation(shader.getProgram(), \"time\");\n        }\n        gl.uniform1f(self.timer.uniLoc, self.timer.val);\n\n        cgl.setPreviousShader(shader);\n\n        self.trigger.call();\n    };\n\n    var srcFrag=''+\n        'precision mediump float;\\n'+\n        'uniform float time;\\n'+\n        '\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        'float c=sqrt(sin(time*0.02)*cos((time+gl_FragCoord.y)*0.02)+sin(time+gl_FragCoord.x*0.02)*sin(time+gl_FragCoord.y*0.02));\\n'+\n        'gl_FragColor = vec4( c,c,c,1.0);\\n'+\n        '}\\n';\n\n    var shader=new CGL.Shader();\n    shader.compile(shader.getDefaultVertexShader(),srcFrag);\n\n    this.doRender();\n    this.render.onTriggered=this.doRender;\n};\n\nOps.Gl.Shader.Schwurbel.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Shader.Noise = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Noise';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var timeUniform=-1;\n    var timeStart=-1;\n\n    this.doRender=function()\n    {\n        cgl.setShader(shader);\n        if(timeUniform==-1)\n        {\n            timeStart=Date.now();\n            shader.bind();\n            timeUniform=gl.getUniformLocation(shader.getProgram(), \"time\");\n        }\n\n        gl.uniform1f(timeUniform, (Date.now()-timeStart)/1000);\n        cgl.setPreviousShader();\n\n        self.trigger.call();\n    };\n\n    var srcFrag=''+\n        'precision mediump float;\\n'+\n        'uniform float time;\\n'+\n        '\\n'+\n        'float random(vec2 co)\\n'+\n        '{\\n'+\n        '   return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\\n'+\n        '}\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        '   float c=random(time*gl_FragCoord.xy);'+\n        '   gl_FragColor = vec4( c,c,c,1.0);\\n'+\n        '}\\n';\n\n\n    var shader=new CGL.Shader();\n    shader.compile(shader.getDefaultVertexShader(),srcFrag);\n\n    this.doRender();\n    this.render.onTriggered=this.doRender;\n};\n\nOps.Gl.Shader.Noise.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Matrix={};\n\nOps.Gl.Matrix.Translate = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='translate';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.x=this.addInPort(new Port(this,\"x\"));\n    this.y=this.addInPort(new Port(this,\"y\"));\n    this.z=this.addInPort(new Port(this,\"z\"));\n    this.x.val=0.0;\n    this.y.val=0.0;\n    this.z.val=0.0;\n    \n    var vec=vec3.create();\n\n    this.render.onTriggered=function()\n    {\n        vec3.set(vec, self.x.val,self.y.val,self.z.val);\n        cgl.pushMvMatrix();\n        mat4.translate(cgl.mvMatrix,cgl.mvMatrix, vec);\n        self.trigger.call();\n        cgl.popMvMatrix();\n    };\n};\n\nOps.Gl.Matrix.Translate.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Matrix.Scale = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='scale';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.scale=this.addInPort(new Port(this,\"scale\"));\n    \n    var vScale=vec3.create();\n    var transMatrix = mat4.create();\n    mat4.identity(transMatrix);\n\n    var doScale=false;\n\n    this.render.onTriggered=function()\n    {\n        cgl.pushMvMatrix();\n        mat4.multiply(cgl.mvMatrix,cgl.mvMatrix,transMatrix);\n        self.trigger.call();\n        cgl.popMvMatrix();\n    };\n\n    var updateMatrix=function()\n    {\n        mat4.identity(transMatrix);\n        mat4.scale(transMatrix,transMatrix, vScale);\n    };\n\n    this.scaleChanged=function()\n    {\n        doScale=false;\n        vec3.set(vScale, self.scale.val,self.scale.val,self.scale.val);\n        updateMatrix();\n    };\n\n    this.scale.onValueChanged=this.scaleChanged;\n    this.scale.val=1.0;\n    updateMatrix();\n};\n\nOps.Gl.Matrix.Scale.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Matrix.Transform = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    this.name='transform';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.posX=this.addInPort(new Port(this,\"posX\"));\n    this.posY=this.addInPort(new Port(this,\"posY\"));\n    this.posZ=this.addInPort(new Port(this,\"posZ\"));\n\n    this.scaleX=this.addInPort(new Port(this,\"scaleX\"));\n    this.scaleY=this.addInPort(new Port(this,\"scaleY\"));\n    this.scaleZ=this.addInPort(new Port(this,\"scaleZ\"));\n\n    this.rotX=this.addInPort(new Port(this,\"rotX\"));\n    this.rotY=this.addInPort(new Port(this,\"rotY\"));\n    this.rotZ=this.addInPort(new Port(this,\"rotZ\"));\n    \n    var vPos=vec3.create();\n    var vScale=vec3.create();\n    var transMatrix = mat4.create();\n    mat4.identity(transMatrix);\n\n    var doScale=false;\n    var doTranslate=false;\n\n    this.render.onTriggered=function()\n    {\n        cgl.pushMvMatrix();\n        mat4.multiply(cgl.mvMatrix,cgl.mvMatrix,transMatrix);\n        self.trigger.call();\n        cgl.popMvMatrix();\n    };\n\n    var updateMatrix=function()\n    {\n        mat4.identity(transMatrix);\n        if(doTranslate)mat4.translate(transMatrix,transMatrix, vPos);\n\n        if(self.rotX.val!==0)mat4.rotateX(transMatrix,transMatrix, self.rotX.val*CGL.DEG2RAD);\n        if(self.rotY.val!==0)mat4.rotateY(transMatrix,transMatrix, self.rotY.val*CGL.DEG2RAD);\n        if(self.rotZ.val!==0)mat4.rotateZ(transMatrix,transMatrix, self.rotZ.val*CGL.DEG2RAD);\n\n        if(doScale)mat4.scale(transMatrix,transMatrix, vScale);\n    };\n\n    this.translateChanged=function()\n    {\n        doTranslate=false;\n        if(self.posX.val!==0.0 || self.posY.val!==0.0 || self.posZ.val!==0.0)doTranslate=true;\n        vec3.set(vPos, self.posX.val,self.posY.val,self.posZ.val);\n        updateMatrix();\n    };\n\n    this.scaleChanged=function()\n    {\n        doScale=false;\n        if(self.scaleX.val!==0.0 || self.scaleY.val!==0.0 || self.scaleZ.val!==0.0)doScale=true;\n        vec3.set(vScale, self.scaleX.val,self.scaleY.val,self.scaleZ.val);\n        updateMatrix();\n    };\n\n    this.rotChanged=function()\n    {\n        updateMatrix();\n    };\n\n    this.rotX.onValueChanged=this.rotChanged;\n    this.rotY.onValueChanged=this.rotChanged;\n    this.rotZ.onValueChanged=this.rotChanged;\n\n    this.scaleX.onValueChanged=this.scaleChanged;\n    this.scaleY.onValueChanged=this.scaleChanged;\n    this.scaleZ.onValueChanged=this.scaleChanged;\n\n    this.posX.onValueChanged=this.translateChanged;\n    this.posY.onValueChanged=this.translateChanged;\n    this.posZ.onValueChanged=this.translateChanged;\n\n    this.rotX.val=0.0;\n    this.rotY.val=0.0;\n    this.rotZ.val=0.0;\n\n    this.scaleX.val=1.0;\n    this.scaleY.val=1.0;\n    this.scaleZ.val=1.0;\n\n    this.posX.val=0.0;\n    this.posY.val=0.0;\n    this.posZ.val=0.0;\n\n    updateMatrix();\n};\n\nOps.Gl.Matrix.Transform.prototype = new Op();\n\n// ----------------------------------------------------\n\nOps.RandomCluster = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='random cluster';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.num=this.addInPort(new Port(this,\"num\"));\n    this.size=this.addInPort(new Port(this,\"size\"));\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION)) ;\n    this.idx=this.addOutPort(new Port(this,\"index\")) ;\n    this.rnd=this.addOutPort(new Port(this,\"rnd\")) ;\n    this.randoms=[];\n    this.randomsRot=[];\n    this.randomsFloats=[];\n\n    var transVec=vec3.create();\n\n    this.exe.onTriggered=function()\n    {\n        for(var i=0;i<self.randoms.length;i++)\n        {\n            cgl.pushMvMatrix();\n\n            mat4.translate(cgl.mvMatrix,cgl.mvMatrix, self.randoms[i]);\n\n            mat4.rotateX(cgl.mvMatrix,cgl.mvMatrix, self.randomsRot[i][0]);\n            mat4.rotateY(cgl.mvMatrix,cgl.mvMatrix, self.randomsRot[i][1]);\n            mat4.rotateZ(cgl.mvMatrix,cgl.mvMatrix, self.randomsRot[i][2]);\n\n            self.idx.val=i;\n            self.rnd.val=self.randomsFloats[i];\n\n            self.trigger.call();\n\n            cgl.popMvMatrix();\n        }\n    };\n\n    function reset()\n    {\n        self.randoms=[];\n        self.randomsRot=[];\n        self.randomsFloats=[];\n\n        for(var i=0;i<self.num.val;i++)\n        {\n            self.randomsFloats.push(Math.random());\n            self.randoms.push(vec3.fromValues(\n                (Math.random()-0.5)*self.size.val,\n                (Math.random()-0.5)*self.size.val,\n                (Math.random()-0.5)*self.size.val\n                ));\n            self.randomsRot.push(vec3.fromValues(\n                Math.random()*360*CGL.DEG2RAD,\n                Math.random()*360*CGL.DEG2RAD,\n                Math.random()*360*CGL.DEG2RAD\n                ));\n        }\n    }\n\n    this.num.onValueChanged=reset;\n    this.size.onValueChanged=reset;\n\n    this.num.val=100;\n};\n\nOps.RandomCluster.prototype = new Op();\n\n\n\n\n\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Render2Texture = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='render to texture';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var frameBuf;\n    var texture=new CGL.Texture();\n\n    this.width=this.addInPort(new Port(this,\"texture width\"));\n    this.height=this.addInPort(new Port(this,\"texture height\"));\n    this.tex=this.addOutPort(new Port(this,\"texture\",OP_PORT_TYPE_TEXTURE));\n\n    this.width.val=1024;\n    this.height.val=1024;\n\n    texture.setSize(this.width.val,this.height.val);\n\n    frameBuf = GL.createFramebuffer();\n    GL.bindFramebuffer(GL.FRAMEBUFFER, frameBuf);\n\n    var renderbuffer = GL.createRenderbuffer();\n    GL.bindRenderbuffer(GL.RENDERBUFFER, renderbuffer);\n    GL.renderbufferStorage(GL.RENDERBUFFER, GL.DEPTH_COMPONENT16, this.width.val,this.height.val);\n    GL.framebufferTexture2D(GL.FRAMEBUFFER, GL.COLOR_ATTACHMENT0, GL.TEXTURE_2D, texture.tex, 0);\n    GL.framebufferRenderbuffer(GL.FRAMEBUFFER, GL.DEPTH_ATTACHMENT, GL.RENDERBUFFER, renderbuffer);\n    GL.bindTexture(GL.TEXTURE_2D, null);\n    GL.bindRenderbuffer(GL.RENDERBUFFER, null);\n    GL.bindFramebuffer(GL.FRAMEBUFFER, null);\n\n    self.tex.val=texture;\n\n    this.render.onTriggered=function()\n    {\n        cgl.pushMvMatrix();\n\n        GL.bindFramebuffer(GL.FRAMEBUFFER, frameBuf);\n        \n        cgl.pushPMatrix();\n        gl.viewport(0, 0, 1920,1080);\n        mat4.perspective(cgl.pMatrix,45, self.width.val/self.height.val, 0.01, 1100.0);\n\n        self.trigger.call();\n\n        cgl.popPMatrix();\n        \n        GL.bindFramebuffer(GL.FRAMEBUFFER, null);\n        \n        cgl.popMvMatrix();\n        gl.viewport(0, 0, cgl.canvasWidth,cgl.canvasHeight);\n    };\n\n\n};\n\nOps.Gl.Render2Texture.prototype = new Op();\n\n","\nOps.Gl.Meshes=Ops.Gl.Meshes || {};\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Meshes.Triangle = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Triangle';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        self.mesh.render(cgl.getShader());\n        self.trigger.call();\n    };\n\n    var geom=new CGL.Geometry();\n    geom.vertices = [\n         0.0,  1.0,  0.0,\n        -1.0,  -1.0,  0.0,\n         1.0, -1.0,  0.0\n    ];\n\n    geom.verticesIndices = [\n        0, 1, 2\n    ];\n    this.mesh=new CGL.Mesh(geom);\n};\n\nOps.Gl.Meshes.Triangle.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Meshes.Rectangle = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='rectangle';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n    this.width=this.addInPort(new Port(this,\"width\"));\n    this.height=this.addInPort(new Port(this,\"height\"));\n    this.width.val=1.0;\n    this.height.val=1.0;\n\n    this.render.onTriggered=function()\n    {\n        self.mesh.render(cgl.getShader());\n        self.trigger.call();\n    };\n\n    var geom=new CGL.Geometry();\n    this.mesh=null;\n\n    function rebuild()\n    {\n        geom.vertices = [\n             self.width.val/2,  self.height.val/2,  0.0,\n            -self.width.val/2,  self.height.val/2,  0.0,\n             self.width.val/2, -self.height.val/2,  0.0,\n            -self.width.val/2, -self.height.val/2,  0.0\n        ];\n\n        geom.texCoords = [\n             1.0, 1.0,\n             0.0, 1.0,\n             1.0, 0.0,\n             0.0, 0.0\n        ];\n\n        geom.verticesIndices = [\n            0, 1, 2,\n            3, 1, 2\n        ];\n        if(!self.mesh) self.mesh=new CGL.Mesh(geom);\n        self.mesh.setGeom(geom);\n    }\n    rebuild();\n\n    this.width.onValueChanged=rebuild;\n    this.height.onValueChanged=rebuild;\n};\n\nOps.Gl.Meshes.Rectangle.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Meshes.FullscreenRectangle = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='fullscreen rectangle';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        cgl.pushPMatrix();\n        mat4.identity(cgl.pMatrix);\n\n        cgl.pushMvMatrix();\n        mat4.identity(cgl.mvMatrix);\n\n        self.mesh.render(cgl.getShader());\n        self.trigger.call();\n\n        cgl.popPMatrix();\n        cgl.popMvMatrix();\n\n    };\n\n    var geom=new CGL.Geometry();\n    geom.vertices = [\n         1.0,  1.0,  0.0,\n        -1.0,  1.0,  0.0,\n         1.0, -1.0,  0.0,\n        -1.0, -1.0,  0.0\n    ];\n\n    geom.texCoords = [\n         1.0, 1.0,\n         0.0, 1.0,\n         1.0, 0.0,\n         0.0, 0.0\n    ];\n\n    geom.verticesIndices = [\n        0, 1, 2,\n        3, 1, 2\n    ];\n    this.mesh=new CGL.Mesh(geom);\n};\n\nOps.Gl.Meshes.FullscreenRectangle.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Meshes.Circle = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Circle';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n\n    this.segments=this.addInPort(new Port(this,\"segments\"));\n    this.radius=this.addInPort(new Port(this,\"radius\"));\n    this.percent=this.addInPort(new Port(this,\"percent\"));\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        mesh.render(cgl.getShader());\n        self.trigger.call();\n    };\n\n    this.segments.val=20;\n    this.radius.val=1;\n    this.percent.val=1;\n\n    var geom=new CGL.Geometry();\n    var mesh=new CGL.Mesh(geom);\n\n    function calc()\n    {\n        geom.clear();\n        var oldPosX=0;\n        var oldPosY=0;\n\n        for (var i=0; i <= self.segments.val*self.percent.val; i++)\n        {\n            var degInRad = (360/self.segments.val)*i*CGL.DEG2RAD;\n            var posx=Math.cos(degInRad)*self.radius.val;\n            var posy=Math.sin(degInRad)*self.radius.val;\n\n            geom.addFace(\n                        [posx,posy,0],\n                        [oldPosX,oldPosY,0],\n                        [0,0,0]\n                        );\n\n            geom.texCoords.push(0,0,0,0,0,0);\n\n            oldPosX=posx;\n            oldPosY=posy;\n        }\n\n        mesh.setGeom(geom);\n    }\n\n    this.segments.onValueChanged=calc;\n    this.radius.onValueChanged=calc;\n    this.percent.onValueChanged=calc;\n    calc();\n};\n\nOps.Gl.Meshes.Circle.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Meshes.ObjMesh = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='OBJ Mesh';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.mesh=null;\n\n    this.render.onTriggered=function()\n    {\n        if(self.mesh) self.mesh.render(cgl.getShader());\n\n        self.trigger.call();\n    };\n\n    ajaxRequest('assets/skull.obj',function(response)\n    {\n        console.log(response);\n                \n        var r=parseOBJ(response);\n\n        unwrap = function(ind, crd, cpi)\n        {\n            var ncrd = new Array(Math.floor(ind.length/3)*cpi);\n            for(var i=0; i<ind.length; i++)\n            {\n                for(var j=0; j<cpi; j++)\n                {\n                    ncrd[i*cpi+j] = crd[ind[i]*cpi+j];\n                }\n            }\n            return ncrd;\n        };\n\n        var l=r.verticesIndices.length;\n            r.vertices = unwrap(r.verticesIndices, r.vertices, 3);\n            r.texCoords = unwrap(r.texCoordsIndices  , r.texCoords  , 2);\n            r.vertexNormals = unwrap(r.vertexNormalIndices  , r.vertexNormals  , 3);\n            r.verticesIndices = [];\n            for(var i=0; i<l; i++) r.verticesIndices.push(i);\n        \n        self.mesh=new CGL.Mesh(r);\n    });\n};\n\nOps.Gl.Meshes.ObjMesh.prototype = new Op();\n\n// ----------------------------------------------------------------\n\nOps.Gl.Meshes.Cube = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Cube';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.mesh=null;\n\n    this.render.onTriggered=function()\n    {\n        if(self.mesh!==null) self.mesh.render(cgl.getShader());\n        self.trigger.call();\n    };\n\n    var geom=new CGL.Geometry();\n\n        geom.vertices = [\n          // Front face\n          -1.0, -1.0,  1.0,\n           1.0, -1.0,  1.0,\n           1.0,  1.0,  1.0,\n          -1.0,  1.0,  1.0,\n          // Back face\n          -1.0, -1.0, -1.0,\n          -1.0,  1.0, -1.0,\n           1.0,  1.0, -1.0,\n           1.0, -1.0, -1.0,\n          // Top face\n          -1.0,  1.0, -1.0,\n          -1.0,  1.0,  1.0,\n           1.0,  1.0,  1.0,\n           1.0,  1.0, -1.0,\n          // Bottom face\n          -1.0, -1.0, -1.0,\n           1.0, -1.0, -1.0,\n           1.0, -1.0,  1.0,\n          -1.0, -1.0,  1.0,\n          // Right face\n           1.0, -1.0, -1.0,\n           1.0,  1.0, -1.0,\n           1.0,  1.0,  1.0,\n           1.0, -1.0,  1.0,\n          // Left face\n          -1.0, -1.0, -1.0,\n          -1.0, -1.0,  1.0,\n          -1.0,  1.0,  1.0,\n          -1.0,  1.0, -1.0,\n        ];\n\n        geom.texCoords = [\n          // Front face\n          0.0, 0.0,\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n          // Back face\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n          0.0, 0.0,\n          // Top face\n          0.0, 1.0,\n          0.0, 0.0,\n          1.0, 0.0,\n          1.0, 1.0,\n          // Bottom face\n          1.0, 1.0,\n          0.0, 1.0,\n          0.0, 0.0,\n          1.0, 0.0,\n          // Right face\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n          0.0, 0.0,\n          // Left face\n          0.0, 0.0,\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n        ];\n\n        geom.vertexNormals = [\n            // Front face\n             0.0,  0.0,  1.0,\n             0.0,  0.0,  1.0,\n             0.0,  0.0,  1.0,\n             0.0,  0.0,  1.0,\n\n            // Back face\n             0.0,  0.0, -1.0,\n             0.0,  0.0, -1.0,\n             0.0,  0.0, -1.0,\n             0.0,  0.0, -1.0,\n\n            // Top face\n             0.0,  1.0,  0.0,\n             0.0,  1.0,  0.0,\n             0.0,  1.0,  0.0,\n             0.0,  1.0,  0.0,\n\n            // Bottom face\n             0.0, -1.0,  0.0,\n             0.0, -1.0,  0.0,\n             0.0, -1.0,  0.0,\n             0.0, -1.0,  0.0,\n\n            // Right face\n             1.0,  0.0,  0.0,\n             1.0,  0.0,  0.0,\n             1.0,  0.0,  0.0,\n             1.0,  0.0,  0.0,\n\n            // Left face\n            -1.0,  0.0,  0.0,\n            -1.0,  0.0,  0.0,\n            -1.0,  0.0,  0.0,\n            -1.0,  0.0,  0.0\n        ];\n\n\n        geom.verticesIndices = [\n            0, 1, 2,      0, 2, 3,    // Front face\n            4, 5, 6,      4, 6, 7,    // Back face\n            8, 9, 10,     8, 10, 11,  // Top face\n            12, 13, 14,   12, 14, 15, // Bottom face\n            16, 17, 18,   16, 18, 19, // Right face\n            20, 21, 22,   20, 22, 23  // Left face\n        ];\n\n    this.mesh=new CGL.Mesh(geom);\n};\n\nOps.Gl.Meshes.Cube.prototype = new Op();\n\n// ----------------------------------------------------------------\n\n","// https://github.com/automat/foam-gl\n// http://howlerjs.com/\n//http://learningwebgl.com/lessons/lesson01/index.html\n\n\nOps.Log = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='logger';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.input=this.addInPort(new Port(this,\"input\"));\n    this.input.val='';\n\n    this.exec=function()\n    {\n        console.log(\"[log] \" + self.input.val);\n    };\n\n    this.exe.onTriggered=this.exec;\n    this.input.onValueChanged=this.exec;\n};\nOps.Log.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\n\nOps.CallsPerSecond = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='CallsPerSecond';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.timeStart=0;\n    this.cps=0;\n\n    this.exe.onTriggered=function()\n    {\n        if(self.timeStart===0)self.timeStart=Date.now();\n        var now = Date.now();\n\n        if(now-self.timeStart>1000)\n        {\n            self.timeStart=Date.now();\n            console.log('cps: '+self.cps);\n            self.cps=0;\n        }\n\n        self.cps++;\n    };\n};\nOps.CallsPerSecond.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\nOps.Value = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Value';\n    this.v=this.addInPort(new Port(this,\"value\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.v.val;\n    };\n\n    this.v.onValueChanged=this.exec;\n};\n\nOps.Value.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\n\nOps.TimeLineTime = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='TimeLineTime';\n    this.theTime=this.addOutPort(new Port(this,\"time\"));\n\n    this.onAnimFrame=function(time)\n    {\n        this.theTime.val=time;\n    };\n\n};\nOps.TimeLineTime.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\n\n\n\nOps.Repeat = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Repeat';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.num=this.addInPort(new Port(this,\"num\"));\n    this.num.val=5;\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n    this.idx=this.addOutPort(new Port(this,\"index\"));\n\n    this.exe.onTriggered=function()\n    {\n\n        for(var i=0;i<self.num.value;i++)\n        {\n            self.idx.val=i;\n            self.trigger.call();\n        }\n\n    };\n};\nOps.Repeat.prototype = new Op();\n\n\n\n\n// ---------------------------------------------------------------------------\n\n\nOps.IfTrueThen = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='if true then';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.bool=this.addInPort(new Port(this,\"boolean\"));\n    this.bool.val=false;\n\n    this.triggerThen=this.addOutPort(new Port(this,\"then\",OP_PORT_TYPE_FUNCTION));\n    this.triggerElse=this.addOutPort(new Port(this,\"else\",OP_PORT_TYPE_FUNCTION));\n\n    this.exe.onTriggered=function()\n    {\n        if(self.bool.val===true)\n        {\n            self.triggerThen.call();\n        }\n        else\n        {\n            self.triggerElse.call();\n        }\n    };\n\n    this.bool.onValueChanged=function()\n    {\n        self.exe.onTriggered();\n    };\n\n};\nOps.IfTrueThen.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------\n\n\nOps.Group = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='group';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.triggers=[];\n\n    for(var i=0;i<10;i++)\n    {\n        this.triggers.push( this.addOutPort(new Port(this,\"trigger \"+i,OP_PORT_TYPE_FUNCTION)) );\n    }\n\n    this.exe.onTriggered=function()\n    {\n        for(var i in self.triggers)\n        {\n            self.triggers[i].call();\n        }\n\n    };\n\n\n};\nOps.Group.prototype = new Op();\n\n\n\n\n// ---------------------------------------------------------------------------\n\nOps.Interval = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='Interval';\n    this.timeOutId=-1;\n    this.interval=this.addInPort(new Port(this,\"interval\"));\n    this.interval.val=1000;\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.exec=function()\n    {\n        if(this.timeOutId!=-1)return;\n        var self=this;\n\n        this.timeOutId=setTimeout(function()\n        {\n            self.timeOutId=-1;\n            self.trigger.call();\n            self.exec();\n        },\n        this.interval.val );\n    };\n\n    this.exec();\n\n};\n\nOps.Interval.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\n// --------------------------------------------------------------------------\n\nOps.Anim={};\n\nOps.Anim.SinusAnim = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='SinusAnim';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    var self=this;\n\n    this.exe.onTriggered=function()\n    {\n        self.result.val=Math.sin(Date.now()/1000.0);\n    };\n\n    this.exe.onTriggered();\n\n};\n\nOps.Anim.SinusAnim.prototype = new Op();\n\n\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Anim.RelativeTime = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='RelativeTime';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    var self=this;\n    var startTime=Date.now()/1000.0;\n\n    this.exe.onTriggered=function()\n    {\n        self.result.val=Date.now()/1000.0-startTime;\n    };\n\n    this.exe.onTriggered();\n\n};\n\nOps.Anim.RelativeTime.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\n\n","\nOps.Json=Ops.Json || {};\n\n\nOps.Json.jsonValue = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='jsonValue';\n\n    this.data=this.addInPort(new Port(this,\"data\",OP_PORT_TYPE_TEXTURE ));\n    this.key=this.addInPort(new Port(this,\"key\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.data.onValueChanged=function()\n    {\n        if(self.data.val && self.data.val.hasOwnProperty(self.key.val))\n        {\n            self.result.val=self.data.val[self.key.val];\n        }\n    };\n\n};\n\nOps.Json.jsonValue.prototype = new Op();\n\n// -------------------------------------------------------------\n\n","\n// TODO: CLAMP!\n\nOps.Math=Ops.Math || {};\n\n\nOps.Math.Random = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='random';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.exe.onTriggered=function()\n    {\n        self.result.val=Math.random();\n    };\n\n    this.exe.onTriggered();\n};\n\nOps.Math.Random.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Clamp = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='Clamp';\n    this.val=this.addInPort(new Port(this,\"val\"));\n    this.min=this.addInPort(new Port(this,\"min\"));\n    this.max=this.addInPort(new Port(this,\"max\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    function clamp()\n    {\n        self.result.val= Math.min(Math.max(self.val.val, self.min.val), self.max.val);\n    }\n\n    this.min.val=0;\n    this.max.val=1;\n\n    this.val.onValueChanged=clamp;\n    this.min.onValueChanged=clamp;\n    this.max.onValueChanged=clamp;\n\n    this.val.val=0.5;\n};\n\nOps.Math.Clamp.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\nOps.Math.SmoothStep = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='SmoothStep';\n    this.val=this.addInPort(new Port(this,\"val\"));\n    this.min=this.addInPort(new Port(this,\"min\"));\n    this.max=this.addInPort(new Port(this,\"max\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    function smoothstep ()\n    {\n        var x = Math.max(0,Math.min(1,(self.val.val-self.min.val)/(self.max.val-self.min.val)));\n        self.result.val=x*x*(3-2*x);\n    }\n\n    this.min.val=0;\n    this.max.val=1;\n    \n    this.val.onValueChanged=smoothstep;\n    this.min.onValueChanged=smoothstep;\n    this.max.onValueChanged=smoothstep;\n\n    this.val.val=0.5;\n};\n\nOps.Math.SmoothStep.prototype = new Op();\n\n// ----------------------------------------------------------------------------\n\n\nOps.Math.MapRange = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='map value range';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.v=this.addInPort(new Port(this,\"value\"));\n    this.old_min=this.addInPort(new Port(this,\"old min\"));\n    this.old_max=this.addInPort(new Port(this,\"old max\"));\n    this.new_min=this.addInPort(new Port(this,\"new min\"));\n    this.new_max=this.addInPort(new Port(this,\"new max\"));\n\n    this.exec= function()\n    {\n        if(self.v.val>self.old_max.val)\n        {\n            self.result.val=self.new_max.val;\n            return;\n        }\n        else\n        if(self.v.val<self.old_min.val)\n        {\n            self.result.val=self.new_min.val;\n            return;\n        }\n\n        var nMin=parseFloat(self.new_min.val);\n        var nMax=parseFloat(self.new_max.val);\n        var oMin=parseFloat(self.old_min.val);\n        var oMax=parseFloat(self.old_max.val);\n        var x=parseFloat(self.v.val);\n\n        var reverseInput = false;\n        var oldMin = Math.min( oMin, oMax );\n        var oldMax = Math.max( oMin, oMax );\n        if(oldMin!= oMin) reverseInput = true;\n\n        var reverseOutput = false;\n        var newMin = Math.min( nMin, nMax );\n        var newMax = Math.max( nMin, nMax );\n        if(newMin != nMin) reverseOutput = true;\n\n        var portion=0;\n\n        if(reverseInput) portion = (oldMax-x)*(newMax-newMin)/(oldMax-oldMin);\n            else portion = (x-oldMin)*(newMax-newMin)/(oldMax-oldMin);\n        \n        if(reverseOutput) self.result.val = newMax - portion;\n            else self.result.val = portion + newMin;\n\n    };\n\n    this.v.val=0;\n    this.old_min.val=-1;\n    this.old_max.val=1;\n    this.new_min.val=0;\n    this.new_max.val=1;\n\n\n    this.v.onValueChanged=this.exec;\n    this.old_min.onValueChanged=this.exec;\n    this.old_max.onValueChanged=this.exec;\n    this.new_min.onValueChanged=this.exec;\n    this.new_max.onValueChanged=this.exec;\n\n    this.exec();\n\n};\n\nOps.Math.MapRange.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Abs = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    this.name='abs';\n    this.number=this.addInPort(new Port(this,\"number\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.number.onValueChanged=function()\n    {\n        self.result.val=Math.abs(self.number.val);\n    };\n};\n\nOps.Math.Abs.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Sin = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    this.name='Sinus';\n    this.number=this.addInPort(new Port(this,\"number\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.number.onValueChanged=function()\n    {\n        self.result.val=Math.sin(self.number.val);\n    };\n};\n\nOps.Math.Sin.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Sum = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='sum';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=parseFloat(self.number1.val)+parseFloat(self.number2.val);\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n\n    this.number1.val=1;\n    this.number2.val=1;\n};\n\nOps.Math.Sum.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Multiply = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='multiply';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val*self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n\n    this.number1.val=1;\n    this.number2.val=2;\n\n};\n\nOps.Math.Multiply.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Divide = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Divide';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val/self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Divide.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\nOps.Math.Compare={};\n\n\n\n\nOps.Math.Compare.IsEven = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='isEven';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n\n    this.exec= function()\n    {\n        self.result.val=!( self.number1.val & 1 );\n    };\n\n    this.number1.onValueChanged=this.exec;\n};\n\nOps.Math.Compare.IsEven.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Math.Compare.Greater = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Greater';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val>self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Compare.Greater.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Math.Compare.Between = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Between';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number=this.addInPort(new Port(this,\"value\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n    this.number.val=2.0;\n    this.number1.val=1.0;\n    this.number2.val=3.0;\n\n    this.exec= function()\n    {\n        self.result.val=\n            (\n                self.number.val>Math.min(self.number1.val,self.number2.val) &&\n                self.number.val<Math.max(self.number1.val,self.number2.val)\n            );\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n    this.number.onValueChanged=this.exec;\n};\nOps.Math.Compare.Between.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Math.Compare.Lesser = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Lesser';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val<self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n\n};\n\nOps.Math.Compare.Lesser.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Math.Compare.Equals = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Equals';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val==self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Compare.Equals.prototype = new Op();\n\n","\nOps.Net=Ops.Net || {};\n\nOps.Net.Websocket = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='Websocket';\n    this.url=this.addInPort(new Port(this,\"url\"));\n    this.result=this.addOutPort(new Port(this,\"result\", OP_PORT_TYPE_OBJECT));\n    this.connected=this.addOutPort(new Port(this,\"connected\"));\n\n    var connection=null;\n    var timeout=null;\n    var connectedTo='';\n\n    function checkConnection()\n    {\n        if(self.connected.val===false)\n        {\n            connect();\n        }\n        timeout=setTimeout(checkConnection,1000);\n    }\n\n    function connect()\n    {\n        if(self.connected.val===true && connectedTo==self.url.val) return;\n\n        if(self.connected.val===true)connection.close();\n\n        window.WebSocket = window.WebSocket || window.MozWebSocket;\n     \n         if (!window.WebSocket)\n            console.error('Sorry, but your browser doesn\\'t support WebSockets.');\n\n\n        try\n        {\n            if(connection!=null)connection.close();\n            connection = new WebSocket(self.url.val);\n        }catch (e)\n        {\n            console.log('could not connect to',self.url.val);\n        }\n\n        \n        connection.onerror = function (message)\n        {\n            self.connected.val=false;\n        };\n\n        connection.onclose = function (message)\n        {\n            self.connected.val=false;\n        };\n\n        connection.onopen = function (message)\n        {\n            self.connected.val=true;\n            connectedTo=self.url.val;\n        };\n\n        connection.onmessage = function (message)\n        {\n            try\n            {\n                var json = JSON.parse(message.data);\n                self.result.val=json;\n                        \n            } catch (e) {\n                console.log('This doesn\\'t look like a valid JSON: ', message.data);\n                return;\n            }\n        };\n\n        \n        \n    }\n\n    this.url.onValueChanged=connect;\n    timeout=setTimeout(checkConnection,1000);\n\n    this.url.val='ws://127.0.0.1:1337';\n};\n\nOps.Net.Websocket.prototype = new Op();\n\n// -------------------------------------------------------------\n"],"sourceRoot":"/source/"}