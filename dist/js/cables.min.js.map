{"version":3,"sources":["timer.js","utils.js","cgl_mesh.js","cgl_shader.js","cgl_texture.js","holo.js","ops.gl.js","ops.js","ops.math.js"],"names":["Timer","getTime","lastTime","Date","now","timeStart","timeOffset","self","this","currentTime","paused","update","togglePlay","play","pause","setOffset","val","generateUUID","d","uuid","replace","c","r","Math","random","floor","toString","ajaxRequest","url","callback","request","XMLHttpRequest","open","responseType","onload","e","target","response","send","CGL","DEG2RAD","Mesh","geom","bufTexCoords","bufVertices","gl","createBuffer","bufVerticesIndizes","setGeom","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","vertices","STATIC_DRAW","itemSize","numItems","length","ELEMENT_ARRAY_BUFFER","Uint16Array","verticesIndices","texCoords","render","shader","bind","GL","enableVertexAttribArray","getAttrVertexPos","getAttrTexCoords","vertexAttribPointer","FLOAT","drawElements","TRIANGLES","UNSIGNED_SHORT","Geometry","faceVertCount","texCoordsIndices","clear","addFace","a","b","face","iv","push","parseOBJ","buff","_readline","off","s","String","fromCharCode","groups","c_norms","i_norms","cg","from","to","Uint8Array","line","cds","split","x","parseFloat","y","z","v0a","v1a","v2a","vi0","parseInt","vi1","vi2","ui0","ui1","ui2","ni0","ni1","ni2","vlen","ulen","nlen","v3a","vi3","ui3","ni3","Uniform","_shader","_type","_name","_value","loc","name","type","value","needsUpdate","addUniform","getType","getName","resetLoc","updateValueF","getUniformLocation","getProgram","uniform1f","setValueF","v","updateValueT","console","log","uniform1i","setValueT","setValue","updateValue","Shader","program","uniforms","needsRecompile","removeUniform","i","splice","uni","getDefaultVertexShader","getDefaultFragmentShader","srcVert","srcFrag","setSource","projMatrixUniform","mvMatrixUniform","attrTexCoords","attrVertexPos","hasTextureUniforms","compile","defines","endl","vs","fs","vshader","createShader","VERTEX_SHADER","fshader","linkProgram","createProgram","getAttribLocation","useProgram","uniformMatrix4fv","pMatrix","mvMatrix","str","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","FRAGMENT_SHADER","getShaderInfoLog","getProgramParameter","LINK_STATUS","getProgramInfoLog","vstr","fstr","attachShader","Texture","tex","createTexture","slot","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","setSize","w","h","arr","uarr","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR","texImage2D","RGBA","UNSIGNED_BYTE","initTexture","img","image","TEXTURE_MAG_FILTER","NEAREST","load","texture","Image","src","PORT_DIR_IN","PORT_DIR_OUT","OP_PORT_TYPE_VALUE","OP_PORT_TYPE_FUNCTION","OP_PORT_TYPE_TEXTURE","Ops","Op","objName","portsOut","portsIn","posts","uiAttribs","id","addOutPort","p","direction","parent","addInPort","execute","exec","printInfo","ipo","removeLinks","getPort","ipi","findFittingPort","otherPort","Link","canLink","getSerialized","op","getPortByName","Port","links","valueBeforeLink","__defineGetter__","__defineSetter__","isLinked","onValueChanged","onTriggered","addLink","l","removeLinkTo","p2","portIn","portOut","remove","isLinkedTo","call","goals","getTypeString","obj","removeLink","link","scene","getOtherPort","onUnLink","p1","objIn","objOut","canLinkText","Scene","ops","timer","animFrameOps","deleteOp","addOp","eval","hasOwnProperty","onAdd","opid","tryRelink","reLinkP1","reLinkP2","onDelete","requestAnimationFrame","time","onAnimFrame","op1","port1Name","op2","port2Name","port1","port2","onLink","serialize","JSON","stringify","getOpById","deSerialize","opinid","opoutid","inName","outName","found","parse","iop","port","ipi2","ili","prototype","Gl","currentShader","mat4","create","Renderer","apply","arguments","simpleShader","trigger","initTranslate","vec3","set","enable","DEPTH_TEST","clearColor","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","viewport","canvas","clientWidth","clientHeight","perspective","identity","translate","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","document","getElementById","getContext","LeapMotion","transX","transY","transZ","finger0X","finger0Y","finger0Z","Leap","loop","frame","_translation","fingers","tipPosition","ClearColor","g","ClearDepth","TextureEmpty","width","height","textureOut","sizeChanged","filename","Meshes","Rectangle","mesh","Circle","calc","oldPosX","oldPosY","segments","percent","degInRad","posx","cos","radius","posy","sin","ObjMesh","unwrap","ind","crd","cpi","ncrd","Array","j","Cube","Plotter","lineWidth","buffer","num","drawArrays","LINE_STRIP","Triangle","BasicMaterial","doRender","oldShader","uniform","textureUniform","Schwurbel","uniLoc","Noise","timeUniform","Matrix","Translate","vec","Scale","scale","vScale","oldMatrix","transMatrix","doScale","copy","multiply","updateMatrix","scaleChanged","Transform","posX","posY","posZ","scaleX","scaleY","scaleZ","rotX","rotY","rotZ","vPos","doTranslate","rotateX","rotateY","rotateZ","translateChanged","rotChanged","RandomCluster","reset","randoms","randomsRot","randomsFloats","fromValues","size","exe","idx","rnd","Log","input","CallsPerSecond","cps","Value","result","TimeLineTime","theTime","Repeat","IfTrueThen","bool","triggerThen","triggerElse","Group","triggers","Interval","timeOutId","interval","setTimeout","Anim","SinusAnim","RelativeTime","startTime","Input","GamePad","numPads","axis1","axis2","axis3","axis4","button0","button1","button2","button3","button4","gamePads","navigator","getGamepads","count","gp","axes","buttons","pressed","Random","Clamp","clamp","min","max","SmoothStep","smoothstep","MapRange","old_min","old_max","new_min","new_max","nMin","nMax","oMin","oMax","reverseInput","oldMin","oldMax","reverseOutput","newMin","newMax","portion","Abs","number","abs","Sin","Sum","number1","number2","Multiply","Divide","Compare","IsEven","Greater","Between","Lesser","Equals"],"mappings":"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","file":"cables.min.js","sourcesContent":["\n\nfunction Timer()\n{\n    var self=this;\n    var timeStart=Date.now();\n    var timeOffset=0;\n\n    var currentTime=0;\n    var lastTime=0;\n    var paused=true;\n\n    function getTime()\n    {\n        lastTime=(Date.now()-timeStart)/1000;\n        return lastTime+timeOffset;\n\n    }\n\n    this.update=function()\n    {\n        if(paused) return;\n        currentTime=getTime();\n\n        return currentTime;\n    };\n\n    this.getTime=function()\n    {\n        return currentTime;\n    };\n\n    this.togglePlay=function()\n    {\n        if(paused)self.play();\n            else self.pause();\n    };\n\n    this.setOffset=function(val)\n    {\n        if(currentTime+val<0)\n        {\n            timeStart=Date.now();\n            timeOffset=0;\n            currentTime=0;\n        }\n        else\n        {\n            timeOffset+=val;\n            currentTime=lastTime+timeOffset;\n        }\n        \n\n    };\n\n    this.play=function()\n    {\n        timeStart=Date.now();\n        paused=false;\n    };\n\n    this.pause=function()\n    {\n        timeOffset=currentTime;\n        paused=true;\n    };\n\n}","function generateUUID()\n{\n    var d = new Date().getTime();\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c)\n    {\n        var r = (d + Math.random()*16)%16 | 0;\n        d = Math.floor(d/16);\n        return (c=='x' ? r : (r&0x3|0x8)).toString(16);\n    });\n    return uuid;\n}\n\n// ----------------------------------------------------------------\nfunction ajaxRequest(url, callback)\n{\n    var request = new XMLHttpRequest();\n    request.open(\"GET\", url, true);\n    request.responseType = \"arraybuffer\";\n    request.onload = function(e)\n    {\n        callback(e.target.response);\n    };\n    request.send();\n}\n\nString.prototype.endl = function(){return this+'\\n';};\n\n\n","var CGL=CGL ||\n{\n    DEG2RAD:3.14159/180.0\n};\n\n\n\nCGL.Mesh=function(geom)\n{\n    var bufTexCoords=-1;\n    var bufVertices = gl.createBuffer();\n    var bufVerticesIndizes = gl.createBuffer();\n\n    this.setGeom=function(geom)\n    {\n        \n        gl.bindBuffer(gl.ARRAY_BUFFER, bufVertices);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(geom.vertices), gl.STATIC_DRAW);\n        bufVertices.itemSize = 3;\n        bufVertices.numItems = geom.vertices.length/3;\n\n\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufVerticesIndizes);\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(geom.verticesIndices), gl.STATIC_DRAW);\n        bufVerticesIndizes.itemSize = 1;\n        bufVerticesIndizes.numItems = geom.verticesIndices.length;\n\n        if(geom.texCoords.length>0)\n        {\n            if(bufTexCoords==-1)bufTexCoords = gl.createBuffer();\n            gl.bindBuffer(gl.ARRAY_BUFFER, bufTexCoords);\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(geom.texCoords), gl.STATIC_DRAW);\n            bufTexCoords.itemSize = 2;\n            bufTexCoords.numItems = geom.texCoords.length/bufTexCoords.itemSize;\n        }\n\n    };\n\n    this.setGeom(geom);\n\n\n    this.render=function(shader)\n    {\n        shader.bind();\n\n        GL.enableVertexAttribArray(shader.getAttrVertexPos());\n        if(bufTexCoords!=-1) GL.enableVertexAttribArray(shader.getAttrTexCoords());\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, bufVertices);\n        gl.vertexAttribPointer(shader.getAttrVertexPos(),bufVertices.itemSize, gl.FLOAT, false, 0, 0);\n\n        if(bufTexCoords!=-1)\n        {\n            gl.bindBuffer(gl.ARRAY_BUFFER, bufTexCoords);\n            gl.vertexAttribPointer(shader.getAttrTexCoords(),bufTexCoords.itemSize, gl.FLOAT, false, 0, 0);\n        }\n\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufVerticesIndizes);\n        gl.drawElements(gl.TRIANGLES, bufVerticesIndizes.numItems, gl.UNSIGNED_SHORT, 0);\n    };\n\n};\n\nCGL.Geometry=function()\n{\n    this.faceVertCount=3;\n    this.vertices=[];\n    this.verticesIndices=[];\n    this.texCoords=[];\n    this.texCoordsIndices=[];\n\n    this.clear=function()\n    {\n        this.vertices.length=0;\n        this.verticesIndices.length=0;\n        this.texCoords.length=0;\n        this.texCoordsIndices.length=0;\n    };\n\n    this.addFace=function(a,b,c)\n    {\n        var face=[-1,-1,-1];\n\n        for(var iv=0;iv<this.vertices;iv+=3)\n        {\n            if( this.vertices[iv+0]==a[0] &&\n                this.vertices[iv+1]==a[1] &&\n                this.vertices[iv+2]==a[2]) face[0]=iv/3;\n\n            if( this.vertices[iv+0]==b[0] &&\n                this.vertices[iv+1]==b[1] &&\n                this.vertices[iv+2]==b[2]) face[1]=iv/3;\n\n            if( this.vertices[iv+0]==c[0] &&\n                this.vertices[iv+1]==c[1] &&\n                this.vertices[iv+2]==c[2]) face[2]=iv/3;\n        }\n\n        if(face[0]==-1)\n        {\n            this.vertices.push(a[0],a[1],a[2]);\n            face[0]=(this.vertices.length-1)/3;\n        }\n\n        if(face[1]==-1)\n        {\n            this.vertices.push(b[0],b[1],b[2]);\n            face[1]=(this.vertices.length-1)/3;\n        }\n\n        if(face[2]==-1)\n        {\n            this.vertices.push(c[0],c[1],c[2]);\n            face[2]=(this.vertices.length-1)/3;\n        }\n\n        this.verticesIndices.push(face[0]);\n        this.verticesIndices.push(face[1]);\n        this.verticesIndices.push(face[2]);\n\n    };\n\n\n\n};\n\nparseOBJ = function(buff)\n{\n\n    _readline = function(a, off)  // Uint8Array, offset\n    {\n        var s = \"\";\n        while(a[off] != 10) s += String.fromCharCode(a[off++]);\n        return s;\n    };\n\n    var geom = new CGL.Geometry();\n    geom.groups = {};\n    \n    // geom.texCoords   = [];\n    geom.c_norms = [];\n    \n    // geom.texCoordsIndices   = [];\n    geom.i_norms = [];\n    \n    var cg = {from: 0, to:0};   // current group\n    var off = 0;\n    var a = new Uint8Array(buff);\n    \n    while(off < a.length)\n    {\n        var line = _readline(a, off);\n        off += line.length + 1;\n        line = line.replace(/ +(?= )/g,'');\n        line = line.replace(/(^\\s+|\\s+$)/g, '');\n        var cds = line.split(\" \");\n        if(cds[0] == \"g\")\n        {\n            cg.to = geom.verticesIndices.length;\n            if(geom.groups[cds[1]] == null) geom.groups[cds[1]] = {from:geom.verticesIndices.length, to:0};\n            cg = geom.groups[cds[1]];\n        }\n        if(cds[0] == \"v\")\n        {\n            var x = parseFloat(cds[1]);\n            var y = parseFloat(cds[2]);\n            var z = parseFloat(cds[3]);\n            geom.vertices.push(x,y,z);\n        }\n        if(cds[0] == \"vt\")\n        {\n            var x = parseFloat(cds[1]);\n            var y = 1-parseFloat(cds[2]);\n            geom.texCoords.push(x,y);\n        }\n        if(cds[0] == \"vn\")\n        {\n            var x = parseFloat(cds[1]);\n            var y = parseFloat(cds[2]);\n            var z = parseFloat(cds[3]);\n            geom.c_norms.push(x,y,z);\n        }\n        if(cds[0] == \"f\")\n        {\n            var v0a = cds[1].split(\"/\"), v1a = cds[2].split(\"/\"), v2a = cds[3].split(\"/\");\n            var vi0 = parseInt(v0a[0])-1, vi1 = parseInt(v1a[0])-1, vi2 = parseInt(v2a[0])-1;\n            var ui0 = parseInt(v0a[1])-1, ui1 = parseInt(v1a[1])-1, ui2 = parseInt(v2a[1])-1;\n            var ni0 = parseInt(v0a[2])-1, ni1 = parseInt(v1a[2])-1, ni2 = parseInt(v2a[2])-1;\n            \n            var vlen = geom.vertices.length/3, ulen = geom.texCoords.length/2, nlen = geom.c_norms.length/3;\n            if(vi0<0) vi0 = vlen + vi0+1; if(vi1<0) vi1 = vlen + vi1+1; if(vi2<0) vi2 = vlen + vi2+1;\n            if(ui0<0) ui0 = ulen + ui0+1; if(ui1<0) ui1 = ulen + ui1+1; if(ui2<0) ui2 = ulen + ui2+1;\n            if(ni0<0) ni0 = nlen + ni0+1; if(ni1<0) ni1 = nlen + ni1+1; if(ni2<0) ni2 = nlen + ni2+1;\n            \n            geom.verticesIndices.push(vi0, vi1, vi2);  //cg.verticesIndices.push(vi0, vi1, vi2)\n            geom.texCoordsIndices  .push(ui0, ui1, ui2);  //cg.texCoordsIndices  .push(ui0, ui1, ui2);\n            geom.i_norms.push(ni0, ni1, ni2);  //cg.i_norms.push(ni0, ni1, ni2);\n            if(cds.length == 5)\n            {\n                var v3a = cds[4].split(\"/\");\n                var vi3 = parseInt(v3a[0])-1, ui3 = parseInt(v3a[1])-1, ni3 = parseInt(v3a[2])-1;\n                if(vi3<0) vi3 = vlen + vi3+1;\n                if(ui3<0) ui3 = ulen + ui3+1;\n                if(ni3<0) ni3 = nlen + ni3+1;\n                geom.verticesIndices.push(vi0, vi2, vi3);  //cg.verticesIndices.push(vi0, vi2, vi3);\n                geom.texCoordsIndices  .push(ui0, ui2, ui3);  //cg.texCoordsIndices  .push(ui0, ui2, ui3);\n                geom.i_norms.push(ni0, ni2, ni3);  //cg.i_norms.push(ni0, ni2, ni3);\n            }\n        }\n    }\n    cg.to = geom.verticesIndices.length;\n    \n    return geom;\n};\n\n\n","var CGL=CGL || {};\n\n// ---------------------------------------------------------------------------\n\nCGL.Uniform=function(_shader,_type,_name,_value)\n{\n    var self=this;\n    var loc=-1;\n    var name=_name;\n    var type=_type;\n    var value=0;\n    var shader=_shader;\n    this.needsUpdate=true;\n\n    shader.addUniform(this);\n\n    this.getType=function() {return type;};\n    this.getName=function() {return name;};\n\n    this.resetLoc=function() { loc=-1;};\n\n    this.updateValueF=function()\n    {\n        if(loc==-1) loc=gl.getUniformLocation(shader.getProgram(), name);\n        gl.uniform1f(loc, value);\n    };\n\n    this.setValueF=function(v)\n    {\n        self.needsUpdate=true;\n        value=v;\n    };\n\n    this.updateValueT=function()\n    {\n        if(loc==-1)\n        {\n            loc=gl.getUniformLocation(shader.getProgram(), name);\n            if(loc==-1) console.log('texture loc unknown!!');\n        }\n\n        gl.uniform1i(loc, 0);\n    };\n\n    this.setValueT=function(v)\n    {\n        self.needsUpdate=true;\n        value=v;\n    };\n\n    if(type=='f')\n    {\n        this.setValue=this.setValueF;\n        this.updateValue=this.updateValueF;\n    }\n\n    if(type=='t')\n    {\n        this.setValue=this.setValueT;\n        this.updateValue=this.updateValueT;\n    }\n\n    this.setValue(_value);\n};\n\n// ---------------------------------------------------------------------------\n\nCGL.Shader=function()\n{\n    var self=this;\n    var program=false;\n    var uniforms=[];\n    var needsRecompile=true;\n\n    this.removeUniform=function(name)\n    {\n        console.log('before: '+uniforms.length);\n        for(var i in uniforms)\n        {\n            if(uniforms[i].getName()==name)\n            {\n                uniforms.splice(i,1);\n                break;\n            }\n        }\n        needsRecompile=true;\n        console.log(uniforms.length);\n                \n    };\n\n    this.addUniform=function(uni)\n    {\n        uniforms.push(uni);\n        needsRecompile=true;\n    };\n\n    this.getDefaultVertexShader=function()\n    {\n        return ''+\n        'attribute vec3 vPosition;\\n'+\n        'attribute vec2 attrTexCoord;\\n'+\n        'varying vec2 texCoord;\\n'+\n        'uniform mat4 projMatrix;\\n'+\n        'uniform mat4 mvMatrix;\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        '   texCoord=attrTexCoord;\\n'+\n        // '   gl_PointSize=3.0;\\n'+\n        '   gl_Position = projMatrix * mvMatrix * vec4(vPosition,  1.0);\\n'+\n        '}\\n';\n    };\n\n    this.getDefaultFragmentShader=function()\n    {\n        return ''+\n        'precision mediump float;\\n'+\n        'void main()\\n'+\n        '{\\n'+\n\n        '   gl_FragColor = vec4(0.5,0.5,0.5,1.0);\\n'+\n        '}\\n';\n    };\n\n    this.srcVert=this.getDefaultVertexShader();\n    this.srcFrag=this.getDefaultFragmentShader();\n\n    this.setSource=function(srcVert,srcFrag)\n    {\n        this.srcVert=srcVert;\n        this.srcFrag=srcFrag;\n    };\n\n    var projMatrixUniform=-1;\n    var mvMatrixUniform=-1;\n\n    var attrTexCoords = -1;\n    var attrVertexPos = -1;\n\n    this.getAttrTexCoords=function(){return attrTexCoords;};\n    this.getAttrVertexPos=function(){return attrVertexPos;};\n\n    this.hasTextureUniforms=function()\n    {\n        for(var i in uniforms)\n        {\n            if(uniforms[i].getType()=='t') return true;\n        }\n        return false;\n    };\n\n    this.compile=function()\n    {\n        var defines='';\n        if(self.hasTextureUniforms()) defines+='#define HAS_TEXTURES'.endl();\n\n        console.log('shader compile...');\n        console.log('has textures: '+self.hasTextureUniforms() );\n        \n\n        var vs=defines+self.srcVert;\n        var fs=defines+self.srcFrag;\n\n        if(!program)\n        {\n            console.log('create shaderprogram');\n                    \n            program=createProgram(vs,fs, program);\n        }\n        else\n        {\n            console.log('recompile shaders...');\n\n            self.vshader=createShader(vs, gl.VERTEX_SHADER, self.vshader );\n            self.fshader=createShader(fs, gl.VERTEX_SHADER, self.fshader );\n            linkProgram(program);\n            mvMatrixUniform=-1;\n\n            for(var i in uniforms)uniforms[i].resetLoc();\n            \n\n        }\n\n        needsRecompile=false;\n    };\n\n    this.bind=function()\n    {\n        if(!program || needsRecompile) self.compile();\n\n        if(mvMatrixUniform==-1)\n        {\n            attrTexCoords = gl.getAttribLocation(program, 'attrTexCoord');\n            attrVertexPos = gl.getAttribLocation(program, 'vPosition');\n\n            projMatrixUniform = gl.getUniformLocation(program, \"projMatrix\");\n            mvMatrixUniform = gl.getUniformLocation(program, \"mvMatrix\");\n        }\n\n        GL.useProgram(program);\n\n        for(var i in uniforms)\n        {\n            if(uniforms[i].needsUpdate)uniforms[i].updateValue();\n        }\n\n        gl.uniformMatrix4fv(projMatrixUniform, false, pMatrix);\n        gl.uniformMatrix4fv(mvMatrixUniform, false, mvMatrix);\n    };\n\n    this.getProgram=function()\n    {\n        return program;\n    };\n\n\n    createShader =function(str, type,_shader)\n    {\n        var shader = _shader || gl.createShader(type);\n        gl.shaderSource(shader, str);\n        gl.compileShader(shader);\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\n        {\n            console.log('compile status: ');\n\n            if(type==gl.VERTEX_SHADER)console.log('VERTEX_SHADER');\n            if(type==gl.FRAGMENT_SHADER)console.log('FRAGMENT_SHADER');\n            \n            throw gl.getShaderInfoLog(shader);\n        }\n        return shader;\n    };\n\n    linkProgram=function(program)\n    {\n        gl.linkProgram(program);\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS))\n        {\n            throw gl.getProgramInfoLog(program);\n        }\n\n    };\n\n    createProgram=function(vstr, fstr)\n    {\n        var program = gl.createProgram();\n        self.vshader = createShader(vstr, gl.VERTEX_SHADER);\n        self.fshader = createShader(fstr, gl.FRAGMENT_SHADER);\n        gl.attachShader(program, self.vshader);\n        gl.attachShader(program, self.fshader);\n\n        linkProgram(program);\n        return program;\n    };\n\n\n\n};\n\n","var CGL=CGL || {};\n\nCGL.Texture=function()\n{\n    var self=this;\n    this.tex = gl.createTexture();\n\n    // gl.bindTexture(gl.TEXTURE_2D, this.tex);\n    // gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([111, 111, 111, 255]));\n    // gl.bindTexture(gl.TEXTURE_2D, null);\n\n    this.bind=function(slot)\n    {\n        gl.activeTexture(gl.TEXTURE0+slot);\n        gl.bindTexture(gl.TEXTURE_2D, self.tex);\n    };\n\n    this.setSize=function(w,h)\n    {\n        gl.bindTexture(gl.TEXTURE_2D, self.tex);\n        \n        var arr=[];\n        for(var x=0;x<w;x++)\n        {\n            for(var y=0;y<h;y++)\n            {\n                // var index=x+y*w;\n                arr.push( parseInt( (x/w)*255,10) );\n                arr.push(0);\n                arr.push( parseInt((y/w)*255,10));\n                arr.push(255);\n            }\n        }\n        var uarr=new Uint8Array(arr);\n\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, w, h, 0, gl.RGBA, gl.UNSIGNED_BYTE, uarr);\n\n        gl.bindTexture(gl.TEXTURE_2D, null);\n    };\n\n    this.initTexture=function(img)\n    {\n        gl.bindTexture(gl.TEXTURE_2D, self.tex);\n        // gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, self.image);\n\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\n        // non power of two:\n        // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n\n        gl.bindTexture(gl.TEXTURE_2D, null);\n    };\n\n    this.setSize(8,8);\n};\n\nCGL.Texture.load=function(url)\n{\n    var texture=new CGL.Texture();\n    texture.image = new Image();\n    texture.image.onload = function ()\n    {\n        console.log(texture.image);\n                \n        texture.initTexture(texture.image);\n    };\n    texture.image.src = url;\n    return texture;\n};\n\n// ---------------------------------------------------------------------------\n","\nvar PORT_DIR_IN=0;\nvar PORT_DIR_OUT=1;\n\nvar OP_PORT_TYPE_VALUE =0;\nvar OP_PORT_TYPE_FUNCTION =1;\nvar OP_PORT_TYPE_TEXTURE =2;\n\nvar Ops = {};\n\n\nvar Op = function()\n{\n    this.objName='';\n    this.portsOut=[];\n    this.portsIn=[];\n    this.posts=[];\n    this.uiAttribs={};\n    this.name='unknown';\n    this.id=generateUUID();\n\n    this.getName= function()\n    {\n        return this.name;\n    };\n    this.addOutPort=function(p)\n    {\n        p.direction=PORT_DIR_OUT;\n        p.parent=this;\n        this.portsOut.push(p);\n        return p;\n    };\n    this.addInPort=function(p)\n    {\n        p.direction=PORT_DIR_IN;\n        p.parent=this;\n        this.portsIn.push(p);\n        return p;\n    };\n    this.execute=function()\n    {\n        this.exec();\n    };\n    this.printInfo=function()\n    {\n        for(var i=0;i<this.portsIn.length;i++)\n            console.log('in: '+this.portsIn[i].getName());\n\n        for(var ipo in this.portsOut)\n            console.log('out: '+this.portsOut[ipo].getName());\n    };\n\n    this.removeLinks=function()\n    {\n        for(var i=0;i<this.portsIn.length;i++)\n            this.portsIn[i].removeLinks();\n        for(var ipo in this.portsOut)\n            this.portsOut[ipo].removeLinks();\n    };\n\n    this.getPort=function(name)\n    {\n        for(var ipi in this.portsIn)\n            if(this.portsIn[ipi].getName()==name)return this.portsIn[ipi];\n\n        for(var ipo in this.portsOut)\n            if(this.portsOut[ipo].getName()==name)return this.portsOut[ipo];\n    };\n\n    this.findFittingPort=function(otherPort)\n    {\n        for(var ipo in this.portsOut)\n        {\n            console.log('.');\n            if(Link.canLink(otherPort,this.portsOut[ipo]))return this.portsOut[ipo];\n        }\n    \n        for(var ipi in this.portsIn)\n        {\n            console.log('.');\n            if(Link.canLink(otherPort,this.portsIn[ipi]))return this.portsIn[ipi];\n        }\n\n    };\n\n\n    this.getSerialized=function()\n    {\n        var op={};\n        op.name=this.getName();\n        op.objName=this.objName;\n        op.id=this.id;\n        op.uiAttribs=this.uiAttribs;\n\n        op.portsIn=[];\n        op.portsOut=[];\n\n        for(var i=0;i<this.portsIn.length;i++)\n            op.portsIn.push( this.portsIn[i].getSerialized() );\n\n        for(var ipo in this.portsOut)\n            op.portsOut.push( this.portsOut[ipo].getSerialized() );\n\n        return op;\n    };\n\n    this.getPortByName=function(name)\n    {\n        for(var i=0;i<this.portsIn.length;i++)\n            if(this.portsIn[i].name==name)return this.portsIn[i];\n        \n        for(var ipo in this.portsOut)\n            if(this.portsOut[ipo].name==name)return this.portsOut[ipo];\n    };\n\n};\n\n// ------------------------------------------------------------------------------------\n\nvar Port=function(parent,name,type)\n{\n    var self=this;\n    this.direction=PORT_DIR_IN;\n    this.id=generateUUID();\n    this.parent=parent;\n    this.links=[];\n    this.value=null;\n    this.name=name;\n    this.type=type || OP_PORT_TYPE_VALUE;\n    var valueBeforeLink=null;\n\n    this.__defineGetter__(\"val\", function()\n    {\n        return this.value;\n    });\n\n    this.__defineSetter__(\"val\", function(v)\n    {\n        this.setValue(v);\n    });\n\n    this.getType=function(){ return this.type; };\n    this.isLinked=function(){ return this.links.length>0; };\n    this.onValueChanged=function(){};\n    this.onTriggered=function(){};\n\n    this.setValue=function(v)\n    {\n        if(v!=this.value)\n        {\n            this.value=v;\n            this.onValueChanged();\n\n            for(var i in this.links)\n            {\n                this.links[i].setValue();\n            }\n        }\n    };\n\n    this.getName= function()\n    {\n        return this.name;\n    };\n\n    this.addLink=function(l)\n    {\n        valueBeforeLink=self.value;\n        this.links.push(l);\n    };\n\n    this.removeLinkTo=function(p2)\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i].portIn==p2 || this.links[i].portOut==p2)\n            {\n                this.links[i].remove();\n            }\n        }\n\n    };\n\n    this.isLinkedTo=function(p2)\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i].portIn==p2 || this.links[i].portOut==p2)return true;\n        }\n        return false;\n    };\n\n    this.call=function()\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i].portIn !=this)this.links[i].portIn.onTriggered();\n            if(this.links[i].portOut!=this)this.links[i].portOut.onTriggered();\n        }\n    };\n\n\n    this.execute=function()\n    {\n        console.log('### execute port: '+this.getName() , this.goals.length);\n    };\n\n    this.getTypeString=function()\n    {\n        if(this.type==OP_PORT_TYPE_VALUE)return 'value';\n        if(this.type==OP_PORT_TYPE_FUNCTION)return 'function';\n        if(this.type==OP_PORT_TYPE_TEXTURE)return 'texture';\n    };\n\n    this.getSerialized=function()\n    {\n        var obj={};\n        obj.name=this.getName();\n        obj.value=this.value;\n\n        if(this.direction==PORT_DIR_IN && this.links.length>0)\n        {\n            obj.links=[];\n            for(var i in this.links)\n            {\n                obj.links.push( this.links[i].getSerialized() );\n            }\n        }\n        return obj;\n    };\n\n    this.removeLinks=function()\n    {\n        while(this.links.length>0)\n        {\n            this.links[0].remove();\n        }\n    };\n\n    this.removeLink=function(link)\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i]==link)this.links.splice( i, 1 );\n        }\n        self.setValue(valueBeforeLink);\n    };\n};\n\n\n\n// ---------------------------------------------------------------------------\n\nvar Link = function(scene)\n{\n    this.portIn=null;\n    this.portOut=null;\n    this.scene=scene;\n\n    this.setValue=function()\n    {\n        if(this.portIn.val!=this.portOut.val)\n            this.portIn.val=this.portOut.val;\n    };\n\n    this.getOtherPort=function(p)\n    {\n        if(p==this.portIn)return this.portOut;\n        return this.portIn;\n    };\n\n    this.remove=function()\n    {\n        this.portIn.removeLink(this);\n        this.portOut.removeLink(this);\n        this.scene.onUnLink(this.portIn,this.portOut);\n        this.portIn=null;\n        this.portOut=null;\n        this.scene=null;\n    };\n\n\n    this.link=function(p1,p2)\n    {\n        if(!Link.canLink(p1,p2))\n        {\n            console.log('cannot link ports!');\n            return false;\n        }\n        if(p1.direction==PORT_DIR_IN)\n        {\n            this.portIn=p1;\n            this.portOut=p2;\n        }\n        else\n        {\n            this.portIn=p2;\n            this.portOut=p1;\n        }\n\n        p1.addLink(this);\n        p2.addLink(this);\n        this.setValue();\n    };\n\n    this.getSerialized=function()\n    {\n        var obj={};\n\n        obj.portIn=this.portIn.getName();\n        obj.portOut=this.portOut.getName();\n        obj.objIn=this.portIn.parent.id;\n        obj.objOut=this.portOut.parent.id;\n\n        return obj;\n    };\n};\n\n\nLink.canLinkText=function(p1,p2)\n{\n    if(!p1)return 'can not link: port 1 invalid';\n    if(!p2)return 'can not link: port 2 invalid';\n    if(p1.direction==PORT_DIR_IN && p1.links.length>0)return 'input port already busy';\n    if(p2.direction==PORT_DIR_IN && p2.links.length>0)return 'input port already busy';\n    if(p1.isLinkedTo(p2))return 'ports already linked';\n    if(p1.direction==p2.direction)return 'can not link: same direction';\n    if(p1.type!=p2.type)return 'can not link: different type';\n    if(p1.parent==p2.parent)return 'can not link: same op';\n    return 'can link';\n};\n\nLink.canLink=function(p1,p2)\n{\n    if(!p1)return false;\n    if(!p2)return false;\n    if(p1.direction==PORT_DIR_IN && p1.links.length>0)return false;\n    if(p2.direction==PORT_DIR_IN && p2.links.length>0)return false;\n    if(p1.isLinkedTo(p2))return false;\n    if(p1.direction==p2.direction)return false;\n    if(p1.type!=p2.type)return false;\n    if(p1.parent==p2.parent)return false;\n\n    return true;\n};\n\n\n// ------------------------------------------------------------------------------------\n\n\nvar Scene = function()\n{\n    var self=this;\n    this.ops=[];\n    this.timer=new Timer();\n    this.animFrameOps=[];\n    \n\n    this.clear=function()\n    {\n        this.timer=new Timer();\n        while(this.ops.length>0)\n        {\n            this.deleteOp(this.ops[0].id);\n        }\n    };\n\n    this.addOp=function(objName,uiAttribs)\n    {\n        var op=eval('new '+objName+'();');\n        op.objName=objName;\n        op.uiAttribs=uiAttribs;\n\n        if(op.hasOwnProperty('onAnimFrame')) this.animFrameOps.push(op);\n\n        this.ops.push(op);\n        if(this.onAdd)this.onAdd(op);\n        return op;\n    };\n\n    this.deleteOp=function(opid,tryRelink)\n    {\n\n        for(var i in this.ops)\n        {\n            if(this.ops[i].id==opid)\n            {\n                var op=this.ops[i];\n                var reLinkP1=null;\n                var reLinkP2=null;\n\n                if(op)\n                {\n                    if(tryRelink)\n                    {\n                        if(this.ops[i].portsIn[0].isLinked() && this.ops[i].portsOut[0].isLinked())\n                        {\n                            if(this.ops[i].portsIn[0].getType()==this.ops[i].portsOut[0].getType())\n                            {\n                                reLinkP1=this.ops[i].portsIn[0].links[0].getOtherPort(this.ops[i].portsIn[0]);\n                                reLinkP2=this.ops[i].portsOut[0].links[0].getOtherPort(this.ops[i].portsOut[0]);\n                            }\n                        }\n                    }\n\n                    this.ops[i].removeLinks();\n                    this.onDelete(this.ops[i]);\n                    this.ops.splice( i, 1 );\n\n                    if(reLinkP1!==null && reLinkP2!==null)\n                    {\n                        self.link(\n                            reLinkP1.parent,\n                            reLinkP1.getName(),\n                            reLinkP2.parent,\n                            reLinkP2.getName()\n                            );\n                    }\n                }\n            }\n\n        }\n\n\n    };\n\n    this.exec=function()\n    {\n        requestAnimationFrame(self.exec);\n        self.timer.update();\n\n        var time=self.timer.getTime();\n\n        for(var i in self.animFrameOps)\n        {\n            self.animFrameOps[i].onAnimFrame(time);\n        }\n\n    };\n\n    this.link=function(op1,port1Name,op2,port2Name)\n    {\n        var port1=op1.getPort(port1Name);\n        var port2=op2.getPort(port2Name);\n\n        if(Link.canLink(port1,port2))\n        {\n            var link=new Link(this);\n            link.link(port1,port2);\n            this.onLink(port1,port2);\n            return link;\n        }\n        else\n        {\n            console.log(Link.canLinkText(port1,port2));\n        }\n    };\n    this.onAdd=function(op){};\n    this.onDelete=function(op){};\n    this.onLink=function(p1,p2){};\n    this.onUnLink=function(p1,p2){};\n    this.serialize=function()\n    {\n        var obj={};\n\n        obj.ops=[];\n        for(var i in this.ops)\n        {\n            obj.ops.push( this.ops[i].getSerialized() );\n        }\n        \n        return JSON.stringify(obj);\n    };\n    this.getOpById=function(opid)\n    {\n        for(var i in this.ops)\n        {\n            if(this.ops[i].id==opid)return this.ops[i];\n        }\n\n    };\n    this.deSerialize=function(obj)\n    {\n        if (typeof obj === \"string\") obj=JSON.parse(obj);\n        var self=this;\n\n        function addLink(opinid,opoutid,inName,outName)\n        {\n            var found=false;\n            if(!found)\n            {\n                self.link(\n                    self.getOpById(opinid),\n                    inName,\n                    self.getOpById(opoutid),\n                    outName\n                    );\n            }\n        }\n\n        // add ops...\n        for(var iop in obj.ops)\n        {\n            var op=this.addOp(obj.ops[iop].objName,obj.ops[iop].uiAttribs);\n            op.id=obj.ops[iop].id;\n\n            for(var ipi in obj.ops[iop].portsIn)\n            {\n                var port=op.getPortByName(obj.ops[iop].portsIn[ipi].name);\n                if(port && port.type!=OP_PORT_TYPE_TEXTURE)port.val=obj.ops[iop].portsIn[ipi].value;\n            }\n\n            for(var ipo in obj.ops[iop].portsOut)\n            {\n                var port2=op.getPortByName(obj.ops[iop].portsOut[ipo].name);\n                if(port2&& port2.type!=OP_PORT_TYPE_TEXTURE)port2.val=obj.ops[iop].portsOut[ipo].value;\n            }\n\n\n            // op.uiAttribs=obj.ops[iop].uiAttribs;\n        }\n\n        // create links...\n        for(iop in obj.ops)\n        {\n            for(var ipi2 in obj.ops[iop].portsIn)\n            {\n\n                for(var ili in obj.ops[iop].portsIn[ipi2].links)\n                {\n                    addLink(\n                        obj.ops[iop].portsIn[ipi2].links[ili].objIn,\n                        obj.ops[iop].portsIn[ipi2].links[ili].objOut,\n                        obj.ops[iop].portsIn[ipi2].links[ili].portIn,\n                        obj.ops[iop].portsIn[ipi2].links[ili].portOut);\n                }\n            }\n\n\n            // for(var ipo in obj.ops[iop].portsOut)\n            // {\n            //     for(var ili in obj.ops[iop].portsOut[ipo].links)\n            //     {\n            //         addLink(\n            //             obj.ops[iop].portsOut[ipo].links[ili].objIn,\n            //             obj.ops[iop].portsOut[ipo].links[ili].objOut,\n            //             obj.ops[iop].portsOut[ipo].links[ili].portIn,\n            //             obj.ops[iop].portsOut[ipo].links[ili].portOut);\n\n            //     }\n            // }\n        }\n\n\n        for(var i in this.ops)\n        {\n            this.ops[i].id=generateUUID();\n        }\n\n\n\n    };\n\n    this.exec();\n\n};\n\n\n\n\n","//http://k3d.ivank.net/K3D.js\n//http://fhtr.blogspot.de/2009/12/3d-models-and-parsing-binary-data-with.html\n//https://github.com/gpjt/webgl-lessons/blob/master/lesson05/index.html\n\nOps.Gl={};\nvar GL=null;\nvar GL=null;\n\nvar currentShader=null;\n\nvar mvMatrix = mat4.create();\nvar pMatrix = mat4.create();\n\nOps.Gl.Renderer = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    var simpleShader=new CGL.Shader();\n \n\n    this.name='WebGL Renderer';\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var initTranslate=vec3.create();\n    vec3.set(initTranslate, 0,0,-2);\n\n    this.onAnimFrame=function(time)\n    {\n        currentShader=simpleShader;\n        gl.enable(gl.DEPTH_TEST);\n        GL.clearColor(0,0,0,1);\n        GL.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n        gl.viewport(0,0,self.canvas.clientWidth,self.canvas.clientHeight);\n        mat4.perspective(pMatrix,45, self.canvas.clientWidth/self.canvas.clientHeight, 0.01, 1100.0);\n        mat4.identity(mvMatrix);\n        mat4.translate(mvMatrix,mvMatrix, initTranslate);\n\n        GL.enable(GL.BLEND);\n        GL.blendFunc(GL.SRC_ALPHA,GL.ONE_MINUS_SRC_ALPHA);\n\n        self.trigger.call();\n    };\n\n    this.canvas = document.getElementById(\"glcanvas\");\n    GL = this.canvas.getContext(\"experimental-webgl\");\n    gl = this.canvas.getContext(\"experimental-webgl\");\n\n};\n\nOps.Gl.Renderer.prototype = new Op();\n\n\n\n\n\n// --------------------------------------------------------------------------\n\n\n\nOps.Gl.LeapMotion = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='LeapMotion';\n\n    this.transX=this.addOutPort(new Port(this,\"translationX\"));\n    this.transY=this.addOutPort(new Port(this,\"translationY\"));\n    this.transZ=this.addOutPort(new Port(this,\"translationZ\"));\n\n    this.finger0X=this.addOutPort(new Port(this,\"finger0X\"));\n    this.finger0Y=this.addOutPort(new Port(this,\"finger0Y\"));\n    this.finger0Z=this.addOutPort(new Port(this,\"finger0Z\"));\n\n\n\n\n\n\n    Leap.loop(function (frame)\n    {\n        // console.log(frame);\n\n        self.transX.val=frame._translation[0];\n        self.transY.val=frame._translation[1];\n        self.transZ.val=frame._translation[2];\n\n        if(frame.fingers.length>0)\n        {\n            self.finger0X.val=frame.fingers[0].tipPosition[0];\n            self.finger0Y.val=frame.fingers[0].tipPosition[1];\n            self.finger0Z.val=frame.fingers[0].tipPosition[2];\n\n        }\n\n    });\n\n\n\n};\n\nOps.Gl.LeapMotion.prototype = new Op();\n\n\n\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.ClearColor = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='ClearColor';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.r=this.addInPort(new Port(this,\"r\"));\n    this.g=this.addInPort(new Port(this,\"g\"));\n    this.b=this.addInPort(new Port(this,\"b\"));\n\n    this.r.val=0.3;\n    this.g.val=0.3;\n    this.b.val=0.3;\n    this.render.onTriggered=function()\n    {\n        GL.clearColor(self.r.val,self.g.val,self.b.val,1);\n        GL.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n\n        self.trigger.call();\n    };\n\n};\n\nOps.Gl.ClearColor.prototype = new Op();\n\n\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.ClearDepth = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='ClearDepth';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        GL.clear(GL.DEPTH_BUFFER_BIT);\n        self.trigger.call();\n    };\n};\n\nOps.Gl.ClearDepth.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n    \nOps.Gl.TextureEmpty = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='texture empty';\n    this.width=this.addInPort(new Port(this,\"width\",OP_PORT_TYPE_VALUE));\n    this.height=this.addInPort(new Port(this,\"height\",OP_PORT_TYPE_VALUE));\n\n    this.textureOut=this.addOutPort(new Port(this,\"texture\",OP_PORT_TYPE_TEXTURE));\n    this.tex=new CGL.Texture();\n    \n    var sizeChanged=function()\n    {\n        self.tex.setSize(self.width.val,self.height.val);\n        self.textureOut.val=self.tex.tex;\n    };\n\n    this.width.onValueChanged=sizeChanged;\n    this.height.onValueChanged=sizeChanged;\n\n};\n\nOps.Gl.TextureEmpty.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n    \nOps.Gl.Texture = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='texture';\n    this.filename=this.addInPort(new Port(this,\"file\",OP_PORT_TYPE_VALUE));\n    this.textureOut=this.addOutPort(new Port(this,\"texture\",OP_PORT_TYPE_TEXTURE));\n    \n    this.filename.onValueChanged=function()\n    {\n        console.log('load texture...');\n        self.tex=CGL.Texture.load(self.filename.val);\n        self.textureOut.val=self.tex.tex;\n    };\n\n    this.filename.val='assets/skull.png';\n    // this.filename.onValueChanged();\n    // this.textureOut.val=this.tex.tex;\n};\n\nOps.Gl.Texture.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.Meshes={};\n\n\n\nOps.Gl.Meshes.Rectangle = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='rectangle';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        self.mesh.render(currentShader);\n        self.trigger.call();\n    };\n\n    var geom=new CGL.Geometry();\n    geom.vertices = [\n         1.0,  1.0,  0.0,\n        -1.0,  1.0,  0.0,\n         1.0, -1.0,  0.0,\n        -1.0, -1.0,  0.0\n    ];\n\n    geom.texCoords = [\n         1.0, 1.0,\n         0.0, 1.0,\n         1.0, 0.0,\n         0.0, 0.0\n    ];\n\n    geom.verticesIndices = [\n        0, 1, 2,\n        3, 1, 2\n    ];\n    this.mesh=new CGL.Mesh(geom);\n\n};\n\nOps.Gl.Meshes.Rectangle.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.Meshes.Circle = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Circle';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n\n    this.segments=this.addInPort(new Port(this,\"segments\"));\n    this.radius=this.addInPort(new Port(this,\"radius\"));\n    this.percent=this.addInPort(new Port(this,\"percent\"));\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        mesh.render(currentShader);\n        self.trigger.call();\n    };\n\n\n    this.segments.val=20;\n    this.radius.val=1;\n    this.percent.val=1;\n\n    var geom=new CGL.Geometry();\n    var mesh=new CGL.Mesh(geom);\n\n    function calc()\n    {\n        geom.clear();\n        var oldPosX=0;\n        var oldPosY=0;\n\n        // geom->texCoords.push_back(new Vec2f( 0.5,0.5 ));\n\n        for (var i=0; i <= self.segments.val*self.percent.val; i++)\n        {\n            var degInRad = (360/self.segments.val)*i*CGL.DEG2RAD;\n            var posx=Math.cos(degInRad)*self.radius.val;\n            var posy=Math.sin(degInRad)*self.radius.val;\n\n            geom.addFace(\n                        [posx,posy,0],\n                        [oldPosX,oldPosY,0],\n                        [0,0,0]\n            );\n\n            // tmesh->normals.push_back(new Vec3f(1,1,1));\n            // tmesh->normals.push_back(new Vec3f(1,1,1));\n            // tmesh->normals.push_back(new Vec3f(1,1,1));\n\n            // tmesh->texCoords.push_back(new Vec2f( 0.5f*(1+oldPosX/radius),  0.5f*(1.0f+oldPosY/radius)));\n            // tmesh->texCoords.push_back(new Vec2f( 0.5f*(1+posx/radius),     0.5f*(1.0f+posy/radius)));\n\n            // tmesh->texFaces.push_back(new Vec3i(0,tmesh->texCoords.size()-2,tmesh->texCoords.size()-1));\n\n            oldPosX=posx;\n            oldPosY=posy;\n        }\n\n        mesh.setGeom(geom);\n    }\n\n    this.segments.onValueChanged=calc;\n    this.radius.onValueChanged=calc;\n    this.percent.onValueChanged=calc;\n};\n\nOps.Gl.Meshes.Circle.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\n\n\n\n\nOps.Gl.Meshes.ObjMesh = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='OBJ Mesh';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.mesh=null;\n\n    this.render.onTriggered=function()\n    {\n        if(self.mesh)\n        {\n            self.mesh.render(currentShader);\n        }\n\n        self.trigger.call();\n    };\n\n\n    ajaxRequest('assets/skull.obj',function(response)\n    {\n        console.log(response);\n                \n        var r=parseOBJ(response);\n\nunwrap = function(ind, crd, cpi)\n{\n    var ncrd = new Array(Math.floor(ind.length/3)*cpi);\n    for(var i=0; i<ind.length; i++)\n    {\n        for(var j=0; j<cpi; j++)\n        {\n            ncrd[i*cpi+j] = crd[ind[i]*cpi+j];\n        }\n    }\n    return ncrd;\n};\n\nvar l=r.verticesIndices.length;\n        r.vertices = unwrap(r.verticesIndices, r.vertices, 3);\n        r.texCoords = unwrap(r.texCoordsIndices  , r.texCoords  , 2);\n        r.verticesIndices = [];\n        for(var i=0; i<l; i++) r.verticesIndices.push(i);\n\n        \n        self.mesh=new CGL.Mesh(r);\n    });\n\n\n\n};\n\nOps.Gl.Meshes.ObjMesh.prototype = new Op();\n\n\n\n\n\n// ----------------------------------------------------------------\n\n\nOps.Gl.Meshes.Cube = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Cube';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.mesh=null;\n\n    this.render.onTriggered=function()\n    {\n        if(self.mesh!==null)\n        {\n            self.mesh.render(currentShader);\n        }\n\n        self.trigger.call();\n    };\n\n\n    var geom=new CGL.Geometry();\n\n            geom.vertices = [\n            // Front face\n            -1.0, -1.0,  1.0,\n             1.0, -1.0,  1.0,\n             1.0,  1.0,  1.0,\n            -1.0,  1.0,  1.0,\n            // Back face\n            -1.0, -1.0, -1.0,\n            -1.0,  1.0, -1.0,\n             1.0,  1.0, -1.0,\n             1.0, -1.0, -1.0,\n            // Top face\n            -1.0,  1.0, -1.0,\n            -1.0,  1.0,  1.0,\n             1.0,  1.0,  1.0,\n             1.0,  1.0, -1.0,\n            // Bottom face\n            -1.0, -1.0, -1.0,\n             1.0, -1.0, -1.0,\n             1.0, -1.0,  1.0,\n            -1.0, -1.0,  1.0,\n            // Right face\n             1.0, -1.0, -1.0,\n             1.0,  1.0, -1.0,\n             1.0,  1.0,  1.0,\n             1.0, -1.0,  1.0,\n            // Left face\n            -1.0, -1.0, -1.0,\n            -1.0, -1.0,  1.0,\n            -1.0,  1.0,  1.0,\n            -1.0,  1.0, -1.0,\n        ];\n\n        geom.texCoords = [\n          // Front face\n          0.0, 0.0,\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n          // Back face\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n          0.0, 0.0,\n          // Top face\n          0.0, 1.0,\n          0.0, 0.0,\n          1.0, 0.0,\n          1.0, 1.0,\n          // Bottom face\n          1.0, 1.0,\n          0.0, 1.0,\n          0.0, 0.0,\n          1.0, 0.0,\n          // Right face\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n          0.0, 0.0,\n          // Left face\n          0.0, 0.0,\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n        ];\n\n        geom.verticesIndices = [\n            0, 1, 2,      0, 2, 3,    // Front face\n            4, 5, 6,      4, 6, 7,    // Back face\n            8, 9, 10,     8, 10, 11,  // Top face\n            12, 13, 14,   12, 14, 15, // Bottom face\n            16, 17, 18,   16, 18, 19, // Right face\n            20, 21, 22,   20, 22, 23  // Left face\n        ];\n\n\n\n    this.mesh=new CGL.Mesh(geom);\n\n\n\n};\n\nOps.Gl.Meshes.Cube.prototype = new Op();\n\n\n\n\n\n// ----------------------------------------------------------------\n\n\nOps.Gl.Meshes.Plotter = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Plotter';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.v=this.addInPort(new Port(this,\"value\"));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        // currentShader.setAttributeVertex( self.buffer.itemSize);\n        gl.vertexAttribPointer(currentShader.getAttrVertexPos(),self.buffer.itemSize, gl.FLOAT, false, 0, 0);\n        currentShader.bind();\n        gl.bindBuffer(gl.ARRAY_BUFFER, self.buffer);\n        gl.drawArrays(gl.LINE_STRIP, 0, self.buffer.numItems);\n\n        self.trigger.call();\n    };\n\n    this.buffer = gl.createBuffer();\n    \n    var num=50;\n    this.vertices = [];\n    for(var i=0;i<num;i++)\n    {\n        this.vertices.push(1/num*i);\n        this.vertices.push(Math.random()-0.5);\n        this.vertices.push(0);\n    }\n\n    function bufferData()\n    {\n        gl.lineWidth(4);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, self.buffer);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(self.vertices), gl.STATIC_DRAW);\n        self.buffer.itemSize = 3;\n        self.buffer.numItems = num;\n    }\n    bufferData();\n\n    this.v.onValueChanged=function()\n    {\n        self.vertices.splice(0,3);\n        self.vertices.push(1);\n        self.vertices.push(self.v.val);\n        self.vertices.push(0);\n\n        for(var i=0;i<num*3;i+=3)\n        {\n            self.vertices[i]=1/num*i;\n        }\n\n        bufferData();\n    };\n\n\n};\n\nOps.Gl.Meshes.Plotter.prototype = new Op();\n\n\n// ----------------------------------------------------------------\n\nOps.Gl.Meshes.Triangle = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Triangle';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        self.mesh.render(currentShader);\n        self.trigger.call();\n    };\n\n    var geom=new CGL.Geometry();\n    geom.vertices = [\n         0.0,  1.0,  0.0,\n        -1.0,  -1.0,  0.0,\n         1.0, -1.0,  0.0\n    ];\n\n    geom.verticesIndices = [\n        0, 1, 2\n    ];\n    this.mesh=new CGL.Mesh(geom);\n};\n\nOps.Gl.Meshes.Triangle.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.Shader={};\n\nOps.Gl.Shader.BasicMaterial = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='BasicMaterial';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n\n    this.doRender=function()\n    {\n        var oldShader=currentShader;\n        currentShader=shader;\n\n        if(self.texture.val)\n        {\n            gl.activeTexture(gl.TEXTURE0);\n            gl.bindTexture(gl.TEXTURE_2D, self.texture.val);\n        }\n\n        self.trigger.call();\n\n        currentShader=oldShader;\n    };\n\n    var srcFrag=''+\n        'precision highp float;\\n'+\n        '#ifdef HAS_TEXTURES\\n'+\n        '  varying vec2 texCoord;\\n'+\n        '  uniform sampler2D tex;\\n'+\n        '#endif\\n'+\n        'uniform float r;\\n'+\n        'uniform float g;\\n'+\n        'uniform float b;\\n'+\n        'uniform float a;\\n'+\n        '\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        'vec4 col=vec4(r,g,b,a);\\n'+\n        '#ifdef HAS_TEXTURES\\n'+\n        '   col=texture2D(tex,texCoord);\\n'+\n        'col.a*=a;'.endl()+\n        '#endif\\n'+\n        'gl_FragColor = col;\\n'+\n        '}\\n';\n\n\n    var shader=new CGL.Shader();\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n\n\n\n\n    this.r=this.addInPort(new Port(this,\"r\"));\n    this.r.onValueChanged=function()\n    {\n        if(!self.r.uniform) self.r.uniform=new CGL.Uniform(shader,'f','r',self.r.val);\n        else self.r.uniform.setValue(self.r.val);\n    };\n\n    this.g=this.addInPort(new Port(this,\"g\"));\n    this.g.onValueChanged=function()\n    {\n        if(!self.g.uniform) self.g.uniform=new CGL.Uniform(shader,'f','g',self.g.val);\n        else self.g.uniform.setValue(self.g.val);\n    };\n\n    this.b=this.addInPort(new Port(this,\"b\"));\n    this.b.onValueChanged=function()\n    {\n        if(!self.b.uniform) self.b.uniform=new CGL.Uniform(shader,'f','b',self.b.val);\n        else self.b.uniform.setValue(self.b.val);\n    };\n\n    this.a=this.addInPort(new Port(this,\"a\"));\n    this.a.onValueChanged=function()\n    {\n        if(!self.a.uniform) self.a.uniform=new CGL.Uniform(shader,'f','a',self.a.val);\n        else self.a.uniform.setValue(self.a.val);\n    };\n\n    this.r.val=Math.random();\n    this.g.val=Math.random();\n    this.b.val=Math.random();\n    this.a.val=1.0;\n\n    this.render.onTriggered=this.doRender;\n    this.texture=this.addInPort(new Port(this,\"texture\",OP_PORT_TYPE_TEXTURE));\n    this.texture.onValueChanged=function()\n    {\n        if(self.texture.val)\n        {\n            console.log('TEXTURE ADDED');\n            self.textureUniform=new CGL.Uniform(shader,'t','tex',0);\n        }\n        else\n        {\n            shader.removeUniform('tex');\n        }\n    };\n\n    this.doRender();\n};\n\nOps.Gl.Shader.BasicMaterial.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Shader.Schwurbel = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Schwurbel';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.timer=this.addInPort(new Port(this,\"time\"));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.doRender=function()\n    {\n        currentShader=shader;\n        if(!self.timer.uniLoc)\n        {\n            shader.bind();\n            self.timer.uniLoc=gl.getUniformLocation(shader.getProgram(), \"time\");\n        }\n        gl.uniform1f(self.timer.uniLoc, self.timer.val);\n\n        self.trigger.call();\n    };\n\n    var srcFrag=''+\n        'precision mediump float;\\n'+\n        'uniform float time;\\n'+\n        '\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        'float c=sqrt(sin(time*0.02)*cos((time+gl_FragCoord.y)*0.02)+sin(time+gl_FragCoord.x*0.02)*sin(time+gl_FragCoord.y*0.02));\\n'+\n        'gl_FragColor = vec4( c,c,c,1.0);\\n'+\n        '}\\n';\n\n    var shader=new CGL.Shader();\n    shader.compile(shader.getDefaultVertexShader(),srcFrag);\n\n    this.doRender();\n    this.render.onTriggered=this.doRender;\n};\n\nOps.Gl.Shader.Schwurbel.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Shader.Noise = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Noise';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var timeUniform=-1;\n    var timeStart=-1;\n\n    this.doRender=function()\n    {\n        if(timeUniform==-1)\n        {\n            timeStart=Date.now();\n            shader.bind();\n            timeUniform=gl.getUniformLocation(shader.getProgram(), \"time\");\n        }\n\n        gl.uniform1f(timeUniform, (Date.now()-timeStart)/1000);\n        currentShader=shader;\n\n        self.trigger.call();\n    };\n\n    var srcFrag=''+\n        'precision mediump float;\\n'+\n        'uniform float time;\\n'+\n        '\\n'+\n        'float random(vec2 co)\\n'+\n        '{\\n'+\n        '   return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\\n'+\n        '}\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        '   float c=random(time*gl_FragCoord.xy);'+\n        '   gl_FragColor = vec4( c,c,c,1.0);\\n'+\n        '}\\n';\n\n\n    var shader=new CGL.Shader();\n    shader.compile(shader.getDefaultVertexShader(),srcFrag);\n\n    this.doRender();\n    this.render.onTriggered=this.doRender;\n};\n\nOps.Gl.Shader.Noise.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.Matrix={};\n\n\nOps.Gl.Matrix.Translate = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='translate';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.x=this.addInPort(new Port(this,\"x\"));\n    this.y=this.addInPort(new Port(this,\"y\"));\n    this.z=this.addInPort(new Port(this,\"z\"));\n    this.x.val=0.0;\n    this.y.val=0.0;\n    this.z.val=0.0;\n    \n    var vec=vec3.create();\n\n    this.render.onTriggered=function()\n    {\n        vec3.set(vec, self.x.val,self.y.val,self.z.val);\n\n        mat4.translate(mvMatrix,mvMatrix, vec);\n        self.trigger.call();\n    };\n\n};\n\nOps.Gl.Matrix.Translate.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Matrix.Scale = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='scale';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.scale=this.addInPort(new Port(this,\"scale\"));\n    \n    var vScale=vec3.create();\n    var oldMatrix = mat4.create();\n    var transMatrix = mat4.create();\n    mat4.identity(transMatrix);\n\n    var doScale=false;\n\n    this.render.onTriggered=function()\n    {\n        mat4.copy(oldMatrix, mvMatrix);\n\n        mat4.multiply(mvMatrix,mvMatrix,transMatrix);\n\n        self.trigger.call();\n\n        mat4.copy(mvMatrix,oldMatrix);\n    };\n\n    var updateMatrix=function()\n    {\n        mat4.identity(transMatrix);\n        mat4.scale(transMatrix,transMatrix, vScale);\n    };\n\n    this.scaleChanged=function()\n    {\n        doScale=false;\n        //if(self.scaleX.val!==0.0 || self.scaleY.val!==0.0 || self.scaleZ.val!==0.0)doScale=true;\n        vec3.set(vScale, self.scale.val,self.scale.val,self.scale.val);\n        updateMatrix();\n    };\n\n    this.scale.onValueChanged=this.scaleChanged;\n\n    this.scale.val=1.0;\n\n    updateMatrix();\n};\n\nOps.Gl.Matrix.Scale.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.Matrix.Transform = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    this.name='transform';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.posX=this.addInPort(new Port(this,\"posX\"));\n    this.posY=this.addInPort(new Port(this,\"posY\"));\n    this.posZ=this.addInPort(new Port(this,\"posZ\"));\n\n    this.scaleX=this.addInPort(new Port(this,\"scaleX\"));\n    this.scaleY=this.addInPort(new Port(this,\"scaleY\"));\n    this.scaleZ=this.addInPort(new Port(this,\"scaleZ\"));\n\n    this.rotX=this.addInPort(new Port(this,\"rotX\"));\n    this.rotY=this.addInPort(new Port(this,\"rotY\"));\n    this.rotZ=this.addInPort(new Port(this,\"rotZ\"));\n    \n    var vPos=vec3.create();\n    var vScale=vec3.create();\n    var oldMatrix = mat4.create();\n    var transMatrix = mat4.create();\n    mat4.identity(transMatrix);\n\n    var doScale=false;\n    var doTranslate=false;\n\n    this.render.onTriggered=function()\n    {\n        mat4.copy(oldMatrix, mvMatrix);\n\n        mat4.multiply(mvMatrix,mvMatrix,transMatrix);\n\n        self.trigger.call();\n\n        mat4.copy(mvMatrix,oldMatrix);\n    };\n\n    var updateMatrix=function()\n    {\n        mat4.identity(transMatrix);\n        if(doTranslate)mat4.translate(transMatrix,transMatrix, vPos);\n\n        if(self.rotX.val!==0)mat4.rotateX(transMatrix,transMatrix, self.rotX.val*CGL.DEG2RAD);\n        if(self.rotY.val!==0)mat4.rotateY(transMatrix,transMatrix, self.rotY.val*CGL.DEG2RAD);\n        if(self.rotZ.val!==0)mat4.rotateZ(transMatrix,transMatrix, self.rotZ.val*CGL.DEG2RAD);\n\n        if(doScale)mat4.scale(transMatrix,transMatrix, vScale);\n    };\n\n    this.translateChanged=function()\n    {\n        doTranslate=false;\n        if(self.posX.val!==0.0 || self.posY.val!==0.0 || self.posZ.val!==0.0)doTranslate=true;\n        vec3.set(vPos, self.posX.val,self.posY.val,self.posZ.val);\n        updateMatrix();\n    };\n\n    this.scaleChanged=function()\n    {\n        doScale=false;\n        if(self.scaleX.val!==0.0 || self.scaleY.val!==0.0 || self.scaleZ.val!==0.0)doScale=true;\n        vec3.set(vScale, self.scaleX.val,self.scaleY.val,self.scaleZ.val);\n        updateMatrix();\n    };\n\n    this.rotChanged=function()\n    {\n        updateMatrix();\n    };\n\n    this.rotX.onValueChanged=this.rotChanged;\n    this.rotY.onValueChanged=this.rotChanged;\n    this.rotZ.onValueChanged=this.rotChanged;\n\n    this.scaleX.onValueChanged=this.scaleChanged;\n    this.scaleY.onValueChanged=this.scaleChanged;\n    this.scaleZ.onValueChanged=this.scaleChanged;\n\n    this.posX.onValueChanged=this.translateChanged;\n    this.posY.onValueChanged=this.translateChanged;\n    this.posZ.onValueChanged=this.translateChanged;\n\n    this.rotX.val=0.0;\n    this.rotY.val=0.0;\n    this.rotZ.val=0.0;\n\n    this.scaleX.val=1.0;\n    this.scaleY.val=1.0;\n    this.scaleZ.val=1.0;\n\n    this.posX.val=0.0;\n    this.posY.val=0.0;\n    this.posZ.val=0.0;\n\n    updateMatrix();\n};\n\nOps.Gl.Matrix.Transform.prototype = new Op();\n\n\n\n// ----------------------------------------------------\n\n\nOps.RandomCluster = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='random cluster';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.num=this.addInPort(new Port(this,\"num\"));\n    this.size=this.addInPort(new Port(this,\"size\"));\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION)) ;\n    this.idx=this.addOutPort(new Port(this,\"index\")) ;\n    this.rnd=this.addOutPort(new Port(this,\"rnd\")) ;\n    this.randoms=[];\n    this.randomsRot=[];\n    this.randomsFloats=[];\n\n    var transVec=vec3.create();\n    var oldMatrix = mat4.create();\n\n    this.exe.onTriggered=function()\n    {\n        mat4.copy(oldMatrix, mvMatrix);\n\n        for(var i=0;i<self.randoms.length;i++)\n        {\n            mat4.translate(mvMatrix,mvMatrix, self.randoms[i]);\n\n            mat4.rotateX(mvMatrix,mvMatrix, self.randomsRot[i][0]);\n            mat4.rotateY(mvMatrix,mvMatrix, self.randomsRot[i][1]);\n            mat4.rotateZ(mvMatrix,mvMatrix, self.randomsRot[i][2]);\n\n            self.idx.val=i;\n            self.rnd.val=self.randomsFloats[i];\n\n            self.trigger.call();\n            mat4.copy(mvMatrix,oldMatrix);\n\n        }\n\n\n    };\n\n    function reset()\n    {\n        self.randoms=[];\n        self.randomsRot=[];\n        self.randomsFloats=[];\n\n        for(var i=0;i<self.num.val;i++)\n        {\n            self.randomsFloats.push(Math.random());\n            self.randoms.push(vec3.fromValues(\n                (Math.random()-0.5)*self.size.val,\n                (Math.random()-0.5)*self.size.val,\n                (Math.random()-0.5)*self.size.val\n                ));\n            self.randomsRot.push(vec3.fromValues(\n                Math.random()*360*CGL.DEG2RAD,\n                Math.random()*360*CGL.DEG2RAD,\n                Math.random()*360*CGL.DEG2RAD\n                ));\n        }\n    }\n\n    this.num.onValueChanged=reset;\n    this.size.onValueChanged=reset;\n\n    this.num.val=100;\n\n\n};\nOps.RandomCluster.prototype = new Op();\n\n\n\n\n\n","// https://github.com/automat/foam-gl\n// http://howlerjs.com/\n//http://learningwebgl.com/lessons/lesson01/index.html\n\n\nOps.Log = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='logger';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.input=this.addInPort(new Port(this,\"input\"));\n    this.input.val='';\n\n    this.exec=function()\n    {\n        console.log(\"[log] \" + self.input.val);\n    };\n\n    this.exe.onTriggered=this.exec;\n    this.input.onValueChanged=this.exec;\n};\nOps.Log.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\n\nOps.CallsPerSecond = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='CallsPerSecond';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.timeStart=0;\n    this.cps=0;\n\n    this.exe.onTriggered=function()\n    {\n        if(self.timeStart===0)self.timeStart=Date.now();\n        var now = Date.now();\n\n        if(now-self.timeStart>1000)\n        {\n            self.timeStart=Date.now();\n            console.log('cps: '+self.cps);\n            self.cps=0;\n        }\n\n        self.cps++;\n    };\n};\nOps.CallsPerSecond.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\nOps.Value = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Value';\n    this.v=this.addInPort(new Port(this,\"value\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.v.val;\n    };\n\n    this.v.onValueChanged=this.exec;\n};\n\nOps.Value.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\n\nOps.TimeLineTime = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='TimeLineTime';\n    this.theTime=this.addOutPort(new Port(this,\"time\"));\n\n    this.onAnimFrame=function(time)\n    {\n        this.theTime.val=time;\n    };\n\n};\nOps.TimeLineTime.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\n\n\n\nOps.Repeat = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Repeat';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.num=this.addInPort(new Port(this,\"num\"));\n    this.num.val=5;\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n    this.idx=this.addOutPort(new Port(this,\"index\"));\n\n    this.exe.onTriggered=function()\n    {\n\n        for(var i=0;i<self.num.value;i++)\n        {\n            self.idx.val=i;\n            self.trigger.call();\n        }\n\n    };\n};\nOps.Repeat.prototype = new Op();\n\n\n\n\n// ---------------------------------------------------------------------------\n\n\nOps.IfTrueThen = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='if true then';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.bool=this.addInPort(new Port(this,\"boolean\"));\n    this.bool.val=false;\n\n    this.triggerThen=this.addOutPort(new Port(this,\"then\",OP_PORT_TYPE_FUNCTION));\n    this.triggerElse=this.addOutPort(new Port(this,\"else\",OP_PORT_TYPE_FUNCTION));\n\n    this.exe.onTriggered=function()\n    {\n        if(self.bool.val===true)\n        {\n            self.triggerThen.call();\n        }\n        else\n        {\n            self.triggerElse.call();\n        }\n    };\n\n    this.bool.onValueChanged=function()\n    {\n        self.exe.onTriggered();\n    };\n\n};\nOps.IfTrueThen.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------\n\n\nOps.Group = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='group';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.triggers=[];\n\n    for(var i=0;i<10;i++)\n    {\n        this.triggers.push( this.addOutPort(new Port(this,\"trigger \"+i,OP_PORT_TYPE_FUNCTION)) );\n    }\n\n    this.exe.onTriggered=function()\n    {\n        for(var i in self.triggers)\n        {\n            self.triggers[i].call();\n        }\n\n    };\n\n\n};\nOps.Group.prototype = new Op();\n\n\n\n\n// ---------------------------------------------------------------------------\n\nOps.Interval = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='Interval';\n    this.timeOutId=-1;\n    this.interval=this.addInPort(new Port(this,\"interval\"));\n    this.interval.val=1000;\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.exec=function()\n    {\n        if(this.timeOutId!=-1)return;\n        var self=this;\n\n        this.timeOutId=setTimeout(function()\n        {\n            self.timeOutId=-1;\n            self.trigger.call();\n            self.exec();\n        },\n        this.interval.val );\n    };\n\n    this.exec();\n\n};\n\nOps.Interval.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\n// --------------------------------------------------------------------------\n\nOps.Anim={};\n\nOps.Anim.SinusAnim = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='SinusAnim';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    var self=this;\n\n    this.exe.onTriggered=function()\n    {\n        self.result.val=Math.sin(Date.now()/1000.0);\n    };\n\n    this.exe.onTriggered();\n\n};\n\nOps.Anim.SinusAnim.prototype = new Op();\n\n\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Anim.RelativeTime = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='RelativeTime';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    var self=this;\n    var startTime=Date.now()/1000.0;\n\n    this.exe.onTriggered=function()\n    {\n        self.result.val=Date.now()/1000.0-startTime;\n    };\n\n    this.exe.onTriggered();\n\n};\n\nOps.Anim.RelativeTime.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\nOps.Input={};\n\nOps.Input.GamePad = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='GamePad';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.numPads=this.addOutPort(new Port(this,\"numPads\"));\n    this.axis1=this.addOutPort(new Port(this,\"axis1\"));\n    this.axis2=this.addOutPort(new Port(this,\"axis2\"));\n    this.axis3=this.addOutPort(new Port(this,\"axis3\"));\n    this.axis4=this.addOutPort(new Port(this,\"axis4\"));\n    this.button0=this.addOutPort(new Port(this,\"button0\"));\n    this.button1=this.addOutPort(new Port(this,\"button1\"));\n    this.button2=this.addOutPort(new Port(this,\"button2\"));\n    this.button3=this.addOutPort(new Port(this,\"button3\"));\n    this.button4=this.addOutPort(new Port(this,\"button4\"));\n\n    var self=this;\n    var startTime=Date.now()/1000.0;\n\n    this.exe.onTriggered=function()\n    {\n        var gamePads=navigator.getGamepads();\n        var count=0;\n\n        for(var gp in gamePads)\n        {\n            if(gamePads[gp].axes)\n            {\n                self.axis1.val=gamePads[gp].axes[0];\n                self.axis2.val=gamePads[gp].axes[1];\n                self.axis3.val=gamePads[gp].axes[2];\n                self.axis4.val=gamePads[gp].axes[3];\n\n                self.button0.val=gamePads[gp].buttons[0].pressed;\n                self.button0.val=gamePads[gp].buttons[1].pressed;\n                self.button2.val=gamePads[gp].buttons[2].pressed;\n                self.button3.val=gamePads[gp].buttons[3].pressed;\n                self.button4.val=gamePads[gp].buttons[4].pressed;\n\n                count++;\n            }\n        }\n\n        self.numPads.val=count;\n    };\n\n    this.exe.onTriggered();\n\n};\n\nOps.Input.GamePad.prototype = new Op();\n\n","\n// TODO: CLAMP!\n\nOps.Math={};\n\n\nOps.Math.Random = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='random';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.exe.onTriggered=function()\n    {\n        self.result.val=Math.random();\n    };\n\n    this.exe.onTriggered();\n};\n\nOps.Math.Random.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Clamp = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='Clamp';\n    this.val=this.addInPort(new Port(this,\"val\"));\n    this.min=this.addInPort(new Port(this,\"min\"));\n    this.max=this.addInPort(new Port(this,\"max\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    function clamp()\n    {\n        self.result.val= Math.min(Math.max(self.val.val, self.min.val), self.max.val);\n    }\n\n    this.min.val=0;\n    this.max.val=1;\n\n    this.val.onValueChanged=clamp;\n    this.min.onValueChanged=clamp;\n    this.max.onValueChanged=clamp;\n\n    this.val.val=0.5;\n};\n\nOps.Math.Clamp.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\nOps.Math.SmoothStep = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='SmoothStep';\n    this.val=this.addInPort(new Port(this,\"val\"));\n    this.min=this.addInPort(new Port(this,\"min\"));\n    this.max=this.addInPort(new Port(this,\"max\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    function smoothstep ()\n    {\n        var x = Math.max(0,Math.min(1,(self.val.val-self.min.val)/(self.max.val-self.min.val)));\n        self.result.val=x*x*(3-2*x);\n    }\n\n    this.min.val=0;\n    this.max.val=1;\n    \n    this.val.onValueChanged=smoothstep;\n    this.min.onValueChanged=smoothstep;\n    this.max.onValueChanged=smoothstep;\n\n    this.val.val=0.5;\n};\n\nOps.Math.SmoothStep.prototype = new Op();\n\n// ----------------------------------------------------------------------------\n\n\nOps.Math.MapRange = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='map value range';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.v=this.addInPort(new Port(this,\"value\"));\n    this.old_min=this.addInPort(new Port(this,\"old min\"));\n    this.old_max=this.addInPort(new Port(this,\"old max\"));\n    this.new_min=this.addInPort(new Port(this,\"new min\"));\n    this.new_max=this.addInPort(new Port(this,\"new max\"));\n\n    this.exec= function()\n    {\n        if(self.v.val>self.old_max.val)\n        {\n            self.result.val=self.new_max.val;\n            return;\n        }\n        else\n        if(self.v.val<self.old_min.val)\n        {\n            self.result.val=self.new_min.val;\n            return;\n        }\n\n        var nMin=parseFloat(self.new_min.val);\n        var nMax=parseFloat(self.new_max.val);\n        var oMin=parseFloat(self.old_min.val);\n        var oMax=parseFloat(self.old_max.val);\n        var x=parseFloat(self.v.val);\n\n        var reverseInput = false;\n        var oldMin = Math.min( oMin, oMax );\n        var oldMax = Math.max( oMin, oMax );\n        if(oldMin!= oMin) reverseInput = true;\n\n        var reverseOutput = false;\n        var newMin = Math.min( nMin, nMax );\n        var newMax = Math.max( nMin, nMax );\n        if(newMin != nMin) reverseOutput = true;\n\n        var portion=0;\n\n        if(reverseInput) portion = (oldMax-x)*(newMax-newMin)/(oldMax-oldMin);\n            else portion = (x-oldMin)*(newMax-newMin)/(oldMax-oldMin);\n        \n        if(reverseOutput) self.result.val = newMax - portion;\n            else self.result.val = portion + newMin;\n\n    };\n\n    this.v.val=0;\n    this.old_min.val=-1;\n    this.old_max.val=1;\n    this.new_min.val=0;\n    this.new_max.val=1;\n\n\n    this.v.onValueChanged=this.exec;\n    this.old_min.onValueChanged=this.exec;\n    this.old_max.onValueChanged=this.exec;\n    this.new_min.onValueChanged=this.exec;\n    this.new_max.onValueChanged=this.exec;\n\n    this.exec();\n\n};\n\nOps.Math.MapRange.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Abs = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    this.name='abs';\n    this.number=this.addInPort(new Port(this,\"number\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.number.onValueChanged=function()\n    {\n        self.result.val=Math.abs(self.number.val);\n    };\n};\n\nOps.Math.Abs.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Sin = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    this.name='Sinus';\n    this.number=this.addInPort(new Port(this,\"number\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.number.onValueChanged=function()\n    {\n        self.result.val=Math.sin(self.number.val);\n    };\n};\n\nOps.Math.Sin.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Sum = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='sum';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=parseFloat(self.number1.val)+parseFloat(self.number2.val);\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n\n    this.number1.val=1;\n    this.number2.val=1;\n};\n\nOps.Math.Sum.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Multiply = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='multiply';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val*self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n\n    this.number1.val=1;\n    this.number2.val=2;\n\n};\n\nOps.Math.Multiply.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Divide = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Divide';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val/self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Divide.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\nOps.Math.Compare={};\n\n\n\n\nOps.Math.Compare.IsEven = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='isEven';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n\n    this.exec= function()\n    {\n        self.result.val=!( self.number1.val & 1 );\n    };\n\n    this.number1.onValueChanged=this.exec;\n};\n\nOps.Math.Compare.IsEven.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Math.Compare.Greater = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Greater';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val>self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Compare.Greater.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Math.Compare.Between = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Between';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number=this.addInPort(new Port(this,\"value\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n    this.number.val=2.0;\n    this.number1.val=1.0;\n    this.number2.val=3.0;\n\n    this.exec= function()\n    {\n        self.result.val=\n            (\n                self.number.val>Math.min(self.number1.val,self.number2.val) &&\n                self.number.val<Math.max(self.number1.val,self.number2.val)\n            );\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n    this.number.onValueChanged=this.exec;\n};\nOps.Math.Compare.Between.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Math.Compare.Lesser = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Lesser';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val<self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n\n};\n\nOps.Math.Compare.Lesser.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Math.Compare.Equals = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Equals';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val==self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Compare.Equals.prototype = new Op();\n\n"],"sourceRoot":"/source/"}