{"version":3,"sources":["timer.js","utils.js","cgl_mesh.js","cgl_shader.js","cgl_texture.js","holo.js","ops.gl.js","ops.js","ops.math.js"],"names":["Timer","getTime","lastTime","Date","now","timeStart","timeOffset","self","this","currentTime","paused","update","togglePlay","play","pause","setOffset","val","generateUUID","d","uuid","replace","c","r","Math","random","floor","toString","ajaxRequest","url","callback","request","XMLHttpRequest","open","responseType","onload","e","target","response","send","CGL","Mesh","geom","bufTexCoords","bufVertices","gl","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","vertices","STATIC_DRAW","itemSize","numItems","length","bufVerticesIndizes","ELEMENT_ARRAY_BUFFER","Uint16Array","verticesIndices","texCoords","console","log","render","shader","bind","GL","enableVertexAttribArray","getAttrVertexPos","getAttrTexCoords","vertexAttribPointer","FLOAT","drawElements","TRIANGLES","UNSIGNED_SHORT","Geometry","faceVertCount","texCoordsIndices","parseOBJ","buff","_readline","a","off","s","String","fromCharCode","groups","c_norms","i_norms","cg","from","to","Uint8Array","line","cds","split","x","parseFloat","y","z","push","v0a","v1a","v2a","vi0","parseInt","vi1","vi2","ui0","ui1","ui2","ni0","ni1","ni2","vlen","ulen","nlen","v3a","vi3","ui3","ni3","Uniform","_shader","_type","_name","_value","loc","name","type","value","needsUpdate","addUniform","updateValueF","getUniformLocation","getProgram","uniform1f","setValueF","v","updateValueT","uniform1i","setValueT","setValue","updateValue","Shader","program","uniforms","uni","getDefaultVertexShader","getDefaultFragmentShader","srcVert","srcFrag","setSource","projMatrixUniform","mvMatrixUniform","attrTexCoords","attrVertexPos","createProgram","getAttribLocation","useProgram","i","uniformMatrix4fv","pMatrix","mvMatrix","createShader","str","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","VERTEX_SHADER","FRAGMENT_SHADER","getShaderInfoLog","vstr","fstr","vshader","fshader","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","Texture","tex","createTexture","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","initTexture","img","image","texParameteri","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","load","texture","Image","src","PORT_DIR_IN","PORT_DIR_OUT","OP_PORT_TYPE_VALUE","OP_PORT_TYPE_FUNCTION","Ops","Op","objName","portsOut","portsIn","posts","uiAttribs","id","getName","addOutPort","p","direction","parent","addInPort","execute","exec","printInfo","ipo","removeLinks","getPort","ipi","getSerialized","op","getPortByName","Port","links","__defineGetter__","__defineSetter__","onValueChanged","onTriggered","addLink","l","isLinkedTo","p2","portIn","portOut","call","goals","getTypeString","obj","remove","removeLink","link","splice","Link","scene","onUnLink","p1","canLink","objIn","objOut","canLinkText","Scene","ops","timer","animFrameOps","clear","deleteOp","addOp","eval","hasOwnProperty","onAdd","opid","onDelete","requestAnimationFrame","time","onAnimFrame","op1","port1Name","op2","port2Name","port1","port2","onLink","serialize","JSON","stringify","getOpById","deSerialize","opinid","opoutid","inName","outName","found","parse","iop","port","ipi2","ili","Gl","mat4","create","Renderer","apply","arguments","simpleShader","trigger","initTranslate","vec3","set","currentShader","enable","DEPTH_TEST","clearColor","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","viewport","perspective","identity","translate","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","canvas","document","getElementById","getContext","prototype","ClearColor","g","b","Meshes","Rectangle","squareVertexPositionBuffer","drawArrays","TRIANGLE_STRIP","ObjMesh","mesh","unwrap","ind","crd","cpi","ncrd","Array","j","Cube","Plotter","lineWidth","buffer","num","LINE_STRIP","Triangle","BasicMaterial","doRender","activeTexture","TEXTURE0","textureUniform","uniform","Schwurbel","uniLoc","compile","Noise","timeUniform","Matrix","Translate","vec","Transform","DEG2RAD","posX","posY","posZ","scaleX","scaleY","scaleZ","rotX","rotY","rotZ","vPos","vScale","oldMatrix","transMatrix","doScale","doTranslate","copy","multiply","updateMatrix","rotateX","rotateY","rotateZ","scale","translateChanged","scaleChanged","rotChanged","Log","exe","input","CallsPerSecond","cps","Value","result","TimeLineTime","theTime","Repeat","idx","IfTrueThen","bool","triggerThen","triggerElse","Interval","timeOutId","interval","setTimeout","Anim","SinusAnim","sin","RelativeTime","startTime","Input","GamePad","numPads","axis1","axis2","axis3","axis4","button0","button1","button2","button3","button4","gamePads","navigator","getGamepads","count","gp","axes","buttons","pressed","Random","MapRange","old_min","old_max","new_min","new_max","nMin","nMax","oMin","oMax","reverseInput","oldMin","min","oldMax","max","reverseOutput","newMin","newMax","portion","Abs","number","abs","Sin","Sum","number1","number2","Multiply","Divide","Compare","IsEven","Greater","Between","Lesser","Equals"],"mappings":"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","file":"cables.min.js","sourcesContent":["\n\nfunction Timer()\n{\n    var self=this;\n    var timeStart=Date.now();\n    var timeOffset=0;\n\n    var currentTime=0;\n    var lastTime=0;\n    var paused=true;\n\n    function getTime()\n    {\n        lastTime=(Date.now()-timeStart)/1000;\n        return lastTime+timeOffset;\n\n    }\n\n    this.update=function()\n    {\n        if(paused) return;\n        currentTime=getTime();\n\n        return currentTime;\n    };\n\n    this.getTime=function()\n    {\n        return currentTime;\n    };\n\n    this.togglePlay=function()\n    {\n        if(paused)self.play();\n            else self.pause();\n    };\n\n    this.setOffset=function(val)\n    {\n        if(currentTime+val<0)\n        {\n            timeStart=Date.now();\n            timeOffset=0;\n            currentTime=0;\n        }\n        else\n        {\n            timeOffset+=val;\n            currentTime=lastTime+timeOffset;\n        }\n        \n\n    };\n\n    this.play=function()\n    {\n        timeStart=Date.now();\n        paused=false;\n    };\n\n    this.pause=function()\n    {\n        timeOffset=currentTime;\n        paused=true;\n    };\n\n}","function generateUUID()\n{\n    var d = new Date().getTime();\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c)\n    {\n        var r = (d + Math.random()*16)%16 | 0;\n        d = Math.floor(d/16);\n        return (c=='x' ? r : (r&0x3|0x8)).toString(16);\n    });\n    return uuid;\n}\n\n// ----------------------------------------------------------------\nfunction ajaxRequest(url, callback)\n{\n    var request = new XMLHttpRequest();\n    request.open(\"GET\", url, true);\n    request.responseType = \"arraybuffer\";\n    request.onload = function(e)\n    {\n        callback(e.target.response);\n    };\n    request.send();\n}\n\n\n\n","var CGL=CGL || {};\n\nCGL.Mesh=function(geom)\n{\n    var bufTexCoords=-1;\n    // var bufTexCoordsIndizes=-1;\n\n    var bufVertices = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, bufVertices);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(geom.vertices), gl.STATIC_DRAW);\n    bufVertices.itemSize = 3;\n    bufVertices.numItems = geom.vertices.length/3;\n\n\n    var bufVerticesIndizes = gl.createBuffer();\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufVerticesIndizes);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(geom.verticesIndices), gl.STATIC_DRAW);\n    bufVerticesIndizes.itemSize = 1;\n    bufVerticesIndizes.numItems = geom.verticesIndices.length;\n\n    if(geom.texCoords.length>0)\n    {\n        console.log('found texcoords!'+geom.texCoords.length);\n        console.log('geom.texCoords',geom.texCoords);\n\n        bufTexCoords = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, bufTexCoords);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(geom.texCoords), gl.STATIC_DRAW);\n        bufTexCoords.itemSize = 2;\n        bufTexCoords.numItems = geom.texCoords.length/bufTexCoords.itemSize;\n\n        // bufTexCoordsIndizes = gl.createBuffer();\n        // gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufTexCoordsIndizes);\n\n        // gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(bufTexCoordsIndizes), gl.STATIC_DRAW);\n        // bufTexCoordsIndizes.itemSize = 1;\n        // bufTexCoordsIndizes.numItems = geom.texCoordsIndices.length;\n    }\n\n    console.log('geom.vertices.length '+geom.vertices.length);\n    // console.log('bufTexCoordsIndizes.numItems '+bufTexCoordsIndizes.numItems);\n    // console.log('bufTexCoords.numItems '+bufTexCoords.numItems);\n\n    console.log('bufVertices.numItems '+bufVertices.numItems);\n    console.log('bufVerticesIndizes.numItems '+bufVerticesIndizes.numItems);\n\n\n\n    this.render=function(shader)\n    {\n\n        // shader.setAttributeVertex( bufVertices.itemSize);\n        // shader.setAttributeTexCoord( bufTexCoordsIndizes.itemSize);\n        shader.bind();\n\n\n        GL.enableVertexAttribArray(shader.getAttrVertexPos());\n        GL.enableVertexAttribArray(shader.getAttrTexCoords());\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, bufVertices);\n        gl.vertexAttribPointer(shader.getAttrVertexPos(),bufVertices.itemSize, gl.FLOAT, false, 0, 0);\n\n\n        // gl.vertexAttribPointer(shaderProgram.textureCoordAttribute, cubeVertexTextureCoordBuffer.itemSize, gl.FLOAT, false, 0, 0);\n\n        if(bufTexCoords!=-1)\n        {\n            // console.log('texcoords'+shader.getAttrTexCoords());\n            // console.log('texcoords'+shader.getAttrVertexPos());\n                    \n            gl.bindBuffer(gl.ARRAY_BUFFER, bufTexCoords);\n            gl.vertexAttribPointer(shader.getAttrTexCoords(),bufTexCoords.itemSize, gl.FLOAT, false, 0, 0);\n        }\n\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufVerticesIndizes);\n        gl.drawElements(gl.TRIANGLES, bufVerticesIndizes.numItems, gl.UNSIGNED_SHORT, 0);\n\n        // gl.drawArrays(gl.POINTS, 0, bufVertices.numItems);\n\n    };\n\n};\n\nCGL.Geometry=function()\n{\n    this.faceVertCount=3;\n    this.vertices=[];\n    this.verticesIndices=[];\n    this.texCoords=[];\n    this.texCoordsIndices=[];\n};\n\nparseOBJ = function(buff)\n{\n\n    _readline = function(a, off)  // Uint8Array, offset\n    {\n        var s = \"\";\n        while(a[off] != 10) s += String.fromCharCode(a[off++]);\n        return s;\n    };\n\n    var geom = new CGL.Geometry();\n    geom.groups = {};\n    \n    // geom.texCoords   = [];\n    geom.c_norms = [];\n    \n    // geom.texCoordsIndices   = [];\n    geom.i_norms = [];\n    \n    var cg = {from: 0, to:0};   // current group\n    var off = 0;\n    var a = new Uint8Array(buff);\n    \n    while(off < a.length)\n    {\n        var line = _readline(a, off);\n        off += line.length + 1;\n        line = line.replace(/ +(?= )/g,'');\n        line = line.replace(/(^\\s+|\\s+$)/g, '');\n        var cds = line.split(\" \");\n        if(cds[0] == \"g\")\n        {\n            cg.to = geom.verticesIndices.length;\n            if(geom.groups[cds[1]] == null) geom.groups[cds[1]] = {from:geom.verticesIndices.length, to:0};\n            cg = geom.groups[cds[1]];\n        }\n        if(cds[0] == \"v\")\n        {\n            var x = parseFloat(cds[1]);\n            var y = parseFloat(cds[2]);\n            var z = parseFloat(cds[3]);\n            geom.vertices.push(x,y,z);\n        }\n        if(cds[0] == \"vt\")\n        {\n            var x = parseFloat(cds[1]);\n            var y = 1-parseFloat(cds[2]);\n            geom.texCoords.push(x,y);\n        }\n        if(cds[0] == \"vn\")\n        {\n            var x = parseFloat(cds[1]);\n            var y = parseFloat(cds[2]);\n            var z = parseFloat(cds[3]);\n            geom.c_norms.push(x,y,z);\n        }\n        if(cds[0] == \"f\")\n        {\n            var v0a = cds[1].split(\"/\"), v1a = cds[2].split(\"/\"), v2a = cds[3].split(\"/\");\n            var vi0 = parseInt(v0a[0])-1, vi1 = parseInt(v1a[0])-1, vi2 = parseInt(v2a[0])-1;\n            var ui0 = parseInt(v0a[1])-1, ui1 = parseInt(v1a[1])-1, ui2 = parseInt(v2a[1])-1;\n            var ni0 = parseInt(v0a[2])-1, ni1 = parseInt(v1a[2])-1, ni2 = parseInt(v2a[2])-1;\n            \n            var vlen = geom.vertices.length/3, ulen = geom.texCoords.length/2, nlen = geom.c_norms.length/3;\n            if(vi0<0) vi0 = vlen + vi0+1; if(vi1<0) vi1 = vlen + vi1+1; if(vi2<0) vi2 = vlen + vi2+1;\n            if(ui0<0) ui0 = ulen + ui0+1; if(ui1<0) ui1 = ulen + ui1+1; if(ui2<0) ui2 = ulen + ui2+1;\n            if(ni0<0) ni0 = nlen + ni0+1; if(ni1<0) ni1 = nlen + ni1+1; if(ni2<0) ni2 = nlen + ni2+1;\n            \n            geom.verticesIndices.push(vi0, vi1, vi2);  //cg.verticesIndices.push(vi0, vi1, vi2)\n            geom.texCoordsIndices  .push(ui0, ui1, ui2);  //cg.texCoordsIndices  .push(ui0, ui1, ui2);\n            geom.i_norms.push(ni0, ni1, ni2);  //cg.i_norms.push(ni0, ni1, ni2);\n            if(cds.length == 5)\n            {\n                var v3a = cds[4].split(\"/\");\n                var vi3 = parseInt(v3a[0])-1, ui3 = parseInt(v3a[1])-1, ni3 = parseInt(v3a[2])-1;\n                if(vi3<0) vi3 = vlen + vi3+1;\n                if(ui3<0) ui3 = ulen + ui3+1;\n                if(ni3<0) ni3 = nlen + ni3+1;\n                geom.verticesIndices.push(vi0, vi2, vi3);  //cg.verticesIndices.push(vi0, vi2, vi3);\n                geom.texCoordsIndices  .push(ui0, ui2, ui3);  //cg.texCoordsIndices  .push(ui0, ui2, ui3);\n                geom.i_norms.push(ni0, ni2, ni3);  //cg.i_norms.push(ni0, ni2, ni3);\n            }\n        }\n    }\n    cg.to = geom.verticesIndices.length;\n    \n    return geom;\n};\n\n\n","var CGL=CGL || {};\n\n// ---------------------------------------------------------------------------\n\nCGL.Uniform=function(_shader,_type,_name,_value)\n{\n    var self=this;\n    var loc=-1;\n    var name=_name;\n    var type=_type;\n    var value=0;\n    var shader=_shader;\n    this.needsUpdate=true;\n\n    shader.addUniform(this);\n\n    this.updateValueF=function()\n    {\n        if(loc==-1) loc=gl.getUniformLocation(shader.getProgram(), name);\n        gl.uniform1f(loc, value);\n    };\n\n    this.setValueF=function(v)\n    {\n        self.needsUpdate=true;\n        value=v;\n    };\n\n    this.updateValueT=function()\n    {\n        if(loc==-1)\n        {\n            loc=gl.getUniformLocation(shader.getProgram(), name);\n            if(loc==-1) console.log('texture loc unknown!!');\n        }\n\n        // console.log('value.tex',value.tex);\n        \n\n        gl.uniform1i(loc, 0);\n    };\n\n    this.setValueT=function(v)\n    {\n        self.needsUpdate=true;\n        value=v;\n    };\n\n    if(type=='f')\n    {\n        this.setValue=this.setValueF;\n        this.updateValue=this.updateValueF;\n    }\n\n    if(type=='t')\n    {\n        this.setValue=this.setValueT;\n        this.updateValue=this.updateValueT;\n    }\n\n    this.setValue(_value);\n};\n\n// ---------------------------------------------------------------------------\n\nCGL.Shader=function()\n{\n    var self=this;\n    var program=-1;\n    var uniforms=[];\n\n    this.addUniform=function(uni)\n    {\n        uniforms.push(uni);\n    };\n\n    this.getDefaultVertexShader=function()\n    {\n        return ''+\n        'attribute vec3 vPosition;\\n'+\n        'attribute vec2 attrTexCoord;\\n'+\n        'varying vec2 texCoord;\\n'+\n        'uniform mat4 projMatrix;\\n'+\n        'uniform mat4 mvMatrix;\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        '   texCoord=attrTexCoord;\\n'+\n        // '   gl_PointSize=3.0;\\n'+\n        '   gl_Position = projMatrix * mvMatrix * vec4(vPosition,  1.0);\\n'+\n        '}\\n';\n    };\n\n    this.getDefaultFragmentShader=function()\n    {\n        return ''+\n        'precision mediump float;\\n'+\n        'void main()\\n'+\n        '{\\n'+\n\n        '   gl_FragColor = vec4(0.5,0.5,0.5,1.0);\\n'+\n        '}\\n';\n    };\n\n    this.srcVert=this.getDefaultVertexShader();\n    this.srcFrag=this.getDefaultFragmentShader();\n\n    this.setSource=function(srcVert,srcFrag)\n    {\n        this.srcVert=srcVert;\n        this.srcFrag=srcFrag;\n        // console.log('compiled!');\n    };\n\n    var projMatrixUniform=-1;\n    var mvMatrixUniform=-1;\n\n    var attrTexCoords = -1;\n    var attrVertexPos = -1;\n\n    this.getAttrTexCoords=function(){return attrTexCoords;};\n    this.getAttrVertexPos=function(){return attrVertexPos;};\n\n\n    this.bind=function()\n    {\n        if(program==-1) program=createProgram(self.srcVert,self.srcFrag);\n\n        if(mvMatrixUniform==-1)\n        {\n            attrTexCoords = gl.getAttribLocation(program, 'attrTexCoord');\n            attrVertexPos = gl.getAttribLocation(program, 'vPosition');\n\n            projMatrixUniform = gl.getUniformLocation(program, \"projMatrix\");\n            mvMatrixUniform = gl.getUniformLocation(program, \"mvMatrix\");\n        }\n\n        GL.useProgram(program);\n\n        for(var i in uniforms)\n        {\n            if(uniforms[i].needsUpdate)uniforms[i].updateValue();\n        }\n\n        // GL.enableVertexAttribArray(program.vertexPosAttrib);\n        // GL.enableVertexAttribArray(program.vertexPosAttrib);\n\n        gl.uniformMatrix4fv(projMatrixUniform, false, pMatrix);\n        gl.uniformMatrix4fv(mvMatrixUniform, false, mvMatrix);\n    };\n\n    this.getProgram=function()\n    {\n        return program;\n    };\n\n\n    createShader =function(str, type)\n    {\n        var shader = gl.createShader(type);\n        gl.shaderSource(shader, str);\n        gl.compileShader(shader);\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\n        {\n            console.log('compile status: ');\n\n            if(type==gl.VERTEX_SHADER)console.log('VERTEX_SHADER');\n            if(type==gl.FRAGMENT_SHADER)console.log('FRAGMENT_SHADER');\n            \n            throw gl.getShaderInfoLog(shader);\n        }\n        return shader;\n    };\n\n    createProgram=function(vstr, fstr)\n    {\n        var program = gl.createProgram();\n        var vshader = createShader(vstr, gl.VERTEX_SHADER);\n        var fshader = createShader(fstr, gl.FRAGMENT_SHADER);\n        gl.attachShader(program, vshader);\n        gl.attachShader(program, fshader);\n        gl.linkProgram(program);\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS))\n        {\n            throw gl.getProgramInfoLog(program);\n        }\n        return program;\n    };\n\n\n\n};\n\n","var CGL=CGL || {};\n\nCGL.Texture=function()\n{\n    var self=this;\n    this.tex = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, this.tex);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([111, 111, 111, 255]));\n    gl.bindTexture(gl.TEXTURE_2D, null);\n\n    this.initTexture=function(img)\n    {\n        gl.bindTexture(gl.TEXTURE_2D, self.tex);\n        // gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, self.image);\n\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\n        // non power of two:\n        // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n\n        gl.bindTexture(gl.TEXTURE_2D, null);\n    };\n};\n\nCGL.Texture.load=function(url)\n{\n    var texture=new CGL.Texture();\n    texture.image = new Image();\n    texture.image.onload = function ()\n    {\n        console.log(texture.image);\n                \n        texture.initTexture(texture.image);\n    };\n    texture.image.src = url;\n    return texture;\n};\n\n// ---------------------------------------------------------------------------\n","\nvar PORT_DIR_IN=0;\nvar PORT_DIR_OUT=1;\n\nvar OP_PORT_TYPE_VALUE =0;\nvar OP_PORT_TYPE_FUNCTION =1;\n\nvar Ops = {};\n\n\nvar Op = function()\n{\n    this.objName='';\n    this.portsOut=[];\n    this.portsIn=[];\n    this.posts=[];\n    this.uiAttribs={};\n    this.name='unknown';\n    this.id=generateUUID();\n\n    this.getName= function()\n    {\n        return this.name;\n    };\n    this.addOutPort=function(p)\n    {\n        p.direction=PORT_DIR_OUT;\n        p.parent=this;\n        this.portsOut.push(p);\n        return p;\n    };\n    this.addInPort=function(p)\n    {\n        p.direction=PORT_DIR_IN;\n        p.parent=this;\n        this.portsIn.push(p);\n        return p;\n    };\n    this.execute=function()\n    {\n        this.exec();\n    };\n    this.printInfo=function()\n    {\n        for(var i=0;i<this.portsIn.length;i++)\n            console.log('in: '+this.portsIn[i].getName());\n\n        for(var ipo in this.portsOut)\n            console.log('out: '+this.portsOut[ipo].getName());\n    };\n\n    this.removeLinks=function()\n    {\n        for(var i=0;i<this.portsIn.length;i++)\n            this.portsIn[i].removeLinks();\n        for(var ipo in this.portsOut)\n            this.portsOut[ipo].removeLinks();\n    };\n\n    this.getPort=function(name)\n    {\n        for(var ipi in this.portsIn)\n            if(this.portsIn[ipi].getName()==name)return this.portsIn[ipi];\n\n        for(var ipo in this.portsOut)\n            if(this.portsOut[ipo].getName()==name)return this.portsOut[ipo];\n    };\n\n    this.getSerialized=function()\n    {\n        var op={};\n        op.name=this.getName();\n        op.objName=this.objName;\n        op.id=this.id;\n        op.uiAttribs=this.uiAttribs;\n\n        op.portsIn=[];\n        op.portsOut=[];\n\n        for(var i=0;i<this.portsIn.length;i++)\n            op.portsIn.push( this.portsIn[i].getSerialized() );\n\n        for(var ipo in this.portsOut)\n            op.portsOut.push( this.portsOut[ipo].getSerialized() );\n\n        return op;\n    };\n\n    this.getPortByName=function(name)\n    {\n        for(var i=0;i<this.portsIn.length;i++)\n            if(this.portsIn[i].name==name)return this.portsIn[i];\n        \n        for(var ipo in this.portsOut)\n            if(this.portsOut[ipo].name==name)return this.portsOut[ipo];\n    };\n\n};\n\n// ------------------------------------------------------------------------------------\n\nvar Port=function(parent,name,type)\n{\n    var self=this;\n    this.direction=PORT_DIR_IN;\n    this.id=generateUUID();\n    this.parent=parent;\n    this.links=[];\n    this.value=null;\n    this.name=name;\n    this.type=type || OP_PORT_TYPE_VALUE;\n\n    this.__defineGetter__(\"val\", function()\n    {\n        return this.value;\n    });\n\n    this.__defineSetter__(\"val\", function(v)\n    {\n        this.setValue(v);\n    });\n\n    this.onValueChanged=function(){};\n    this.onTriggered=function(){};\n\n    this.setValue=function(v)\n    {\n        if(v!=this.value)\n        {\n            this.value=v;\n            this.onValueChanged();\n\n            for(var i in this.links)\n            {\n                this.links[i].setValue();\n            }\n        }\n    };\n\n    this.getName= function()\n    {\n        return this.name;\n    };\n\n    this.addLink=function(l)\n    {\n        this.links.push(l);\n    };\n\n    this.isLinkedTo=function(p2)\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i].portIn==p2 || this.links[i].portOut==p2)return true;\n        }\n        return false;\n    };\n\n    this.call=function()\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i].portIn !=this)this.links[i].portIn.onTriggered();\n            if(this.links[i].portOut!=this)this.links[i].portOut.onTriggered();\n        }\n    };\n\n\n    this.execute=function()\n    {\n        console.log('### execute port: '+this.getName() , this.goals.length);\n    };\n\n    this.getTypeString=function()\n    {\n        if(this.type==OP_PORT_TYPE_VALUE)return 'value';\n        if(this.type==OP_PORT_TYPE_FUNCTION)return 'function';\n    };\n\n    this.getSerialized=function()\n    {\n        var obj={};\n        obj.name=this.getName();\n        obj.value=this.value;\n\n\n        if(this.direction==PORT_DIR_IN && this.links.length>0)\n        {\n            obj.links=[];\n            for(var i in this.links)\n            {\n                obj.links.push( this.links[i].getSerialized() );\n            }\n        }\n        return obj;\n    };\n\n    this.removeLinks=function()\n    {\n        while(this.links.length>0)\n        {\n            this.links[0].remove();\n        }\n    };\n\n    this.removeLink=function(link)\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i]==link)this.links.splice( i, 1 );\n        }\n    };\n};\n\n\n\n// ---------------------------------------------------------------------------\n\nvar Link = function(scene)\n{\n    this.portIn=null;\n    this.portOut=null;\n    this.scene=scene;\n\n    this.setValue=function()\n    {\n        if(this.portIn.val!=this.portOut.val)\n            this.portIn.val=this.portOut.val;\n    };\n\n    this.remove=function()\n    {\n        this.portIn.removeLink(this);\n        this.portOut.removeLink(this);\n        this.scene.onUnLink(this.portIn,this.portOut);\n        this.portIn=null;\n        this.portOut=null;\n        this.scene=null;\n    };\n\n\n    this.link=function(p1,p2)\n    {\n        if(!Link.canLink(p1,p2))\n        {\n            console.log('cannot link ports!');\n            return false;\n        }\n        if(p1.direction==PORT_DIR_IN)\n        {\n            this.portIn=p1;\n            this.portOut=p2;\n        }\n        else\n        {\n            this.portIn=p2;\n            this.portOut=p1;\n        }\n\n        p1.addLink(this);\n        p2.addLink(this);\n        this.setValue();\n    };\n\n    this.getSerialized=function()\n    {\n        var obj={};\n\n        obj.portIn=this.portIn.getName();\n        obj.portOut=this.portOut.getName();\n        obj.objIn=this.portIn.parent.id;\n        obj.objOut=this.portOut.parent.id;\n\n        return obj;\n    };\n};\n\n\nLink.canLinkText=function(p1,p2)\n{\n    if(p1.direction==PORT_DIR_IN && p1.links.length>0)return 'input port already busy';\n    if(p2.direction==PORT_DIR_IN && p2.links.length>0)return 'input port already busy';\n    if(p1.isLinkedTo(p2))return 'ports already linked';\n    if(!p1)return 'can not link: port 1 invalid';\n    if(!p2)return 'can not link: port 2 invalid';\n    if(p1.direction==p2.direction)return 'can not link: same direction';\n    if(p1.type!=p2.type)return 'can not link: different type';\n    if(p1.parent==p2.parent)return 'can not link: same op';\n    return 'can link';\n};\n\nLink.canLink=function(p1,p2)\n{\n\n    if(p1.direction==PORT_DIR_IN && p1.links.length>0)return false;\n    if(p2.direction==PORT_DIR_IN && p2.links.length>0)return false;\n    if(p1.isLinkedTo(p2))return false;\n    if(!p1)return false;\n    if(!p2)return false;\n    if(p1.direction==p2.direction)return false;\n    if(p1.type!=p2.type)return false;\n    if(p1.parent==p2.parent)return false;\n\n    return true;\n};\n\n\n// ------------------------------------------------------------------------------------\n\n\nvar Scene = function()\n{\n    var self=this;\n    this.ops=[];\n    this.timer=new Timer();\n    this.animFrameOps=[];\n    \n\n    this.clear=function()\n    {\n        this.timer=new Timer();\n        while(this.ops.length>0)\n        {\n            this.deleteOp(this.ops[0].id);\n        }\n    };\n\n    this.addOp=function(objName,uiAttribs)\n    {\n        var op=eval('new '+objName+'();');\n        op.objName=objName;\n        op.uiAttribs=uiAttribs;\n\n        if(op.hasOwnProperty('onAnimFrame')) this.animFrameOps.push(op);\n\n        this.ops.push(op);\n        if(this.onAdd)this.onAdd(op);\n        return op;\n    };\n\n    this.deleteOp=function(opid)\n    {\n        for(var i in this.ops)\n        {\n            if(this.ops[i].id==opid)\n            {\n                this.ops[i].removeLinks();\n                this.onDelete(this.ops[i]);\n                this.ops.splice( i, 1 );\n            }\n        }\n    };\n\n    this.exec=function()\n    {\n        requestAnimationFrame(self.exec);\n        self.timer.update();\n\n        var time=self.timer.getTime();\n\n        for(var i in self.animFrameOps)\n        {\n            self.animFrameOps[i].onAnimFrame(time);\n        }\n\n    };\n\n    this.link=function(op1,port1Name,op2,port2Name)\n    {\n        var port1=op1.getPort(port1Name);\n        var port2=op2.getPort(port2Name);\n\n        if(Link.canLink(port1,port2))\n        {\n            var link=new Link(this);\n            link.link(port1,port2);\n            this.onLink(port1,port2);\n            return link;\n        }\n        else\n        {\n            console.log(Link.canLinkText(port1,port2));\n        }\n    };\n    this.onAdd=function(op){};\n    this.onDelete=function(op){};\n    this.onLink=function(p1,p2){};\n    this.onUnLink=function(p1,p2){};\n    this.serialize=function()\n    {\n        var obj={};\n\n        obj.ops=[];\n        for(var i in this.ops)\n        {\n            obj.ops.push( this.ops[i].getSerialized() );\n        }\n        \n        return JSON.stringify(obj);\n    };\n    this.getOpById=function(opid)\n    {\n        for(var i in this.ops)\n        {\n            if(this.ops[i].id==opid)return this.ops[i];\n        }\n\n    };\n    this.deSerialize=function(obj)\n    {\n        if (typeof obj === \"string\") obj=JSON.parse(obj);\n        var self=this;\n\n        function addLink(opinid,opoutid,inName,outName)\n        {\n            var found=false;\n            if(!found)\n            {\n                self.link(\n                    self.getOpById(opinid),\n                    inName,\n                    self.getOpById(opoutid),\n                    outName\n                    );\n            }\n        }\n\n        // add ops...\n        for(var iop in obj.ops)\n        {\n            var op=this.addOp(obj.ops[iop].objName,obj.ops[iop].uiAttribs);\n            op.id=obj.ops[iop].id;\n\n            for(var ipi in obj.ops[iop].portsIn)\n            {\n                var port=op.getPortByName(obj.ops[iop].portsIn[ipi].name);\n                if(port)port.val=obj.ops[iop].portsIn[ipi].value;\n            }\n\n            for(var ipo in obj.ops[iop].portsOut)\n            {\n                var port2=op.getPortByName(obj.ops[iop].portsOut[ipo].name);\n                if(port2)port2.val=obj.ops[iop].portsOut[ipo].value;\n            }\n\n\n            // op.uiAttribs=obj.ops[iop].uiAttribs;\n        }\n\n        // create links...\n        for(iop in obj.ops)\n        {\n            for(var ipi2 in obj.ops[iop].portsIn)\n            {\n\n                for(var ili in obj.ops[iop].portsIn[ipi2].links)\n                {\n                    addLink(\n                        obj.ops[iop].portsIn[ipi2].links[ili].objIn,\n                        obj.ops[iop].portsIn[ipi2].links[ili].objOut,\n                        obj.ops[iop].portsIn[ipi2].links[ili].portIn,\n                        obj.ops[iop].portsIn[ipi2].links[ili].portOut);\n                }\n            }\n\n\n            // for(var ipo in obj.ops[iop].portsOut)\n            // {\n            //     for(var ili in obj.ops[iop].portsOut[ipo].links)\n            //     {\n            //         addLink(\n            //             obj.ops[iop].portsOut[ipo].links[ili].objIn,\n            //             obj.ops[iop].portsOut[ipo].links[ili].objOut,\n            //             obj.ops[iop].portsOut[ipo].links[ili].portIn,\n            //             obj.ops[iop].portsOut[ipo].links[ili].portOut);\n\n            //     }\n            // }\n        }\n\n\n        for(var i in this.ops)\n        {\n            this.ops[i].id=generateUUID();\n        }\n\n\n\n    };\n\n    this.exec();\n\n};\n\n\n\n\n","//http://k3d.ivank.net/K3D.js\n//http://fhtr.blogspot.de/2009/12/3d-models-and-parsing-binary-data-with.html\n//https://github.com/gpjt/webgl-lessons/blob/master/lesson05/index.html\n\nOps.Gl={};\nvar GL=null;\nvar GL=null;\n\nvar mvMatrix = mat4.create();\nvar pMatrix = mat4.create();\n\nOps.Gl.Renderer = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    var simpleShader=new CGL.Shader();\n \n\n    this.name='WebGL Renderer';\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var initTranslate=vec3.create();\n    vec3.set(initTranslate, 0,0,-2);\n\n    this.onAnimFrame=function(time)\n    {\n        currentShader=simpleShader;\ngl.enable(gl.DEPTH_TEST);\n        GL.clearColor(0,0,0,1);\n        GL.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n        gl.viewport(0,0,640,360);\n        mat4.perspective(pMatrix,45, 800 / 480, 0.01, 1100.0);\n        mat4.identity(mvMatrix);\n        mat4.translate(mvMatrix,mvMatrix, initTranslate);\n\n        GL.enable(GL.BLEND);\n        GL.blendFunc(GL.SRC_ALPHA,GL.ONE_MINUS_SRC_ALPHA);\n\n        self.trigger.call();\n    };\n\n    this.canvas = document.getElementById(\"glcanvas\");\n    GL = this.canvas.getContext(\"experimental-webgl\");\n    gl = this.canvas.getContext(\"experimental-webgl\");\n\n};\n\nOps.Gl.Renderer.prototype = new Op();\n\n\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.ClearColor = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='ClearColor';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.r=this.addInPort(new Port(this,\"r\"));\n    this.g=this.addInPort(new Port(this,\"g\"));\n    this.b=this.addInPort(new Port(this,\"b\"));\n\n    this.render.onTriggered=function()\n    {\n        GL.clearColor(self.r.val,self.g.val,self.b.val,1);\n        GL.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n\n        self.trigger.call();\n    };\n\n};\n\nOps.Gl.ClearColor.prototype = new Op();\n\n\nvar currentShader=null;\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Meshes={};\n\n\n\nOps.Gl.Meshes.Rectangle = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='rectangle';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        // currentShader.setAttributeVertex( self.squareVertexPositionBuffer.itemSize);\n        gl.vertexAttribPointer(currentShader.getAttrVertexPos(),self.squareVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);\n\n        currentShader.bind();\n        gl.bindBuffer(gl.ARRAY_BUFFER, self.squareVertexPositionBuffer);\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, self.squareVertexPositionBuffer.numItems);\n\n        self.trigger.call();\n    };\n\n    this.squareVertexPositionBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.squareVertexPositionBuffer);\n    this.vertices = [\n         1.0,  1.0,  0.0,\n        -1.0,  1.0,  0.0,\n         1.0, -1.0,  0.0,\n        -1.0, -1.0,  0.0\n    ];\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(this.vertices), gl.STATIC_DRAW);\n    this.squareVertexPositionBuffer.itemSize = 3;\n    this.squareVertexPositionBuffer.numItems = 4;\n};\n\nOps.Gl.Meshes.Rectangle.prototype = new Op();\n\n\n\n\n\n\nOps.Gl.Meshes.ObjMesh = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='OBJ Mesh';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.mesh=null;\n\n    this.render.onTriggered=function()\n    {\n        if(self.mesh)\n        {\n            self.mesh.render(currentShader);\n        }\n\n        self.trigger.call();\n    };\n\n\n    ajaxRequest('assets/skull.obj',function(response)\n    {\n        console.log(response);\n                \n        var r=parseOBJ(response);\n\nunwrap = function(ind, crd, cpi)   \n{\n    var ncrd = new Array(Math.floor(ind.length/3)*cpi);\n    for(var i=0; i<ind.length; i++)\n    {\n        for(var j=0; j<cpi; j++)\n        {\n            ncrd[i*cpi+j] = crd[ind[i]*cpi+j];\n        }\n    }\n    return ncrd;\n};\n\nvar l=r.verticesIndices.length;\n        r.vertices = unwrap(r.verticesIndices, r.vertices, 3);\n        r.texCoords = unwrap(r.texCoordsIndices  , r.texCoords  , 2);\n        r.verticesIndices = [];\n        for(var i=0; i<l; i++) r.verticesIndices.push(i);\n        console.log(r);\n        \n        self.mesh=new CGL.Mesh(r);\n    });\n\n\n\n};\n\nOps.Gl.Meshes.ObjMesh.prototype = new Op();\n\n\n\n\n\n// ----------------------------------------------------------------\n\n\nOps.Gl.Meshes.Cube = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Cube';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.mesh=null;\n\n    this.render.onTriggered=function()\n    {\n        if(self.mesh!==null)\n        {\n            self.mesh.render(currentShader);\n        }\n\n        self.trigger.call();\n    };\n\n\n    var geom=new CGL.Geometry();\n\n            geom.vertices = [\n            // Front face\n            -1.0, -1.0,  1.0,\n             1.0, -1.0,  1.0,\n             1.0,  1.0,  1.0,\n            -1.0,  1.0,  1.0,\n            // Back face\n            -1.0, -1.0, -1.0,\n            -1.0,  1.0, -1.0,\n             1.0,  1.0, -1.0,\n             1.0, -1.0, -1.0,\n            // Top face\n            -1.0,  1.0, -1.0,\n            -1.0,  1.0,  1.0,\n             1.0,  1.0,  1.0,\n             1.0,  1.0, -1.0,\n            // Bottom face\n            -1.0, -1.0, -1.0,\n             1.0, -1.0, -1.0,\n             1.0, -1.0,  1.0,\n            -1.0, -1.0,  1.0,\n            // Right face\n             1.0, -1.0, -1.0,\n             1.0,  1.0, -1.0,\n             1.0,  1.0,  1.0,\n             1.0, -1.0,  1.0,\n            // Left face\n            -1.0, -1.0, -1.0,\n            -1.0, -1.0,  1.0,\n            -1.0,  1.0,  1.0,\n            -1.0,  1.0, -1.0,\n        ];\n\n        geom.texCoords = [\n          // Front face\n          0.0, 0.0,\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n          // Back face\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n          0.0, 0.0,\n          // Top face\n          0.0, 1.0,\n          0.0, 0.0,\n          1.0, 0.0,\n          1.0, 1.0,\n          // Bottom face\n          1.0, 1.0,\n          0.0, 1.0,\n          0.0, 0.0,\n          1.0, 0.0,\n          // Right face\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n          0.0, 0.0,\n          // Left face\n          0.0, 0.0,\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n        ];\n\n        geom.verticesIndices = [\n            0, 1, 2,      0, 2, 3,    // Front face\n            4, 5, 6,      4, 6, 7,    // Back face\n            8, 9, 10,     8, 10, 11,  // Top face\n            12, 13, 14,   12, 14, 15, // Bottom face\n            16, 17, 18,   16, 18, 19, // Right face\n            20, 21, 22,   20, 22, 23  // Left face\n        ];\n\n\n\n    this.mesh=new CGL.Mesh(geom);\n\n\n\n};\n\nOps.Gl.Meshes.Cube.prototype = new Op();\n\n\n\n\n\n// ----------------------------------------------------------------\n\n\nOps.Gl.Meshes.Plotter = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Plotter';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.v=this.addInPort(new Port(this,\"value\"));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        // currentShader.setAttributeVertex( self.buffer.itemSize);\n        gl.vertexAttribPointer(currentShader.getAttrVertexPos(),self.buffer.itemSize, gl.FLOAT, false, 0, 0);\n        currentShader.bind();\n        gl.bindBuffer(gl.ARRAY_BUFFER, self.buffer);\n        gl.drawArrays(gl.LINE_STRIP, 0, self.buffer.numItems);\n\n        self.trigger.call();\n    };\n\n    this.buffer = gl.createBuffer();\n    \n    var num=50;\n    this.vertices = [];\n    for(var i=0;i<num;i++)\n    {\n        this.vertices.push(1/num*i);\n        this.vertices.push(Math.random()-0.5);\n        this.vertices.push(0);\n    }\n\n    function bufferData()\n    {\n        gl.lineWidth(4);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, self.buffer);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(self.vertices), gl.STATIC_DRAW);\n        self.buffer.itemSize = 3;\n        self.buffer.numItems = num;\n    }\n    bufferData();\n\n    this.v.onValueChanged=function()\n    {\n        self.vertices.splice(0,3);\n        self.vertices.push(1);\n        self.vertices.push(self.v.val);\n        self.vertices.push(0);\n\n        for(var i=0;i<num*3;i+=3)\n        {\n            self.vertices[i]=1/num*i;\n        }\n\n        bufferData();\n    };\n\n\n};\n\nOps.Gl.Meshes.Plotter.prototype = new Op();\n\n\n// ----------------------------------------------------------------\n\nOps.Gl.Meshes.Triangle = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Triangle';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        // currentShader.setAttributeVertex( self.squareVertexPositionBuffer.itemSize);\n        // gl.vertexAttribPointer(shader.getAttrVertexPos(),self.squareVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);\n        gl.vertexAttribPointer(currentShader.getAttrVertexPos(),self.squareVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);\n\n\n        currentShader.bind();\n        gl.bindBuffer(gl.ARRAY_BUFFER, self.squareVertexPositionBuffer);\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, self.squareVertexPositionBuffer.numItems);\n\n        self.trigger.call();\n    };\n\n    this.squareVertexPositionBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.squareVertexPositionBuffer);\n    this.vertices = [\n         0.0,  1.0,  0.0,\n        -1.0,  -1.0,  0.0,\n         1.0, -1.0,  0.0\n    ];\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(this.vertices), gl.STATIC_DRAW);\n    this.squareVertexPositionBuffer.itemSize = 3;\n    this.squareVertexPositionBuffer.numItems = 3;\n\n\n};\n\nOps.Gl.Meshes.Triangle.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.Shader={};\n\nOps.Gl.Shader.BasicMaterial = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='BasicMaterial';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n\n    this.texture=CGL.Texture.load('assets/skull.png');\n\n\n    this.doRender=function()\n    {\n        currentShader=shader;\n\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, self.texture.tex);\n\n        self.trigger.call();\n    };\n\n    var srcFrag=''+\n        'precision highp float;\\n'+\n        'varying vec2 texCoord;\\n'+\n        'uniform sampler2D tex;\\n'+\n        'uniform float r;\\n'+\n        'uniform float g;\\n'+\n        'uniform float b;\\n'+\n        'uniform float a;\\n'+\n        '\\n'+\n        'void main()\\n'+\n        '{\\n'+\n\n        '   vec3 col=texture2D(tex,texCoord).rgb;\\n'+\n        '   gl_FragColor = vec4(col,a);\\n'+\n        '}\\n';\n\n\n    var shader=new CGL.Shader();\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n\n    this.textureUniform=new CGL.Uniform(shader,'t','tex',0);\n\n\n    this.doRender();\n\n    this.r=this.addInPort(new Port(this,\"r\"));\n    this.r.onValueChanged=function()\n    {\n        if(!self.r.uniform) self.r.uniform=new CGL.Uniform(shader,'f','r',self.r.val);\n        else self.r.uniform.setValue(self.r.val);\n\n        // shader.bind();\n        // if(!self.r.uniLoc) self.r.uniLoc=gl.getUniformLocation(shader.getProgram(), \"r\");\n        // gl.uniform1f(self.r.uniLoc, self.r.val);\n    };\n\n    this.g=this.addInPort(new Port(this,\"g\"));\n    this.g.onValueChanged=function()\n    {\n        if(!self.g.uniform) self.g.uniform=new CGL.Uniform(shader,'f','g',self.g.val);\n        else self.g.uniform.setValue(self.g.val);\n\n        // shader.bind();\n        // if(!self.g.uniLoc) self.g.uniLoc=gl.getUniformLocation(shader.getProgram(), \"g\");\n        // gl.uniform1f(self.g.uniLoc, self.g.val);\n    };\n\n    this.b=this.addInPort(new Port(this,\"b\"));\n    this.b.onValueChanged=function()\n    {\n        if(!self.b.uniform) self.b.uniform=new CGL.Uniform(shader,'f','b',self.b.val);\n        else self.b.uniform.setValue(self.b.val);\n\n        // shader.bind();\n        // if(!self.b.uniLoc) self.b.uniLoc=gl.getUniformLocation(shader.getProgram(), \"b\");\n        // gl.uniform1f(self.b.uniLoc, self.b.val);\n    };\n\n    this.a=this.addInPort(new Port(this,\"a\"));\n    this.a.onValueChanged=function()\n    {\n        if(!self.a.uniform) self.a.uniform=new CGL.Uniform(shader,'f','a',self.a.val);\n        else self.a.uniform.setValue(self.a.val);\n\n        // shader.bind();\n        // if(!self.a.uniLoc) self.a.uniLoc=gl.getUniformLocation(shader.getProgram(), \"a\");\n        // gl.uniform1f(self.a.uniLoc, self.a.val);\n    };\n\n    this.r.val=Math.random();\n    this.g.val=Math.random();\n    this.b.val=Math.random();\n    this.a.val=1.0;\n\n    this.render.onTriggered=this.doRender;\n};\n\nOps.Gl.Shader.BasicMaterial.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Shader.Schwurbel = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Schwurbel';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.timer=this.addInPort(new Port(this,\"time\"));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.doRender=function()\n    {\n        currentShader=shader;\n        if(!self.timer.uniLoc)\n        {\n            shader.bind();\n            self.timer.uniLoc=gl.getUniformLocation(shader.getProgram(), \"time\");\n        }\n        gl.uniform1f(self.timer.uniLoc, self.timer.val);\n\n        self.trigger.call();\n    };\n\n    var srcFrag=''+\n        'precision mediump float;\\n'+\n        'uniform float time;\\n'+\n        '\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        'float c=sqrt(sin(time*0.02)*cos((time+gl_FragCoord.y)*0.02)+sin(time+gl_FragCoord.x*0.02)*sin(time+gl_FragCoord.y*0.02));\\n'+\n        'gl_FragColor = vec4( c,c,c,1.0);\\n'+\n        '}\\n';\n\n    var shader=new CGL.Shader();\n    shader.compile(shader.getDefaultVertexShader(),srcFrag);\n\n    this.doRender();\n    this.render.onTriggered=this.doRender;\n};\n\nOps.Gl.Shader.Schwurbel.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Shader.Noise = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Noise';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var timeUniform=-1;\n    var timeStart=-1;\n\n    this.doRender=function()\n    {\n        if(timeUniform==-1)\n        {\n            timeStart=Date.now();\n            shader.bind();\n            timeUniform=gl.getUniformLocation(shader.getProgram(), \"time\");\n        }\n\n        gl.uniform1f(timeUniform, (Date.now()-timeStart)/1000);\n        currentShader=shader;\n\n        self.trigger.call();\n    };\n\n    var srcFrag=''+\n        'precision mediump float;\\n'+\n        'uniform float time;\\n'+\n        '\\n'+\n        'float random(vec2 co)\\n'+\n        '{\\n'+\n        '   return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\\n'+\n        '}\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        '   float c=random(time*gl_FragCoord.xy);'+\n        '   gl_FragColor = vec4( c,c,c,1.0);\\n'+\n        '}\\n';\n\n\n    var shader=new CGL.Shader();\n    shader.compile(shader.getDefaultVertexShader(),srcFrag);\n\n    this.doRender();\n    this.render.onTriggered=this.doRender;\n};\n\nOps.Gl.Shader.Noise.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.Matrix={};\n\n\nOps.Gl.Matrix.Translate = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='translate';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.x=this.addInPort(new Port(this,\"x\"));\n    this.y=this.addInPort(new Port(this,\"y\"));\n    this.z=this.addInPort(new Port(this,\"z\"));\n    this.x.val=0.0;\n    this.y.val=0.0;\n    this.z.val=0.0;\n    \n    var vec=vec3.create();\n\n    this.render.onTriggered=function()\n    {\n        vec3.set(vec, self.x.val,self.y.val,self.z.val);\n\n        mat4.translate(mvMatrix,mvMatrix, vec);\n        self.trigger.call();\n    };\n\n};\n\nOps.Gl.Matrix.Translate.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.Matrix.Transform = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var DEG2RAD = 3.14159/180.0;\n    this.name='transform';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.posX=this.addInPort(new Port(this,\"posX\"));\n    this.posY=this.addInPort(new Port(this,\"posY\"));\n    this.posZ=this.addInPort(new Port(this,\"posZ\"));\n\n    this.scaleX=this.addInPort(new Port(this,\"scaleX\"));\n    this.scaleY=this.addInPort(new Port(this,\"scaleY\"));\n    this.scaleZ=this.addInPort(new Port(this,\"scaleZ\"));\n\n    this.rotX=this.addInPort(new Port(this,\"rotX\"));\n    this.rotY=this.addInPort(new Port(this,\"rotY\"));\n    this.rotZ=this.addInPort(new Port(this,\"rotZ\"));\n    \n    var vPos=vec3.create();\n    var vScale=vec3.create();\n    var oldMatrix = mat4.create();\n    var transMatrix = mat4.create();\n    mat4.identity(transMatrix);\n\n    var doScale=false;\n    var doTranslate=false;\n\n    this.render.onTriggered=function()\n    {\n        mat4.copy(oldMatrix, mvMatrix);\n\n        mat4.multiply(mvMatrix,mvMatrix,transMatrix);\n\n        self.trigger.call();\n\n        mat4.copy(mvMatrix,oldMatrix);\n    };\n\n    var updateMatrix=function()\n    {\n        mat4.identity(transMatrix);\n        if(doTranslate)mat4.translate(transMatrix,transMatrix, vPos);\n\n        if(self.rotX.val!==0)mat4.rotateX(transMatrix,transMatrix, self.rotX.val*DEG2RAD);\n        if(self.rotY.val!==0)mat4.rotateY(transMatrix,transMatrix, self.rotY.val*DEG2RAD);\n        if(self.rotZ.val!==0)mat4.rotateZ(transMatrix,transMatrix, self.rotZ.val*DEG2RAD);\n\n        if(doScale)mat4.scale(transMatrix,transMatrix, vScale);\n    };\n\n    this.translateChanged=function()\n    {\n        doTranslate=false;\n        if(self.posX.val!==0.0 || self.posY.val!==0.0 || self.posZ.val!==0.0)doTranslate=true;\n        vec3.set(vPos, self.posX.val,self.posY.val,self.posZ.val);\n        updateMatrix();\n    };\n\n    this.scaleChanged=function()\n    {\n        doScale=false;\n        if(self.scaleX.val!==0.0 || self.scaleY.val!==0.0 || self.scaleZ.val!==0.0)doScale=true;\n        vec3.set(vScale, self.scaleX.val,self.scaleY.val,self.scaleZ.val);\n        updateMatrix();\n    };\n\n    this.rotChanged=function()\n    {\n        updateMatrix();\n    };\n\n    this.rotX.onValueChanged=this.rotChanged;\n    this.rotY.onValueChanged=this.rotChanged;\n    this.rotZ.onValueChanged=this.rotChanged;\n\n    this.scaleX.onValueChanged=this.scaleChanged;\n    this.scaleY.onValueChanged=this.scaleChanged;\n    this.scaleZ.onValueChanged=this.scaleChanged;\n\n    this.posX.onValueChanged=this.translateChanged;\n    this.posY.onValueChanged=this.translateChanged;\n    this.posZ.onValueChanged=this.translateChanged;\n\n    this.rotX.val=0.0;\n    this.rotY.val=0.0;\n    this.rotZ.val=0.0;\n\n    this.scaleX.val=1.0;\n    this.scaleY.val=1.0;\n    this.scaleZ.val=1.0;\n\n    this.posX.val=0.0;\n    this.posY.val=0.0;\n    this.posZ.val=0.0;\n\n    updateMatrix();\n};\n\nOps.Gl.Matrix.Translate.prototype = new Op();\n\n\n\n\n\n","// https://github.com/automat/foam-gl\n// http://howlerjs.com/\n//http://learningwebgl.com/lessons/lesson01/index.html\n\n\nOps.Log = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='logger';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.input=this.addInPort(new Port(this,\"input\"));\n    this.input.val='';\n\n    this.exec=function()\n    {\n        console.log(\"[log] \" + self.input.val);\n    };\n\n    this.exe.onTriggered=this.exec;\n    this.input.onValueChanged=this.exec;\n};\nOps.Log.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\n\nOps.CallsPerSecond = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='CallsPerSecond';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.timeStart=0;\n    this.cps=0;\n\n    this.exe.onTriggered=function()\n    {\n        if(self.timeStart===0)self.timeStart=Date.now();\n        var now = Date.now();\n\n        if(now-self.timeStart>1000)\n        {\n            self.timeStart=Date.now();\n            console.log('cps: '+self.cps);\n            self.cps=0;\n        }\n\n        self.cps++;\n    };\n};\nOps.CallsPerSecond.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\nOps.Value = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Value';\n    this.v=this.addInPort(new Port(this,\"value\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.v.val;\n    };\n\n    this.v.onValueChanged=this.exec;\n};\n\nOps.Value.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\n\nOps.TimeLineTime = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='TimeLineTime';\n    this.theTime=this.addOutPort(new Port(this,\"time\"));\n\n    this.onAnimFrame=function(time)\n    {\n        this.theTime.val=time;\n    };\n\n};\nOps.TimeLineTime.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\n\n\n\nOps.Repeat = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Repeat';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.num=this.addInPort(new Port(this,\"num\"));\n    this.num.val=5;\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n    this.idx=this.addOutPort(new Port(this,\"index\"));\n\n    this.exe.onTriggered=function()\n    {\n\n        for(var i=0;i<self.num.value;i++)\n        {\n            self.idx.val=i;\n            self.trigger.call();\n        }\n\n    };\n};\nOps.Repeat.prototype = new Op();\n\n\n\n\n// ---------------------------------------------------------------------------\n\n\nOps.IfTrueThen = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='if true then';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.bool=this.addInPort(new Port(this,\"boolean\"));\n    this.bool.val=false;\n\n    this.triggerThen=this.addOutPort(new Port(this,\"then\",OP_PORT_TYPE_FUNCTION));\n    this.triggerElse=this.addOutPort(new Port(this,\"else\",OP_PORT_TYPE_FUNCTION));\n\n    this.exe.onTriggered=function()\n    {\n        if(self.bool.val===true)\n        {\n            self.triggerThen.call();\n        }\n        else\n        {\n            self.triggerElse.call();\n        }\n    };\n\n    this.bool.onValueChanged=function()\n    {\n        self.exe.onTriggered();\n    };\n\n};\nOps.IfTrueThen.prototype = new Op();\n\n\n\n\n\n// ---------------------------------------------------------------------------\n\nOps.Interval = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='Interval';\n    this.timeOutId=-1;\n    this.interval=this.addInPort(new Port(this,\"interval\"));\n    this.interval.val=1000;\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.exec=function()\n    {\n        if(this.timeOutId!=-1)return;\n        var self=this;\n\n        this.timeOutId=setTimeout(function()\n        {\n            self.timeOutId=-1;\n            self.trigger.call();\n            self.exec();\n        },\n        this.interval.val );\n    };\n\n    this.exec();\n\n};\n\nOps.Interval.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\n// --------------------------------------------------------------------------\n\nOps.Anim={};\n\nOps.Anim.SinusAnim = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='SinusAnim';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    var self=this;\n\n    this.exe.onTriggered=function()\n    {\n        self.result.val=Math.sin(Date.now()/1000.0);\n    };\n\n    this.exe.onTriggered();\n\n};\n\nOps.Anim.SinusAnim.prototype = new Op();\n\n\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Anim.RelativeTime = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='RelativeTime';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    var self=this;\n    var startTime=Date.now()/1000.0;\n\n    this.exe.onTriggered=function()\n    {\n        self.result.val=Date.now()/1000.0-startTime;\n    };\n\n    this.exe.onTriggered();\n\n};\n\nOps.Anim.RelativeTime.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\nOps.Input={};\n\nOps.Input.GamePad = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='GamePad';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.numPads=this.addOutPort(new Port(this,\"numPads\"));\n    this.axis1=this.addOutPort(new Port(this,\"axis1\"));\n    this.axis2=this.addOutPort(new Port(this,\"axis2\"));\n    this.axis3=this.addOutPort(new Port(this,\"axis3\"));\n    this.axis4=this.addOutPort(new Port(this,\"axis4\"));\n    this.button0=this.addOutPort(new Port(this,\"button0\"));\n    this.button1=this.addOutPort(new Port(this,\"button1\"));\n    this.button2=this.addOutPort(new Port(this,\"button2\"));\n    this.button3=this.addOutPort(new Port(this,\"button3\"));\n    this.button4=this.addOutPort(new Port(this,\"button4\"));\n\n    var self=this;\n    var startTime=Date.now()/1000.0;\n\n    this.exe.onTriggered=function()\n    {\n        var gamePads=navigator.getGamepads();\n        var count=0;\n\n        for(var gp in gamePads)\n        {\n            if(gamePads[gp].axes)\n            {\n                self.axis1.val=gamePads[gp].axes[0];\n                self.axis2.val=gamePads[gp].axes[1];\n                self.axis3.val=gamePads[gp].axes[2];\n                self.axis4.val=gamePads[gp].axes[3];\n\n                self.button0.val=gamePads[gp].buttons[0].pressed;\n                self.button0.val=gamePads[gp].buttons[1].pressed;\n                self.button2.val=gamePads[gp].buttons[2].pressed;\n                self.button3.val=gamePads[gp].buttons[3].pressed;\n                self.button4.val=gamePads[gp].buttons[4].pressed;\n\n                count++;\n            }\n        }\n\n        self.numPads.val=count;\n    };\n\n    this.exe.onTriggered();\n\n};\n\nOps.Input.GamePad.prototype = new Op();\n\n","Ops.Math={};\n\n\nOps.Math.Random = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='random';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.exe.onTriggered=function()\n    {\n        self.result.val=Math.random();\n    };\n\n    this.exe.onTriggered();\n};\n\nOps.Math.Random.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\n\n\nOps.Math.MapRange = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='map value range';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.v=this.addInPort(new Port(this,\"value\"));\n    this.old_min=this.addInPort(new Port(this,\"old min\"));\n    this.old_max=this.addInPort(new Port(this,\"old max\"));\n    this.new_min=this.addInPort(new Port(this,\"new min\"));\n    this.new_max=this.addInPort(new Port(this,\"new max\"));\n\n    this.exec= function()\n    {\n        if(self.v.val>self.old_max.val)\n        {\n            self.result.val=self.new_max.val;\n            return;\n        }\n        else\n        if(self.v.val<self.old_min.val)\n        {\n            self.result.val=self.new_min.val;\n            return;\n        }\n\n        var nMin=parseFloat(self.new_min.val);\n        var nMax=parseFloat(self.new_max.val);\n        var oMin=parseFloat(self.old_min.val);\n        var oMax=parseFloat(self.old_max.val);\n        var x=parseFloat(self.v.val);\n\n        var reverseInput = false;\n        var oldMin = Math.min( oMin, oMax );\n        var oldMax = Math.max( oMin, oMax );\n        if(oldMin!= oMin) reverseInput = true;\n\n        var reverseOutput = false;\n        var newMin = Math.min( nMin, nMax );\n        var newMax = Math.max( nMin, nMax );\n        if(newMin != nMin) reverseOutput = true;\n\n        var portion=0;\n\n        if(reverseInput) portion = (oldMax-x)*(newMax-newMin)/(oldMax-oldMin);\n            else portion = (x-oldMin)*(newMax-newMin)/(oldMax-oldMin);\n        \n        if(reverseOutput) self.result.val = newMax - portion;\n            else self.result.val = portion + newMin;\n\n    };\n\n    this.v.val=0;\n    this.old_min.val=-1;\n    this.old_max.val=1;\n    this.new_min.val=0;\n    this.new_max.val=1;\n\n\n    this.v.onValueChanged=this.exec;\n    this.old_min.onValueChanged=this.exec;\n    this.old_max.onValueChanged=this.exec;\n    this.new_min.onValueChanged=this.exec;\n    this.new_max.onValueChanged=this.exec;\n\n    this.exec();\n\n};\n\nOps.Math.MapRange.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Abs = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    this.name='abs';\n    this.number=this.addInPort(new Port(this,\"number\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.number.onValueChanged=function()\n    {\n        self.result.val=Math.abs(self.number.val);\n    };\n};\n\nOps.Math.Abs.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Sin = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    this.name='Sinus';\n    this.number=this.addInPort(new Port(this,\"number\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.number.onValueChanged=function()\n    {\n        self.result.val=Math.sin(self.number.val);\n    };\n};\n\nOps.Math.Sin.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Sum = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='sum';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=parseFloat(self.number1.val)+parseFloat(self.number2.val);\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Sum.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Multiply = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='multiply';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val*self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n\n};\n\nOps.Math.Multiply.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Divide = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Divide';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val/self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Divide.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\nOps.Math.Compare={};\n\n\n\n\nOps.Math.Compare.IsEven = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='isEven';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n\n    this.exec= function()\n    {\n        self.result.val=!( self.number1.val & 1 );\n    };\n\n    this.number1.onValueChanged=this.exec;\n};\n\nOps.Math.Compare.IsEven.prototype = new Op();\n\n\n\nOps.Math.Compare.Greater = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Greater';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val>self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Compare.Greater.prototype = new Op();\n\n\n\n\n\n\nOps.Math.Compare.Between = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Between';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number=this.addInPort(new Port(this,\"value\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n    this.number.val=2.0;\n    this.number1.val=1.0;\n    this.number2.val=3.0;\n\n    this.exec= function()\n    {\n        self.result.val=\n            (\n                self.number.val>Math.min(self.number1.val,self.number2.val) &&\n                self.number.val<Math.max(self.number1.val,self.number2.val)\n            );\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n    this.number.onValueChanged=this.exec;\n};\nOps.Math.Compare.Between.prototype = new Op();\n\n\n\n\nOps.Math.Compare.Lesser = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Lesser';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val<self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n\n};\n\nOps.Math.Compare.Lesser.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Math.Compare.Equals = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Equals';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val==self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Compare.Equals.prototype = new Op();\n\n"],"sourceRoot":"/source/"}