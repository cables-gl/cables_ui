{"version":3,"sources":["timer.js","utils.js","cgl_mesh.js","cgl_shader.js","cgl_state.js","cgl_texture.js","cgl_textureeffect.js","holo.js","ops.devices.js","ops.gl.imgeffects.js","ops.gl.js","ops.gl.materials.js","ops.gl.meshes.js","ops.js","ops.json.js","ops.math.js","ops.net.js"],"names":["Timer","getTime","lastTime","Date","now","timeStart","timeOffset","self","this","currentTime","paused","update","togglePlay","play","pause","setOffset","val","generateUUID","d","uuid","replace","c","r","Math","random","floor","toString","ajaxRequest","url","callback","request","XMLHttpRequest","open","responseType","onload","e","target","response","send","CGL","DEG2RAD","Mesh","geom","bufTexCoords","bufVertexNormals","bufVertices","gl","createBuffer","bufVerticesIndizes","setGeom","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","vertices","STATIC_DRAW","itemSize","numItems","length","ELEMENT_ARRAY_BUFFER","Uint16Array","verticesIndices","vertexNormals","console","log","texCoords","render","shader","bind","GL","enableVertexAttribArray","getAttrVertexPos","getAttrVertexNormals","getAttrTexCoords","vertexAttribPointer","FLOAT","what","TRIANGLES","cgl","wireframe","LINES","drawElements","UNSIGNED_SHORT","Geometry","faceVertCount","texCoordsIndices","clear","addFace","a","b","face","iv","push","parseOBJ","buff","_readline","off","s","String","fromCharCode","groups","vertexNormalIndices","cg","from","to","Uint8Array","line","cds","split","x","parseFloat","y","z","v0a","v1a","v2a","vi0","parseInt","vi1","vi2","ui0","ui1","ui2","ni0","ni1","ni2","vlen","ulen","nlen","v3a","vi3","ui3","ni3","Uniform","_shader","_type","_name","_value","loc","name","type","value","needsUpdate","addUniform","getType","getName","resetLoc","updateValueF","getUniformLocation","getProgram","uniform1f","setValueF","v","updateValueT","uniform1i","setValueT","setValue","updateValue","Shader","program","uniforms","defines","needsRecompile","define","i","removeDefine","splice","removeUniform","uni","getDefaultVertexShader","getDefaultFragmentShader","srcVert","srcFrag","setSource","projMatrixUniform","mvMatrixUniform","attrTexCoords","attrVertexNormals","attrVertexPos","hasTextureUniforms","compile","definesStr","endl","vs","fs","createProgram","getAttribLocation","useProgram","uniformMatrix4fv","pMatrix","mvMatrix","createShader","str","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","VERTEX_SHADER","FRAGMENT_SHADER","warn","getShaderInfoLog","lines","match","j","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","vstr","fstr","vshader","fshader","attachShader","State","mvMatrixStack","pMatrixStack","shaderStack","mat4","create","identity","simpleShader","currentShader","canvasWidth","canvasHeight","beginFrame","setShader","endFrame","setPreviousShader","getShader","pop","pushMvMatrix","copy","popMvMatrix","pushPMatrix","popPMatrix","Texture","tex","createTexture","width","height","setSize","w","h","bindTexture","TEXTURE_2D","arr","uarr","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR","texImage2D","RGBA","UNSIGNED_BYTE","initTexture","img","image","TEXTURE_MAG_FILTER","NEAREST","load","finishedCallback","texture","Image","src","TextureEffect","mesh","textureSource","textureTarget","frameBuf","createFramebuffer","renderbuffer","createRenderbuffer","switched","startEffect","setSourceTexture","bindFramebuffer","FRAMEBUFFER","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","framebufferTexture2D","COLOR_ATTACHMENT0","framebufferRenderbuffer","DEPTH_ATTACHMENT","getCurrentTargetTexture","getCurrentSourceTexture","viewport","perspective","clearColor","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","finish","PORT_DIR_IN","PORT_DIR_OUT","OP_PORT_TYPE_VALUE","OP_PORT_TYPE_FUNCTION","OP_PORT_TYPE_OBJECT","OP_PORT_TYPE_TEXTURE","Ops","Op","objName","portsOut","portsIn","posts","uiAttribs","id","addOutPort","p","direction","parent","addInPort","execute","exec","printInfo","ipo","removeLinks","getPort","ipi","findFittingPort","otherPort","Link","canLink","getSerialized","op","getPortByName","Port","links","valueBeforeLink","__defineGetter__","__defineSetter__","isLinked","onValueChanged","onTriggered","addLink","l","removeLinkTo","p2","portIn","portOut","remove","isLinkedTo","call","goals","getTypeString","obj","removeLink","link","scene","getOtherPort","onUnLink","p1","objIn","objOut","canLinkText","Scene","ops","timer","animFrameOps","deleteOp","addOp","eval","hasOwnProperty","onAdd","opid","tryRelink","reLinkP1","reLinkP2","onDelete","requestAnimationFrame","time","onAnimFrame","op1","port1Name","op2","port2Name","port1","port2","onLink","serialize","JSON","stringify","getOpById","deSerialize","opinid","opoutid","inName","outName","found","parse","iop","port","ipi2","ili","prototype","Devices","GamePad","apply","arguments","exe","numPads","axis1","axis2","axis3","axis4","button0","button1","button2","button3","button4","gamePads","navigator","getGamepads","count","gp","axes","buttons","pressed","LeapMotion","transX","transY","transZ","finger0X","finger0Y","finger0Z","Leap","loop","frame","_translation","fingers","tipPosition","Gl","TextureEffects","texOut","trigger","ready","effect","currentTextureEffect","Invert","activeTexture","TEXTURE0","Desaturate","amount","amountUniform","RgbMultiply","g","uniformR","uniformG","uniformB","Vignette","lensRadius1","lensRadius2","uniLensRadius1","uniLensRadius2","Blur","uniDirX","uniDirY","Renderer","initTranslate","vec3","set","canvas","clientWidth","clientHeight","enable","DEPTH_TEST","translate","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","document","getElementById","getContext","ClearColor","ClearDepth","Wireframe","lineWidth","TextureEmpty","textureOut","sizeChanged","filename","Meshes","Plotter","buffer","num","drawArrays","LINE_STRIP","Schwurbel","doRender","uniLoc","Noise","timeUniform","Matrix","Translate","vec","Scale","scale","vScale","transMatrix","doScale","multiply","updateMatrix","scaleChanged","Transform","posX","posY","posZ","scaleX","scaleY","scaleZ","rotX","rotY","rotZ","vPos","doTranslate","rotateX","rotateY","rotateZ","translateChanged","rotChanged","RandomCluster","reset","randoms","randomsRot","randomsFloats","fromValues","size","idx","rnd","Render2Texture","ShowNormalsMaterial","BasicMaterial","textureOpacity","TEXTURE1","uniform","textureUniform","textureOpacityUniform","Triangle","Rectangle","rebuild","FullscreenRectangle","Circle","calc","oldPosX","oldPosY","segments","percent","degInRad","posx","cos","radius","posy","sin","ObjMesh","unwrap","ind","crd","cpi","ncrd","Array","Cube","Log","input","CallsPerSecond","cps","Value","result","TimeLineTime","theTime","Repeat","IfTrueThen","bool","triggerThen","triggerElse","Group","triggers","Interval","timeOutId","interval","setTimeout","Anim","SinusAnim","RelativeTime","startTime","TimeDiff","cableVars","Variable","changed","varName","readValue","Json","jsonValue","data","key","Random","Clamp","clamp","min","max","SmoothStep","smoothstep","MapRange","old_min","old_max","new_min","new_max","nMin","nMax","oMin","oMax","reverseInput","oldMin","oldMax","reverseOutput","newMin","newMax","portion","Abs","number","abs","Sin","Sum","number1","number2","Multiply","Divide","Compare","IsEven","Greater","Between","Lesser","Equals","Net","Websocket","checkConnection","connected","connect","timeout","connectedTo","connection","close","window","WebSocket","MozWebSocket","error","onerror","message","onclose","onopen","onmessage","json"],"mappings":"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","file":"cables.min.js","sourcesContent":["\n\nfunction Timer()\n{\n    var self=this;\n    var timeStart=Date.now();\n    var timeOffset=0;\n\n    var currentTime=0;\n    var lastTime=0;\n    var paused=true;\n\n    function getTime()\n    {\n        lastTime=(Date.now()-timeStart)/1000;\n        return lastTime+timeOffset;\n\n    }\n\n    this.update=function()\n    {\n        if(paused) return;\n        currentTime=getTime();\n\n        return currentTime;\n    };\n\n    this.getTime=function()\n    {\n        return currentTime;\n    };\n\n    this.togglePlay=function()\n    {\n        if(paused)self.play();\n            else self.pause();\n    };\n\n    this.setOffset=function(val)\n    {\n        if(currentTime+val<0)\n        {\n            timeStart=Date.now();\n            timeOffset=0;\n            currentTime=0;\n        }\n        else\n        {\n            timeOffset+=val;\n            currentTime=lastTime+timeOffset;\n        }\n        \n\n    };\n\n    this.play=function()\n    {\n        timeStart=Date.now();\n        paused=false;\n    };\n\n    this.pause=function()\n    {\n        timeOffset=currentTime;\n        paused=true;\n    };\n\n}","function generateUUID()\n{\n    var d = new Date().getTime();\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c)\n    {\n        var r = (d + Math.random()*16)%16 | 0;\n        d = Math.floor(d/16);\n        return (c=='x' ? r : (r&0x3|0x8)).toString(16);\n    });\n    return uuid;\n}\n\n// ----------------------------------------------------------------\nfunction ajaxRequest(url, callback)\n{\n    var request = new XMLHttpRequest();\n    request.open(\"GET\", url, true);\n    request.responseType = \"arraybuffer\";\n    request.onload = function(e)\n    {\n        callback(e.target.response);\n    };\n    request.send();\n}\n\nString.prototype.endl = function(){return this+'\\n';};\n\n\n","var CGL=CGL ||\n{\n    DEG2RAD:3.14159/180.0\n};\n\n\n\nCGL.Mesh=function(geom)\n{\n    var bufTexCoords=-1;\n    var bufVertexNormals=-1;\n    var bufVertices = gl.createBuffer();\n    var bufVerticesIndizes = gl.createBuffer();\n\n    this.setGeom=function(geom)\n    {\n        \n        gl.bindBuffer(gl.ARRAY_BUFFER, bufVertices);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(geom.vertices), gl.STATIC_DRAW);\n        bufVertices.itemSize = 3;\n        bufVertices.numItems = geom.vertices.length/3;\n\n\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufVerticesIndizes);\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(geom.verticesIndices), gl.STATIC_DRAW);\n        bufVerticesIndizes.itemSize = 1;\n        bufVerticesIndizes.numItems = geom.verticesIndices.length;\n\n\n\n\n        if(geom.vertexNormals.length>0)\n        {\n            if(bufVertexNormals==-1)bufVertexNormals = gl.createBuffer();\n\n            gl.bindBuffer(gl.ARRAY_BUFFER, bufVertexNormals);\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(geom.vertexNormals), gl.STATIC_DRAW);\n            bufVertexNormals.itemSize = 3;\n            bufVertexNormals.numItems = geom.vertexNormals.length/bufVertexNormals.itemSize;\nconsole.log('bufVertexNormals.'+bufVertexNormals.numItems);\n                    \n        }\n\n        if(geom.texCoords.length>0)\n        {\n            if(bufTexCoords==-1)bufTexCoords = gl.createBuffer();\n            gl.bindBuffer(gl.ARRAY_BUFFER, bufTexCoords);\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(geom.texCoords), gl.STATIC_DRAW);\n            bufTexCoords.itemSize = 2;\n            bufTexCoords.numItems = geom.texCoords.length/bufTexCoords.itemSize;\n        }\n\n    };\n\n    this.setGeom(geom);\n\n\n    this.render=function(shader)\n    {\n        if(!shader) return;\n        shader.bind();\n\n        GL.enableVertexAttribArray(shader.getAttrVertexPos());\n        if(bufVertexNormals!=-1) GL.enableVertexAttribArray(shader.getAttrVertexNormals());\n        if(bufTexCoords!=-1) GL.enableVertexAttribArray(shader.getAttrTexCoords());\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, bufVertices);\n        gl.vertexAttribPointer(shader.getAttrVertexPos(),bufVertices.itemSize, gl.FLOAT, false, 0, 0);\n\n        if(bufVertexNormals!=-1)\n        {\n            gl.bindBuffer(gl.ARRAY_BUFFER, bufVertexNormals);\n            gl.vertexAttribPointer(shader.getAttrVertexNormals(),bufVertexNormals.itemSize, gl.FLOAT, false, 0, 0);\n        }\n\n        if(bufTexCoords!=-1)\n        {\n            gl.bindBuffer(gl.ARRAY_BUFFER, bufTexCoords);\n            gl.vertexAttribPointer(shader.getAttrTexCoords(),bufTexCoords.itemSize, gl.FLOAT, false, 0, 0);\n        }\n\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufVerticesIndizes);\n\n        var what=gl.TRIANGLES;\n        if(cgl.wireframe)what=gl.LINES;\n\n        gl.drawElements(what, bufVerticesIndizes.numItems, gl.UNSIGNED_SHORT, 0);\n    };\n\n};\n\nCGL.Geometry=function()\n{\n    this.faceVertCount=3;\n    this.vertices=[];\n    this.verticesIndices=[];\n    this.texCoords=[];\n    this.texCoordsIndices=[];\n    this.vertexNormals=[];\n\n    this.clear=function()\n    {\n        this.vertices.length=0;\n        this.verticesIndices.length=0;\n        this.texCoords.length=0;\n        this.texCoordsIndices.length=0;\n    };\n\n    this.addFace=function(a,b,c)\n    {\n        var face=[-1,-1,-1];\n\n        for(var iv=0;iv<this.vertices;iv+=3)\n        {\n            if( this.vertices[iv+0]==a[0] &&\n                this.vertices[iv+1]==a[1] &&\n                this.vertices[iv+2]==a[2]) face[0]=iv/3;\n\n            if( this.vertices[iv+0]==b[0] &&\n                this.vertices[iv+1]==b[1] &&\n                this.vertices[iv+2]==b[2]) face[1]=iv/3;\n\n            if( this.vertices[iv+0]==c[0] &&\n                this.vertices[iv+1]==c[1] &&\n                this.vertices[iv+2]==c[2]) face[2]=iv/3;\n        }\n\n        if(face[0]==-1)\n        {\n            this.vertices.push(a[0],a[1],a[2]);\n            face[0]=(this.vertices.length-1)/3;\n        }\n\n        if(face[1]==-1)\n        {\n            this.vertices.push(b[0],b[1],b[2]);\n            face[1]=(this.vertices.length-1)/3;\n        }\n\n        if(face[2]==-1)\n        {\n            this.vertices.push(c[0],c[1],c[2]);\n            face[2]=(this.vertices.length-1)/3;\n        }\n\n        this.verticesIndices.push(face[0]);\n        this.verticesIndices.push(face[1]);\n        this.verticesIndices.push(face[2]);\n\n    };\n\n\n\n};\n\nparseOBJ = function(buff)\n{\n\n    _readline = function(a, off)  // Uint8Array, offset\n    {\n        var s = \"\";\n        while(a[off] != 10) s += String.fromCharCode(a[off++]);\n        return s;\n    };\n\n    var geom = new CGL.Geometry();\n    geom.groups = {};\n\n    geom.vertexNormals = [];\n    geom.vertexNormalIndices = [];\n\n    var cg = {from: 0, to:0};   // current group\n    var off = 0;\n    var a = new Uint8Array(buff);\n    \n    while(off < a.length)\n    {\n        var line = _readline(a, off);\n        off += line.length + 1;\n        line = line.replace(/ +(?= )/g,'');\n        line = line.replace(/(^\\s+|\\s+$)/g, '');\n        var cds = line.split(\" \");\n        if(cds[0] == \"g\")\n        {\n            cg.to = geom.verticesIndices.length;\n            if(geom.groups[cds[1]] == null) geom.groups[cds[1]] = {from:geom.verticesIndices.length, to:0};\n            cg = geom.groups[cds[1]];\n        }\n        if(cds[0] == \"v\")\n        {\n            var x = parseFloat(cds[1]);\n            var y = parseFloat(cds[2]);\n            var z = parseFloat(cds[3]);\n            geom.vertices.push(x,y,z);\n        }\n        if(cds[0] == \"vt\")\n        {\n            var x = parseFloat(cds[1]);\n            var y = 1-parseFloat(cds[2]);\n            geom.texCoords.push(x,y);\n        }\n        if(cds[0] == \"vn\")\n        {\n            var x = parseFloat(cds[1]);\n            var y = parseFloat(cds[2]);\n            var z = parseFloat(cds[3]);\n            geom.vertexNormals.push(x,y,z);\n        }\n        if(cds[0] == \"f\")\n        {\n            var v0a = cds[1].split(\"/\"), v1a = cds[2].split(\"/\"), v2a = cds[3].split(\"/\");\n            var vi0 = parseInt(v0a[0])-1, vi1 = parseInt(v1a[0])-1, vi2 = parseInt(v2a[0])-1;\n            var ui0 = parseInt(v0a[1])-1, ui1 = parseInt(v1a[1])-1, ui2 = parseInt(v2a[1])-1;\n            var ni0 = parseInt(v0a[2])-1, ni1 = parseInt(v1a[2])-1, ni2 = parseInt(v2a[2])-1;\n            \n            var vlen = geom.vertices.length/3, ulen = geom.texCoords.length/2, nlen = geom.vertexNormals.length/3;\n            if(vi0<0) vi0 = vlen + vi0+1; if(vi1<0) vi1 = vlen + vi1+1; if(vi2<0) vi2 = vlen + vi2+1;\n            if(ui0<0) ui0 = ulen + ui0+1; if(ui1<0) ui1 = ulen + ui1+1; if(ui2<0) ui2 = ulen + ui2+1;\n            if(ni0<0) ni0 = nlen + ni0+1; if(ni1<0) ni1 = nlen + ni1+1; if(ni2<0) ni2 = nlen + ni2+1;\n            \n            geom.verticesIndices.push(vi0, vi1, vi2);  //cg.verticesIndices.push(vi0, vi1, vi2)\n            geom.texCoordsIndices  .push(ui0, ui1, ui2);  //cg.texCoordsIndices  .push(ui0, ui1, ui2);\n            geom.vertexNormalIndices.push(ni0, ni1, ni2);  //cg.vertexNormalIndices.push(ni0, ni1, ni2);\n            if(cds.length == 5)\n            {\n                var v3a = cds[4].split(\"/\");\n                var vi3 = parseInt(v3a[0])-1, ui3 = parseInt(v3a[1])-1, ni3 = parseInt(v3a[2])-1;\n                if(vi3<0) vi3 = vlen + vi3+1;\n                if(ui3<0) ui3 = ulen + ui3+1;\n                if(ni3<0) ni3 = nlen + ni3+1;\n                geom.verticesIndices.push(vi0, vi2, vi3);  //cg.verticesIndices.push(vi0, vi2, vi3);\n                geom.texCoordsIndices  .push(ui0, ui2, ui3);  //cg.texCoordsIndices  .push(ui0, ui2, ui3);\n                geom.vertexNormalIndices.push(ni0, ni2, ni3);  //cg.vertexNormalIndices.push(ni0, ni2, ni3);\n            }\n        }\n    }\n    cg.to = geom.verticesIndices.length;\n    \n    return geom;\n};\n\n\n","var CGL=CGL || {};\n\n// ---------------------------------------------------------------------------\n\nCGL.Uniform=function(_shader,_type,_name,_value)\n{\n    var self=this;\n    var loc=-1;\n    var name=_name;\n    var type=_type;\n    var value=0;\n    var shader=_shader;\n    this.needsUpdate=true;\n\n    shader.addUniform(this);\n\n    this.getType=function() {return type;};\n    this.getName=function() {return name;};\n\n    this.resetLoc=function() { loc=-1;};\n\n    this.updateValueF=function()\n    {\n        if(loc==-1) loc=gl.getUniformLocation(shader.getProgram(), name);\n        gl.uniform1f(loc, value);\n    };\n\n    this.setValueF=function(v)\n    {\n        self.needsUpdate=true;\n        value=v;\n    };\n\n    this.updateValueT=function()\n    {\n        if(loc==-1)\n        {\n            loc=gl.getUniformLocation(shader.getProgram(), name);\n            if(loc==-1) console.log('texture loc unknown!!');\n        }\n\n        gl.uniform1i(loc, value);\n    };\n\n    this.setValueT=function(v)\n    {\n        self.needsUpdate=true;\n        value=v;\n    };\n\n    if(type=='f')\n    {\n        this.setValue=this.setValueF;\n        this.updateValue=this.updateValueF;\n    }\n\n    if(type=='t')\n    {\n        this.setValue=this.setValueT;\n        this.updateValue=this.updateValueT;\n    }\n\n    this.setValue(_value);\n};\n\n// ---------------------------------------------------------------------------\n\nCGL.Shader=function()\n{\n    var self=this;\n    var program=false;\n    var uniforms=[];\n    var defines=[];\n    var needsRecompile=true;\n\n\n\n    this.define=function(name,value)\n    {\n        if(!value)value='';\n        for(var i in defines)\n        {\n            if(defines[i][0]==name)\n            {\n                defines[i][1]=value;\n                return;\n            }\n        }\n        defines.push([name,value]);\n    };\n\n    this.removeDefine=function(name,value)\n    {\n        for(var i in defines)\n        {\n            if(defines[i][0]==name)\n            {\n                defines.splice(i,1);\n                return;\n            }\n        }\n    };\n\n\n    this.removeUniform=function(name)\n    {\n        for(var i in uniforms)\n        {\n            if(uniforms[i].getName()==name)\n            {\n                uniforms.splice(i,1);\n            }\n        }\n        needsRecompile=true;\n    };\n\n    this.addUniform=function(uni)\n    {\n        uniforms.push(uni);\n        needsRecompile=true;\n    };\n\n    this.getDefaultVertexShader=function()\n    {\n        return ''+\n        'attribute vec3 vPosition;\\n'+\n        'attribute vec2 attrTexCoord;\\n'+\n        'attribute vec3 attrVertNormal;\\n'+\n        'varying vec2 texCoord;\\n'+\n        'varying vec3 norm;\\n'+\n        'uniform mat4 projMatrix;\\n'+\n        'uniform mat4 mvMatrix;\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        '   texCoord=attrTexCoord;\\n'+\n        '   norm=attrVertNormal;\\n'+\n        // '   gl_PointSize=3.0;\\n'+\n        '   gl_Position = projMatrix * mvMatrix * vec4(vPosition,  1.0);\\n'+\n        '}\\n';\n    };\n\n    this.getDefaultFragmentShader=function()\n    {\n        return ''+\n        'precision mediump float;\\n'+\n        'varying vec3 norm;'+\n        'void main()\\n'+\n        '{\\n'+\n\n        '   gl_FragColor = vec4(0.5,0.5,0.5,1.0);\\n'+\n        // '   gl_FragColor = vec4(norm.x,norm.y,1.0,1.0);\\n'+\n        '}\\n';\n    };\n\n    this.srcVert=this.getDefaultVertexShader();\n    this.srcFrag=this.getDefaultFragmentShader();\n\n    this.setSource=function(srcVert,srcFrag)\n    {\n        this.srcVert=srcVert;\n        this.srcFrag=srcFrag;\n    };\n\n    var projMatrixUniform=-1;\n    var mvMatrixUniform=-1;\n\n    var attrTexCoords = -1;\n    var attrVertexNormals = -1;\n    var attrVertexPos = -1;\n\n    this.getAttrVertexNormals=function(){return attrVertexNormals;};\n    this.getAttrTexCoords=function(){return attrTexCoords;};\n    this.getAttrVertexPos=function(){return attrVertexPos;};\n\n    this.hasTextureUniforms=function()\n    {\n        for(var i in uniforms)\n        {\n            if(uniforms[i].getType()=='t') return true;\n        }\n        return false;\n    };\n\n    this.compile=function()\n    {\n        var definesStr='';\n\n        for(var i in defines)\n        {\n            definesStr+='#define '+defines[i][0]+' '+defines[i][1]+''.endl();\n        }\n\n        if(self.hasTextureUniforms()) definesStr+='#define HAS_TEXTURES'.endl();\n\n        console.log('shader compile...');\n        console.log('has textures: '+self.hasTextureUniforms() );\n\n        var vs=definesStr+self.srcVert;\n        var fs=definesStr+self.srcFrag;\n\n        if(!program)\n        {\n            console.log('create shaderprogram');\n                    \n            program=createProgram(vs,fs, program);\n        }\n        else\n        {\n            console.log('recompile shaders...');\n\n            // self.vshader=createShader(vs, gl.VERTEX_SHADER, self.vshader );\n            // self.fshader=createShader(fs, gl.FRAGMENT_SHADER, self.fshader );\n            // linkProgram(program);\n            program=createProgram(vs,fs, program);\n            \n            mvMatrixUniform=-1;\n\n            for(var i in uniforms)uniforms[i].resetLoc();\n        }\n\n        needsRecompile=false;\n    };\n\n    this.bind=function()\n    {\n        if(!program || needsRecompile) self.compile();\n\n       \n\n\n        if(mvMatrixUniform==-1)\n        {\n            attrVertexNormals = gl.getAttribLocation(program, 'attrVertNormal');\n            attrTexCoords = gl.getAttribLocation(program, 'attrTexCoord');\n            attrVertexPos = gl.getAttribLocation(program, 'vPosition');\n\n            projMatrixUniform = gl.getUniformLocation(program, \"projMatrix\");\n            mvMatrixUniform = gl.getUniformLocation(program, \"mvMatrix\");\n        }\n\n        GL.useProgram(program);\n\n        for(var i in uniforms)\n        {\n            if(uniforms[i].needsUpdate)uniforms[i].updateValue();\n        }\n\n        gl.uniformMatrix4fv(projMatrixUniform, false, cgl.pMatrix);\n        gl.uniformMatrix4fv(mvMatrixUniform, false, cgl.mvMatrix);\n    };\n\n    this.getProgram=function()\n    {\n        return program;\n    };\n\n\n    createShader =function(str, type,_shader)\n    {\n        var shader = _shader || gl.createShader(type);\n        gl.shaderSource(shader, str);\n        gl.compileShader(shader);\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\n        {\n            console.log('compile status: ');\n\n            if(type==gl.VERTEX_SHADER)console.log('VERTEX_SHADER');\n            if(type==gl.FRAGMENT_SHADER)console.log('FRAGMENT_SHADER');\n            \n            console.warn( gl.getShaderInfoLog(shader) );\n\n            var lines = str.match(/^.*((\\r\\n|\\n|\\r)|$)/gm);\n            for(var i in lines)\n            {\n                var j=parseInt(i,10)+1;\n                console.log(j+': ',lines[i]);\n            }\n\n            console.warn( gl.getShaderInfoLog(shader) );\n        }\n        return shader;\n    };\n\n    linkProgram=function(program)\n    {\n        gl.linkProgram(program);\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS))\n        {\n            throw gl.getProgramInfoLog(program);\n        }\n\n    };\n\n    createProgram=function(vstr, fstr)\n    {\n        var program = gl.createProgram();\n        self.vshader = createShader(vstr, gl.VERTEX_SHADER);\n        self.fshader = createShader(fstr, gl.FRAGMENT_SHADER);\n        gl.attachShader(program, self.vshader);\n        gl.attachShader(program, self.fshader);\n\n        linkProgram(program);\n        return program;\n    };\n\n\n\n};\n\n","\nvar CGL=CGL || {};\n\nCGL.State=function()\n{\n    var self=this;\n    var mvMatrixStack=[];\n    var pMatrixStack=[];\n    var shaderStack=[];\n\n    this.pMatrix=mat4.create();\n    this.mvMatrix=mat4.create();\n\n    mat4.identity(self.mvMatrix);\n\n    var simpleShader=new CGL.Shader();\n    var currentShader=simpleShader;\n\n\n    this.canvasWidth=640;\n    this.canvasHeight=360;\n\n    this.wireframe=false;\n\n\n    this.beginFrame=function()\n    {\n        self.setShader(simpleShader);\n    };\n\n    this.endFrame=function()\n    {\n        self.setPreviousShader();\n        if(mvMatrixStack.length>0) console.warn('mvmatrix stack length !=0 at end of rendering...');\n        if(pMatrixStack.length>0) console.warn('pmatrix stack length !=0 at end of rendering...');\n        if(shaderStack.length>0) console.warn('shaderStack length !=0 at end of rendering...');\n    };\n\n    // shader stack\n\n    this.getShader=function()\n    {\n        return currentShader;\n    };\n\n    this.setShader=function(shader)\n    {\n        shaderStack.push(shader);\n        currentShader=shader;\n    };\n\n    this.setPreviousShader=function()\n    {\n        if(shaderStack.length===0) throw \"Invalid movelview popMatrix!\";\n        shaderStack.pop();\n        currentShader = shaderStack[shaderStack.length-1];\n    };\n\n    // modelview matrix stack\n\n    this.pushMvMatrix=function()\n    {\n        var copy = mat4.create();\n        mat4.copy(copy,self.mvMatrix);\n        mvMatrixStack.push(copy);\n    };\n\n    this.popMvMatrix=function()\n    {\n        if(mvMatrixStack.length===0) throw \"Invalid movelview popMatrix!\";\n        self.mvMatrix = mvMatrixStack.pop();\n    };\n\n    // projection matrix stack\n\n    this.pushPMatrix=function()\n    {\n        var copy = mat4.create();\n        mat4.copy(copy,self.pMatrix);\n        pMatrixStack.push(copy);\n    };\n\n    this.popPMatrix=function()\n    {\n        if(pMatrixStack.length===0) throw \"Invalid projection popMatrix!\";\n        self.pMatrix = pMatrixStack.pop();\n    };\n\n\n};\n\ncgl=new CGL.State();\n\n","var CGL=CGL || {};\n\nCGL.Texture=function()\n{\n    var self=this;\n    this.tex = gl.createTexture();\n    this.width=0;\n    this.height=0;\n\n    // gl.bindTexture(gl.TEXTURE_2D, this.tex);\n    // gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([111, 111, 111, 255]));\n    // gl.bindTexture(gl.TEXTURE_2D, null);\n\n    // this.bind=function(slot)\n    // {\n    //     gl.activeTexture(gl.TEXTURE0+slot);\n    //     gl.bindTexture(gl.TEXTURE_2D, self.tex);\n    // };\n\n    this.setSize=function(w,h)\n    {\n        self.width=w;\n        self.height=h;\n\n        gl.bindTexture(gl.TEXTURE_2D, self.tex);\n        \n        var arr=[];\n        arr.length=w*h*4;\n        // for(var x=0;x<w;x++)\n        // {\n        //     for(var y=0;y<h;y++)\n        //     {\n        //         // var index=x+y*w;\n        //         arr.push( parseInt( (x/w)*255,10) );\n        //         arr.push(0);\n        //         arr.push( parseInt((y/w)*255,10));\n        //         arr.push(255);\n        //     }\n        // }\n        var uarr=new Uint8Array(arr);\n\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, w, h, 0, gl.RGBA, gl.UNSIGNED_BYTE, uarr);\n\n        gl.bindTexture(gl.TEXTURE_2D, null);\n    };\n\n    this.initTexture=function(img)\n    {\n        self.width=img.width;\n        self.height=img.height;\n\n\n        gl.bindTexture(gl.TEXTURE_2D, self.tex);\n        // gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, self.image);\n\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\n        // non power of two:\n        // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n\n        gl.bindTexture(gl.TEXTURE_2D, null);\n    };\n\n    this.setSize(8,8);\n};\n\nCGL.Texture.load=function(url,finishedCallback)\n{\n    var texture=new CGL.Texture();\n    texture.image = new Image();\n    texture.image.onload = function ()\n    {\n        console.log(texture.image);\n        texture.initTexture(texture.image);\n        finishedCallback();\n    };\n    texture.image.src = url;\n    return texture;\n};\n\n// ---------------------------------------------------------------------------\n","var CGL=CGL || {};\n\nCGL.TextureEffect=function()\n{\n    var self=this;\n    var geom=new CGL.Geometry();\n\n    geom.vertices = [\n         1.0,  1.0,  0.0,\n        -1.0,  1.0,  0.0,\n         1.0, -1.0,  0.0,\n        -1.0, -1.0,  0.0\n    ];\n\n    geom.texCoords = [\n         1.0, 1.0,\n         0.0, 1.0,\n         1.0, 0.0,\n         0.0, 0.0\n    ];\n\n    geom.verticesIndices = [\n        0, 1, 2,\n        3, 1, 2\n    ];\n\n    var mesh=new CGL.Mesh(geom);\n\n    var textureSource=null;\n    var textureTarget=new CGL.Texture();\n\n    var frameBuf = GL.createFramebuffer();\n    var renderbuffer = GL.createRenderbuffer();\n\n    var switched=false;\n\n    this.startEffect=function()\n    {\n        switched=false;\n    };\n\n    this.setSourceTexture=function(tex)\n    {\n        if(tex===null)\n        {\n            textureSource=new CGL.Texture();\n            textureSource.setSize(16,16);\n        }\n        else\n        {\n            textureSource=tex;\n        }\n        console.log(textureSource.width,textureSource.height);\n        \n        textureTarget.setSize(textureSource.width,textureSource.height);\n\n        GL.bindFramebuffer(GL.FRAMEBUFFER, frameBuf);\n\n        GL.bindRenderbuffer(GL.RENDERBUFFER, renderbuffer);\n        GL.renderbufferStorage(GL.RENDERBUFFER, GL.DEPTH_COMPONENT16, textureSource.width,textureSource.height);\n        GL.framebufferTexture2D(GL.FRAMEBUFFER, GL.COLOR_ATTACHMENT0, GL.TEXTURE_2D, textureTarget.tex, 0);\n        GL.framebufferRenderbuffer(GL.FRAMEBUFFER, GL.DEPTH_ATTACHMENT, GL.RENDERBUFFER, renderbuffer);\n        GL.bindTexture(GL.TEXTURE_2D, null);\n        GL.bindRenderbuffer(GL.RENDERBUFFER, null);\n        GL.bindFramebuffer(GL.FRAMEBUFFER, null);\n\n        console.log(\n            self.getCurrentTargetTexture().height,\n            self.getCurrentSourceTexture().height\n            );\n    };\n\n\n    this.getCurrentTargetTexture=function()\n    {\n        if(switched)return textureSource;\n            else return textureTarget;\n    };\n\n    this.getCurrentSourceTexture=function()\n    {\n        if(switched)return textureTarget;\n            else return textureSource;\n    };\n\n    this.bind=function()\n    {\n        if(textureSource===null) throw 'no base texture set!';\n\n        // GL.bindFramebuffer(GL.FRAMEBUFFER, frameBuf);\n\n        cgl.pushMvMatrix();\n\n        // cgl.currentTextureEffect=effect;\n\n\n\n        GL.bindFramebuffer(GL.FRAMEBUFFER, frameBuf);\n        GL.framebufferTexture2D(GL.FRAMEBUFFER, GL.COLOR_ATTACHMENT0, GL.TEXTURE_2D, self.getCurrentTargetTexture().tex, 0);\n\n        cgl.pushPMatrix();\n        gl.viewport(0, 0, self.getCurrentTargetTexture().width,self.getCurrentTargetTexture().height);\n        mat4.perspective(cgl.pMatrix,45, self.getCurrentTargetTexture().width/self.getCurrentTargetTexture().height, 0.01, 1100.0);\n\n\n        cgl.pushPMatrix();\n        mat4.identity(cgl.pMatrix);\n\n        cgl.pushMvMatrix();\n        mat4.identity(cgl.mvMatrix);\n\n\n        GL.clearColor(0,1,0,1);\n        GL.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n    };\n\n    this.finish=function()\n    {\n        mesh.render(cgl.getShader());\n\n        cgl.popPMatrix();\n        cgl.popMvMatrix();\n\n        cgl.popPMatrix();\n\n        GL.bindFramebuffer(GL.FRAMEBUFFER, null);\n\n        cgl.popMvMatrix();\n        gl.viewport(0, 0, cgl.canvasWidth,cgl.canvasHeight);\n\n        switched=!switched;\n\n    };\n\n};","\nvar PORT_DIR_IN=0;\nvar PORT_DIR_OUT=1;\n\nvar OP_PORT_TYPE_VALUE =0;\nvar OP_PORT_TYPE_FUNCTION =1;\nvar OP_PORT_TYPE_OBJECT =2;\nvar OP_PORT_TYPE_TEXTURE =2;\n\nvar Ops = {};\n\n\nvar Op = function()\n{\n    this.objName='';\n    this.portsOut=[];\n    this.portsIn=[];\n    this.posts=[];\n    this.uiAttribs={};\n    this.name='unknown';\n    this.id=generateUUID();\n\n    this.getName= function()\n    {\n        return this.name;\n    };\n    this.addOutPort=function(p)\n    {\n        p.direction=PORT_DIR_OUT;\n        p.parent=this;\n        this.portsOut.push(p);\n        return p;\n    };\n    this.addInPort=function(p)\n    {\n        p.direction=PORT_DIR_IN;\n        p.parent=this;\n        this.portsIn.push(p);\n        return p;\n    };\n    this.execute=function()\n    {\n        this.exec();\n    };\n    this.printInfo=function()\n    {\n        for(var i=0;i<this.portsIn.length;i++)\n            console.log('in: '+this.portsIn[i].getName());\n\n        for(var ipo in this.portsOut)\n            console.log('out: '+this.portsOut[ipo].getName());\n    };\n\n    this.removeLinks=function()\n    {\n        for(var i=0;i<this.portsIn.length;i++)\n            this.portsIn[i].removeLinks();\n        for(var ipo in this.portsOut)\n            this.portsOut[ipo].removeLinks();\n    };\n\n    this.getPort=function(name)\n    {\n        for(var ipi in this.portsIn)\n            if(this.portsIn[ipi].getName()==name)return this.portsIn[ipi];\n\n        for(var ipo in this.portsOut)\n            if(this.portsOut[ipo].getName()==name)return this.portsOut[ipo];\n    };\n\n    this.findFittingPort=function(otherPort)\n    {\n        for(var ipo in this.portsOut)\n        {\n            console.log('.');\n            if(Link.canLink(otherPort,this.portsOut[ipo]))return this.portsOut[ipo];\n        }\n    \n        for(var ipi in this.portsIn)\n        {\n            console.log('.');\n            if(Link.canLink(otherPort,this.portsIn[ipi]))return this.portsIn[ipi];\n        }\n\n    };\n\n\n    this.getSerialized=function()\n    {\n        var op={};\n        op.name=this.getName();\n        op.objName=this.objName;\n        op.id=this.id;\n        op.uiAttribs=this.uiAttribs;\n\n        op.portsIn=[];\n        op.portsOut=[];\n\n        for(var i=0;i<this.portsIn.length;i++)\n            op.portsIn.push( this.portsIn[i].getSerialized() );\n\n        for(var ipo in this.portsOut)\n            op.portsOut.push( this.portsOut[ipo].getSerialized() );\n\n        return op;\n    };\n\n    this.getPortByName=function(name)\n    {\n        for(var i=0;i<this.portsIn.length;i++)\n            if(this.portsIn[i].name==name)return this.portsIn[i];\n        \n        for(var ipo in this.portsOut)\n            if(this.portsOut[ipo].name==name)return this.portsOut[ipo];\n    };\n\n};\n\n// ------------------------------------------------------------------------------------\n\nvar Port=function(parent,name,type)\n{\n    var self=this;\n    this.direction=PORT_DIR_IN;\n    this.id=generateUUID();\n    this.parent=parent;\n    this.links=[];\n    this.value=null;\n    this.name=name;\n    this.type=type || OP_PORT_TYPE_VALUE;\n    var valueBeforeLink=null;\n\n    this.__defineGetter__(\"val\", function()\n    {\n        return this.value;\n    });\n\n    this.__defineSetter__(\"val\", function(v)\n    {\n        this.setValue(v);\n    });\n\n    this.getType=function(){ return this.type; };\n    this.isLinked=function(){ return this.links.length>0; };\n    this.onValueChanged=function(){};\n    this.onTriggered=function(){};\n\n    this.setValue=function(v)\n    {\n        if(v!=this.value || this.type==OP_PORT_TYPE_TEXTURE)\n        {\n            this.value=v;\n            this.onValueChanged();\n\n            for(var i in this.links)\n            {\n                this.links[i].setValue();\n            }\n        }\n    };\n\n    this.getName= function()\n    {\n        return this.name;\n    };\n\n    this.addLink=function(l)\n    {\n        valueBeforeLink=self.value;\n        this.links.push(l);\n    };\n\n    this.removeLinkTo=function(p2)\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i].portIn==p2 || this.links[i].portOut==p2)\n            {\n                this.links[i].remove();\n            }\n        }\n\n    };\n\n    this.isLinkedTo=function(p2)\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i].portIn==p2 || this.links[i].portOut==p2)return true;\n        }\n        return false;\n    };\n\n    this.call=function()\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i].portIn !=this)this.links[i].portIn.onTriggered();\n            if(this.links[i].portOut!=this)this.links[i].portOut.onTriggered();\n        }\n    };\n\n\n    this.execute=function()\n    {\n        console.log('### execute port: '+this.getName() , this.goals.length);\n    };\n\n    this.getTypeString=function()\n    {\n        if(this.type==OP_PORT_TYPE_VALUE)return 'value';\n        if(this.type==OP_PORT_TYPE_FUNCTION)return 'function';\n        if(this.type==OP_PORT_TYPE_TEXTURE)return 'texture';\n    };\n\n    this.getSerialized=function()\n    {\n        var obj={};\n        obj.name=this.getName();\n        obj.value=this.value;\n\n        if(this.direction==PORT_DIR_IN && this.links.length>0)\n        {\n            obj.links=[];\n            for(var i in this.links)\n            {\n                obj.links.push( this.links[i].getSerialized() );\n            }\n        }\n        return obj;\n    };\n\n    this.removeLinks=function()\n    {\n        while(this.links.length>0)\n        {\n            this.links[0].remove();\n        }\n    };\n\n    this.removeLink=function(link)\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i]==link)this.links.splice( i, 1 );\n        }\n        self.setValue(valueBeforeLink);\n    };\n};\n\n\n\n// ---------------------------------------------------------------------------\n\nvar Link = function(scene)\n{\n    this.portIn=null;\n    this.portOut=null;\n    this.scene=scene;\n\n    this.setValue=function()\n    {\n        if(this.portIn.val!=this.portOut.val)\n            this.portIn.val=this.portOut.val;\n    };\n\n    this.getOtherPort=function(p)\n    {\n        if(p==this.portIn)return this.portOut;\n        return this.portIn;\n    };\n\n    this.remove=function()\n    {\n        this.portIn.removeLink(this);\n        this.portOut.removeLink(this);\n        this.scene.onUnLink(this.portIn,this.portOut);\n        this.portIn=null;\n        this.portOut=null;\n        this.scene=null;\n    };\n\n\n    this.link=function(p1,p2)\n    {\n        if(!Link.canLink(p1,p2))\n        {\n            console.log('cannot link ports!');\n            return false;\n        }\n        if(p1.direction==PORT_DIR_IN)\n        {\n            this.portIn=p1;\n            this.portOut=p2;\n        }\n        else\n        {\n            this.portIn=p2;\n            this.portOut=p1;\n        }\n\n        p1.addLink(this);\n        p2.addLink(this);\n        this.setValue();\n    };\n\n    this.getSerialized=function()\n    {\n        var obj={};\n\n        obj.portIn=this.portIn.getName();\n        obj.portOut=this.portOut.getName();\n        obj.objIn=this.portIn.parent.id;\n        obj.objOut=this.portOut.parent.id;\n\n        return obj;\n    };\n};\n\n\nLink.canLinkText=function(p1,p2)\n{\n    if(!p1)return 'can not link: port 1 invalid';\n    if(!p2)return 'can not link: port 2 invalid';\n    if(p1.direction==PORT_DIR_IN && p1.links.length>0)return 'input port already busy';\n    if(p2.direction==PORT_DIR_IN && p2.links.length>0)return 'input port already busy';\n    if(p1.isLinkedTo(p2))return 'ports already linked';\n    if(p1.direction==p2.direction)return 'can not link: same direction';\n    if(p1.type!=p2.type)return 'can not link: different type';\n    if(p1.parent==p2.parent)return 'can not link: same op';\n    return 'can link';\n};\n\nLink.canLink=function(p1,p2)\n{\n    if(!p1)return false;\n    if(!p2)return false;\n    if(p1.direction==PORT_DIR_IN && p1.links.length>0)return false;\n    if(p2.direction==PORT_DIR_IN && p2.links.length>0)return false;\n    if(p1.isLinkedTo(p2))return false;\n    if(p1.direction==p2.direction)return false;\n    if(p1.type!=p2.type)return false;\n    if(p1.parent==p2.parent)return false;\n\n    return true;\n};\n\n\n// ------------------------------------------------------------------------------------\n\n\nvar Scene = function()\n{\n    var self=this;\n    this.ops=[];\n    this.timer=new Timer();\n    this.animFrameOps=[];\n    \n\n    this.clear=function()\n    {\n        this.timer=new Timer();\n        while(this.ops.length>0)\n        {\n            this.deleteOp(this.ops[0].id);\n        }\n    };\n\n    this.addOp=function(objName,uiAttribs)\n    {\n        var op=eval('new '+objName+'();');\n        op.objName=objName;\n        op.uiAttribs=uiAttribs;\n\n        if(op.hasOwnProperty('onAnimFrame')) this.animFrameOps.push(op);\n\n        this.ops.push(op);\n        if(this.onAdd)this.onAdd(op);\n        return op;\n    };\n\n    this.deleteOp=function(opid,tryRelink)\n    {\n\n        for(var i in this.ops)\n        {\n            if(this.ops[i].id==opid)\n            {\n                var op=this.ops[i];\n                var reLinkP1=null;\n                var reLinkP2=null;\n\n                if(op)\n                {\n                    if(tryRelink)\n                    {\n                        if(this.ops[i].portsIn[0].isLinked() && this.ops[i].portsOut[0].isLinked())\n                        {\n                            if(this.ops[i].portsIn[0].getType()==this.ops[i].portsOut[0].getType())\n                            {\n                                reLinkP1=this.ops[i].portsIn[0].links[0].getOtherPort(this.ops[i].portsIn[0]);\n                                reLinkP2=this.ops[i].portsOut[0].links[0].getOtherPort(this.ops[i].portsOut[0]);\n                            }\n                        }\n                    }\n\n                    this.ops[i].removeLinks();\n                    this.onDelete(this.ops[i]);\n                    this.ops.splice( i, 1 );\n\n                    if(reLinkP1!==null && reLinkP2!==null)\n                    {\n                        self.link(\n                            reLinkP1.parent,\n                            reLinkP1.getName(),\n                            reLinkP2.parent,\n                            reLinkP2.getName()\n                            );\n                    }\n                }\n            }\n\n        }\n\n\n    };\n\n    this.exec=function()\n    {\n        requestAnimationFrame(self.exec);\n        self.timer.update();\n\n        var time=self.timer.getTime();\n\n        for(var i in self.animFrameOps)\n        {\n            self.animFrameOps[i].onAnimFrame(time);\n        }\n\n    };\n\n    this.link=function(op1,port1Name,op2,port2Name)\n    {\n        var port1=op1.getPort(port1Name);\n        var port2=op2.getPort(port2Name);\n\n        if(Link.canLink(port1,port2))\n        {\n            var link=new Link(this);\n            link.link(port1,port2);\n            this.onLink(port1,port2);\n            return link;\n        }\n        else\n        {\n            console.log(Link.canLinkText(port1,port2));\n        }\n    };\n    this.onAdd=function(op){};\n    this.onDelete=function(op){};\n    this.onLink=function(p1,p2){};\n    this.onUnLink=function(p1,p2){};\n    this.serialize=function()\n    {\n        var obj={};\n\n        obj.ops=[];\n        for(var i in this.ops)\n        {\n            obj.ops.push( this.ops[i].getSerialized() );\n        }\n        \n        return JSON.stringify(obj);\n    };\n    this.getOpById=function(opid)\n    {\n        for(var i in this.ops)\n        {\n            if(this.ops[i].id==opid)return this.ops[i];\n        }\n\n    };\n    this.deSerialize=function(obj)\n    {\n        if (typeof obj === \"string\") obj=JSON.parse(obj);\n        var self=this;\n\n        function addLink(opinid,opoutid,inName,outName)\n        {\n            var found=false;\n            if(!found)\n            {\n                self.link(\n                    self.getOpById(opinid),\n                    inName,\n                    self.getOpById(opoutid),\n                    outName\n                    );\n            }\n        }\n\n        // add ops...\n        for(var iop in obj.ops)\n        {\n            var op=this.addOp(obj.ops[iop].objName,obj.ops[iop].uiAttribs);\n            op.id=obj.ops[iop].id;\n\n            for(var ipi in obj.ops[iop].portsIn)\n            {\n                var port=op.getPortByName(obj.ops[iop].portsIn[ipi].name);\n                if(port && port.type!=OP_PORT_TYPE_TEXTURE)port.val=obj.ops[iop].portsIn[ipi].value;\n            }\n\n            for(var ipo in obj.ops[iop].portsOut)\n            {\n                var port2=op.getPortByName(obj.ops[iop].portsOut[ipo].name);\n                if(port2&& port2.type!=OP_PORT_TYPE_TEXTURE)port2.val=obj.ops[iop].portsOut[ipo].value;\n            }\n\n\n            // op.uiAttribs=obj.ops[iop].uiAttribs;\n        }\n\n        // create links...\n        for(iop in obj.ops)\n        {\n            for(var ipi2 in obj.ops[iop].portsIn)\n            {\n\n                for(var ili in obj.ops[iop].portsIn[ipi2].links)\n                {\n                    addLink(\n                        obj.ops[iop].portsIn[ipi2].links[ili].objIn,\n                        obj.ops[iop].portsIn[ipi2].links[ili].objOut,\n                        obj.ops[iop].portsIn[ipi2].links[ili].portIn,\n                        obj.ops[iop].portsIn[ipi2].links[ili].portOut);\n                }\n            }\n\n\n            // for(var ipo in obj.ops[iop].portsOut)\n            // {\n            //     for(var ili in obj.ops[iop].portsOut[ipo].links)\n            //     {\n            //         addLink(\n            //             obj.ops[iop].portsOut[ipo].links[ili].objIn,\n            //             obj.ops[iop].portsOut[ipo].links[ili].objOut,\n            //             obj.ops[iop].portsOut[ipo].links[ili].portIn,\n            //             obj.ops[iop].portsOut[ipo].links[ili].portOut);\n\n            //     }\n            // }\n        }\n\n\n        for(var i in this.ops)\n        {\n            this.ops[i].id=generateUUID();\n        }\n\n\n\n    };\n\n    this.exec();\n\n};\n\n\n\n\n","\n\nOps.Devices= Ops.Devices || {};\n\nOps.Devices.GamePad = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='GamePad';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.numPads=this.addOutPort(new Port(this,\"numPads\"));\n    this.axis1=this.addOutPort(new Port(this,\"axis1\"));\n    this.axis2=this.addOutPort(new Port(this,\"axis2\"));\n    this.axis3=this.addOutPort(new Port(this,\"axis3\"));\n    this.axis4=this.addOutPort(new Port(this,\"axis4\"));\n    this.button0=this.addOutPort(new Port(this,\"button0\"));\n    this.button1=this.addOutPort(new Port(this,\"button1\"));\n    this.button2=this.addOutPort(new Port(this,\"button2\"));\n    this.button3=this.addOutPort(new Port(this,\"button3\"));\n    this.button4=this.addOutPort(new Port(this,\"button4\"));\n\n    var self=this;\n    var startTime=Date.now()/1000.0;\n\n    this.exe.onTriggered=function()\n    {\n        var gamePads=navigator.getGamepads();\n        var count=0;\n\n        for(var gp in gamePads)\n        {\n            if(gamePads[gp].axes)\n            {\n                self.axis1.val=gamePads[gp].axes[0];\n                self.axis2.val=gamePads[gp].axes[1];\n                self.axis3.val=gamePads[gp].axes[2];\n                self.axis4.val=gamePads[gp].axes[3];\n\n                self.button0.val=gamePads[gp].buttons[0].pressed;\n                self.button0.val=gamePads[gp].buttons[1].pressed;\n                self.button2.val=gamePads[gp].buttons[2].pressed;\n                self.button3.val=gamePads[gp].buttons[3].pressed;\n                self.button4.val=gamePads[gp].buttons[4].pressed;\n\n                count++;\n            }\n        }\n\n        self.numPads.val=count;\n    };\n\n    this.exe.onTriggered();\n\n};\n\nOps.Devices.GamePad.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Devices.LeapMotion = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='LeapMotion';\n\n    this.transX=this.addOutPort(new Port(this,\"translationX\"));\n    this.transY=this.addOutPort(new Port(this,\"translationY\"));\n    this.transZ=this.addOutPort(new Port(this,\"translationZ\"));\n\n    this.finger0X=this.addOutPort(new Port(this,\"finger0X\"));\n    this.finger0Y=this.addOutPort(new Port(this,\"finger0Y\"));\n    this.finger0Z=this.addOutPort(new Port(this,\"finger0Z\"));\n\n    Leap.loop(function (frame)\n    {\n        self.transX.val=frame._translation[0];\n        self.transY.val=frame._translation[1];\n        self.transZ.val=frame._translation[2];\n\n        if(frame.fingers.length>0)\n        {\n            self.finger0X.val=frame.fingers[0].tipPosition[0];\n            self.finger0Y.val=frame.fingers[0].tipPosition[1];\n            self.finger0Z.val=frame.fingers[0].tipPosition[2];\n        }\n    });\n};\n\nOps.Devices.LeapMotion.prototype = new Op();\n\n// --------------------------------------------------------------------------\n","\nOps.Gl=Ops.Gl || {};\nOps.Gl.TextureEffects=Ops.Gl.TextureEffects || {};\n\n// ---------------------------------------------------------------------------------------------\n\nOps.Gl.TextureEffects.TextureEffect = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='texture effect';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.texOut=this.addOutPort(new Port(this,\"texture_out\",OP_PORT_TYPE_TEXTURE));\n\n    this.tex=this.addInPort(new Port(this,\"texture_in\",OP_PORT_TYPE_TEXTURE));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var ready=false;\n    var effect=new CGL.TextureEffect();\n\n    cgl.currentTextureEffect=effect;\n\n    this.tex.onValueChanged=function()\n    {\n        effect.setSourceTexture(self.tex.val);\n        self.texOut.val=cgl.currentTextureEffect.getCurrentSourceTexture();\n        ready=true;\n    };\n\n    this.render.onTriggered=function()\n    {\n        if(!ready)return;\n        if(!self.tex.val) return;\n        cgl.currentTextureEffect=effect;\n\n        effect.startEffect();\n        self.trigger.call();\n        self.texOut.val=cgl.currentTextureEffect.getCurrentSourceTexture();\n    };\n};\n\nOps.Gl.TextureEffects.TextureEffect.prototype = new Op();\n\n// ---------------------------------------------------------------------------------------------\n\nOps.Gl.TextureEffects.Invert = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Invert';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var shader=new CGL.Shader();\n\n    var srcFrag=''\n        .endl()+'precision highp float;'\n        .endl()+'#ifdef HAS_TEXTURES'\n        .endl()+'  varying vec2 texCoord;'\n        .endl()+'  uniform sampler2D tex;'\n        .endl()+'#endif'\n        .endl()+''\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   vec4 col=vec4(1.0,0.0,0.0,1.0);'\n        .endl()+'   #ifdef HAS_TEXTURES'\n        .endl()+'       col=texture2D(tex,texCoord);'\n        .endl()+'       col.rgb=1.0-col.rgb;'\n        .endl()+'   #endif'\n        .endl()+'   gl_FragColor = col;'\n        .endl()+'}\\n';\n\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n    var textureUniform=new CGL.Uniform(shader,'t','tex',0);\n\n\n    this.render.onTriggered=function()\n    {\n        if(!cgl.currentTextureEffect)return;\n        \n        cgl.setShader(shader);\n        cgl.currentTextureEffect.bind();\n\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, cgl.currentTextureEffect.getCurrentSourceTexture().tex );\n\n        cgl.currentTextureEffect.finish();\n        cgl.setPreviousShader();\n\n        self.trigger.call();\n    };\n};\n\nOps.Gl.TextureEffects.Invert.prototype = new Op();\n\n// ---------------------------------------------------------------------------------------------\n\nOps.Gl.TextureEffects.Desaturate = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Desaturate';\n\n    this.amount=this.addInPort(new Port(this,\"amount\"));\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var shader=new CGL.Shader();\n\n    var srcFrag=''\n        .endl()+'precision highp float;'\n        .endl()+'#ifdef HAS_TEXTURES'\n        .endl()+'  varying vec2 texCoord;'\n        .endl()+'  uniform sampler2D tex;'\n        .endl()+'#endif'\n        .endl()+'uniform float amount;'\n        .endl()+''\n        .endl()+''\n        .endl()+'vec3 desaturate(vec3 color, float amount)'\n        .endl()+'{'\n        .endl()+'   vec3 gray = vec3(dot(vec3(0.2126,0.7152,0.0722), color));'\n        .endl()+'   return vec3(mix(color, gray, amount));'\n        .endl()+'}'\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   vec4 col=vec4(1.0,0.0,0.0,1.0);'\n        .endl()+'   #ifdef HAS_TEXTURES'\n        .endl()+'       col=texture2D(tex,texCoord);'\n        .endl()+'       col.rgb=desaturate(col.rgb,amount);'\n        .endl()+'   #endif'\n        .endl()+'   gl_FragColor = col;'\n        .endl()+'}';\n\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n    var textureUniform=new CGL.Uniform(shader,'t','tex',0);\n    var amountUniform=new CGL.Uniform(shader,'f','amount',1.0);\n\n    this.amount.onValueChanged=function()\n    {\n        amountUniform.setValue(self.amount.val);\n    };\n\n    this.render.onTriggered=function()\n    {\n        if(!cgl.currentTextureEffect)return;\n        \n        cgl.setShader(shader);\n        cgl.currentTextureEffect.bind();\n\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, cgl.currentTextureEffect.getCurrentSourceTexture().tex );\n\n        cgl.currentTextureEffect.finish();\n        cgl.setPreviousShader();\n\n        self.trigger.call();\n    };\n};\n\nOps.Gl.TextureEffects.Desaturate.prototype = new Op();\n\n// ---------------------------------------------------------------------------------------------\n\nOps.Gl.TextureEffects.RgbMultiply = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='RgbMultiply';\n\n    this.r=this.addInPort(new Port(this,\"r\"));\n    this.g=this.addInPort(new Port(this,\"g\"));\n    this.b=this.addInPort(new Port(this,\"b\"));\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var shader=new CGL.Shader();\n\n    var srcFrag=''\n        .endl()+'precision highp float;'\n        .endl()+'#ifdef HAS_TEXTURES'\n        .endl()+'  varying vec2 texCoord;'\n        .endl()+'  uniform sampler2D tex;'\n        .endl()+'#endif'\n        .endl()+'uniform float r;'\n        .endl()+'uniform float g;'\n        .endl()+'uniform float b;'\n        .endl()+''\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   vec4 col=vec4(1.0,0.0,0.0,1.0);'\n        .endl()+'   #ifdef HAS_TEXTURES'\n        .endl()+'       col=texture2D(tex,texCoord);'\n        .endl()+'       col.r*=r;'\n        .endl()+'       col.g*=g;'\n        .endl()+'       col.b*=b;'\n        .endl()+'   #endif'\n        .endl()+'   gl_FragColor = col;'\n        .endl()+'}';\n\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n    var textureUniform=new CGL.Uniform(shader,'t','tex',0);\n    var uniformR=new CGL.Uniform(shader,'f','r',1.0);\n    var uniformG=new CGL.Uniform(shader,'f','g',1.0);\n    var uniformB=new CGL.Uniform(shader,'f','b',1.0);\n\n\n    this.r.onValueChanged=function()\n    {\n        uniformR.setValue(self.r.val);\n    };\n\n    this.g.onValueChanged=function()\n    {\n        uniformG.setValue(self.g.val);\n    };\n\n    this.b.onValueChanged=function()\n    {\n        uniformB.setValue(self.b.val);\n    };\n\n    this.render.onTriggered=function()\n    {\n        if(!cgl.currentTextureEffect)return;\n        \n        cgl.setShader(shader);\n        cgl.currentTextureEffect.bind();\n\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, cgl.currentTextureEffect.getCurrentSourceTexture().tex );\n\n        cgl.currentTextureEffect.finish();\n        cgl.setPreviousShader();\n\n        self.trigger.call();\n    };\n};\n\nOps.Gl.TextureEffects.RgbMultiply.prototype = new Op();\n\n// ---------------------------------------------------------------------------------------------\n\nOps.Gl.TextureEffects.Vignette = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Vignette';\n\n    this.lensRadius1=this.addInPort(new Port(this,\"lensRadius1\"));\n    this.lensRadius2=this.addInPort(new Port(this,\"lensRadius2\"));\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var shader=new CGL.Shader();\n\n    var srcFrag=''\n        .endl()+'precision highp float;'\n        .endl()+'#ifdef HAS_TEXTURES'\n        .endl()+'  varying vec2 texCoord;'\n        .endl()+'  uniform sampler2D tex;'\n        .endl()+'#endif'\n        .endl()+'uniform float lensRadius1;'\n        .endl()+'uniform float lensRadius2;'\n        .endl()+''\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   vec4 col=vec4(1.0,0.0,0.0,1.0);'\n        .endl()+'   #ifdef HAS_TEXTURES'\n        .endl()+'       col=texture2D(tex,texCoord);'\n        .endl()+'       float dist = distance(texCoord, vec2(0.5,0.5));'\n        .endl()+'       col.rgb *= smoothstep(lensRadius1, lensRadius2, dist);'\n        .endl()+'   #endif'\n        .endl()+'   gl_FragColor = col;'\n        .endl()+'}';\n\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n    var textureUniform=new CGL.Uniform(shader,'t','tex',0);\n    var uniLensRadius1=new CGL.Uniform(shader,'f','lensRadius1',0.4);\n    var uniLensRadius2=new CGL.Uniform(shader,'f','lensRadius2',0.3);\n\n    this.lensRadius1.onValueChanged=function()\n    {\n        uniLensRadius1.setValue(self.lensRadius1.val);\n    };\n\n    this.lensRadius2.onValueChanged=function()\n    {\n        uniLensRadius2.setValue(self.lensRadius2.val);\n    };\n\n    this.lensRadius1.val=0.8;\n    this.lensRadius2.val=0.4;\n\n    this.render.onTriggered=function()\n    {\n        if(!cgl.currentTextureEffect)return;\n        \n        cgl.setShader(shader);\n        cgl.currentTextureEffect.bind();\n\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, cgl.currentTextureEffect.getCurrentSourceTexture().tex );\n\n        cgl.currentTextureEffect.finish();\n        cgl.setPreviousShader();\n\n        self.trigger.call();\n    };\n};\n\nOps.Gl.TextureEffects.Vignette.prototype = new Op();\n\n// ---------------------------------------------------------------------------------------------\n\nOps.Gl.TextureEffects.Blur = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Blur';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var shader=new CGL.Shader();\n\n    var srcFrag=''\n        .endl()+'precision highp float;'\n        .endl()+'#ifdef HAS_TEXTURES'\n        .endl()+'  varying vec2 texCoord;'\n        .endl()+'  uniform sampler2D tex;'\n        .endl()+'  uniform float dirX;'\n        .endl()+'  uniform float dirY;'\n        .endl()+'#endif'\n        .endl()+''\n        .endl()+'vec4 blur9(sampler2D texture, vec2 uv, vec2 red, vec2 dir)'\n        .endl()+'{'\n        .endl()+'   vec4 color = vec4(0.0);'\n        .endl()+'   vec2 offset1 = vec2(1.3846153846) * dir;'\n        .endl()+'   vec2 offset2 = vec2(3.2307692308) * dir;'\n        .endl()+'   color += texture2D(texture, uv) * 0.2270270270;'\n        .endl()+'   color += texture2D(texture, uv + (offset1 / red)) * 0.3162162162;'\n        .endl()+'   color += texture2D(texture, uv - (offset1 / red)) * 0.3162162162;'\n        .endl()+'   color += texture2D(texture, uv + (offset2 / red)) * 0.0702702703;'\n        .endl()+'   color += texture2D(texture, uv - (offset2 / red)) * 0.0702702703;'\n        .endl()+'   return color;'\n        .endl()+'}'\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   vec4 col=vec4(1.0,0.0,0.0,1.0);'\n        .endl()+'   #ifdef HAS_TEXTURES'\n        .endl()+'       col=blur9(tex,texCoord,vec2(512.0,512.0),vec2(dirX,dirY));'\n        // .endl()+ '       col=blur9(tex,texCoord,vec2(512.0,512.0),vec2(dirX*1.4,dirY*1.4));'\n        .endl()+'   #endif'\n        .endl()+'   gl_FragColor = col;'\n        .endl()+'}\\n';\n\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n    var textureUniform=new CGL.Uniform(shader,'t','tex',0);\n    var uniDirX=new CGL.Uniform(shader,'f','dirX',0);\n    var uniDirY=new CGL.Uniform(shader,'f','dirY',0);\n\n    this.render.onTriggered=function()\n    {\n        if(!cgl.currentTextureEffect)return;\n        cgl.setShader(shader);\n\n        // first pass\n\n        cgl.currentTextureEffect.bind();\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, cgl.currentTextureEffect.getCurrentSourceTexture().tex );\n\n        uniDirX.setValue(0.0);\n        uniDirY.setValue(1.0);\n\n        cgl.currentTextureEffect.finish();\n\n        // second pass\n\n        cgl.currentTextureEffect.bind();\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, cgl.currentTextureEffect.getCurrentSourceTexture().tex );\n\n        uniDirX.setValue(1.0);\n        uniDirY.setValue(0.0);\n\n        cgl.currentTextureEffect.finish();\n        \n        cgl.setPreviousShader();\n\n        self.trigger.call();\n    };\n};\n\nOps.Gl.TextureEffects.Blur.prototype = new Op();\n\n\n","\n//http://k3d.ivank.net/K3D.js\n//http://fhtr.blogspot.de/2009/12/3d-models-and-parsing-binary-data-with.html\n//https://github.com/gpjt/webgl-lessons/blob/master/lesson05/index.html\n\nOps.Gl=Ops.Gl || {};\n\n\nvar GL=null;\n\nOps.Gl.Renderer = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='render';\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var initTranslate=vec3.create();\n    vec3.set(initTranslate, 0,0,-2);\n\n    this.onAnimFrame=function(time)\n    {\n        cgl.canvasWidth=self.canvas.clientWidth;\n        cgl.canvasHeight=self.canvas.clientHeight;\n\n        gl.enable(gl.DEPTH_TEST);\n        GL.clearColor(0,0,0,1);\n        GL.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n        gl.viewport(0,0,self.canvas.clientWidth,self.canvas.clientHeight);\n        mat4.perspective(cgl.pMatrix,45, cgl.canvasWidth/cgl.canvasHeight, 0.01, 1100.0);\n\n        cgl.pushPMatrix();\n        cgl.pushMvMatrix();\n\n        mat4.identity(cgl.mvMatrix);\n        mat4.translate(cgl.mvMatrix,cgl.mvMatrix, initTranslate);\n\n        GL.enable(GL.BLEND);\n        GL.blendFunc(GL.SRC_ALPHA,GL.ONE_MINUS_SRC_ALPHA);\n\n        cgl.beginFrame();\n\n        self.trigger.call();\n\n        cgl.popMvMatrix();\n        cgl.popPMatrix();\n        cgl.endFrame();\n    };\n\n    this.canvas = document.getElementById(\"glcanvas\");\n    GL = this.canvas.getContext(\"experimental-webgl\");\n    gl = this.canvas.getContext(\"experimental-webgl\");\n\n};\n\nOps.Gl.Renderer.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.ClearColor = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='ClearColor';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.r=this.addInPort(new Port(this,\"r\"));\n    this.g=this.addInPort(new Port(this,\"g\"));\n    this.b=this.addInPort(new Port(this,\"b\"));\n\n    this.r.val=0.3;\n    this.g.val=0.3;\n    this.b.val=0.3;\n    this.render.onTriggered=function()\n    {\n        GL.clearColor(self.r.val,self.g.val,self.b.val,1);\n        GL.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n\n        self.trigger.call();\n    };\n};\n\nOps.Gl.ClearColor.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.ClearDepth = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='ClearDepth';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        GL.clear(GL.DEPTH_BUFFER_BIT);\n        self.trigger.call();\n    };\n};\n\nOps.Gl.ClearDepth.prototype = new Op();\n\n\n\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Wireframe = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Wireframe';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n    this.lineWidth=this.addInPort(new Port(this,\"lineWidth\"));\n\n    this.render.onTriggered=function()\n    {\n        cgl.wireframe=true;\n        gl.lineWidth(self.lineWidth.val);\n        self.trigger.call();\n        cgl.wireframe=false;\n\n    };\n\n    this.lineWidth.val=2;\n};\n\nOps.Gl.Wireframe.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\n    \nOps.Gl.TextureEmpty = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='texture empty';\n    this.width=this.addInPort(new Port(this,\"width\",OP_PORT_TYPE_VALUE));\n    this.height=this.addInPort(new Port(this,\"height\",OP_PORT_TYPE_VALUE));\n\n    this.textureOut=this.addOutPort(new Port(this,\"texture\",OP_PORT_TYPE_TEXTURE));\n    this.tex=new CGL.Texture();\n    \n    var sizeChanged=function()\n    {\n        self.tex.setSize(self.width.val,self.height.val);\n        self.textureOut.val=self.tex;\n    };\n\n    this.width.onValueChanged=sizeChanged;\n    this.height.onValueChanged=sizeChanged;\n\n    this.width.val=8;\n    this.height.val=8;\n};\n\nOps.Gl.TextureEmpty.prototype = new Op();\n\n// --------------------------------------------------------------------------\n    \nOps.Gl.Texture = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='texture';\n    this.filename=this.addInPort(new Port(this,\"file\",OP_PORT_TYPE_VALUE));\n    this.textureOut=this.addOutPort(new Port(this,\"texture\",OP_PORT_TYPE_TEXTURE));\n    \n    this.filename.onValueChanged=function()\n    {\n        console.log('load texture...');\n        self.tex=CGL.Texture.load(self.filename.val,function()\n            {\n                console.log('tex load FINISHED!!!');\n\n                self.textureOut.val=self.tex;\n            });\n        self.textureOut.val=self.tex;\n\n    };\n\n    this.filename.val='assets/skull.png';\n};\n\nOps.Gl.Texture.prototype = new Op();\n\n// --------------------------------------------------------------------------\nOps.Gl.Meshes=Ops.Gl.Meshes || {};\nOps.Gl.Meshes.Plotter = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Plotter';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.v=this.addInPort(new Port(this,\"value\"));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        gl.vertexAttribPointer(cgl.getShader().getAttrVertexPos(),self.buffer.itemSize, gl.FLOAT, false, 0, 0);\n        cgl.getShader().bind();\n        gl.bindBuffer(gl.ARRAY_BUFFER, self.buffer);\n        gl.drawArrays(gl.LINE_STRIP, 0, self.buffer.numItems);\n\n        self.trigger.call();\n    };\n\n    this.buffer = gl.createBuffer();\n    \n    var num=50;\n    this.vertices = [];\n    for(var i=0;i<num;i++)\n    {\n        this.vertices.push(1/num*i);\n        this.vertices.push(Math.random()-0.5);\n        this.vertices.push(0);\n    }\n\n    function bufferData()\n    {\n        gl.lineWidth(4);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, self.buffer);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(self.vertices), gl.STATIC_DRAW);\n        self.buffer.itemSize = 3;\n        self.buffer.numItems = num;\n    }\n    bufferData();\n\n    this.v.onValueChanged=function()\n    {\n        self.vertices.splice(0,3);\n        self.vertices.push(1);\n        self.vertices.push(self.v.val);\n        self.vertices.push(0);\n\n        for(var i=0;i<num*3;i+=3)\n        {\n            self.vertices[i]=1/num*i;\n        }\n\n        bufferData();\n    };\n};\n\nOps.Gl.Meshes.Plotter.prototype = new Op();\n\n// ----------------------------------------------------------------\n\n\nOps.Gl.Shader= Ops.Gl.Shader || {};\n\nOps.Gl.Shader.Schwurbel = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Schwurbel';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.timer=this.addInPort(new Port(this,\"time\"));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.doRender=function()\n    {\n        cgl.setShader(shader);\n\n        if(!self.timer.uniLoc)\n        {\n            shader.bind();\n            self.timer.uniLoc=gl.getUniformLocation(shader.getProgram(), \"time\");\n        }\n        gl.uniform1f(self.timer.uniLoc, self.timer.val);\n\n        cgl.setPreviousShader(shader);\n\n        self.trigger.call();\n    };\n\n    var srcFrag=''+\n        'precision mediump float;\\n'+\n        'uniform float time;\\n'+\n        '\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        'float c=sqrt(sin(time*0.02)*cos((time+gl_FragCoord.y)*0.02)+sin(time+gl_FragCoord.x*0.02)*sin(time+gl_FragCoord.y*0.02));\\n'+\n        'gl_FragColor = vec4( c,c,c,1.0);\\n'+\n        '}\\n';\n\n    var shader=new CGL.Shader();\n    shader.compile(shader.getDefaultVertexShader(),srcFrag);\n\n    this.doRender();\n    this.render.onTriggered=this.doRender;\n};\n\nOps.Gl.Shader.Schwurbel.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Shader.Noise = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Noise';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var timeUniform=-1;\n    var timeStart=-1;\n\n    this.doRender=function()\n    {\n        cgl.setShader(shader);\n        if(timeUniform==-1)\n        {\n            timeStart=Date.now();\n            shader.bind();\n            timeUniform=gl.getUniformLocation(shader.getProgram(), \"time\");\n        }\n\n        gl.uniform1f(timeUniform, (Date.now()-timeStart)/1000);\n        cgl.setPreviousShader();\n\n        self.trigger.call();\n    };\n\n    var srcFrag=''+\n        'precision mediump float;\\n'+\n        'uniform float time;\\n'+\n        '\\n'+\n        'float random(vec2 co)\\n'+\n        '{\\n'+\n        '   return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\\n'+\n        '}\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        '   float c=random(time*gl_FragCoord.xy);'+\n        '   gl_FragColor = vec4( c,c,c,1.0);\\n'+\n        '}\\n';\n\n\n    var shader=new CGL.Shader();\n    shader.compile(shader.getDefaultVertexShader(),srcFrag);\n\n    this.doRender();\n    this.render.onTriggered=this.doRender;\n};\n\nOps.Gl.Shader.Noise.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Matrix={};\n\nOps.Gl.Matrix.Translate = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='translate';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.x=this.addInPort(new Port(this,\"x\"));\n    this.y=this.addInPort(new Port(this,\"y\"));\n    this.z=this.addInPort(new Port(this,\"z\"));\n    this.x.val=0.0;\n    this.y.val=0.0;\n    this.z.val=0.0;\n    \n    var vec=vec3.create();\n\n    this.render.onTriggered=function()\n    {\n        vec3.set(vec, self.x.val,self.y.val,self.z.val);\n        cgl.pushMvMatrix();\n        mat4.translate(cgl.mvMatrix,cgl.mvMatrix, vec);\n        self.trigger.call();\n        cgl.popMvMatrix();\n    };\n};\n\nOps.Gl.Matrix.Translate.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Matrix.Scale = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='scale';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.scale=this.addInPort(new Port(this,\"scale\"));\n    \n    var vScale=vec3.create();\n    var transMatrix = mat4.create();\n    mat4.identity(transMatrix);\n\n    var doScale=false;\n\n    this.render.onTriggered=function()\n    {\n        cgl.pushMvMatrix();\n        mat4.multiply(cgl.mvMatrix,cgl.mvMatrix,transMatrix);\n        self.trigger.call();\n        cgl.popMvMatrix();\n    };\n\n    var updateMatrix=function()\n    {\n        mat4.identity(transMatrix);\n        mat4.scale(transMatrix,transMatrix, vScale);\n    };\n\n    this.scaleChanged=function()\n    {\n        doScale=false;\n        vec3.set(vScale, self.scale.val,self.scale.val,self.scale.val);\n        updateMatrix();\n    };\n\n    this.scale.onValueChanged=this.scaleChanged;\n    this.scale.val=1.0;\n    updateMatrix();\n};\n\nOps.Gl.Matrix.Scale.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Matrix.Transform = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    this.name='transform';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.posX=this.addInPort(new Port(this,\"posX\"));\n    this.posY=this.addInPort(new Port(this,\"posY\"));\n    this.posZ=this.addInPort(new Port(this,\"posZ\"));\n\n    this.scaleX=this.addInPort(new Port(this,\"scaleX\"));\n    this.scaleY=this.addInPort(new Port(this,\"scaleY\"));\n    this.scaleZ=this.addInPort(new Port(this,\"scaleZ\"));\n\n    this.rotX=this.addInPort(new Port(this,\"rotX\"));\n    this.rotY=this.addInPort(new Port(this,\"rotY\"));\n    this.rotZ=this.addInPort(new Port(this,\"rotZ\"));\n    \n    var vPos=vec3.create();\n    var vScale=vec3.create();\n    var transMatrix = mat4.create();\n    mat4.identity(transMatrix);\n\n    var doScale=false;\n    var doTranslate=false;\n\n    this.render.onTriggered=function()\n    {\n        cgl.pushMvMatrix();\n        mat4.multiply(cgl.mvMatrix,cgl.mvMatrix,transMatrix);\n        self.trigger.call();\n        cgl.popMvMatrix();\n    };\n\n    var updateMatrix=function()\n    {\n        mat4.identity(transMatrix);\n        if(doTranslate)mat4.translate(transMatrix,transMatrix, vPos);\n\n        if(self.rotX.val!==0)mat4.rotateX(transMatrix,transMatrix, self.rotX.val*CGL.DEG2RAD);\n        if(self.rotY.val!==0)mat4.rotateY(transMatrix,transMatrix, self.rotY.val*CGL.DEG2RAD);\n        if(self.rotZ.val!==0)mat4.rotateZ(transMatrix,transMatrix, self.rotZ.val*CGL.DEG2RAD);\n\n        if(doScale)mat4.scale(transMatrix,transMatrix, vScale);\n    };\n\n    this.translateChanged=function()\n    {\n        doTranslate=false;\n        if(self.posX.val!==0.0 || self.posY.val!==0.0 || self.posZ.val!==0.0)doTranslate=true;\n        vec3.set(vPos, self.posX.val,self.posY.val,self.posZ.val);\n        updateMatrix();\n    };\n\n    this.scaleChanged=function()\n    {\n        doScale=false;\n        if(self.scaleX.val!==0.0 || self.scaleY.val!==0.0 || self.scaleZ.val!==0.0)doScale=true;\n        vec3.set(vScale, self.scaleX.val,self.scaleY.val,self.scaleZ.val);\n        updateMatrix();\n    };\n\n    this.rotChanged=function()\n    {\n        updateMatrix();\n    };\n\n    this.rotX.onValueChanged=this.rotChanged;\n    this.rotY.onValueChanged=this.rotChanged;\n    this.rotZ.onValueChanged=this.rotChanged;\n\n    this.scaleX.onValueChanged=this.scaleChanged;\n    this.scaleY.onValueChanged=this.scaleChanged;\n    this.scaleZ.onValueChanged=this.scaleChanged;\n\n    this.posX.onValueChanged=this.translateChanged;\n    this.posY.onValueChanged=this.translateChanged;\n    this.posZ.onValueChanged=this.translateChanged;\n\n    this.rotX.val=0.0;\n    this.rotY.val=0.0;\n    this.rotZ.val=0.0;\n\n    this.scaleX.val=1.0;\n    this.scaleY.val=1.0;\n    this.scaleZ.val=1.0;\n\n    this.posX.val=0.0;\n    this.posY.val=0.0;\n    this.posZ.val=0.0;\n\n    updateMatrix();\n};\n\nOps.Gl.Matrix.Transform.prototype = new Op();\n\n// ----------------------------------------------------\n\nOps.RandomCluster = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='random cluster';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.num=this.addInPort(new Port(this,\"num\"));\n    this.size=this.addInPort(new Port(this,\"size\"));\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION)) ;\n    this.idx=this.addOutPort(new Port(this,\"index\")) ;\n    this.rnd=this.addOutPort(new Port(this,\"rnd\")) ;\n    this.randoms=[];\n    this.randomsRot=[];\n    this.randomsFloats=[];\n\n    var transVec=vec3.create();\n\n    this.exe.onTriggered=function()\n    {\n        for(var i=0;i<self.randoms.length;i++)\n        {\n            cgl.pushMvMatrix();\n\n            mat4.translate(cgl.mvMatrix,cgl.mvMatrix, self.randoms[i]);\n\n            mat4.rotateX(cgl.mvMatrix,cgl.mvMatrix, self.randomsRot[i][0]);\n            mat4.rotateY(cgl.mvMatrix,cgl.mvMatrix, self.randomsRot[i][1]);\n            mat4.rotateZ(cgl.mvMatrix,cgl.mvMatrix, self.randomsRot[i][2]);\n\n            self.idx.val=i;\n            self.rnd.val=self.randomsFloats[i];\n\n            self.trigger.call();\n\n            cgl.popMvMatrix();\n        }\n    };\n\n    function reset()\n    {\n        self.randoms=[];\n        self.randomsRot=[];\n        self.randomsFloats=[];\n\n        for(var i=0;i<self.num.val;i++)\n        {\n            self.randomsFloats.push(Math.random());\n            self.randoms.push(vec3.fromValues(\n                (Math.random()-0.5)*self.size.val,\n                (Math.random()-0.5)*self.size.val,\n                (Math.random()-0.5)*self.size.val\n                ));\n            self.randomsRot.push(vec3.fromValues(\n                Math.random()*360*CGL.DEG2RAD,\n                Math.random()*360*CGL.DEG2RAD,\n                Math.random()*360*CGL.DEG2RAD\n                ));\n        }\n    }\n\n    this.num.onValueChanged=reset;\n    this.size.onValueChanged=reset;\n\n    this.num.val=100;\n};\n\nOps.RandomCluster.prototype = new Op();\n\n\n\n\n\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Render2Texture = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='render to texture';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var frameBuf;\n    var texture=new CGL.Texture();\n\n    this.width=this.addInPort(new Port(this,\"texture width\"));\n    this.height=this.addInPort(new Port(this,\"texture height\"));\n    this.tex=this.addOutPort(new Port(this,\"texture\",OP_PORT_TYPE_TEXTURE));\n\n    this.width.val=1024;\n    this.height.val=1024;\n\n    texture.setSize(this.width.val,this.height.val);\n\n    frameBuf = GL.createFramebuffer();\n    GL.bindFramebuffer(GL.FRAMEBUFFER, frameBuf);\n\n    var renderbuffer = GL.createRenderbuffer();\n    GL.bindRenderbuffer(GL.RENDERBUFFER, renderbuffer);\n    GL.renderbufferStorage(GL.RENDERBUFFER, GL.DEPTH_COMPONENT16, this.width.val,this.height.val);\n    GL.framebufferTexture2D(GL.FRAMEBUFFER, GL.COLOR_ATTACHMENT0, GL.TEXTURE_2D, texture.tex, 0);\n    GL.framebufferRenderbuffer(GL.FRAMEBUFFER, GL.DEPTH_ATTACHMENT, GL.RENDERBUFFER, renderbuffer);\n    GL.bindTexture(GL.TEXTURE_2D, null);\n    GL.bindRenderbuffer(GL.RENDERBUFFER, null);\n    GL.bindFramebuffer(GL.FRAMEBUFFER, null);\n\n    self.tex.val=texture;\n\n    this.render.onTriggered=function()\n    {\n        cgl.pushMvMatrix();\n\n        GL.bindFramebuffer(GL.FRAMEBUFFER, frameBuf);\n        \n        cgl.pushPMatrix();\n        gl.viewport(0, 0, 1920,1080);\n        mat4.perspective(cgl.pMatrix,45, self.width.val/self.height.val, 0.01, 1100.0);\n\n        self.trigger.call();\n\n        cgl.popPMatrix();\n        \n        GL.bindFramebuffer(GL.FRAMEBUFFER, null);\n        \n        cgl.popMvMatrix();\n        gl.viewport(0, 0, cgl.canvasWidth,cgl.canvasHeight);\n    };\n\n\n};\n\nOps.Gl.Render2Texture.prototype = new Op();\n\n","\nOps.Gl.Shader= Ops.Gl.Shader || {};\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.Shader.ShowNormalsMaterial = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='ShowNormalsMaterial';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.doRender=function()\n    {\n        cgl.setShader(shader);\n        self.trigger.call();\n        cgl.setPreviousShader();\n    };\n\n    var srcFrag=''\n        .endl()+'precision highp float;'\n        .endl()+'varying vec3 norm;'\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   vec4 col=vec4(norm.x,norm.y,norm.z,1.0);'\n        .endl()+'   gl_FragColor = col;'\n        .endl()+'}';\n\n\n    var shader=new CGL.Shader();\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n\n    this.render.onTriggered=this.doRender;\n    this.doRender();\n};\n\nOps.Gl.Shader.ShowNormalsMaterial.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\n\n\nOps.Gl.Shader.BasicMaterial = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='BasicMaterial';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.doRender=function()\n    {\n        cgl.setShader(shader);\n\n        if(self.texture.val)\n        {\n            gl.activeTexture(gl.TEXTURE0);\n            gl.bindTexture(gl.TEXTURE_2D, self.texture.val.tex);\n        }\n\n        if(self.textureOpacity.val)\n        {\n            gl.activeTexture(gl.TEXTURE1);\n            gl.bindTexture(gl.TEXTURE_2D, self.textureOpacity.val.tex);\n        }\n\n        self.trigger.call();\n\n\n        cgl.setPreviousShader();\n    };\n\n    var srcFrag=''\n        .endl()+'precision highp float;'\n        .endl()+'#ifdef HAS_TEXTURES'\n        .endl()+'   varying vec2 texCoord;'\n        .endl()+'   #ifdef HAS_TEXTURE_DIFFUSE'\n        .endl()+'       uniform sampler2D tex;'\n        .endl()+'   #endif'\n        .endl()+'   #ifdef HAS_TEXTURE_OPACITY'\n        .endl()+'       uniform sampler2D texOpacity;'\n        .endl()+'   #endif'\n        .endl()+'#endif'\n        .endl()+'uniform float r;'\n        .endl()+'uniform float g;'\n        .endl()+'uniform float b;'\n        .endl()+'uniform float a;'\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   vec4 col=vec4(r,g,b,a);'\n        .endl()+'   #ifdef HAS_TEXTURES'\n        .endl()+'      #ifdef HAS_TEXTURE_DIFFUSE'\n        .endl()+'           col=texture2D(tex,texCoord);'\n        .endl()+'       #endif'\n        .endl()+'      #ifdef HAS_TEXTURE_OPACITY'\n        .endl()+'           col.a*=texture2D(texOpacity,texCoord).g;'\n        .endl()+'       #endif'\n        .endl()+'       col.a*=a;'\n        .endl()+'   #endif'\n        .endl()+'gl_FragColor = col;'\n        .endl()+'}';\n\n\n    var shader=new CGL.Shader();\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n\n    this.r=this.addInPort(new Port(this,\"r\"));\n    this.r.onValueChanged=function()\n    {\n        if(!self.r.uniform) self.r.uniform=new CGL.Uniform(shader,'f','r',self.r.val);\n        else self.r.uniform.setValue(self.r.val);\n    };\n\n    this.g=this.addInPort(new Port(this,\"g\"));\n    this.g.onValueChanged=function()\n    {\n        if(!self.g.uniform) self.g.uniform=new CGL.Uniform(shader,'f','g',self.g.val);\n        else self.g.uniform.setValue(self.g.val);\n    };\n\n    this.b=this.addInPort(new Port(this,\"b\"));\n    this.b.onValueChanged=function()\n    {\n        if(!self.b.uniform) self.b.uniform=new CGL.Uniform(shader,'f','b',self.b.val);\n        else self.b.uniform.setValue(self.b.val);\n    };\n\n    this.a=this.addInPort(new Port(this,\"a\"));\n    this.a.onValueChanged=function()\n    {\n        if(!self.a.uniform) self.a.uniform=new CGL.Uniform(shader,'f','a',self.a.val);\n        else self.a.uniform.setValue(self.a.val);\n    };\n\n    this.r.val=Math.random();\n    this.g.val=Math.random();\n    this.b.val=Math.random();\n    this.a.val=1.0;\n\n\n    this.render.onTriggered=this.doRender;\n    this.texture=this.addInPort(new Port(this,\"texture\",OP_PORT_TYPE_TEXTURE));\n    this.textureUniform=null;\n\n    this.texture.onValueChanged=function()\n    {\n        if(self.texture.val)\n        {\n            if(self.textureUniform!==null)return;\n            console.log('TEXTURE ADDED');\n            shader.removeUniform('tex');\n            shader.define('HAS_TEXTURE_DIFFUSE');\n            self.textureUniform=new CGL.Uniform(shader,'t','tex',0);\n        }\n        else\n        {\n            console.log('TEXTURE REMOVED');\n            shader.removeUniform('tex');\n            shader.removeDefine('HAS_TEXTURE_DIFFUSE');\n            self.textureUniform=null;\n        }\n    };\n\n\n\n    this.textureOpacity=this.addInPort(new Port(this,\"textureOpacity\",OP_PORT_TYPE_TEXTURE));\n    this.textureOpacityUniform=null;\n\n    this.textureOpacity.onValueChanged=function()\n    {\n        if(self.textureOpacity.val)\n        {\n            if(self.textureOpacityUniform!==null)return;\n            console.log('TEXTURE OPACITY ADDED');\n            shader.removeUniform('texOpacity');\n            shader.define('HAS_TEXTURE_OPACITY');\n            self.textureOpacityUniform=new CGL.Uniform(shader,'t','texOpacity',1);\n        }\n        else\n        {\n            console.log('TEXTURE OPACITY REMOVED');\n            shader.removeUniform('texOpacity');\n            shader.removeDefine('HAS_TEXTURE_OPACITY');\n            self.textureOpacityUniform=null;\n        }\n    };\n\n\n\n    this.doRender();\n};\n\nOps.Gl.Shader.BasicMaterial.prototype = new Op();\n\n\n\n\n\n// --------------------------------------------------------------------------\n\n","\nOps.Gl.Meshes=Ops.Gl.Meshes || {};\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Meshes.Triangle = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Triangle';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        self.mesh.render(cgl.getShader());\n        self.trigger.call();\n    };\n\n    var geom=new CGL.Geometry();\n    geom.vertices = [\n         0.0,  1.0,  0.0,\n        -1.0,  -1.0,  0.0,\n         1.0, -1.0,  0.0\n    ];\n\n    geom.verticesIndices = [\n        0, 1, 2\n    ];\n    this.mesh=new CGL.Mesh(geom);\n};\n\nOps.Gl.Meshes.Triangle.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Meshes.Rectangle = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='rectangle';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n    this.width=this.addInPort(new Port(this,\"width\"));\n    this.height=this.addInPort(new Port(this,\"height\"));\n    this.width.val=1.0;\n    this.height.val=1.0;\n\n    this.render.onTriggered=function()\n    {\n        self.mesh.render(cgl.getShader());\n        self.trigger.call();\n    };\n\n    var geom=new CGL.Geometry();\n    this.mesh=null;\n\n    function rebuild()\n    {\n        geom.vertices = [\n             self.width.val/2,  self.height.val/2,  0.0,\n            -self.width.val/2,  self.height.val/2,  0.0,\n             self.width.val/2, -self.height.val/2,  0.0,\n            -self.width.val/2, -self.height.val/2,  0.0\n        ];\n\n        geom.texCoords = [\n             1.0, 1.0,\n             0.0, 1.0,\n             1.0, 0.0,\n             0.0, 0.0\n        ];\n\n        geom.verticesIndices = [\n            0, 1, 2,\n            3, 1, 2\n        ];\n        if(!self.mesh) self.mesh=new CGL.Mesh(geom);\n        self.mesh.setGeom(geom);\n    }\n    rebuild();\n\n    this.width.onValueChanged=rebuild;\n    this.height.onValueChanged=rebuild;\n};\n\nOps.Gl.Meshes.Rectangle.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Meshes.FullscreenRectangle = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='fullscreen rectangle';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        cgl.pushPMatrix();\n        mat4.identity(cgl.pMatrix);\n\n        cgl.pushMvMatrix();\n        mat4.identity(cgl.mvMatrix);\n\n        self.mesh.render(cgl.getShader());\n        self.trigger.call();\n\n        cgl.popPMatrix();\n        cgl.popMvMatrix();\n\n    };\n\n    var geom=new CGL.Geometry();\n    geom.vertices = [\n         1.0,  1.0,  0.0,\n        -1.0,  1.0,  0.0,\n         1.0, -1.0,  0.0,\n        -1.0, -1.0,  0.0\n    ];\n\n    geom.texCoords = [\n         1.0, 1.0,\n         0.0, 1.0,\n         1.0, 0.0,\n         0.0, 0.0\n    ];\n\n    geom.verticesIndices = [\n        0, 1, 2,\n        3, 1, 2\n    ];\n    this.mesh=new CGL.Mesh(geom);\n};\n\nOps.Gl.Meshes.FullscreenRectangle.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Meshes.Circle = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Circle';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n\n    this.segments=this.addInPort(new Port(this,\"segments\"));\n    this.radius=this.addInPort(new Port(this,\"radius\"));\n    this.percent=this.addInPort(new Port(this,\"percent\"));\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        mesh.render(cgl.getShader());\n        self.trigger.call();\n    };\n\n    this.segments.val=20;\n    this.radius.val=1;\n    this.percent.val=1;\n\n    var geom=new CGL.Geometry();\n    var mesh=new CGL.Mesh(geom);\n\n    function calc()\n    {\n        geom.clear();\n        var oldPosX=0;\n        var oldPosY=0;\n\n        for (var i=0; i <= self.segments.val*self.percent.val; i++)\n        {\n            var degInRad = (360/self.segments.val)*i*CGL.DEG2RAD;\n            var posx=Math.cos(degInRad)*self.radius.val;\n            var posy=Math.sin(degInRad)*self.radius.val;\n\n            geom.addFace(\n                        [posx,posy,0],\n                        [oldPosX,oldPosY,0],\n                        [0,0,0]\n                        );\n\n            geom.texCoords.push(0,0,0,0,0,0);\n\n            oldPosX=posx;\n            oldPosY=posy;\n        }\n\n        mesh.setGeom(geom);\n    }\n\n    this.segments.onValueChanged=calc;\n    this.radius.onValueChanged=calc;\n    this.percent.onValueChanged=calc;\n    calc();\n};\n\nOps.Gl.Meshes.Circle.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Meshes.ObjMesh = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='OBJ Mesh';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.mesh=null;\n\n    this.render.onTriggered=function()\n    {\n        if(self.mesh) self.mesh.render(cgl.getShader());\n\n        self.trigger.call();\n    };\n\n    ajaxRequest('assets/skull.obj',function(response)\n    {\n        console.log(response);\n                \n        var r=parseOBJ(response);\n\n        unwrap = function(ind, crd, cpi)\n        {\n            var ncrd = new Array(Math.floor(ind.length/3)*cpi);\n            for(var i=0; i<ind.length; i++)\n            {\n                for(var j=0; j<cpi; j++)\n                {\n                    ncrd[i*cpi+j] = crd[ind[i]*cpi+j];\n                }\n            }\n            return ncrd;\n        };\n\n        var l=r.verticesIndices.length;\n            r.vertices = unwrap(r.verticesIndices, r.vertices, 3);\n            r.texCoords = unwrap(r.texCoordsIndices  , r.texCoords  , 2);\n            r.vertexNormals = unwrap(r.vertexNormalIndices  , r.vertexNormals  , 3);\n            r.verticesIndices = [];\n            for(var i=0; i<l; i++) r.verticesIndices.push(i);\n        \n        self.mesh=new CGL.Mesh(r);\n    });\n};\n\nOps.Gl.Meshes.ObjMesh.prototype = new Op();\n\n// ----------------------------------------------------------------\n\nOps.Gl.Meshes.Cube = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Cube';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.mesh=null;\n\n    this.render.onTriggered=function()\n    {\n        if(self.mesh!==null) self.mesh.render(cgl.getShader());\n        self.trigger.call();\n    };\n\n    var geom=new CGL.Geometry();\n\n        geom.vertices = [\n          // Front face\n          -1.0, -1.0,  1.0,\n           1.0, -1.0,  1.0,\n           1.0,  1.0,  1.0,\n          -1.0,  1.0,  1.0,\n          // Back face\n          -1.0, -1.0, -1.0,\n          -1.0,  1.0, -1.0,\n           1.0,  1.0, -1.0,\n           1.0, -1.0, -1.0,\n          // Top face\n          -1.0,  1.0, -1.0,\n          -1.0,  1.0,  1.0,\n           1.0,  1.0,  1.0,\n           1.0,  1.0, -1.0,\n          // Bottom face\n          -1.0, -1.0, -1.0,\n           1.0, -1.0, -1.0,\n           1.0, -1.0,  1.0,\n          -1.0, -1.0,  1.0,\n          // Right face\n           1.0, -1.0, -1.0,\n           1.0,  1.0, -1.0,\n           1.0,  1.0,  1.0,\n           1.0, -1.0,  1.0,\n          // Left face\n          -1.0, -1.0, -1.0,\n          -1.0, -1.0,  1.0,\n          -1.0,  1.0,  1.0,\n          -1.0,  1.0, -1.0,\n        ];\n\n        geom.texCoords = [\n          // Front face\n          0.0, 0.0,\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n          // Back face\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n          0.0, 0.0,\n          // Top face\n          0.0, 1.0,\n          0.0, 0.0,\n          1.0, 0.0,\n          1.0, 1.0,\n          // Bottom face\n          1.0, 1.0,\n          0.0, 1.0,\n          0.0, 0.0,\n          1.0, 0.0,\n          // Right face\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n          0.0, 0.0,\n          // Left face\n          0.0, 0.0,\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n        ];\n\n        geom.vertexNormals = [\n            // Front face\n             0.0,  0.0,  1.0,\n             0.0,  0.0,  1.0,\n             0.0,  0.0,  1.0,\n             0.0,  0.0,  1.0,\n\n            // Back face\n             0.0,  0.0, -1.0,\n             0.0,  0.0, -1.0,\n             0.0,  0.0, -1.0,\n             0.0,  0.0, -1.0,\n\n            // Top face\n             0.0,  1.0,  0.0,\n             0.0,  1.0,  0.0,\n             0.0,  1.0,  0.0,\n             0.0,  1.0,  0.0,\n\n            // Bottom face\n             0.0, -1.0,  0.0,\n             0.0, -1.0,  0.0,\n             0.0, -1.0,  0.0,\n             0.0, -1.0,  0.0,\n\n            // Right face\n             1.0,  0.0,  0.0,\n             1.0,  0.0,  0.0,\n             1.0,  0.0,  0.0,\n             1.0,  0.0,  0.0,\n\n            // Left face\n            -1.0,  0.0,  0.0,\n            -1.0,  0.0,  0.0,\n            -1.0,  0.0,  0.0,\n            -1.0,  0.0,  0.0\n        ];\n\n\n        geom.verticesIndices = [\n            0, 1, 2,      0, 2, 3,    // Front face\n            4, 5, 6,      4, 6, 7,    // Back face\n            8, 9, 10,     8, 10, 11,  // Top face\n            12, 13, 14,   12, 14, 15, // Bottom face\n            16, 17, 18,   16, 18, 19, // Right face\n            20, 21, 22,   20, 22, 23  // Left face\n        ];\n\n    this.mesh=new CGL.Mesh(geom);\n};\n\nOps.Gl.Meshes.Cube.prototype = new Op();\n\n// ----------------------------------------------------------------\n\n","// https://github.com/automat/foam-gl\n// http://howlerjs.com/\n//http://learningwebgl.com/lessons/lesson01/index.html\n\n\nOps.Log = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='logger';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.input=this.addInPort(new Port(this,\"input\"));\n    this.input.val='';\n\n    this.exec=function()\n    {\n        console.log(\"[log] \" + self.input.val);\n    };\n\n    this.exe.onTriggered=this.exec;\n    this.input.onValueChanged=this.exec;\n};\nOps.Log.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\n\nOps.CallsPerSecond = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='CallsPerSecond';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.timeStart=0;\n    this.cps=0;\n\n    this.exe.onTriggered=function()\n    {\n        if(self.timeStart===0)self.timeStart=Date.now();\n        var now = Date.now();\n\n        if(now-self.timeStart>1000)\n        {\n            self.timeStart=Date.now();\n            console.log('cps: '+self.cps);\n            self.cps=0;\n        }\n\n        self.cps++;\n    };\n};\nOps.CallsPerSecond.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\nOps.Value = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Value';\n    this.v=this.addInPort(new Port(this,\"value\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.v.val;\n    };\n\n    this.v.onValueChanged=this.exec;\n};\n\nOps.Value.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\n\nOps.TimeLineTime = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='TimeLineTime';\n    this.theTime=this.addOutPort(new Port(this,\"time\"));\n\n    this.onAnimFrame=function(time)\n    {\n        this.theTime.val=time;\n    };\n\n};\nOps.TimeLineTime.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\n\n\n\nOps.Repeat = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Repeat';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.num=this.addInPort(new Port(this,\"num\"));\n    this.num.val=5;\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n    this.idx=this.addOutPort(new Port(this,\"index\"));\n\n    this.exe.onTriggered=function()\n    {\n\n        for(var i=0;i<self.num.value;i++)\n        {\n            self.idx.val=i;\n            self.trigger.call();\n        }\n\n    };\n};\nOps.Repeat.prototype = new Op();\n\n\n\n\n// ---------------------------------------------------------------------------\n\n\nOps.IfTrueThen = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='if true then';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.bool=this.addInPort(new Port(this,\"boolean\"));\n    this.bool.val=false;\n\n    this.triggerThen=this.addOutPort(new Port(this,\"then\",OP_PORT_TYPE_FUNCTION));\n    this.triggerElse=this.addOutPort(new Port(this,\"else\",OP_PORT_TYPE_FUNCTION));\n\n    this.exe.onTriggered=function()\n    {\n        if(self.bool.val===true)\n        {\n            self.triggerThen.call();\n        }\n        else\n        {\n            self.triggerElse.call();\n        }\n    };\n\n    this.bool.onValueChanged=function()\n    {\n        self.exe.onTriggered();\n    };\n\n};\nOps.IfTrueThen.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------\n\n\nOps.Group = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='group';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.triggers=[];\n\n    for(var i=0;i<10;i++)\n    {\n        this.triggers.push( this.addOutPort(new Port(this,\"trigger \"+i,OP_PORT_TYPE_FUNCTION)) );\n    }\n\n    this.exe.onTriggered=function()\n    {\n        for(var i in self.triggers)\n        {\n            self.triggers[i].call();\n        }\n\n    };\n\n\n};\nOps.Group.prototype = new Op();\n\n\n\n\n// ---------------------------------------------------------------------------\n\nOps.Interval = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='Interval';\n    this.timeOutId=-1;\n    this.interval=this.addInPort(new Port(this,\"interval\"));\n    this.interval.val=1000;\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.exec=function()\n    {\n        if(this.timeOutId!=-1)return;\n        var self=this;\n\n        this.timeOutId=setTimeout(function()\n        {\n            self.timeOutId=-1;\n            self.trigger.call();\n            self.exec();\n        },\n        this.interval.val );\n    };\n\n    this.exec();\n\n};\n\nOps.Interval.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\n// --------------------------------------------------------------------------\n\nOps.Anim={};\n\nOps.Anim.SinusAnim = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='SinusAnim';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    var self=this;\n\n    this.exe.onTriggered=function()\n    {\n        self.result.val=Math.sin(Date.now()/1000.0);\n    };\n\n    this.exe.onTriggered();\n\n};\n\nOps.Anim.SinusAnim.prototype = new Op();\n\n\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Anim.RelativeTime = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='RelativeTime';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    var self=this;\n    var startTime=Date.now()/1000.0;\n\n    this.exe.onTriggered=function()\n    {\n        self.result.val=Date.now()/1000.0-startTime;\n    };\n\n    this.exe.onTriggered();\n\n};\n\nOps.Anim.RelativeTime.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Anim.TimeDiff = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='TimeDiff';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    var self=this;\n    var lastTime=Date.now();\n\n    this.exe.onTriggered=function()\n    {\n        self.result.val=(Date.now()-lastTime);\n        lastTime=Date.now();\n        self.trigger.call();\n    };\n\n    this.exe.onTriggered();\n\n};\n\nOps.Anim.TimeDiff.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------\n\nvar cableVars={};\n\nOps.Anim.Variable = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='Variable';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.varName=this.addInPort(new Port(this,\"name\"));\n    this.val=this.addInPort(new Port(this,\"value\"));\n\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n\n    function changed()\n    {\n        cableVars[self.varName.val]=self.val.val;\n        self.result.val=self.val.val;\n    }\n\n    function readValue()\n    {\n        self.val.val=cableVars[self.varName.val];\n    }\n\n    this.val.onValueChanged=changed;\n    this.varName.onValueChanged=changed;\n    this.exe.onTriggered=readValue;\n\n};\n\nOps.Anim.Variable.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\n\n\n\n\n\n","\nOps.Json=Ops.Json || {};\n\n\nOps.Json.jsonValue = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='jsonValue';\n\n    this.data=this.addInPort(new Port(this,\"data\",OP_PORT_TYPE_TEXTURE ));\n    this.key=this.addInPort(new Port(this,\"key\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.data.onValueChanged=function()\n    {\n        if(self.data.val && self.data.val.hasOwnProperty(self.key.val))\n        {\n            self.result.val=self.data.val[self.key.val];\n        }\n    };\n\n};\n\nOps.Json.jsonValue.prototype = new Op();\n\n// -------------------------------------------------------------\n\n","\n// TODO: CLAMP!\n\nOps.Math=Ops.Math || {};\n\n\nOps.Math.Random = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='random';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.exe.onTriggered=function()\n    {\n        self.result.val=Math.random();\n    };\n\n    this.exe.onTriggered();\n};\n\nOps.Math.Random.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Clamp = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='Clamp';\n    this.val=this.addInPort(new Port(this,\"val\"));\n    this.min=this.addInPort(new Port(this,\"min\"));\n    this.max=this.addInPort(new Port(this,\"max\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    function clamp()\n    {\n        self.result.val= Math.min(Math.max(self.val.val, self.min.val), self.max.val);\n    }\n\n    this.min.val=0;\n    this.max.val=1;\n\n    this.val.onValueChanged=clamp;\n    this.min.onValueChanged=clamp;\n    this.max.onValueChanged=clamp;\n\n    this.val.val=0.5;\n};\n\nOps.Math.Clamp.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\nOps.Math.SmoothStep = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='SmoothStep';\n    this.val=this.addInPort(new Port(this,\"val\"));\n    this.min=this.addInPort(new Port(this,\"min\"));\n    this.max=this.addInPort(new Port(this,\"max\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    function smoothstep ()\n    {\n        var x = Math.max(0,Math.min(1,(self.val.val-self.min.val)/(self.max.val-self.min.val)));\n        self.result.val=x*x*(3-2*x);\n    }\n\n    this.min.val=0;\n    this.max.val=1;\n    \n    this.val.onValueChanged=smoothstep;\n    this.min.onValueChanged=smoothstep;\n    this.max.onValueChanged=smoothstep;\n\n    this.val.val=0.5;\n};\n\nOps.Math.SmoothStep.prototype = new Op();\n\n// ----------------------------------------------------------------------------\n\n\nOps.Math.MapRange = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='map value range';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.v=this.addInPort(new Port(this,\"value\"));\n    this.old_min=this.addInPort(new Port(this,\"old min\"));\n    this.old_max=this.addInPort(new Port(this,\"old max\"));\n    this.new_min=this.addInPort(new Port(this,\"new min\"));\n    this.new_max=this.addInPort(new Port(this,\"new max\"));\n\n    this.exec= function()\n    {\n        if(self.v.val>self.old_max.val)\n        {\n            self.result.val=self.new_max.val;\n            return;\n        }\n        else\n        if(self.v.val<self.old_min.val)\n        {\n            self.result.val=self.new_min.val;\n            return;\n        }\n\n        var nMin=parseFloat(self.new_min.val);\n        var nMax=parseFloat(self.new_max.val);\n        var oMin=parseFloat(self.old_min.val);\n        var oMax=parseFloat(self.old_max.val);\n        var x=parseFloat(self.v.val);\n\n        var reverseInput = false;\n        var oldMin = Math.min( oMin, oMax );\n        var oldMax = Math.max( oMin, oMax );\n        if(oldMin!= oMin) reverseInput = true;\n\n        var reverseOutput = false;\n        var newMin = Math.min( nMin, nMax );\n        var newMax = Math.max( nMin, nMax );\n        if(newMin != nMin) reverseOutput = true;\n\n        var portion=0;\n\n        if(reverseInput) portion = (oldMax-x)*(newMax-newMin)/(oldMax-oldMin);\n            else portion = (x-oldMin)*(newMax-newMin)/(oldMax-oldMin);\n        \n        if(reverseOutput) self.result.val = newMax - portion;\n            else self.result.val = portion + newMin;\n\n    };\n\n    this.v.val=0;\n    this.old_min.val=-1;\n    this.old_max.val=1;\n    this.new_min.val=0;\n    this.new_max.val=1;\n\n\n    this.v.onValueChanged=this.exec;\n    this.old_min.onValueChanged=this.exec;\n    this.old_max.onValueChanged=this.exec;\n    this.new_min.onValueChanged=this.exec;\n    this.new_max.onValueChanged=this.exec;\n\n    this.exec();\n\n};\n\nOps.Math.MapRange.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Abs = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    this.name='abs';\n    this.number=this.addInPort(new Port(this,\"number\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.number.onValueChanged=function()\n    {\n        self.result.val=Math.abs(self.number.val);\n    };\n};\n\nOps.Math.Abs.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Sin = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    this.name='Sinus';\n    this.number=this.addInPort(new Port(this,\"number\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.number.onValueChanged=function()\n    {\n        self.result.val=Math.sin(self.number.val);\n    };\n};\n\nOps.Math.Sin.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Sum = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='sum';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=parseFloat(self.number1.val)+parseFloat(self.number2.val);\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n\n    this.number1.val=1;\n    this.number2.val=1;\n};\n\nOps.Math.Sum.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Multiply = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='multiply';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val*self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n\n    this.number1.val=1;\n    this.number2.val=2;\n\n};\n\nOps.Math.Multiply.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Divide = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Divide';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val/self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Divide.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\nOps.Math.Compare={};\n\n\n\n\nOps.Math.Compare.IsEven = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='isEven';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n\n    this.exec= function()\n    {\n        self.result.val=!( self.number1.val & 1 );\n    };\n\n    this.number1.onValueChanged=this.exec;\n};\n\nOps.Math.Compare.IsEven.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Math.Compare.Greater = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Greater';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val>self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Compare.Greater.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Math.Compare.Between = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Between';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number=this.addInPort(new Port(this,\"value\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n    this.number.val=2.0;\n    this.number1.val=1.0;\n    this.number2.val=3.0;\n\n    this.exec= function()\n    {\n        self.result.val=\n            (\n                self.number.val>Math.min(self.number1.val,self.number2.val) &&\n                self.number.val<Math.max(self.number1.val,self.number2.val)\n            );\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n    this.number.onValueChanged=this.exec;\n};\nOps.Math.Compare.Between.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Math.Compare.Lesser = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Lesser';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val<self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n\n};\n\nOps.Math.Compare.Lesser.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Math.Compare.Equals = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Equals';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val==self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Compare.Equals.prototype = new Op();\n\n","\nOps.Net=Ops.Net || {};\n\nOps.Net.Websocket = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='Websocket';\n    this.url=this.addInPort(new Port(this,\"url\"));\n    this.result=this.addOutPort(new Port(this,\"result\", OP_PORT_TYPE_OBJECT));\n    this.connected=this.addOutPort(new Port(this,\"connected\"));\n\n    var connection=null;\n    var timeout=null;\n    var connectedTo='';\n\n    function checkConnection()\n    {\n        if(self.connected.val===false)\n        {\n            connect();\n        }\n        timeout=setTimeout(checkConnection,1000);\n    }\n\n    function connect()\n    {\n        if(self.connected.val===true && connectedTo==self.url.val) return;\n\n        if(self.connected.val===true)connection.close();\n\n        window.WebSocket = window.WebSocket || window.MozWebSocket;\n     \n         if (!window.WebSocket)\n            console.error('Sorry, but your browser doesn\\'t support WebSockets.');\n\n\n        try\n        {\n            if(connection!=null)connection.close();\n            connection = new WebSocket(self.url.val);\n        }catch (e)\n        {\n            console.log('could not connect to',self.url.val);\n        }\n\n        \n        connection.onerror = function (message)\n        {\n            self.connected.val=false;\n        };\n\n        connection.onclose = function (message)\n        {\n            self.connected.val=false;\n        };\n\n        connection.onopen = function (message)\n        {\n            self.connected.val=true;\n            connectedTo=self.url.val;\n        };\n\n        connection.onmessage = function (message)\n        {\n            try\n            {\n                var json = JSON.parse(message.data);\n                self.result.val=json;\n                        \n            } catch (e) {\n                console.log('This doesn\\'t look like a valid JSON: ', message.data);\n                return;\n            }\n        };\n\n        \n        \n    }\n\n    this.url.onValueChanged=connect;\n    timeout=setTimeout(checkConnection,1000);\n\n    this.url.val='ws://127.0.0.1:1337';\n};\n\nOps.Net.Websocket.prototype = new Op();\n\n// -------------------------------------------------------------\n"],"sourceRoot":"/source/"}