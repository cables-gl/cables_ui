{"version":3,"sources":["timer.js","utils.js","cgl_mesh.js","cgl_shader.js","cgl_texture.js","holo.js","ops.gl.js","ops.js","ops.math.js"],"names":["Timer","getTime","lastTime","Date","now","timeStart","timeOffset","self","this","currentTime","paused","update","togglePlay","play","pause","setOffset","val","generateUUID","d","uuid","replace","c","r","Math","random","floor","toString","ajaxRequest","url","callback","request","XMLHttpRequest","open","responseType","onload","e","target","response","send","CGL","Mesh","geom","bufTexCoords","bufVertices","gl","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","vertices","STATIC_DRAW","itemSize","numItems","length","bufVerticesIndizes","ELEMENT_ARRAY_BUFFER","Uint16Array","verticesIndices","texCoords","console","log","render","shader","bind","GL","enableVertexAttribArray","getAttrVertexPos","getAttrTexCoords","vertexAttribPointer","FLOAT","drawElements","TRIANGLES","UNSIGNED_SHORT","Geometry","faceVertCount","texCoordsIndices","parseOBJ","buff","_readline","a","off","s","String","fromCharCode","groups","c_norms","i_norms","cg","from","to","Uint8Array","line","cds","split","x","parseFloat","y","z","push","v0a","v1a","v2a","vi0","parseInt","vi1","vi2","ui0","ui1","ui2","ni0","ni1","ni2","vlen","ulen","nlen","v3a","vi3","ui3","ni3","Uniform","_shader","_type","_name","_value","loc","name","type","value","needsUpdate","addUniform","updateValueF","getUniformLocation","getProgram","uniform1f","setValueF","v","updateValueT","uniform1i","setValueT","setValue","updateValue","Shader","program","uniforms","uni","getDefaultVertexShader","getDefaultFragmentShader","srcVert","srcFrag","setSource","projMatrixUniform","mvMatrixUniform","attrTexCoords","attrVertexPos","createProgram","getAttribLocation","useProgram","i","uniformMatrix4fv","pMatrix","mvMatrix","createShader","str","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","VERTEX_SHADER","FRAGMENT_SHADER","getShaderInfoLog","vstr","fstr","vshader","fshader","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","Texture","tex","createTexture","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","slot","activeTexture","TEXTURE0","initTexture","img","image","texParameteri","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","load","texture","Image","src","PORT_DIR_IN","PORT_DIR_OUT","OP_PORT_TYPE_VALUE","OP_PORT_TYPE_FUNCTION","OP_PORT_TYPE_TEXTURE","Ops","Op","objName","portsOut","portsIn","posts","uiAttribs","id","getName","addOutPort","p","direction","parent","addInPort","execute","exec","printInfo","ipo","removeLinks","getPort","ipi","getSerialized","op","getPortByName","Port","links","__defineGetter__","__defineSetter__","onValueChanged","onTriggered","addLink","l","isLinkedTo","p2","portIn","portOut","call","goals","getTypeString","obj","remove","removeLink","link","splice","Link","scene","onUnLink","p1","canLink","objIn","objOut","canLinkText","Scene","ops","timer","animFrameOps","clear","deleteOp","addOp","eval","hasOwnProperty","onAdd","opid","onDelete","requestAnimationFrame","time","onAnimFrame","op1","port1Name","op2","port2Name","port1","port2","onLink","serialize","JSON","stringify","getOpById","deSerialize","opinid","opoutid","inName","outName","found","parse","iop","port","ipi2","ili","Gl","currentShader","mat4","create","Renderer","apply","arguments","simpleShader","trigger","initTranslate","vec3","set","enable","DEPTH_TEST","clearColor","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","viewport","canvas","clientWidth","clientHeight","perspective","identity","translate","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","document","getElementById","getContext","prototype","ClearColor","g","b","ClearDepth","filename","textureOut","Meshes","Rectangle","squareVertexPositionBuffer","drawArrays","TRIANGLE_STRIP","ObjMesh","mesh","unwrap","ind","crd","cpi","ncrd","Array","j","Cube","Plotter","lineWidth","buffer","num","LINE_STRIP","Triangle","BasicMaterial","doRender","uniform","textureUniform","Schwurbel","uniLoc","compile","Noise","timeUniform","Matrix","Translate","vec","Scale","scale","vScale","oldMatrix","transMatrix","doScale","copy","multiply","updateMatrix","scaleChanged","Transform","DEG2RAD","posX","posY","posZ","scaleX","scaleY","scaleZ","rotX","rotY","rotZ","vPos","doTranslate","rotateX","rotateY","rotateZ","translateChanged","rotChanged","Log","exe","input","CallsPerSecond","cps","Value","result","TimeLineTime","theTime","Repeat","idx","IfTrueThen","bool","triggerThen","triggerElse","Group","triggers","Interval","timeOutId","interval","setTimeout","Anim","SinusAnim","sin","RelativeTime","startTime","Input","GamePad","numPads","axis1","axis2","axis3","axis4","button0","button1","button2","button3","button4","gamePads","navigator","getGamepads","count","gp","axes","buttons","pressed","Random","MapRange","old_min","old_max","new_min","new_max","nMin","nMax","oMin","oMax","reverseInput","oldMin","min","oldMax","max","reverseOutput","newMin","newMax","portion","Abs","number","abs","Sin","Sum","number1","number2","Multiply","Divide","Compare","IsEven","Greater","Between","Lesser","Equals"],"mappings":"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","file":"cables.min.js","sourcesContent":["\n\nfunction Timer()\n{\n    var self=this;\n    var timeStart=Date.now();\n    var timeOffset=0;\n\n    var currentTime=0;\n    var lastTime=0;\n    var paused=true;\n\n    function getTime()\n    {\n        lastTime=(Date.now()-timeStart)/1000;\n        return lastTime+timeOffset;\n\n    }\n\n    this.update=function()\n    {\n        if(paused) return;\n        currentTime=getTime();\n\n        return currentTime;\n    };\n\n    this.getTime=function()\n    {\n        return currentTime;\n    };\n\n    this.togglePlay=function()\n    {\n        if(paused)self.play();\n            else self.pause();\n    };\n\n    this.setOffset=function(val)\n    {\n        if(currentTime+val<0)\n        {\n            timeStart=Date.now();\n            timeOffset=0;\n            currentTime=0;\n        }\n        else\n        {\n            timeOffset+=val;\n            currentTime=lastTime+timeOffset;\n        }\n        \n\n    };\n\n    this.play=function()\n    {\n        timeStart=Date.now();\n        paused=false;\n    };\n\n    this.pause=function()\n    {\n        timeOffset=currentTime;\n        paused=true;\n    };\n\n}","function generateUUID()\n{\n    var d = new Date().getTime();\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c)\n    {\n        var r = (d + Math.random()*16)%16 | 0;\n        d = Math.floor(d/16);\n        return (c=='x' ? r : (r&0x3|0x8)).toString(16);\n    });\n    return uuid;\n}\n\n// ----------------------------------------------------------------\nfunction ajaxRequest(url, callback)\n{\n    var request = new XMLHttpRequest();\n    request.open(\"GET\", url, true);\n    request.responseType = \"arraybuffer\";\n    request.onload = function(e)\n    {\n        callback(e.target.response);\n    };\n    request.send();\n}\n\n\n\n","var CGL=CGL || {};\n\nCGL.Mesh=function(geom)\n{\n    var bufTexCoords=-1;\n    // var bufTexCoordsIndizes=-1;\n\n    var bufVertices = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, bufVertices);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(geom.vertices), gl.STATIC_DRAW);\n    bufVertices.itemSize = 3;\n    bufVertices.numItems = geom.vertices.length/3;\n\n\n    var bufVerticesIndizes = gl.createBuffer();\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufVerticesIndizes);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(geom.verticesIndices), gl.STATIC_DRAW);\n    bufVerticesIndizes.itemSize = 1;\n    bufVerticesIndizes.numItems = geom.verticesIndices.length;\n\n    if(geom.texCoords.length>0)\n    {\n        console.log('found texcoords!'+geom.texCoords.length);\n        console.log('geom.texCoords',geom.texCoords);\n\n        bufTexCoords = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, bufTexCoords);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(geom.texCoords), gl.STATIC_DRAW);\n        bufTexCoords.itemSize = 2;\n        bufTexCoords.numItems = geom.texCoords.length/bufTexCoords.itemSize;\n\n        // bufTexCoordsIndizes = gl.createBuffer();\n        // gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufTexCoordsIndizes);\n\n        // gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(bufTexCoordsIndizes), gl.STATIC_DRAW);\n        // bufTexCoordsIndizes.itemSize = 1;\n        // bufTexCoordsIndizes.numItems = geom.texCoordsIndices.length;\n    }\n\n    console.log('geom.vertices.length '+geom.vertices.length);\n    // console.log('bufTexCoordsIndizes.numItems '+bufTexCoordsIndizes.numItems);\n    // console.log('bufTexCoords.numItems '+bufTexCoords.numItems);\n\n    console.log('bufVertices.numItems '+bufVertices.numItems);\n    console.log('bufVerticesIndizes.numItems '+bufVerticesIndizes.numItems);\n\n\n\n    this.render=function(shader)\n    {\n\n        // shader.setAttributeVertex( bufVertices.itemSize);\n        // shader.setAttributeTexCoord( bufTexCoordsIndizes.itemSize);\n        shader.bind();\n\n\n        GL.enableVertexAttribArray(shader.getAttrVertexPos());\n        GL.enableVertexAttribArray(shader.getAttrTexCoords());\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, bufVertices);\n        gl.vertexAttribPointer(shader.getAttrVertexPos(),bufVertices.itemSize, gl.FLOAT, false, 0, 0);\n\n\n        // gl.vertexAttribPointer(shaderProgram.textureCoordAttribute, cubeVertexTextureCoordBuffer.itemSize, gl.FLOAT, false, 0, 0);\n\n        if(bufTexCoords!=-1)\n        {\n            // console.log('texcoords'+shader.getAttrTexCoords());\n            // console.log('texcoords'+shader.getAttrVertexPos());\n                    \n            gl.bindBuffer(gl.ARRAY_BUFFER, bufTexCoords);\n            gl.vertexAttribPointer(shader.getAttrTexCoords(),bufTexCoords.itemSize, gl.FLOAT, false, 0, 0);\n        }\n\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufVerticesIndizes);\n        gl.drawElements(gl.TRIANGLES, bufVerticesIndizes.numItems, gl.UNSIGNED_SHORT, 0);\n\n        // gl.drawArrays(gl.POINTS, 0, bufVertices.numItems);\n\n    };\n\n};\n\nCGL.Geometry=function()\n{\n    this.faceVertCount=3;\n    this.vertices=[];\n    this.verticesIndices=[];\n    this.texCoords=[];\n    this.texCoordsIndices=[];\n};\n\nparseOBJ = function(buff)\n{\n\n    _readline = function(a, off)  // Uint8Array, offset\n    {\n        var s = \"\";\n        while(a[off] != 10) s += String.fromCharCode(a[off++]);\n        return s;\n    };\n\n    var geom = new CGL.Geometry();\n    geom.groups = {};\n    \n    // geom.texCoords   = [];\n    geom.c_norms = [];\n    \n    // geom.texCoordsIndices   = [];\n    geom.i_norms = [];\n    \n    var cg = {from: 0, to:0};   // current group\n    var off = 0;\n    var a = new Uint8Array(buff);\n    \n    while(off < a.length)\n    {\n        var line = _readline(a, off);\n        off += line.length + 1;\n        line = line.replace(/ +(?= )/g,'');\n        line = line.replace(/(^\\s+|\\s+$)/g, '');\n        var cds = line.split(\" \");\n        if(cds[0] == \"g\")\n        {\n            cg.to = geom.verticesIndices.length;\n            if(geom.groups[cds[1]] == null) geom.groups[cds[1]] = {from:geom.verticesIndices.length, to:0};\n            cg = geom.groups[cds[1]];\n        }\n        if(cds[0] == \"v\")\n        {\n            var x = parseFloat(cds[1]);\n            var y = parseFloat(cds[2]);\n            var z = parseFloat(cds[3]);\n            geom.vertices.push(x,y,z);\n        }\n        if(cds[0] == \"vt\")\n        {\n            var x = parseFloat(cds[1]);\n            var y = 1-parseFloat(cds[2]);\n            geom.texCoords.push(x,y);\n        }\n        if(cds[0] == \"vn\")\n        {\n            var x = parseFloat(cds[1]);\n            var y = parseFloat(cds[2]);\n            var z = parseFloat(cds[3]);\n            geom.c_norms.push(x,y,z);\n        }\n        if(cds[0] == \"f\")\n        {\n            var v0a = cds[1].split(\"/\"), v1a = cds[2].split(\"/\"), v2a = cds[3].split(\"/\");\n            var vi0 = parseInt(v0a[0])-1, vi1 = parseInt(v1a[0])-1, vi2 = parseInt(v2a[0])-1;\n            var ui0 = parseInt(v0a[1])-1, ui1 = parseInt(v1a[1])-1, ui2 = parseInt(v2a[1])-1;\n            var ni0 = parseInt(v0a[2])-1, ni1 = parseInt(v1a[2])-1, ni2 = parseInt(v2a[2])-1;\n            \n            var vlen = geom.vertices.length/3, ulen = geom.texCoords.length/2, nlen = geom.c_norms.length/3;\n            if(vi0<0) vi0 = vlen + vi0+1; if(vi1<0) vi1 = vlen + vi1+1; if(vi2<0) vi2 = vlen + vi2+1;\n            if(ui0<0) ui0 = ulen + ui0+1; if(ui1<0) ui1 = ulen + ui1+1; if(ui2<0) ui2 = ulen + ui2+1;\n            if(ni0<0) ni0 = nlen + ni0+1; if(ni1<0) ni1 = nlen + ni1+1; if(ni2<0) ni2 = nlen + ni2+1;\n            \n            geom.verticesIndices.push(vi0, vi1, vi2);  //cg.verticesIndices.push(vi0, vi1, vi2)\n            geom.texCoordsIndices  .push(ui0, ui1, ui2);  //cg.texCoordsIndices  .push(ui0, ui1, ui2);\n            geom.i_norms.push(ni0, ni1, ni2);  //cg.i_norms.push(ni0, ni1, ni2);\n            if(cds.length == 5)\n            {\n                var v3a = cds[4].split(\"/\");\n                var vi3 = parseInt(v3a[0])-1, ui3 = parseInt(v3a[1])-1, ni3 = parseInt(v3a[2])-1;\n                if(vi3<0) vi3 = vlen + vi3+1;\n                if(ui3<0) ui3 = ulen + ui3+1;\n                if(ni3<0) ni3 = nlen + ni3+1;\n                geom.verticesIndices.push(vi0, vi2, vi3);  //cg.verticesIndices.push(vi0, vi2, vi3);\n                geom.texCoordsIndices  .push(ui0, ui2, ui3);  //cg.texCoordsIndices  .push(ui0, ui2, ui3);\n                geom.i_norms.push(ni0, ni2, ni3);  //cg.i_norms.push(ni0, ni2, ni3);\n            }\n        }\n    }\n    cg.to = geom.verticesIndices.length;\n    \n    return geom;\n};\n\n\n","var CGL=CGL || {};\n\n// ---------------------------------------------------------------------------\n\nCGL.Uniform=function(_shader,_type,_name,_value)\n{\n    var self=this;\n    var loc=-1;\n    var name=_name;\n    var type=_type;\n    var value=0;\n    var shader=_shader;\n    this.needsUpdate=true;\n\n    shader.addUniform(this);\n\n    this.updateValueF=function()\n    {\n        if(loc==-1) loc=gl.getUniformLocation(shader.getProgram(), name);\n        gl.uniform1f(loc, value);\n    };\n\n    this.setValueF=function(v)\n    {\n        self.needsUpdate=true;\n        value=v;\n    };\n\n    this.updateValueT=function()\n    {\n        if(loc==-1)\n        {\n            loc=gl.getUniformLocation(shader.getProgram(), name);\n            if(loc==-1) console.log('texture loc unknown!!');\n        }\n\n        // console.log('value.tex',value.tex);\n        \n\n        gl.uniform1i(loc, 0);\n    };\n\n    this.setValueT=function(v)\n    {\n        self.needsUpdate=true;\n        value=v;\n    };\n\n    if(type=='f')\n    {\n        this.setValue=this.setValueF;\n        this.updateValue=this.updateValueF;\n    }\n\n    if(type=='t')\n    {\n        this.setValue=this.setValueT;\n        this.updateValue=this.updateValueT;\n    }\n\n    this.setValue(_value);\n};\n\n// ---------------------------------------------------------------------------\n\nCGL.Shader=function()\n{\n    var self=this;\n    var program=-1;\n    var uniforms=[];\n\n    this.addUniform=function(uni)\n    {\n        uniforms.push(uni);\n    };\n\n    this.getDefaultVertexShader=function()\n    {\n        return ''+\n        'attribute vec3 vPosition;\\n'+\n        'attribute vec2 attrTexCoord;\\n'+\n        'varying vec2 texCoord;\\n'+\n        'uniform mat4 projMatrix;\\n'+\n        'uniform mat4 mvMatrix;\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        '   texCoord=attrTexCoord;\\n'+\n        // '   gl_PointSize=3.0;\\n'+\n        '   gl_Position = projMatrix * mvMatrix * vec4(vPosition,  1.0);\\n'+\n        '}\\n';\n    };\n\n    this.getDefaultFragmentShader=function()\n    {\n        return ''+\n        'precision mediump float;\\n'+\n        'void main()\\n'+\n        '{\\n'+\n\n        '   gl_FragColor = vec4(0.5,0.5,0.5,1.0);\\n'+\n        '}\\n';\n    };\n\n    this.srcVert=this.getDefaultVertexShader();\n    this.srcFrag=this.getDefaultFragmentShader();\n\n    this.setSource=function(srcVert,srcFrag)\n    {\n        this.srcVert=srcVert;\n        this.srcFrag=srcFrag;\n        // console.log('compiled!');\n    };\n\n    var projMatrixUniform=-1;\n    var mvMatrixUniform=-1;\n\n    var attrTexCoords = -1;\n    var attrVertexPos = -1;\n\n    this.getAttrTexCoords=function(){return attrTexCoords;};\n    this.getAttrVertexPos=function(){return attrVertexPos;};\n\n\n    this.bind=function()\n    {\n        if(program==-1) program=createProgram(self.srcVert,self.srcFrag);\n\n        if(mvMatrixUniform==-1)\n        {\n            attrTexCoords = gl.getAttribLocation(program, 'attrTexCoord');\n            attrVertexPos = gl.getAttribLocation(program, 'vPosition');\n\n            projMatrixUniform = gl.getUniformLocation(program, \"projMatrix\");\n            mvMatrixUniform = gl.getUniformLocation(program, \"mvMatrix\");\n        }\n\n        GL.useProgram(program);\n\n        for(var i in uniforms)\n        {\n            if(uniforms[i].needsUpdate)uniforms[i].updateValue();\n        }\n\n        gl.uniformMatrix4fv(projMatrixUniform, false, pMatrix);\n        gl.uniformMatrix4fv(mvMatrixUniform, false, mvMatrix);\n    };\n\n    this.getProgram=function()\n    {\n        return program;\n    };\n\n\n    createShader =function(str, type)\n    {\n        var shader = gl.createShader(type);\n        gl.shaderSource(shader, str);\n        gl.compileShader(shader);\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\n        {\n            console.log('compile status: ');\n\n            if(type==gl.VERTEX_SHADER)console.log('VERTEX_SHADER');\n            if(type==gl.FRAGMENT_SHADER)console.log('FRAGMENT_SHADER');\n            \n            throw gl.getShaderInfoLog(shader);\n        }\n        return shader;\n    };\n\n    createProgram=function(vstr, fstr)\n    {\n        var program = gl.createProgram();\n        var vshader = createShader(vstr, gl.VERTEX_SHADER);\n        var fshader = createShader(fstr, gl.FRAGMENT_SHADER);\n        gl.attachShader(program, vshader);\n        gl.attachShader(program, fshader);\n        gl.linkProgram(program);\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS))\n        {\n            throw gl.getProgramInfoLog(program);\n        }\n        return program;\n    };\n\n\n\n};\n\n","var CGL=CGL || {};\n\nCGL.Texture=function()\n{\n    var self=this;\n    this.tex = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, this.tex);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([111, 111, 111, 255]));\n    gl.bindTexture(gl.TEXTURE_2D, null);\n\n    this.bind=function(slot)\n    {\n        gl.activeTexture(gl.TEXTURE0+slot);\n        gl.bindTexture(gl.TEXTURE_2D, self.tex);\n    };\n\n    this.initTexture=function(img)\n    {\n        gl.bindTexture(gl.TEXTURE_2D, self.tex);\n        // gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, self.image);\n\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\n        // non power of two:\n        // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n\n        gl.bindTexture(gl.TEXTURE_2D, null);\n    };\n};\n\nCGL.Texture.load=function(url)\n{\n    var texture=new CGL.Texture();\n    texture.image = new Image();\n    texture.image.onload = function ()\n    {\n        console.log(texture.image);\n                \n        texture.initTexture(texture.image);\n    };\n    texture.image.src = url;\n    return texture;\n};\n\n// ---------------------------------------------------------------------------\n","\nvar PORT_DIR_IN=0;\nvar PORT_DIR_OUT=1;\n\nvar OP_PORT_TYPE_VALUE =0;\nvar OP_PORT_TYPE_FUNCTION =1;\nvar OP_PORT_TYPE_TEXTURE =2;\n\nvar Ops = {};\n\n\nvar Op = function()\n{\n    this.objName='';\n    this.portsOut=[];\n    this.portsIn=[];\n    this.posts=[];\n    this.uiAttribs={};\n    this.name='unknown';\n    this.id=generateUUID();\n\n    this.getName= function()\n    {\n        return this.name;\n    };\n    this.addOutPort=function(p)\n    {\n        p.direction=PORT_DIR_OUT;\n        p.parent=this;\n        this.portsOut.push(p);\n        return p;\n    };\n    this.addInPort=function(p)\n    {\n        p.direction=PORT_DIR_IN;\n        p.parent=this;\n        this.portsIn.push(p);\n        return p;\n    };\n    this.execute=function()\n    {\n        this.exec();\n    };\n    this.printInfo=function()\n    {\n        for(var i=0;i<this.portsIn.length;i++)\n            console.log('in: '+this.portsIn[i].getName());\n\n        for(var ipo in this.portsOut)\n            console.log('out: '+this.portsOut[ipo].getName());\n    };\n\n    this.removeLinks=function()\n    {\n        for(var i=0;i<this.portsIn.length;i++)\n            this.portsIn[i].removeLinks();\n        for(var ipo in this.portsOut)\n            this.portsOut[ipo].removeLinks();\n    };\n\n    this.getPort=function(name)\n    {\n        for(var ipi in this.portsIn)\n            if(this.portsIn[ipi].getName()==name)return this.portsIn[ipi];\n\n        for(var ipo in this.portsOut)\n            if(this.portsOut[ipo].getName()==name)return this.portsOut[ipo];\n    };\n\n    this.getSerialized=function()\n    {\n        var op={};\n        op.name=this.getName();\n        op.objName=this.objName;\n        op.id=this.id;\n        op.uiAttribs=this.uiAttribs;\n\n        op.portsIn=[];\n        op.portsOut=[];\n\n        for(var i=0;i<this.portsIn.length;i++)\n            op.portsIn.push( this.portsIn[i].getSerialized() );\n\n        for(var ipo in this.portsOut)\n            op.portsOut.push( this.portsOut[ipo].getSerialized() );\n\n        return op;\n    };\n\n    this.getPortByName=function(name)\n    {\n        for(var i=0;i<this.portsIn.length;i++)\n            if(this.portsIn[i].name==name)return this.portsIn[i];\n        \n        for(var ipo in this.portsOut)\n            if(this.portsOut[ipo].name==name)return this.portsOut[ipo];\n    };\n\n};\n\n// ------------------------------------------------------------------------------------\n\nvar Port=function(parent,name,type)\n{\n    var self=this;\n    this.direction=PORT_DIR_IN;\n    this.id=generateUUID();\n    this.parent=parent;\n    this.links=[];\n    this.value=null;\n    this.name=name;\n    this.type=type || OP_PORT_TYPE_VALUE;\n\n    this.__defineGetter__(\"val\", function()\n    {\n        return this.value;\n    });\n\n    this.__defineSetter__(\"val\", function(v)\n    {\n        this.setValue(v);\n    });\n\n    this.onValueChanged=function(){};\n    this.onTriggered=function(){};\n\n    this.setValue=function(v)\n    {\n        if(v!=this.value)\n        {\n            this.value=v;\n            this.onValueChanged();\n\n            for(var i in this.links)\n            {\n                this.links[i].setValue();\n            }\n        }\n    };\n\n    this.getName= function()\n    {\n        return this.name;\n    };\n\n    this.addLink=function(l)\n    {\n        this.links.push(l);\n    };\n\n    this.isLinkedTo=function(p2)\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i].portIn==p2 || this.links[i].portOut==p2)return true;\n        }\n        return false;\n    };\n\n    this.call=function()\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i].portIn !=this)this.links[i].portIn.onTriggered();\n            if(this.links[i].portOut!=this)this.links[i].portOut.onTriggered();\n        }\n    };\n\n\n    this.execute=function()\n    {\n        console.log('### execute port: '+this.getName() , this.goals.length);\n    };\n\n    this.getTypeString=function()\n    {\n        if(this.type==OP_PORT_TYPE_VALUE)return 'value';\n        if(this.type==OP_PORT_TYPE_FUNCTION)return 'function';\n        if(this.type==OP_PORT_TYPE_TEXTURE)return 'texture';\n    };\n\n    this.getSerialized=function()\n    {\n        var obj={};\n        obj.name=this.getName();\n        obj.value=this.value;\n\n        if(this.direction==PORT_DIR_IN && this.links.length>0)\n        {\n            obj.links=[];\n            for(var i in this.links)\n            {\n                obj.links.push( this.links[i].getSerialized() );\n            }\n        }\n        return obj;\n    };\n\n    this.removeLinks=function()\n    {\n        while(this.links.length>0)\n        {\n            this.links[0].remove();\n        }\n    };\n\n    this.removeLink=function(link)\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i]==link)this.links.splice( i, 1 );\n        }\n    };\n};\n\n\n\n// ---------------------------------------------------------------------------\n\nvar Link = function(scene)\n{\n    this.portIn=null;\n    this.portOut=null;\n    this.scene=scene;\n\n    this.setValue=function()\n    {\n        if(this.portIn.val!=this.portOut.val)\n            this.portIn.val=this.portOut.val;\n    };\n\n    this.remove=function()\n    {\n        this.portIn.removeLink(this);\n        this.portOut.removeLink(this);\n        this.scene.onUnLink(this.portIn,this.portOut);\n        this.portIn=null;\n        this.portOut=null;\n        this.scene=null;\n    };\n\n\n    this.link=function(p1,p2)\n    {\n        if(!Link.canLink(p1,p2))\n        {\n            console.log('cannot link ports!');\n            return false;\n        }\n        if(p1.direction==PORT_DIR_IN)\n        {\n            this.portIn=p1;\n            this.portOut=p2;\n        }\n        else\n        {\n            this.portIn=p2;\n            this.portOut=p1;\n        }\n\n        p1.addLink(this);\n        p2.addLink(this);\n        this.setValue();\n    };\n\n    this.getSerialized=function()\n    {\n        var obj={};\n\n        obj.portIn=this.portIn.getName();\n        obj.portOut=this.portOut.getName();\n        obj.objIn=this.portIn.parent.id;\n        obj.objOut=this.portOut.parent.id;\n\n        return obj;\n    };\n};\n\n\nLink.canLinkText=function(p1,p2)\n{\n    if(p1.direction==PORT_DIR_IN && p1.links.length>0)return 'input port already busy';\n    if(p2.direction==PORT_DIR_IN && p2.links.length>0)return 'input port already busy';\n    if(p1.isLinkedTo(p2))return 'ports already linked';\n    if(!p1)return 'can not link: port 1 invalid';\n    if(!p2)return 'can not link: port 2 invalid';\n    if(p1.direction==p2.direction)return 'can not link: same direction';\n    if(p1.type!=p2.type)return 'can not link: different type';\n    if(p1.parent==p2.parent)return 'can not link: same op';\n    return 'can link';\n};\n\nLink.canLink=function(p1,p2)\n{\n\n    if(p1.direction==PORT_DIR_IN && p1.links.length>0)return false;\n    if(p2.direction==PORT_DIR_IN && p2.links.length>0)return false;\n    if(p1.isLinkedTo(p2))return false;\n    if(!p1)return false;\n    if(!p2)return false;\n    if(p1.direction==p2.direction)return false;\n    if(p1.type!=p2.type)return false;\n    if(p1.parent==p2.parent)return false;\n\n    return true;\n};\n\n\n// ------------------------------------------------------------------------------------\n\n\nvar Scene = function()\n{\n    var self=this;\n    this.ops=[];\n    this.timer=new Timer();\n    this.animFrameOps=[];\n    \n\n    this.clear=function()\n    {\n        this.timer=new Timer();\n        while(this.ops.length>0)\n        {\n            this.deleteOp(this.ops[0].id);\n        }\n    };\n\n    this.addOp=function(objName,uiAttribs)\n    {\n        var op=eval('new '+objName+'();');\n        op.objName=objName;\n        op.uiAttribs=uiAttribs;\n\n        if(op.hasOwnProperty('onAnimFrame')) this.animFrameOps.push(op);\n\n        this.ops.push(op);\n        if(this.onAdd)this.onAdd(op);\n        return op;\n    };\n\n    this.deleteOp=function(opid)\n    {\n        for(var i in this.ops)\n        {\n            if(this.ops[i].id==opid)\n            {\n                this.ops[i].removeLinks();\n                this.onDelete(this.ops[i]);\n                this.ops.splice( i, 1 );\n            }\n        }\n    };\n\n    this.exec=function()\n    {\n        requestAnimationFrame(self.exec);\n        self.timer.update();\n\n        var time=self.timer.getTime();\n\n        for(var i in self.animFrameOps)\n        {\n            self.animFrameOps[i].onAnimFrame(time);\n        }\n\n    };\n\n    this.link=function(op1,port1Name,op2,port2Name)\n    {\n        var port1=op1.getPort(port1Name);\n        var port2=op2.getPort(port2Name);\n\n        if(Link.canLink(port1,port2))\n        {\n            var link=new Link(this);\n            link.link(port1,port2);\n            this.onLink(port1,port2);\n            return link;\n        }\n        else\n        {\n            console.log(Link.canLinkText(port1,port2));\n        }\n    };\n    this.onAdd=function(op){};\n    this.onDelete=function(op){};\n    this.onLink=function(p1,p2){};\n    this.onUnLink=function(p1,p2){};\n    this.serialize=function()\n    {\n        var obj={};\n\n        obj.ops=[];\n        for(var i in this.ops)\n        {\n            obj.ops.push( this.ops[i].getSerialized() );\n        }\n        \n        return JSON.stringify(obj);\n    };\n    this.getOpById=function(opid)\n    {\n        for(var i in this.ops)\n        {\n            if(this.ops[i].id==opid)return this.ops[i];\n        }\n\n    };\n    this.deSerialize=function(obj)\n    {\n        if (typeof obj === \"string\") obj=JSON.parse(obj);\n        var self=this;\n\n        function addLink(opinid,opoutid,inName,outName)\n        {\n            var found=false;\n            if(!found)\n            {\n                self.link(\n                    self.getOpById(opinid),\n                    inName,\n                    self.getOpById(opoutid),\n                    outName\n                    );\n            }\n        }\n\n        // add ops...\n        for(var iop in obj.ops)\n        {\n            var op=this.addOp(obj.ops[iop].objName,obj.ops[iop].uiAttribs);\n            op.id=obj.ops[iop].id;\n\n            for(var ipi in obj.ops[iop].portsIn)\n            {\n                var port=op.getPortByName(obj.ops[iop].portsIn[ipi].name);\n                if(port && port.type!=OP_PORT_TYPE_TEXTURE)port.val=obj.ops[iop].portsIn[ipi].value;\n            }\n\n            for(var ipo in obj.ops[iop].portsOut)\n            {\n                var port2=op.getPortByName(obj.ops[iop].portsOut[ipo].name);\n                if(port2&& port2.type!=OP_PORT_TYPE_TEXTURE)port2.val=obj.ops[iop].portsOut[ipo].value;\n            }\n\n\n            // op.uiAttribs=obj.ops[iop].uiAttribs;\n        }\n\n        // create links...\n        for(iop in obj.ops)\n        {\n            for(var ipi2 in obj.ops[iop].portsIn)\n            {\n\n                for(var ili in obj.ops[iop].portsIn[ipi2].links)\n                {\n                    addLink(\n                        obj.ops[iop].portsIn[ipi2].links[ili].objIn,\n                        obj.ops[iop].portsIn[ipi2].links[ili].objOut,\n                        obj.ops[iop].portsIn[ipi2].links[ili].portIn,\n                        obj.ops[iop].portsIn[ipi2].links[ili].portOut);\n                }\n            }\n\n\n            // for(var ipo in obj.ops[iop].portsOut)\n            // {\n            //     for(var ili in obj.ops[iop].portsOut[ipo].links)\n            //     {\n            //         addLink(\n            //             obj.ops[iop].portsOut[ipo].links[ili].objIn,\n            //             obj.ops[iop].portsOut[ipo].links[ili].objOut,\n            //             obj.ops[iop].portsOut[ipo].links[ili].portIn,\n            //             obj.ops[iop].portsOut[ipo].links[ili].portOut);\n\n            //     }\n            // }\n        }\n\n\n        for(var i in this.ops)\n        {\n            this.ops[i].id=generateUUID();\n        }\n\n\n\n    };\n\n    this.exec();\n\n};\n\n\n\n\n","//http://k3d.ivank.net/K3D.js\n//http://fhtr.blogspot.de/2009/12/3d-models-and-parsing-binary-data-with.html\n//https://github.com/gpjt/webgl-lessons/blob/master/lesson05/index.html\n\nOps.Gl={};\nvar GL=null;\nvar GL=null;\n\nvar currentShader=null;\n\nvar mvMatrix = mat4.create();\nvar pMatrix = mat4.create();\n\nOps.Gl.Renderer = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    var simpleShader=new CGL.Shader();\n \n\n    this.name='WebGL Renderer';\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var initTranslate=vec3.create();\n    vec3.set(initTranslate, 0,0,-2);\n\n    this.onAnimFrame=function(time)\n    {\n        currentShader=simpleShader;\n        gl.enable(gl.DEPTH_TEST);\n        GL.clearColor(0,0,0,1);\n        GL.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n        gl.viewport(0,0,self.canvas.clientWidth,self.canvas.clientHeight);\n        mat4.perspective(pMatrix,45, self.canvas.clientWidth/self.canvas.clientHeight, 0.01, 1100.0);\n        mat4.identity(mvMatrix);\n        mat4.translate(mvMatrix,mvMatrix, initTranslate);\n\n        GL.enable(GL.BLEND);\n        GL.blendFunc(GL.SRC_ALPHA,GL.ONE_MINUS_SRC_ALPHA);\n\n        self.trigger.call();\n    };\n\n    this.canvas = document.getElementById(\"glcanvas\");\n    GL = this.canvas.getContext(\"experimental-webgl\");\n    gl = this.canvas.getContext(\"experimental-webgl\");\n\n};\n\nOps.Gl.Renderer.prototype = new Op();\n\n\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.ClearColor = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='ClearColor';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.r=this.addInPort(new Port(this,\"r\"));\n    this.g=this.addInPort(new Port(this,\"g\"));\n    this.b=this.addInPort(new Port(this,\"b\"));\n\n    this.render.onTriggered=function()\n    {\n        GL.clearColor(self.r.val,self.g.val,self.b.val,1);\n        GL.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n\n        self.trigger.call();\n    };\n\n};\n\nOps.Gl.ClearColor.prototype = new Op();\n\n\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.ClearDepth = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='ClearDepth';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        GL.clear(GL.DEPTH_BUFFER_BIT);\n        self.trigger.call();\n    };\n};\n\nOps.Gl.ClearDepth.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\n    \nOps.Gl.Texture = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='texture';\n    this.filename=this.addInPort(new Port(this,\"file\",OP_PORT_TYPE_VALUE));\n    this.textureOut=this.addOutPort(new Port(this,\"texture\",OP_PORT_TYPE_TEXTURE));\n    \n    this.filename.onValueChanged=function()\n    {\n        console.log('load texture...');\n        self.tex=CGL.Texture.load(self.filename.val);\n        self.textureOut.val=self.tex.tex;\n    };\n\n    this.filename.val='assets/skull.png';\n    // this.filename.onValueChanged();\n    // this.textureOut.val=this.tex.tex;\n};\n\nOps.Gl.Texture.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.Meshes={};\n\n\n\nOps.Gl.Meshes.Rectangle = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='rectangle';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        // currentShader.setAttributeVertex( self.squareVertexPositionBuffer.itemSize);\n        gl.vertexAttribPointer(currentShader.getAttrVertexPos(),self.squareVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);\n\n        currentShader.bind();\n        gl.bindBuffer(gl.ARRAY_BUFFER, self.squareVertexPositionBuffer);\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, self.squareVertexPositionBuffer.numItems);\n\n        self.trigger.call();\n    };\n\n    this.squareVertexPositionBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.squareVertexPositionBuffer);\n    this.vertices = [\n         1.0,  1.0,  0.0,\n        -1.0,  1.0,  0.0,\n         1.0, -1.0,  0.0,\n        -1.0, -1.0,  0.0\n    ];\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(this.vertices), gl.STATIC_DRAW);\n    this.squareVertexPositionBuffer.itemSize = 3;\n    this.squareVertexPositionBuffer.numItems = 4;\n};\n\nOps.Gl.Meshes.Rectangle.prototype = new Op();\n\n\n\n\n\n\nOps.Gl.Meshes.ObjMesh = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='OBJ Mesh';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.mesh=null;\n\n    this.render.onTriggered=function()\n    {\n        if(self.mesh)\n        {\n            self.mesh.render(currentShader);\n        }\n\n        self.trigger.call();\n    };\n\n\n    ajaxRequest('assets/skull.obj',function(response)\n    {\n        console.log(response);\n                \n        var r=parseOBJ(response);\n\nunwrap = function(ind, crd, cpi)   \n{\n    var ncrd = new Array(Math.floor(ind.length/3)*cpi);\n    for(var i=0; i<ind.length; i++)\n    {\n        for(var j=0; j<cpi; j++)\n        {\n            ncrd[i*cpi+j] = crd[ind[i]*cpi+j];\n        }\n    }\n    return ncrd;\n};\n\nvar l=r.verticesIndices.length;\n        r.vertices = unwrap(r.verticesIndices, r.vertices, 3);\n        r.texCoords = unwrap(r.texCoordsIndices  , r.texCoords  , 2);\n        r.verticesIndices = [];\n        for(var i=0; i<l; i++) r.verticesIndices.push(i);\n        console.log(r);\n        \n        self.mesh=new CGL.Mesh(r);\n    });\n\n\n\n};\n\nOps.Gl.Meshes.ObjMesh.prototype = new Op();\n\n\n\n\n\n// ----------------------------------------------------------------\n\n\nOps.Gl.Meshes.Cube = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Cube';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.mesh=null;\n\n    this.render.onTriggered=function()\n    {\n        if(self.mesh!==null)\n        {\n            self.mesh.render(currentShader);\n        }\n\n        self.trigger.call();\n    };\n\n\n    var geom=new CGL.Geometry();\n\n            geom.vertices = [\n            // Front face\n            -1.0, -1.0,  1.0,\n             1.0, -1.0,  1.0,\n             1.0,  1.0,  1.0,\n            -1.0,  1.0,  1.0,\n            // Back face\n            -1.0, -1.0, -1.0,\n            -1.0,  1.0, -1.0,\n             1.0,  1.0, -1.0,\n             1.0, -1.0, -1.0,\n            // Top face\n            -1.0,  1.0, -1.0,\n            -1.0,  1.0,  1.0,\n             1.0,  1.0,  1.0,\n             1.0,  1.0, -1.0,\n            // Bottom face\n            -1.0, -1.0, -1.0,\n             1.0, -1.0, -1.0,\n             1.0, -1.0,  1.0,\n            -1.0, -1.0,  1.0,\n            // Right face\n             1.0, -1.0, -1.0,\n             1.0,  1.0, -1.0,\n             1.0,  1.0,  1.0,\n             1.0, -1.0,  1.0,\n            // Left face\n            -1.0, -1.0, -1.0,\n            -1.0, -1.0,  1.0,\n            -1.0,  1.0,  1.0,\n            -1.0,  1.0, -1.0,\n        ];\n\n        geom.texCoords = [\n          // Front face\n          0.0, 0.0,\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n          // Back face\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n          0.0, 0.0,\n          // Top face\n          0.0, 1.0,\n          0.0, 0.0,\n          1.0, 0.0,\n          1.0, 1.0,\n          // Bottom face\n          1.0, 1.0,\n          0.0, 1.0,\n          0.0, 0.0,\n          1.0, 0.0,\n          // Right face\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n          0.0, 0.0,\n          // Left face\n          0.0, 0.0,\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n        ];\n\n        geom.verticesIndices = [\n            0, 1, 2,      0, 2, 3,    // Front face\n            4, 5, 6,      4, 6, 7,    // Back face\n            8, 9, 10,     8, 10, 11,  // Top face\n            12, 13, 14,   12, 14, 15, // Bottom face\n            16, 17, 18,   16, 18, 19, // Right face\n            20, 21, 22,   20, 22, 23  // Left face\n        ];\n\n\n\n    this.mesh=new CGL.Mesh(geom);\n\n\n\n};\n\nOps.Gl.Meshes.Cube.prototype = new Op();\n\n\n\n\n\n// ----------------------------------------------------------------\n\n\nOps.Gl.Meshes.Plotter = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Plotter';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.v=this.addInPort(new Port(this,\"value\"));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        // currentShader.setAttributeVertex( self.buffer.itemSize);\n        gl.vertexAttribPointer(currentShader.getAttrVertexPos(),self.buffer.itemSize, gl.FLOAT, false, 0, 0);\n        currentShader.bind();\n        gl.bindBuffer(gl.ARRAY_BUFFER, self.buffer);\n        gl.drawArrays(gl.LINE_STRIP, 0, self.buffer.numItems);\n\n        self.trigger.call();\n    };\n\n    this.buffer = gl.createBuffer();\n    \n    var num=50;\n    this.vertices = [];\n    for(var i=0;i<num;i++)\n    {\n        this.vertices.push(1/num*i);\n        this.vertices.push(Math.random()-0.5);\n        this.vertices.push(0);\n    }\n\n    function bufferData()\n    {\n        gl.lineWidth(4);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, self.buffer);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(self.vertices), gl.STATIC_DRAW);\n        self.buffer.itemSize = 3;\n        self.buffer.numItems = num;\n    }\n    bufferData();\n\n    this.v.onValueChanged=function()\n    {\n        self.vertices.splice(0,3);\n        self.vertices.push(1);\n        self.vertices.push(self.v.val);\n        self.vertices.push(0);\n\n        for(var i=0;i<num*3;i+=3)\n        {\n            self.vertices[i]=1/num*i;\n        }\n\n        bufferData();\n    };\n\n\n};\n\nOps.Gl.Meshes.Plotter.prototype = new Op();\n\n\n// ----------------------------------------------------------------\n\nOps.Gl.Meshes.Triangle = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Triangle';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        // currentShader.setAttributeVertex( self.squareVertexPositionBuffer.itemSize);\n        // gl.vertexAttribPointer(shader.getAttrVertexPos(),self.squareVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);\n        gl.vertexAttribPointer(currentShader.getAttrVertexPos(),self.squareVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);\n\n\n        currentShader.bind();\n        gl.bindBuffer(gl.ARRAY_BUFFER, self.squareVertexPositionBuffer);\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, self.squareVertexPositionBuffer.numItems);\n\n        self.trigger.call();\n    };\n\n    this.squareVertexPositionBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.squareVertexPositionBuffer);\n    this.vertices = [\n         0.0,  1.0,  0.0,\n        -1.0,  -1.0,  0.0,\n         1.0, -1.0,  0.0\n    ];\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(this.vertices), gl.STATIC_DRAW);\n    this.squareVertexPositionBuffer.itemSize = 3;\n    this.squareVertexPositionBuffer.numItems = 3;\n\n\n};\n\nOps.Gl.Meshes.Triangle.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.Shader={};\n\nOps.Gl.Shader.BasicMaterial = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='BasicMaterial';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n\n    this.doRender=function()\n    {\n        currentShader=shader;\n\n        if(self.texture.val)\n        {\n            gl.activeTexture(gl.TEXTURE0);\n            gl.bindTexture(gl.TEXTURE_2D, self.texture.val);\n        }\n\n        self.trigger.call();\n    };\n\n    var srcFrag=''+\n        'precision highp float;\\n'+\n        'varying vec2 texCoord;\\n'+\n        'uniform sampler2D tex;\\n'+\n        'uniform float r;\\n'+\n        'uniform float g;\\n'+\n        'uniform float b;\\n'+\n        'uniform float a;\\n'+\n        '\\n'+\n        'void main()\\n'+\n        '{\\n'+\n\n        '   vec3 col=texture2D(tex,texCoord).rgb;\\n'+\n        '   gl_FragColor = vec4(col,a);\\n'+\n        '}\\n';\n\n\n    var shader=new CGL.Shader();\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n\n\n\n\n    this.r=this.addInPort(new Port(this,\"r\"));\n    this.r.onValueChanged=function()\n    {\n        if(!self.r.uniform) self.r.uniform=new CGL.Uniform(shader,'f','r',self.r.val);\n        else self.r.uniform.setValue(self.r.val);\n    };\n\n    this.g=this.addInPort(new Port(this,\"g\"));\n    this.g.onValueChanged=function()\n    {\n        if(!self.g.uniform) self.g.uniform=new CGL.Uniform(shader,'f','g',self.g.val);\n        else self.g.uniform.setValue(self.g.val);\n    };\n\n    this.b=this.addInPort(new Port(this,\"b\"));\n    this.b.onValueChanged=function()\n    {\n        if(!self.b.uniform) self.b.uniform=new CGL.Uniform(shader,'f','b',self.b.val);\n        else self.b.uniform.setValue(self.b.val);\n    };\n\n    this.a=this.addInPort(new Port(this,\"a\"));\n    this.a.onValueChanged=function()\n    {\n        if(!self.a.uniform) self.a.uniform=new CGL.Uniform(shader,'f','a',self.a.val);\n        else self.a.uniform.setValue(self.a.val);\n    };\n\n    this.r.val=Math.random();\n    this.g.val=Math.random();\n    this.b.val=Math.random();\n    this.a.val=1.0;\n\n    this.render.onTriggered=this.doRender;\n    this.texture=this.addInPort(new Port(this,\"texture\",OP_PORT_TYPE_TEXTURE));\n    this.texture.onValueChanged=function()\n    {\n        if(self.texture.val)\n        {\n            self.textureUniform=new CGL.Uniform(shader,'t','tex',0);\n        }\n        else\n        {\n        }\n    };\n\n    this.doRender();\n};\n\nOps.Gl.Shader.BasicMaterial.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Shader.Schwurbel = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Schwurbel';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.timer=this.addInPort(new Port(this,\"time\"));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.doRender=function()\n    {\n        currentShader=shader;\n        if(!self.timer.uniLoc)\n        {\n            shader.bind();\n            self.timer.uniLoc=gl.getUniformLocation(shader.getProgram(), \"time\");\n        }\n        gl.uniform1f(self.timer.uniLoc, self.timer.val);\n\n        self.trigger.call();\n    };\n\n    var srcFrag=''+\n        'precision mediump float;\\n'+\n        'uniform float time;\\n'+\n        '\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        'float c=sqrt(sin(time*0.02)*cos((time+gl_FragCoord.y)*0.02)+sin(time+gl_FragCoord.x*0.02)*sin(time+gl_FragCoord.y*0.02));\\n'+\n        'gl_FragColor = vec4( c,c,c,1.0);\\n'+\n        '}\\n';\n\n    var shader=new CGL.Shader();\n    shader.compile(shader.getDefaultVertexShader(),srcFrag);\n\n    this.doRender();\n    this.render.onTriggered=this.doRender;\n};\n\nOps.Gl.Shader.Schwurbel.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Shader.Noise = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Noise';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var timeUniform=-1;\n    var timeStart=-1;\n\n    this.doRender=function()\n    {\n        if(timeUniform==-1)\n        {\n            timeStart=Date.now();\n            shader.bind();\n            timeUniform=gl.getUniformLocation(shader.getProgram(), \"time\");\n        }\n\n        gl.uniform1f(timeUniform, (Date.now()-timeStart)/1000);\n        currentShader=shader;\n\n        self.trigger.call();\n    };\n\n    var srcFrag=''+\n        'precision mediump float;\\n'+\n        'uniform float time;\\n'+\n        '\\n'+\n        'float random(vec2 co)\\n'+\n        '{\\n'+\n        '   return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\\n'+\n        '}\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        '   float c=random(time*gl_FragCoord.xy);'+\n        '   gl_FragColor = vec4( c,c,c,1.0);\\n'+\n        '}\\n';\n\n\n    var shader=new CGL.Shader();\n    shader.compile(shader.getDefaultVertexShader(),srcFrag);\n\n    this.doRender();\n    this.render.onTriggered=this.doRender;\n};\n\nOps.Gl.Shader.Noise.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.Matrix={};\n\n\nOps.Gl.Matrix.Translate = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='translate';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.x=this.addInPort(new Port(this,\"x\"));\n    this.y=this.addInPort(new Port(this,\"y\"));\n    this.z=this.addInPort(new Port(this,\"z\"));\n    this.x.val=0.0;\n    this.y.val=0.0;\n    this.z.val=0.0;\n    \n    var vec=vec3.create();\n\n    this.render.onTriggered=function()\n    {\n        vec3.set(vec, self.x.val,self.y.val,self.z.val);\n\n        mat4.translate(mvMatrix,mvMatrix, vec);\n        self.trigger.call();\n    };\n\n};\n\nOps.Gl.Matrix.Translate.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Matrix.Scale = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var DEG2RAD = 3.14159/180.0;\n    this.name='scale';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.scale=this.addInPort(new Port(this,\"scale\"));\n    \n    var vScale=vec3.create();\n    var oldMatrix = mat4.create();\n    var transMatrix = mat4.create();\n    mat4.identity(transMatrix);\n\n    var doScale=false;\n\n    this.render.onTriggered=function()\n    {\n        mat4.copy(oldMatrix, mvMatrix);\n\n        mat4.multiply(mvMatrix,mvMatrix,transMatrix);\n\n        self.trigger.call();\n\n        mat4.copy(mvMatrix,oldMatrix);\n    };\n\n    var updateMatrix=function()\n    {\n        mat4.identity(transMatrix);\n        mat4.scale(transMatrix,transMatrix, vScale);\n    };\n\n    this.scaleChanged=function()\n    {\n        doScale=false;\n        //if(self.scaleX.val!==0.0 || self.scaleY.val!==0.0 || self.scaleZ.val!==0.0)doScale=true;\n        vec3.set(vScale, self.scale.val,self.scale.val,self.scale.val);\n        updateMatrix();\n    };\n\n    this.scale.onValueChanged=this.scaleChanged;\n\n    this.scale.val=1.0;\n\n    updateMatrix();\n};\n\nOps.Gl.Matrix.Scale.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.Matrix.Transform = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var DEG2RAD = 3.14159/180.0;\n    this.name='transform';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.posX=this.addInPort(new Port(this,\"posX\"));\n    this.posY=this.addInPort(new Port(this,\"posY\"));\n    this.posZ=this.addInPort(new Port(this,\"posZ\"));\n\n    this.scaleX=this.addInPort(new Port(this,\"scaleX\"));\n    this.scaleY=this.addInPort(new Port(this,\"scaleY\"));\n    this.scaleZ=this.addInPort(new Port(this,\"scaleZ\"));\n\n    this.rotX=this.addInPort(new Port(this,\"rotX\"));\n    this.rotY=this.addInPort(new Port(this,\"rotY\"));\n    this.rotZ=this.addInPort(new Port(this,\"rotZ\"));\n    \n    var vPos=vec3.create();\n    var vScale=vec3.create();\n    var oldMatrix = mat4.create();\n    var transMatrix = mat4.create();\n    mat4.identity(transMatrix);\n\n    var doScale=false;\n    var doTranslate=false;\n\n    this.render.onTriggered=function()\n    {\n        mat4.copy(oldMatrix, mvMatrix);\n\n        mat4.multiply(mvMatrix,mvMatrix,transMatrix);\n\n        self.trigger.call();\n\n        mat4.copy(mvMatrix,oldMatrix);\n    };\n\n    var updateMatrix=function()\n    {\n        mat4.identity(transMatrix);\n        if(doTranslate)mat4.translate(transMatrix,transMatrix, vPos);\n\n        if(self.rotX.val!==0)mat4.rotateX(transMatrix,transMatrix, self.rotX.val*DEG2RAD);\n        if(self.rotY.val!==0)mat4.rotateY(transMatrix,transMatrix, self.rotY.val*DEG2RAD);\n        if(self.rotZ.val!==0)mat4.rotateZ(transMatrix,transMatrix, self.rotZ.val*DEG2RAD);\n\n        if(doScale)mat4.scale(transMatrix,transMatrix, vScale);\n    };\n\n    this.translateChanged=function()\n    {\n        doTranslate=false;\n        if(self.posX.val!==0.0 || self.posY.val!==0.0 || self.posZ.val!==0.0)doTranslate=true;\n        vec3.set(vPos, self.posX.val,self.posY.val,self.posZ.val);\n        updateMatrix();\n    };\n\n    this.scaleChanged=function()\n    {\n        doScale=false;\n        if(self.scaleX.val!==0.0 || self.scaleY.val!==0.0 || self.scaleZ.val!==0.0)doScale=true;\n        vec3.set(vScale, self.scaleX.val,self.scaleY.val,self.scaleZ.val);\n        updateMatrix();\n    };\n\n    this.rotChanged=function()\n    {\n        updateMatrix();\n    };\n\n    this.rotX.onValueChanged=this.rotChanged;\n    this.rotY.onValueChanged=this.rotChanged;\n    this.rotZ.onValueChanged=this.rotChanged;\n\n    this.scaleX.onValueChanged=this.scaleChanged;\n    this.scaleY.onValueChanged=this.scaleChanged;\n    this.scaleZ.onValueChanged=this.scaleChanged;\n\n    this.posX.onValueChanged=this.translateChanged;\n    this.posY.onValueChanged=this.translateChanged;\n    this.posZ.onValueChanged=this.translateChanged;\n\n    this.rotX.val=0.0;\n    this.rotY.val=0.0;\n    this.rotZ.val=0.0;\n\n    this.scaleX.val=1.0;\n    this.scaleY.val=1.0;\n    this.scaleZ.val=1.0;\n\n    this.posX.val=0.0;\n    this.posY.val=0.0;\n    this.posZ.val=0.0;\n\n    updateMatrix();\n};\n\nOps.Gl.Matrix.Transform.prototype = new Op();\n\n\n\n\n\n","// https://github.com/automat/foam-gl\n// http://howlerjs.com/\n//http://learningwebgl.com/lessons/lesson01/index.html\n\n\nOps.Log = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='logger';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.input=this.addInPort(new Port(this,\"input\"));\n    this.input.val='';\n\n    this.exec=function()\n    {\n        console.log(\"[log] \" + self.input.val);\n    };\n\n    this.exe.onTriggered=this.exec;\n    this.input.onValueChanged=this.exec;\n};\nOps.Log.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\n\nOps.CallsPerSecond = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='CallsPerSecond';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.timeStart=0;\n    this.cps=0;\n\n    this.exe.onTriggered=function()\n    {\n        if(self.timeStart===0)self.timeStart=Date.now();\n        var now = Date.now();\n\n        if(now-self.timeStart>1000)\n        {\n            self.timeStart=Date.now();\n            console.log('cps: '+self.cps);\n            self.cps=0;\n        }\n\n        self.cps++;\n    };\n};\nOps.CallsPerSecond.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\nOps.Value = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Value';\n    this.v=this.addInPort(new Port(this,\"value\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.v.val;\n    };\n\n    this.v.onValueChanged=this.exec;\n};\n\nOps.Value.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\n\nOps.TimeLineTime = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='TimeLineTime';\n    this.theTime=this.addOutPort(new Port(this,\"time\"));\n\n    this.onAnimFrame=function(time)\n    {\n        this.theTime.val=time;\n    };\n\n};\nOps.TimeLineTime.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\n\n\n\nOps.Repeat = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Repeat';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.num=this.addInPort(new Port(this,\"num\"));\n    this.num.val=5;\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n    this.idx=this.addOutPort(new Port(this,\"index\"));\n\n    this.exe.onTriggered=function()\n    {\n\n        for(var i=0;i<self.num.value;i++)\n        {\n            self.idx.val=i;\n            self.trigger.call();\n        }\n\n    };\n};\nOps.Repeat.prototype = new Op();\n\n\n\n\n// ---------------------------------------------------------------------------\n\n\nOps.IfTrueThen = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='if true then';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.bool=this.addInPort(new Port(this,\"boolean\"));\n    this.bool.val=false;\n\n    this.triggerThen=this.addOutPort(new Port(this,\"then\",OP_PORT_TYPE_FUNCTION));\n    this.triggerElse=this.addOutPort(new Port(this,\"else\",OP_PORT_TYPE_FUNCTION));\n\n    this.exe.onTriggered=function()\n    {\n        if(self.bool.val===true)\n        {\n            self.triggerThen.call();\n        }\n        else\n        {\n            self.triggerElse.call();\n        }\n    };\n\n    this.bool.onValueChanged=function()\n    {\n        self.exe.onTriggered();\n    };\n\n};\nOps.IfTrueThen.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------\n\n\nOps.Group = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='group';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.triggers=[];\n\n    for(var i=0;i<10;i++)\n    {\n        this.triggers.push( this.addOutPort(new Port(this,\"trigger \"+i,OP_PORT_TYPE_FUNCTION)) );\n    }\n\n    this.exe.onTriggered=function()\n    {\n        for(var i in self.triggers)\n        {\n            self.triggers[i].call();\n        }\n\n    };\n\n\n};\nOps.Group.prototype = new Op();\n\n\n\n\n\n// ---------------------------------------------------------------------------\n\nOps.Interval = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='Interval';\n    this.timeOutId=-1;\n    this.interval=this.addInPort(new Port(this,\"interval\"));\n    this.interval.val=1000;\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.exec=function()\n    {\n        if(this.timeOutId!=-1)return;\n        var self=this;\n\n        this.timeOutId=setTimeout(function()\n        {\n            self.timeOutId=-1;\n            self.trigger.call();\n            self.exec();\n        },\n        this.interval.val );\n    };\n\n    this.exec();\n\n};\n\nOps.Interval.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\n// --------------------------------------------------------------------------\n\nOps.Anim={};\n\nOps.Anim.SinusAnim = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='SinusAnim';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    var self=this;\n\n    this.exe.onTriggered=function()\n    {\n        self.result.val=Math.sin(Date.now()/1000.0);\n    };\n\n    this.exe.onTriggered();\n\n};\n\nOps.Anim.SinusAnim.prototype = new Op();\n\n\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Anim.RelativeTime = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='RelativeTime';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    var self=this;\n    var startTime=Date.now()/1000.0;\n\n    this.exe.onTriggered=function()\n    {\n        self.result.val=Date.now()/1000.0-startTime;\n    };\n\n    this.exe.onTriggered();\n\n};\n\nOps.Anim.RelativeTime.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\nOps.Input={};\n\nOps.Input.GamePad = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='GamePad';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.numPads=this.addOutPort(new Port(this,\"numPads\"));\n    this.axis1=this.addOutPort(new Port(this,\"axis1\"));\n    this.axis2=this.addOutPort(new Port(this,\"axis2\"));\n    this.axis3=this.addOutPort(new Port(this,\"axis3\"));\n    this.axis4=this.addOutPort(new Port(this,\"axis4\"));\n    this.button0=this.addOutPort(new Port(this,\"button0\"));\n    this.button1=this.addOutPort(new Port(this,\"button1\"));\n    this.button2=this.addOutPort(new Port(this,\"button2\"));\n    this.button3=this.addOutPort(new Port(this,\"button3\"));\n    this.button4=this.addOutPort(new Port(this,\"button4\"));\n\n    var self=this;\n    var startTime=Date.now()/1000.0;\n\n    this.exe.onTriggered=function()\n    {\n        var gamePads=navigator.getGamepads();\n        var count=0;\n\n        for(var gp in gamePads)\n        {\n            if(gamePads[gp].axes)\n            {\n                self.axis1.val=gamePads[gp].axes[0];\n                self.axis2.val=gamePads[gp].axes[1];\n                self.axis3.val=gamePads[gp].axes[2];\n                self.axis4.val=gamePads[gp].axes[3];\n\n                self.button0.val=gamePads[gp].buttons[0].pressed;\n                self.button0.val=gamePads[gp].buttons[1].pressed;\n                self.button2.val=gamePads[gp].buttons[2].pressed;\n                self.button3.val=gamePads[gp].buttons[3].pressed;\n                self.button4.val=gamePads[gp].buttons[4].pressed;\n\n                count++;\n            }\n        }\n\n        self.numPads.val=count;\n    };\n\n    this.exe.onTriggered();\n\n};\n\nOps.Input.GamePad.prototype = new Op();\n\n","Ops.Math={};\n\n\nOps.Math.Random = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='random';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.exe.onTriggered=function()\n    {\n        self.result.val=Math.random();\n    };\n\n    this.exe.onTriggered();\n};\n\nOps.Math.Random.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\n\n\nOps.Math.MapRange = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='map value range';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.v=this.addInPort(new Port(this,\"value\"));\n    this.old_min=this.addInPort(new Port(this,\"old min\"));\n    this.old_max=this.addInPort(new Port(this,\"old max\"));\n    this.new_min=this.addInPort(new Port(this,\"new min\"));\n    this.new_max=this.addInPort(new Port(this,\"new max\"));\n\n    this.exec= function()\n    {\n        if(self.v.val>self.old_max.val)\n        {\n            self.result.val=self.new_max.val;\n            return;\n        }\n        else\n        if(self.v.val<self.old_min.val)\n        {\n            self.result.val=self.new_min.val;\n            return;\n        }\n\n        var nMin=parseFloat(self.new_min.val);\n        var nMax=parseFloat(self.new_max.val);\n        var oMin=parseFloat(self.old_min.val);\n        var oMax=parseFloat(self.old_max.val);\n        var x=parseFloat(self.v.val);\n\n        var reverseInput = false;\n        var oldMin = Math.min( oMin, oMax );\n        var oldMax = Math.max( oMin, oMax );\n        if(oldMin!= oMin) reverseInput = true;\n\n        var reverseOutput = false;\n        var newMin = Math.min( nMin, nMax );\n        var newMax = Math.max( nMin, nMax );\n        if(newMin != nMin) reverseOutput = true;\n\n        var portion=0;\n\n        if(reverseInput) portion = (oldMax-x)*(newMax-newMin)/(oldMax-oldMin);\n            else portion = (x-oldMin)*(newMax-newMin)/(oldMax-oldMin);\n        \n        if(reverseOutput) self.result.val = newMax - portion;\n            else self.result.val = portion + newMin;\n\n    };\n\n    this.v.val=0;\n    this.old_min.val=-1;\n    this.old_max.val=1;\n    this.new_min.val=0;\n    this.new_max.val=1;\n\n\n    this.v.onValueChanged=this.exec;\n    this.old_min.onValueChanged=this.exec;\n    this.old_max.onValueChanged=this.exec;\n    this.new_min.onValueChanged=this.exec;\n    this.new_max.onValueChanged=this.exec;\n\n    this.exec();\n\n};\n\nOps.Math.MapRange.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Abs = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    this.name='abs';\n    this.number=this.addInPort(new Port(this,\"number\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.number.onValueChanged=function()\n    {\n        self.result.val=Math.abs(self.number.val);\n    };\n};\n\nOps.Math.Abs.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Sin = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    this.name='Sinus';\n    this.number=this.addInPort(new Port(this,\"number\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.number.onValueChanged=function()\n    {\n        self.result.val=Math.sin(self.number.val);\n    };\n};\n\nOps.Math.Sin.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Sum = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='sum';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=parseFloat(self.number1.val)+parseFloat(self.number2.val);\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Sum.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Multiply = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='multiply';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val*self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n\n};\n\nOps.Math.Multiply.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Divide = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Divide';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val/self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Divide.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\nOps.Math.Compare={};\n\n\n\n\nOps.Math.Compare.IsEven = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='isEven';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n\n    this.exec= function()\n    {\n        self.result.val=!( self.number1.val & 1 );\n    };\n\n    this.number1.onValueChanged=this.exec;\n};\n\nOps.Math.Compare.IsEven.prototype = new Op();\n\n\n\nOps.Math.Compare.Greater = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Greater';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val>self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Compare.Greater.prototype = new Op();\n\n\n\n\n\n\nOps.Math.Compare.Between = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Between';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number=this.addInPort(new Port(this,\"value\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n    this.number.val=2.0;\n    this.number1.val=1.0;\n    this.number2.val=3.0;\n\n    this.exec= function()\n    {\n        self.result.val=\n            (\n                self.number.val>Math.min(self.number1.val,self.number2.val) &&\n                self.number.val<Math.max(self.number1.val,self.number2.val)\n            );\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n    this.number.onValueChanged=this.exec;\n};\nOps.Math.Compare.Between.prototype = new Op();\n\n\n\n\nOps.Math.Compare.Lesser = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Lesser';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val<self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n\n};\n\nOps.Math.Compare.Lesser.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Math.Compare.Equals = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Equals';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val==self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Compare.Equals.prototype = new Op();\n\n"],"sourceRoot":"/source/"}