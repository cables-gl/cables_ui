{"version":3,"sources":["timer.js","utils.js","cgl_mesh.js","cgl_shader.js","cgl_state.js","cgl_texture.js","holo.js","ops.gl.js","ops.js","ops.math.js"],"names":["Timer","getTime","lastTime","Date","now","timeStart","timeOffset","self","this","currentTime","paused","update","togglePlay","play","pause","setOffset","val","generateUUID","d","uuid","replace","c","r","Math","random","floor","toString","ajaxRequest","url","callback","request","XMLHttpRequest","open","responseType","onload","e","target","response","send","CGL","DEG2RAD","Mesh","geom","bufTexCoords","bufVertices","gl","createBuffer","bufVerticesIndizes","setGeom","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","vertices","STATIC_DRAW","itemSize","numItems","length","ELEMENT_ARRAY_BUFFER","Uint16Array","verticesIndices","texCoords","render","shader","bind","GL","enableVertexAttribArray","getAttrVertexPos","getAttrTexCoords","vertexAttribPointer","FLOAT","drawElements","TRIANGLES","UNSIGNED_SHORT","Geometry","faceVertCount","texCoordsIndices","clear","addFace","a","b","face","iv","push","parseOBJ","buff","_readline","off","s","String","fromCharCode","groups","c_norms","i_norms","cg","from","to","Uint8Array","line","cds","split","x","parseFloat","y","z","v0a","v1a","v2a","vi0","parseInt","vi1","vi2","ui0","ui1","ui2","ni0","ni1","ni2","vlen","ulen","nlen","v3a","vi3","ui3","ni3","Uniform","_shader","_type","_name","_value","loc","name","type","value","needsUpdate","addUniform","getType","getName","resetLoc","updateValueF","getUniformLocation","getProgram","uniform1f","setValueF","v","updateValueT","console","log","uniform1i","setValueT","setValue","updateValue","Shader","program","uniforms","needsRecompile","removeUniform","i","splice","uni","getDefaultVertexShader","getDefaultFragmentShader","srcVert","srcFrag","setSource","projMatrixUniform","mvMatrixUniform","attrTexCoords","attrVertexPos","hasTextureUniforms","compile","defines","endl","vs","fs","vshader","createShader","VERTEX_SHADER","fshader","linkProgram","createProgram","getAttribLocation","useProgram","uniformMatrix4fv","cgl","pMatrix","mvMatrix","str","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","FRAGMENT_SHADER","getShaderInfoLog","getProgramParameter","LINK_STATUS","getProgramInfoLog","vstr","fstr","attachShader","State","mvMatrixStack","pMatrixStack","shaderStack","mat4","create","identity","simpleShader","currentShader","beginFrame","pushShader","endFrame","popShader","warn","getShader","pop","pushMvMatrix","copy","popMvMatrix","pushPMatrix","popPMatrix","Texture","tex","createTexture","slot","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","setSize","w","h","arr","uarr","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR","texImage2D","RGBA","UNSIGNED_BYTE","initTexture","img","image","TEXTURE_MAG_FILTER","NEAREST","load","texture","Image","src","PORT_DIR_IN","PORT_DIR_OUT","OP_PORT_TYPE_VALUE","OP_PORT_TYPE_FUNCTION","OP_PORT_TYPE_TEXTURE","Ops","Op","objName","portsOut","portsIn","posts","uiAttribs","id","addOutPort","p","direction","parent","addInPort","execute","exec","printInfo","ipo","removeLinks","getPort","ipi","findFittingPort","otherPort","Link","canLink","getSerialized","op","getPortByName","Port","links","valueBeforeLink","__defineGetter__","__defineSetter__","isLinked","onValueChanged","onTriggered","addLink","l","removeLinkTo","p2","portIn","portOut","remove","isLinkedTo","call","goals","getTypeString","obj","removeLink","link","scene","getOtherPort","onUnLink","p1","objIn","objOut","canLinkText","Scene","ops","timer","animFrameOps","deleteOp","addOp","eval","hasOwnProperty","onAdd","opid","tryRelink","reLinkP1","reLinkP2","onDelete","requestAnimationFrame","time","onAnimFrame","op1","port1Name","op2","port2Name","port1","port2","onLink","serialize","JSON","stringify","getOpById","deSerialize","opinid","opoutid","inName","outName","found","parse","iop","port","ipi2","ili","prototype","Gl","Renderer","apply","arguments","trigger","initTranslate","vec3","set","enable","DEPTH_TEST","clearColor","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","viewport","canvas","clientWidth","clientHeight","perspective","translate","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","document","getElementById","getContext","LeapMotion","transX","transY","transZ","finger0X","finger0Y","finger0Z","Leap","loop","frame","_translation","fingers","tipPosition","ClearColor","g","ClearDepth","TextureEmpty","width","height","textureOut","sizeChanged","filename","Meshes","Rectangle","mesh","FullscreenRectangle","Circle","calc","oldPosX","oldPosY","segments","percent","degInRad","posx","cos","radius","posy","sin","ObjMesh","unwrap","ind","crd","cpi","ncrd","Array","j","Cube","Plotter","lineWidth","buffer","num","drawArrays","LINE_STRIP","Triangle","BasicMaterial","doRender","uniform","textureUniform","Schwurbel","uniLoc","Noise","timeUniform","Matrix","Translate","vec","Scale","scale","vScale","transMatrix","doScale","multiply","updateMatrix","scaleChanged","Transform","posX","posY","posZ","scaleX","scaleY","scaleZ","rotX","rotY","rotZ","vPos","doTranslate","rotateX","rotateY","rotateZ","translateChanged","rotChanged","RandomCluster","reset","randoms","randomsRot","randomsFloats","fromValues","size","exe","idx","rnd","Render2Texture","rttFramebuffer","createFramebuffer","bindFramebuffer","FRAMEBUFFER","renderbuffer","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","framebufferTexture2D","COLOR_ATTACHMENT0","framebufferRenderbuffer","DEPTH_ATTACHMENT","Log","input","CallsPerSecond","cps","Value","result","TimeLineTime","theTime","Repeat","IfTrueThen","bool","triggerThen","triggerElse","Group","triggers","Interval","timeOutId","interval","setTimeout","Anim","SinusAnim","RelativeTime","startTime","Input","GamePad","numPads","axis1","axis2","axis3","axis4","button0","button1","button2","button3","button4","gamePads","navigator","getGamepads","count","gp","axes","buttons","pressed","Random","Clamp","clamp","min","max","SmoothStep","smoothstep","MapRange","old_min","old_max","new_min","new_max","nMin","nMax","oMin","oMax","reverseInput","oldMin","oldMax","reverseOutput","newMin","newMax","portion","Abs","number","abs","Sin","Sum","number1","number2","Multiply","Divide","Compare","IsEven","Greater","Between","Lesser","Equals"],"mappings":"AAEA,QAAAA,SAUA,QAAAC,KAGA,MADAC,IAAAC,KAAAC,MAAAC,GAAA,IACAH,EAAAI,EAXA,GAAAC,GAAAC,KACAH,EAAAF,KAAAC,MACAE,EAAA,EAEAG,EAAA,EACAP,EAAA,EACAQ,GAAA,CASAF,MAAAG,OAAA,WAEA,MAAAD,GAAA,OACAD,EAAAR,KAKAO,KAAAP,QAAA,WAEA,MAAAQ,IAGAD,KAAAI,WAAA,WAEAF,EAAAH,EAAAM,OACAN,EAAAO,SAGAN,KAAAO,UAAA,SAAAC,GAEA,EAAAP,EAAAO,GAEAX,EAAAF,KAAAC,MACAE,EAAA,EACAG,EAAA,IAIAH,GAAAU,EACAP,EAAAP,EAAAI,IAMAE,KAAAK,KAAA,WAEAR,EAAAF,KAAAC,MACAM,GAAA,GAGAF,KAAAM,MAAA,WAEAR,EAAAG,EACAC,GAAA,GChEA,QAAAO,gBAEA,GAAAC,IAAA,GAAAf,OAAAF,UACAkB,EAAA,uCAAAC,QAAA,QAAA,SAAAC,GAEA,GAAAC,IAAAJ,EAAA,GAAAK,KAAAC,UAAA,GAAA,CAEA,OADAN,GAAAK,KAAAE,MAAAP,EAAA,KACA,KAAAG,EAAAC,EAAA,EAAAA,EAAA,GAAAI,SAAA,KAEA,OAAAP,GAIA,QAAAQ,aAAAC,EAAAC,GAEA,GAAAC,GAAA,GAAAC,eACAD,GAAAE,KAAA,MAAAJ,GAAA,GACAE,EAAAG,aAAA,cACAH,EAAAI,OAAA,SAAAC,GAEAN,EAAAM,EAAAC,OAAAC,WAEAP,EAAAQ,OCtBA,GAAAC,KAAAA,MAEAC,QAAA,QAAA,IAKAD,KAAAE,KAAA,SAAAC,GAEA,GAAAC,GAAA,GACAC,EAAAC,GAAAC,eACAC,EAAAF,GAAAC,cAEAtC,MAAAwC,QAAA,SAAAN,GAGAG,GAAAI,WAAAJ,GAAAK,aAAAN,GACAC,GAAAM,WAAAN,GAAAK,aAAA,GAAAE,cAAAV,EAAAW,UAAAR,GAAAS,aACAV,EAAAW,SAAA,EACAX,EAAAY,SAAAd,EAAAW,SAAAI,OAAA,EAGAZ,GAAAI,WAAAJ,GAAAa,qBAAAX,GACAF,GAAAM,WAAAN,GAAAa,qBAAA,GAAAC,aAAAjB,EAAAkB,iBAAAf,GAAAS,aACAP,EAAAQ,SAAA,EACAR,EAAAS,SAAAd,EAAAkB,gBAAAH,OAEAf,EAAAmB,UAAAJ,OAAA,IAEA,IAAAd,IAAAA,EAAAE,GAAAC,gBACAD,GAAAI,WAAAJ,GAAAK,aAAAP,GACAE,GAAAM,WAAAN,GAAAK,aAAA,GAAAE,cAAAV,EAAAmB,WAAAhB,GAAAS,aACAX,EAAAY,SAAA,EACAZ,EAAAa,SAAAd,EAAAmB,UAAAJ,OAAAd,EAAAY,WAKA/C,KAAAwC,QAAAN,GAGAlC,KAAAsD,OAAA,SAAAC,GAEAA,EAAAC,OAEAC,GAAAC,wBAAAH,EAAAI,oBACA,IAAAxB,GAAAsB,GAAAC,wBAAAH,EAAAK,oBAEAvB,GAAAI,WAAAJ,GAAAK,aAAAN,GACAC,GAAAwB,oBAAAN,EAAAI,mBAAAvB,EAAAW,SAAAV,GAAAyB,OAAA,EAAA,EAAA,GAEA,IAAA3B,IAEAE,GAAAI,WAAAJ,GAAAK,aAAAP,GACAE,GAAAwB,oBAAAN,EAAAK,mBAAAzB,EAAAY,SAAAV,GAAAyB,OAAA,EAAA,EAAA,IAGAzB,GAAAI,WAAAJ,GAAAa,qBAAAX,GACAF,GAAA0B,aAAA1B,GAAA2B,UAAAzB,EAAAS,SAAAX,GAAA4B,eAAA,KAKAlC,IAAAmC,SAAA,WAEAlE,KAAAmE,cAAA,EACAnE,KAAA6C,YACA7C,KAAAoD,mBACApD,KAAAqD,aACArD,KAAAoE,oBAEApE,KAAAqE,MAAA,WAEArE,KAAA6C,SAAAI,OAAA,EACAjD,KAAAoD,gBAAAH,OAAA,EACAjD,KAAAqD,UAAAJ,OAAA,EACAjD,KAAAoE,iBAAAnB,OAAA,GAGAjD,KAAAsE,QAAA,SAAAC,EAAAC,EAAA3D,GAIA,IAAA,GAFA4D,IAAA,GAAA,GAAA,IAEAC,EAAA,EAAAA,EAAA1E,KAAA6C,SAAA6B,GAAA,EAEA1E,KAAA6C,SAAA6B,EAAA,IAAAH,EAAA,IACAvE,KAAA6C,SAAA6B,EAAA,IAAAH,EAAA,IACAvE,KAAA6C,SAAA6B,EAAA,IAAAH,EAAA,KAAAE,EAAA,GAAAC,EAAA,GAEA1E,KAAA6C,SAAA6B,EAAA,IAAAF,EAAA,IACAxE,KAAA6C,SAAA6B,EAAA,IAAAF,EAAA,IACAxE,KAAA6C,SAAA6B,EAAA,IAAAF,EAAA,KAAAC,EAAA,GAAAC,EAAA,GAEA1E,KAAA6C,SAAA6B,EAAA,IAAA7D,EAAA,IACAb,KAAA6C,SAAA6B,EAAA,IAAA7D,EAAA,IACAb,KAAA6C,SAAA6B,EAAA,IAAA7D,EAAA,KAAA4D,EAAA,GAAAC,EAAA,EAGA,KAAAD,EAAA,KAEAzE,KAAA6C,SAAA8B,KAAAJ,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACAE,EAAA,IAAAzE,KAAA6C,SAAAI,OAAA,GAAA,GAGA,IAAAwB,EAAA,KAEAzE,KAAA6C,SAAA8B,KAAAH,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACAC,EAAA,IAAAzE,KAAA6C,SAAAI,OAAA,GAAA,GAGA,IAAAwB,EAAA,KAEAzE,KAAA6C,SAAA8B,KAAA9D,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACA4D,EAAA,IAAAzE,KAAA6C,SAAAI,OAAA,GAAA,GAGAjD,KAAAoD,gBAAAuB,KAAAF,EAAA,IACAzE,KAAAoD,gBAAAuB,KAAAF,EAAA,IACAzE,KAAAoD,gBAAAuB,KAAAF,EAAA,MAQAG,SAAA,SAAAC,GAGAC,UAAA,SAAAP,EAAAQ,GAGA,IADA,GAAAC,GAAA,GACA,IAAAT,EAAAQ,IAAAC,GAAAC,OAAAC,aAAAX,EAAAQ,KACA,OAAAC,GAGA,IAAA9C,GAAA,GAAAH,KAAAmC,QACAhC,GAAAiD,UAGAjD,EAAAkD,WAGAlD,EAAAmD,UAMA,KAJA,GAAAC,IAAAC,KAAA,EAAAC,GAAA,GACAT,EAAA,EACAR,EAAA,GAAAkB,YAAAZ,GAEAE,EAAAR,EAAAtB,QACA,CACA,GAAAyC,GAAAZ,UAAAP,EAAAQ,EACAA,IAAAW,EAAAzC,OAAA,EACAyC,EAAAA,EAAA9E,QAAA,WAAA,IACA8E,EAAAA,EAAA9E,QAAA,eAAA,GACA,IAAA+E,GAAAD,EAAAE,MAAA,IAOA,IANA,KAAAD,EAAA,KAEAL,EAAAE,GAAAtD,EAAAkB,gBAAAH,OACA,MAAAf,EAAAiD,OAAAQ,EAAA,MAAAzD,EAAAiD,OAAAQ,EAAA,KAAAJ,KAAArD,EAAAkB,gBAAAH,OAAAuC,GAAA,IACAF,EAAApD,EAAAiD,OAAAQ,EAAA,KAEA,KAAAA,EAAA,GACA,CACA,GAAAE,GAAAC,WAAAH,EAAA,IACAI,EAAAD,WAAAH,EAAA,IACAK,EAAAF,WAAAH,EAAA,GACAzD,GAAAW,SAAA8B,KAAAkB,EAAAE,EAAAC,GAEA,GAAA,MAAAL,EAAA,GACA,CACA,GAAAE,GAAAC,WAAAH,EAAA,IACAI,EAAA,EAAAD,WAAAH,EAAA,GACAzD,GAAAmB,UAAAsB,KAAAkB,EAAAE,GAEA,GAAA,MAAAJ,EAAA,GACA,CACA,GAAAE,GAAAC,WAAAH,EAAA,IACAI,EAAAD,WAAAH,EAAA,IACAK,EAAAF,WAAAH,EAAA,GACAzD,GAAAkD,QAAAT,KAAAkB,EAAAE,EAAAC,GAEA,GAAA,KAAAL,EAAA,GACA,CACA,GAAAM,GAAAN,EAAA,GAAAC,MAAA,KAAAM,EAAAP,EAAA,GAAAC,MAAA,KAAAO,EAAAR,EAAA,GAAAC,MAAA,KACAQ,EAAAC,SAAAJ,EAAA,IAAA,EAAAK,EAAAD,SAAAH,EAAA,IAAA,EAAAK,EAAAF,SAAAF,EAAA,IAAA,EACAK,EAAAH,SAAAJ,EAAA,IAAA,EAAAQ,EAAAJ,SAAAH,EAAA,IAAA,EAAAQ,EAAAL,SAAAF,EAAA,IAAA,EACAQ,EAAAN,SAAAJ,EAAA,IAAA,EAAAW,EAAAP,SAAAH,EAAA,IAAA,EAAAW,EAAAR,SAAAF,EAAA,IAAA,EAEAW,EAAA5E,EAAAW,SAAAI,OAAA,EAAA8D,EAAA7E,EAAAmB,UAAAJ,OAAA,EAAA+D,EAAA9E,EAAAkD,QAAAnC,OAAA,CAQA,IAPA,EAAAmD,IAAAA,EAAAU,EAAAV,EAAA,GAAA,EAAAE,IAAAA,EAAAQ,EAAAR,EAAA,GAAA,EAAAC,IAAAA,EAAAO,EAAAP,EAAA,GACA,EAAAC,IAAAA,EAAAO,EAAAP,EAAA,GAAA,EAAAC,IAAAA,EAAAM,EAAAN,EAAA,GAAA,EAAAC,IAAAA,EAAAK,EAAAL,EAAA,GACA,EAAAC,IAAAA,EAAAK,EAAAL,EAAA,GAAA,EAAAC,IAAAA,EAAAI,EAAAJ,EAAA,GAAA,EAAAC,IAAAA,EAAAG,EAAAH,EAAA,GAEA3E,EAAAkB,gBAAAuB,KAAAyB,EAAAE,EAAAC,GACArE,EAAAkC,iBAAAO,KAAA6B,EAAAC,EAAAC,GACAxE,EAAAmD,QAAAV,KAAAgC,EAAAC,EAAAC,GACA,GAAAlB,EAAA1C,OACA,CACA,GAAAgE,GAAAtB,EAAA,GAAAC,MAAA,KACAsB,EAAAb,SAAAY,EAAA,IAAA,EAAAE,EAAAd,SAAAY,EAAA,IAAA,EAAAG,EAAAf,SAAAY,EAAA,IAAA,CACA,GAAAC,IAAAA,EAAAJ,EAAAI,EAAA,GACA,EAAAC,IAAAA,EAAAJ,EAAAI,EAAA,GACA,EAAAC,IAAAA,EAAAJ,EAAAI,EAAA,GACAlF,EAAAkB,gBAAAuB,KAAAyB,EAAAG,EAAAW,GACAhF,EAAAkC,iBAAAO,KAAA6B,EAAAE,EAAAS,GACAjF,EAAAmD,QAAAV,KAAAgC,EAAAE,EAAAO,KAMA,MAFA9B,GAAAE,GAAAtD,EAAAkB,gBAAAH,OAEAf,ECpNA,IAAAH,KAAAA,OAIAA,KAAAsF,QAAA,SAAAC,EAAAC,EAAAC,EAAAC,GAEA,GAAA1H,GAAAC,KACA0H,EAAA,GACAC,EAAAH,EACAI,EAAAL,EACAM,EAAA,EACAtE,EAAA+D,CACAtH,MAAA8H,aAAA,EAEAvE,EAAAwE,WAAA/H,MAEAA,KAAAgI,QAAA,WAAA,MAAAJ,IACA5H,KAAAiI,QAAA,WAAA,MAAAN,IAEA3H,KAAAkI,SAAA,WAAAR,EAAA,IAEA1H,KAAAmI,aAAA,WAEA,IAAAT,IAAAA,EAAArF,GAAA+F,mBAAA7E,EAAA8E,aAAAV,IACAtF,GAAAiG,UAAAZ,EAAAG,IAGA7H,KAAAuI,UAAA,SAAAC,GAEAzI,EAAA+H,aAAA,EACAD,EAAAW,GAGAxI,KAAAyI,aAAA,WAEA,IAAAf,IAEAA,EAAArF,GAAA+F,mBAAA7E,EAAA8E,aAAAV,GACA,IAAAD,GAAAgB,QAAAC,IAAA,0BAGAtG,GAAAuG,UAAAlB,EAAA,IAGA1H,KAAA6I,UAAA,SAAAL,GAEAzI,EAAA+H,aAAA,EACAD,EAAAW,GAGA,KAAAZ,IAEA5H,KAAA8I,SAAA9I,KAAAuI,UACAvI,KAAA+I,YAAA/I,KAAAmI,cAGA,KAAAP,IAEA5H,KAAA8I,SAAA9I,KAAA6I,UACA7I,KAAA+I,YAAA/I,KAAAyI,cAGAzI,KAAA8I,SAAArB,IAKA1F,IAAAiH,OAAA,WAEA,GAAAjJ,GAAAC,KACAiJ,GAAA,EACAC,KACAC,GAAA,CAEAnJ,MAAAoJ,cAAA,SAAAzB,GAEAe,QAAAC,IAAA,WAAAO,EAAAjG,OACA,KAAA,GAAAoG,KAAAH,GAEA,GAAAA,EAAAG,GAAApB,WAAAN,EACA,CACAuB,EAAAI,OAAAD,EAAA,EACA,OAGAF,GAAA,EACAT,QAAAC,IAAAO,EAAAjG,SAIAjD,KAAA+H,WAAA,SAAAwB,GAEAL,EAAAvE,KAAA4E,GACAJ,GAAA,GAGAnJ,KAAAwJ,uBAAA,WAEA,MAAA,sPAcAxJ,KAAAyJ,yBAAA,WAEA,MAAA,2FASAzJ,KAAA0J,QAAA1J,KAAAwJ,yBACAxJ,KAAA2J,QAAA3J,KAAAyJ,2BAEAzJ,KAAA4J,UAAA,SAAAF,EAAAC,GAEA3J,KAAA0J,QAAAA,EACA1J,KAAA2J,QAAAA,EAGA,IAAAE,GAAA,GACAC,EAAA,GAEAC,EAAA,GACAC,EAAA,EAEAhK,MAAA4D,iBAAA,WAAA,MAAAmG,IACA/J,KAAA2D,iBAAA,WAAA,MAAAqG,IAEAhK,KAAAiK,mBAAA,WAEA,IAAA,GAAAZ,KAAAH,GAEA,GAAA,KAAAA,EAAAG,GAAArB,UAAA,OAAA,CAEA,QAAA,GAGAhI,KAAAkK,QAAA,WAEA,GAAAC,GAAA,EACApK,GAAAkK,uBAAAE,GAAA,uBAAAC,QAEA1B,QAAAC,IAAA,qBACAD,QAAAC,IAAA,iBAAA5I,EAAAkK,qBAGA,IAAAI,GAAAF,EAAApK,EAAA2J,QACAY,EAAAH,EAAApK,EAAA4J,OAEA,IAAAV,EAOA,CACAP,QAAAC,IAAA,wBAEA5I,EAAAwK,QAAAC,aAAAH,EAAAhI,GAAAoI,cAAA1K,EAAAwK,SACAxK,EAAA2K,QAAAF,aAAAF,EAAAjI,GAAAoI,cAAA1K,EAAA2K,SACAC,YAAA1B,GACAa,EAAA,EAEA,KAAA,GAAAT,KAAAH,GAAAA,EAAAG,GAAAnB,eAbAQ,SAAAC,IAAA,wBAEAM,EAAA2B,cAAAP,EAAAC,EAAArB,EAgBAE,IAAA,GAGAnJ,KAAAwD,KAAA,aAEAyF,GAAAE,IAAApJ,EAAAmK,UAEA,IAAAJ,IAEAC,EAAA1H,GAAAwI,kBAAA5B,EAAA,gBACAe,EAAA3H,GAAAwI,kBAAA5B,EAAA,aAEAY,EAAAxH,GAAA+F,mBAAAa,EAAA,cACAa,EAAAzH,GAAA+F,mBAAAa,EAAA,aAGAxF,GAAAqH,WAAA7B,EAEA,KAAA,GAAAI,KAAAH,GAEAA,EAAAG,GAAAvB,aAAAoB,EAAAG,GAAAN,aAGA1G,IAAA0I,iBAAAlB,GAAA,EAAAmB,IAAAC,SACA5I,GAAA0I,iBAAAjB,GAAA,EAAAkB,IAAAE,WAGAlL,KAAAqI,WAAA,WAEA,MAAAY,IAIAuB,aAAA,SAAAW,EAAAvD,EAAAN,GAEA,GAAA/D,GAAA+D,GAAAjF,GAAAmI,aAAA5C,EAGA,IAFAvF,GAAA+I,aAAA7H,EAAA4H,GACA9I,GAAAgJ,cAAA9H,IACAlB,GAAAiJ,mBAAA/H,EAAAlB,GAAAkJ,gBAOA,KALA7C,SAAAC,IAAA,oBAEAf,GAAAvF,GAAAoI,eAAA/B,QAAAC,IAAA,iBACAf,GAAAvF,GAAAmJ,iBAAA9C,QAAAC,IAAA,mBAEAtG,GAAAoJ,iBAAAlI,EAEA,OAAAA,IAGAoH,YAAA,SAAA1B,GAGA,GADA5G,GAAAsI,YAAA1B,IACA5G,GAAAqJ,oBAAAzC,EAAA5G,GAAAsJ,aAEA,KAAAtJ,IAAAuJ,kBAAA3C,IAKA2B,cAAA,SAAAiB,EAAAC,GAEA,GAAA7C,GAAA5G,GAAAuI,eAOA,OANA7K,GAAAwK,QAAAC,aAAAqB,EAAAxJ,GAAAoI,eACA1K,EAAA2K,QAAAF,aAAAsB,EAAAzJ,GAAAmJ,iBACAnJ,GAAA0J,aAAA9C,EAAAlJ,EAAAwK,SACAlI,GAAA0J,aAAA9C,EAAAlJ,EAAA2K,SAEAC,YAAA1B,GACAA,GC1PA,IAAAlH,KAAAA,OAEAA,KAAAiK,MAAA,WAEA,GAAAjM,GAAAC,KACAiM,KACAC,KACAC,IAEAnM,MAAAiL,QAAAmB,KAAAC,SACArM,KAAAkL,SAAAkB,KAAAC,SAEAD,KAAAE,SAAAvM,EAAAmL,SAEA,IAAAqB,GAAA,GAAAxK,KAAAiH,OACAwD,EAAAD,CAGAvM,MAAAyM,WAAA,WAEA1M,EAAA2M,WAAAH,IAGAvM,KAAA2M,SAAA,WAEA5M,EAAA6M,YACAX,EAAAhJ,OAAA,GAAAyF,QAAAmE,KAAA,oDACAX,EAAAjJ,OAAA,GAAAyF,QAAAmE,KAAA,mDACAV,EAAAlJ,OAAA,GAAAyF,QAAAmE,KAAA,kDAKA7M,KAAA8M,UAAA,WAEA,MAAAN,IAGAxM,KAAA0M,WAAA,SAAAnJ,GAEA4I,EAAAxH,KAAApB,GACAiJ,EAAAjJ,GAGAvD,KAAA4M,UAAA,WAEA,GAAA,IAAAT,EAAAlJ,OAAA,KAAA,8BACAuJ,GAAAL,EAAAY,OAKA/M,KAAAgN,aAAA,WAEA,GAAAC,GAAAb,KAAAC,QACAD,MAAAa,KAAAA,EAAAlN,EAAAmL,UACAe,EAAAtH,KAAAsI,IAGAjN,KAAAkN,YAAA,WAEA,GAAA,IAAAjB,EAAAhJ,OAAA,KAAA,8BACAlD,GAAAmL,SAAAe,EAAAc,OAKA/M,KAAAmN,YAAA,WAEA,GAAAF,GAAAb,KAAAC,QACAD,MAAAa,KAAAA,EAAAlN,EAAAkL,SACAiB,EAAAvH,KAAAsI,IAGAjN,KAAAoN,WAAA,WAEA,GAAA,IAAAlB,EAAAjJ,OAAA,KAAA,+BACAlD,GAAAkL,QAAAiB,EAAAa,QAMA/B,IAAA,GAAAjJ,KAAAiK,KCpFA,IAAAjK,KAAAA,OAEAA,KAAAsL,QAAA,WAEA,GAAAtN,GAAAC,IACAA,MAAAsN,IAAAjL,GAAAkL,gBAMAvN,KAAAwD,KAAA,SAAAgK,GAEAnL,GAAAoL,cAAApL,GAAAqL,SAAAF,GACAnL,GAAAsL,YAAAtL,GAAAuL,WAAA7N,EAAAuN,MAGAtN,KAAA6N,QAAA,SAAAC,EAAAC,GAEA1L,GAAAsL,YAAAtL,GAAAuL,WAAA7N,EAAAuN,IAGA,KAAA,GADAU,MACAnI,EAAA,EAAAiI,EAAAjI,EAAAA,IAEA,IAAA,GAAAE,GAAA,EAAAgI,EAAAhI,EAAAA,IAGAiI,EAAArJ,KAAA0B,SAAAR,EAAAiI,EAAA,IAAA,KACAE,EAAArJ,KAAA,GACAqJ,EAAArJ,KAAA0B,SAAAN,EAAA+H,EAAA,IAAA,KACAE,EAAArJ,KAAA,IAGA,IAAAsJ,GAAA,GAAAxI,YAAAuI,EAEA3L,IAAA6L,cAAA7L,GAAAuL,WAAAvL,GAAA8L,eAAA9L,GAAA+L,eACA/L,GAAA6L,cAAA7L,GAAAuL,WAAAvL,GAAAgM,eAAAhM,GAAA+L,eACA/L,GAAA6L,cAAA7L,GAAAuL,WAAAvL,GAAAiM,mBAAAjM,GAAAkM,QAEAlM,GAAAmM,WAAAnM,GAAAuL,WAAA,EAAAvL,GAAAoM,KAAAX,EAAAC,EAAA,EAAA1L,GAAAoM,KAAApM,GAAAqM,cAAAT,GAEA5L,GAAAsL,YAAAtL,GAAAuL,WAAA,OAGA5N,KAAA2O,YAAA,SAAAC,GAEAvM,GAAAsL,YAAAtL,GAAAuL,WAAA7N,EAAAuN,KAEAjL,GAAAmM,WAAAnM,GAAAuL,WAAA,EAAAvL,GAAAoM,KAAApM,GAAAoM,KAAApM,GAAAqM,cAAA3O,EAAA8O,OAEAxM,GAAA6L,cAAA7L,GAAAuL,WAAAvL,GAAAyM,mBAAAzM,GAAA0M,SACA1M,GAAA6L,cAAA7L,GAAAuL,WAAAvL,GAAAiM,mBAAAjM,GAAA0M,SAOA1M,GAAAsL,YAAAtL,GAAAuL,WAAA,OAGA5N,KAAA6N,QAAA,EAAA,IAGA9L,IAAAsL,QAAA2B,KAAA,SAAA5N,GAEA,GAAA6N,GAAA,GAAAlN,KAAAsL,OASA,OARA4B,GAAAJ,MAAA,GAAAK,OACAD,EAAAJ,MAAAnN,OAAA,WAEAgH,QAAAC,IAAAsG,EAAAJ,OAEAI,EAAAN,YAAAM,EAAAJ,QAEAI,EAAAJ,MAAAM,IAAA/N,EACA6N,EC1EA,IAAAG,aAAA,EACAC,aAAA,EAEAC,mBAAA,EACAC,sBAAA,EACAC,qBAAA,EAEAC,OAGAC,GAAA,WAEA1P,KAAA2P,QAAA,GACA3P,KAAA4P,YACA5P,KAAA6P,WACA7P,KAAA8P,SACA9P,KAAA+P,aACA/P,KAAA2H,KAAA,UACA3H,KAAAgQ,GAAAvP,eAEAT,KAAAiI,QAAA,WAEA,MAAAjI,MAAA2H,MAEA3H,KAAAiQ,WAAA,SAAAC,GAKA,MAHAA,GAAAC,UAAAd,aACAa,EAAAE,OAAApQ,KACAA,KAAA4P,SAAAjL,KAAAuL,GACAA,GAEAlQ,KAAAqQ,UAAA,SAAAH,GAKA,MAHAA,GAAAC,UAAAf,YACAc,EAAAE,OAAApQ,KACAA,KAAA6P,QAAAlL,KAAAuL,GACAA,GAEAlQ,KAAAsQ,QAAA,WAEAtQ,KAAAuQ,QAEAvQ,KAAAwQ,UAAA,WAEA,IAAA,GAAAnH,GAAA,EAAAA,EAAArJ,KAAA6P,QAAA5M,OAAAoG,IACAX,QAAAC,IAAA,OAAA3I,KAAA6P,QAAAxG,GAAApB,UAEA,KAAA,GAAAwI,KAAAzQ,MAAA4P,SACAlH,QAAAC,IAAA,QAAA3I,KAAA4P,SAAAa,GAAAxI,YAGAjI,KAAA0Q,YAAA,WAEA,IAAA,GAAArH,GAAA,EAAAA,EAAArJ,KAAA6P,QAAA5M,OAAAoG,IACArJ,KAAA6P,QAAAxG,GAAAqH,aACA,KAAA,GAAAD,KAAAzQ,MAAA4P,SACA5P,KAAA4P,SAAAa,GAAAC,eAGA1Q,KAAA2Q,QAAA,SAAAhJ,GAEA,IAAA,GAAAiJ,KAAA5Q,MAAA6P,QACA,GAAA7P,KAAA6P,QAAAe,GAAA3I,WAAAN,EAAA,MAAA3H,MAAA6P,QAAAe,EAEA,KAAA,GAAAH,KAAAzQ,MAAA4P,SACA,GAAA5P,KAAA4P,SAAAa,GAAAxI,WAAAN,EAAA,MAAA3H,MAAA4P,SAAAa,IAGAzQ,KAAA6Q,gBAAA,SAAAC,GAEA,IAAA,GAAAL,KAAAzQ,MAAA4P,SAGA,GADAlH,QAAAC,IAAA,KACAoI,KAAAC,QAAAF,EAAA9Q,KAAA4P,SAAAa,IAAA,MAAAzQ,MAAA4P,SAAAa,EAGA,KAAA,GAAAG,KAAA5Q,MAAA6P,QAGA,GADAnH,QAAAC,IAAA,KACAoI,KAAAC,QAAAF,EAAA9Q,KAAA6P,QAAAe,IAAA,MAAA5Q,MAAA6P,QAAAe,IAMA5Q,KAAAiR,cAAA,WAEA,GAAAC,KACAA,GAAAvJ,KAAA3H,KAAAiI,UACAiJ,EAAAvB,QAAA3P,KAAA2P,QACAuB,EAAAlB,GAAAhQ,KAAAgQ,GACAkB,EAAAnB,UAAA/P,KAAA+P,UAEAmB,EAAArB,WACAqB,EAAAtB,WAEA,KAAA,GAAAvG,GAAA,EAAAA,EAAArJ,KAAA6P,QAAA5M,OAAAoG,IACA6H,EAAArB,QAAAlL,KAAA3E,KAAA6P,QAAAxG,GAAA4H,gBAEA,KAAA,GAAAR,KAAAzQ,MAAA4P,SACAsB,EAAAtB,SAAAjL,KAAA3E,KAAA4P,SAAAa,GAAAQ,gBAEA,OAAAC,IAGAlR,KAAAmR,cAAA,SAAAxJ,GAEA,IAAA,GAAA0B,GAAA,EAAAA,EAAArJ,KAAA6P,QAAA5M,OAAAoG,IACA,GAAArJ,KAAA6P,QAAAxG,GAAA1B,MAAAA,EAAA,MAAA3H,MAAA6P,QAAAxG,EAEA,KAAA,GAAAoH,KAAAzQ,MAAA4P,SACA,GAAA5P,KAAA4P,SAAAa,GAAA9I,MAAAA,EAAA,MAAA3H,MAAA4P,SAAAa,KAOAW,KAAA,SAAAhB,EAAAzI,EAAAC,GAEA,GAAA7H,GAAAC,IACAA,MAAAmQ,UAAAf,YACApP,KAAAgQ,GAAAvP,eACAT,KAAAoQ,OAAAA,EACApQ,KAAAqR,SACArR,KAAA6H,MAAA,KACA7H,KAAA2H,KAAAA,EACA3H,KAAA4H,KAAAA,GAAA0H,kBACA,IAAAgC,GAAA,IAEAtR,MAAAuR,iBAAA,MAAA,WAEA,MAAAvR,MAAA6H,QAGA7H,KAAAwR,iBAAA,MAAA,SAAAhJ,GAEAxI,KAAA8I,SAAAN,KAGAxI,KAAAgI,QAAA,WAAA,MAAAhI,MAAA4H,MACA5H,KAAAyR,SAAA,WAAA,MAAAzR,MAAAqR,MAAApO,OAAA,GACAjD,KAAA0R,eAAA,aACA1R,KAAA2R,YAAA,aAEA3R,KAAA8I,SAAA,SAAAN,GAEA,GAAAA,GAAAxI,KAAA6H,MACA,CACA7H,KAAA6H,MAAAW,EACAxI,KAAA0R,gBAEA,KAAA,GAAArI,KAAArJ,MAAAqR,MAEArR,KAAAqR,MAAAhI,GAAAP,aAKA9I,KAAAiI,QAAA,WAEA,MAAAjI,MAAA2H,MAGA3H,KAAA4R,QAAA,SAAAC,GAEAP,EAAAvR,EAAA8H,MACA7H,KAAAqR,MAAA1M,KAAAkN,IAGA7R,KAAA8R,aAAA,SAAAC,GAEA,IAAA,GAAA1I,KAAArJ,MAAAqR,OAEArR,KAAAqR,MAAAhI,GAAA2I,QAAAD,GAAA/R,KAAAqR,MAAAhI,GAAA4I,SAAAF,IAEA/R,KAAAqR,MAAAhI,GAAA6I,UAMAlS,KAAAmS,WAAA,SAAAJ,GAEA,IAAA,GAAA1I,KAAArJ,MAAAqR,MAEA,GAAArR,KAAAqR,MAAAhI,GAAA2I,QAAAD,GAAA/R,KAAAqR,MAAAhI,GAAA4I,SAAAF,EAAA,OAAA,CAEA,QAAA,GAGA/R,KAAAoS,KAAA,WAEA,IAAA,GAAA/I,KAAArJ,MAAAqR,MAEArR,KAAAqR,MAAAhI,GAAA2I,QAAAhS,MAAAA,KAAAqR,MAAAhI,GAAA2I,OAAAL,cACA3R,KAAAqR,MAAAhI,GAAA4I,SAAAjS,MAAAA,KAAAqR,MAAAhI,GAAA4I,QAAAN,eAKA3R,KAAAsQ,QAAA,WAEA5H,QAAAC,IAAA,qBAAA3I,KAAAiI,UAAAjI,KAAAqS,MAAApP,SAGAjD,KAAAsS,cAAA,WAEA,MAAAtS,MAAA4H,MAAA0H,mBAAA,QACAtP,KAAA4H,MAAA2H,sBAAA,WACAvP,KAAA4H,MAAA4H,qBAAA,UAAA,QAGAxP,KAAAiR,cAAA,WAEA,GAAAsB,KAIA,IAHAA,EAAA5K,KAAA3H,KAAAiI,UACAsK,EAAA1K,MAAA7H,KAAA6H,MAEA7H,KAAAmQ,WAAAf,aAAApP,KAAAqR,MAAApO,OAAA,EACA,CACAsP,EAAAlB,QACA,KAAA,GAAAhI,KAAArJ,MAAAqR,MAEAkB,EAAAlB,MAAA1M,KAAA3E,KAAAqR,MAAAhI,GAAA4H,iBAGA,MAAAsB,IAGAvS,KAAA0Q,YAAA,WAEA,KAAA1Q,KAAAqR,MAAApO,OAAA,GAEAjD,KAAAqR,MAAA,GAAAa,UAIAlS,KAAAwS,WAAA,SAAAC,GAEA,IAAA,GAAApJ,KAAArJ,MAAAqR,MAEArR,KAAAqR,MAAAhI,IAAAoJ,GAAAzS,KAAAqR,MAAA/H,OAAAD,EAAA,EAEAtJ,GAAA+I,SAAAwI,KAQAP,KAAA,SAAA2B,GAEA1S,KAAAgS,OAAA,KACAhS,KAAAiS,QAAA,KACAjS,KAAA0S,MAAAA,EAEA1S,KAAA8I,SAAA,WAEA9I,KAAAgS,OAAAxR,KAAAR,KAAAiS,QAAAzR,MACAR,KAAAgS,OAAAxR,IAAAR,KAAAiS,QAAAzR,MAGAR,KAAA2S,aAAA,SAAAzC,GAEA,MAAAA,IAAAlQ,KAAAgS,OAAAhS,KAAAiS,QACAjS,KAAAgS,QAGAhS,KAAAkS,OAAA,WAEAlS,KAAAgS,OAAAQ,WAAAxS,MACAA,KAAAiS,QAAAO,WAAAxS,MACAA,KAAA0S,MAAAE,SAAA5S,KAAAgS,OAAAhS,KAAAiS,SACAjS,KAAAgS,OAAA,KACAhS,KAAAiS,QAAA,KACAjS,KAAA0S,MAAA,MAIA1S,KAAAyS,KAAA,SAAAI,EAAAd,GAEA,MAAAhB,MAAAC,QAAA6B,EAAAd,IAKAc,EAAA1C,WAAAf,aAEApP,KAAAgS,OAAAa,EACA7S,KAAAiS,QAAAF,IAIA/R,KAAAgS,OAAAD,EACA/R,KAAAiS,QAAAY,GAGAA,EAAAjB,QAAA5R,MACA+R,EAAAH,QAAA5R,UACAA,MAAA8I,aAhBAJ,QAAAC,IAAA,uBACA,IAkBA3I,KAAAiR,cAAA,WAEA,GAAAsB,KAOA,OALAA,GAAAP,OAAAhS,KAAAgS,OAAA/J,UACAsK,EAAAN,QAAAjS,KAAAiS,QAAAhK,UACAsK,EAAAO,MAAA9S,KAAAgS,OAAA5B,OAAAJ,GACAuC,EAAAQ,OAAA/S,KAAAiS,QAAA7B,OAAAJ,GAEAuC,GAKAxB,MAAAiC,YAAA,SAAAH,EAAAd,GAEA,MAAAc,GACAd,EACAc,EAAA1C,WAAAf,aAAAyD,EAAAxB,MAAApO,OAAA,EAAA,0BACA8O,EAAA5B,WAAAf,aAAA2C,EAAAV,MAAApO,OAAA,EAAA,0BACA4P,EAAAV,WAAAJ,GAAA,uBACAc,EAAA1C,WAAA4B,EAAA5B,UAAA,+BACA0C,EAAAjL,MAAAmK,EAAAnK,KAAA,+BACAiL,EAAAzC,QAAA2B,EAAA3B,OAAA,wBACA,WAPA,+BADA,gCAWAW,KAAAC,QAAA,SAAA6B,EAAAd,GAEA,MAAAc,IACAd,EACAc,EAAA1C,WAAAf,aAAAyD,EAAAxB,MAAApO,OAAA,GAAA,EACA8O,EAAA5B,WAAAf,aAAA2C,EAAAV,MAAApO,OAAA,GAAA,EACA4P,EAAAV,WAAAJ,IAAA,EACAc,EAAA1C,WAAA4B,EAAA5B,WAAA,EACA0C,EAAAjL,MAAAmK,EAAAnK,MAAA,EACAiL,EAAAzC,QAAA2B,EAAA3B,QAAA,GAEA,GATA,EAgBA,IAAA6C,OAAA,WAEA,GAAAlT,MAAAC,IACAA,MAAAkT,OACAlT,KAAAmT,MAAA,GAAA3T,OACAQ,KAAAoT,gBAGApT,KAAAqE,MAAA,WAGA,IADArE,KAAAmT,MAAA,GAAA3T,OACAQ,KAAAkT,IAAAjQ,OAAA,GAEAjD,KAAAqT,SAAArT,KAAAkT,IAAA,GAAAlD,KAIAhQ,KAAAsT,MAAA,SAAA3D,QAAAI,WAEA,GAAAmB,IAAAqC,KAAA,OAAA5D,QAAA,MAQA,OAPAuB,IAAAvB,QAAAA,QACAuB,GAAAnB,UAAAA,UAEAmB,GAAAsC,eAAA,gBAAAxT,KAAAoT,aAAAzO,KAAAuM,IAEAlR,KAAAkT,IAAAvO,KAAAuM,IACAlR,KAAAyT,OAAAzT,KAAAyT,MAAAvC,IACAA,IAGAlR,KAAAqT,SAAA,SAAAK,EAAAC,GAGA,IAAA,GAAAtK,KAAArJ,MAAAkT,IAEA,GAAAlT,KAAAkT,IAAA7J,GAAA2G,IAAA0D,EACA,CACA,GAAAxC,GAAAlR,KAAAkT,IAAA7J,GACAuK,EAAA,KACAC,EAAA,IAEA3C,KAEAyC,GAEA3T,KAAAkT,IAAA7J,GAAAwG,QAAA,GAAA4B,YAAAzR,KAAAkT,IAAA7J,GAAAuG,SAAA,GAAA6B,YAEAzR,KAAAkT,IAAA7J,GAAAwG,QAAA,GAAA7H,WAAAhI,KAAAkT,IAAA7J,GAAAuG,SAAA,GAAA5H,YAEA4L,EAAA5T,KAAAkT,IAAA7J,GAAAwG,QAAA,GAAAwB,MAAA,GAAAsB,aAAA3S,KAAAkT,IAAA7J,GAAAwG,QAAA,IACAgE,EAAA7T,KAAAkT,IAAA7J,GAAAuG,SAAA,GAAAyB,MAAA,GAAAsB,aAAA3S,KAAAkT,IAAA7J,GAAAuG,SAAA,KAKA5P,KAAAkT,IAAA7J,GAAAqH,cACA1Q,KAAA8T,SAAA9T,KAAAkT,IAAA7J,IACArJ,KAAAkT,IAAA5J,OAAAD,EAAA,GAEA,OAAAuK,GAAA,OAAAC,GAEA9T,KAAA0S,KACAmB,EAAAxD,OACAwD,EAAA3L,UACA4L,EAAAzD,OACAyD,EAAA5L,cAWAjI,KAAAuQ,KAAA,WAEAwD,sBAAAhU,KAAAwQ,MACAxQ,KAAAoT,MAAAhT,QAEA,IAAA6T,GAAAjU,KAAAoT,MAAA1T,SAEA,KAAA,GAAA4J,KAAAtJ,MAAAqT,aAEArT,KAAAqT,aAAA/J,GAAA4K,YAAAD,IAKAhU,KAAAyS,KAAA,SAAAyB,EAAAC,EAAAC,EAAAC,GAEA,GAAAC,GAAAJ,EAAAvD,QAAAwD,GACAI,EAAAH,EAAAzD,QAAA0D,EAEA,IAAAtD,KAAAC,QAAAsD,EAAAC,GACA,CACA,GAAA9B,GAAA,GAAA1B,MAAA/Q,KAGA,OAFAyS,GAAAA,KAAA6B,EAAAC,GACAvU,KAAAwU,OAAAF,EAAAC,GACA9B,EAIA/J,QAAAC,IAAAoI,KAAAiC,YAAAsB,EAAAC,KAGAvU,KAAAyT,MAAA,SAAAvC,KACAlR,KAAA8T,SAAA,SAAA5C,KACAlR,KAAAwU,OAAA,SAAA3B,EAAAd,KACA/R,KAAA4S,SAAA,SAAAC,EAAAd,KACA/R,KAAAyU,UAAA,WAEA,GAAAlC,KAEAA,GAAAW,MACA,KAAA,GAAA7J,KAAArJ,MAAAkT,IAEAX,EAAAW,IAAAvO,KAAA3E,KAAAkT,IAAA7J,GAAA4H,gBAGA,OAAAyD,MAAAC,UAAApC,IAEAvS,KAAA4U,UAAA,SAAAlB,GAEA,IAAA,GAAArK,KAAArJ,MAAAkT,IAEA,GAAAlT,KAAAkT,IAAA7J,GAAA2G,IAAA0D,EAAA,MAAA1T,MAAAkT,IAAA7J,IAIArJ,KAAA6U,YAAA,SAAAtC,GAKA,QAAAX,GAAAkD,EAAAC,EAAAC,EAAAC,GAEA,GAAAC,IAAA,CACAA,IAEAnV,EAAA0S,KACA1S,EAAA6U,UAAAE,GACAE,EACAjV,EAAA6U,UAAAG,GACAE,GAZA,gBAAA1C,KAAAA,EAAAmC,KAAAS,MAAA5C,GACA,IAAAxS,GAAAC,IAiBA,KAAA,GAAAoV,KAAA7C,GAAAW,IACA,CACA,GAAAhC,GAAAlR,KAAAsT,MAAAf,EAAAW,IAAAkC,GAAAzF,QAAA4C,EAAAW,IAAAkC,GAAArF,UACAmB,GAAAlB,GAAAuC,EAAAW,IAAAkC,GAAApF,EAEA,KAAA,GAAAY,KAAA2B,GAAAW,IAAAkC,GAAAvF,QACA,CACA,GAAAwF,GAAAnE,EAAAC,cAAAoB,EAAAW,IAAAkC,GAAAvF,QAAAe,GAAAjJ,KACA0N,IAAAA,EAAAzN,MAAA4H,uBAAA6F,EAAA7U,IAAA+R,EAAAW,IAAAkC,GAAAvF,QAAAe,GAAA/I,OAGA,IAAA,GAAA4I,KAAA8B,GAAAW,IAAAkC,GAAAxF,SACA,CACA,GAAA2E,GAAArD,EAAAC,cAAAoB,EAAAW,IAAAkC,GAAAxF,SAAAa,GAAA9I,KACA4M,IAAAA,EAAA3M,MAAA4H,uBAAA+E,EAAA/T,IAAA+R,EAAAW,IAAAkC,GAAAxF,SAAAa,GAAA5I,QAQA,IAAAuN,IAAA7C,GAAAW,IAEA,IAAA,GAAAoC,KAAA/C,GAAAW,IAAAkC,GAAAvF,QAGA,IAAA,GAAA0F,KAAAhD,GAAAW,IAAAkC,GAAAvF,QAAAyF,GAAAjE,MAEAO,EACAW,EAAAW,IAAAkC,GAAAvF,QAAAyF,GAAAjE,MAAAkE,GAAAzC,MACAP,EAAAW,IAAAkC,GAAAvF,QAAAyF,GAAAjE,MAAAkE,GAAAxC,OACAR,EAAAW,IAAAkC,GAAAvF,QAAAyF,GAAAjE,MAAAkE,GAAAvD,OACAO,EAAAW,IAAAkC,GAAAvF,QAAAyF,GAAAjE,MAAAkE,GAAAtD,QAoBA,KAAA,GAAA5I,KAAArJ,MAAAkT,IAEAlT,KAAAkT,IAAA7J,GAAA2G,GAAAvP,gBAOAT,KAAAuQ,OL1hBAtL,QAAAuQ,UAAApL,KAAA,WAAA,MAAApK,MAAA,MMpBAyP,IAAAgG,GAAAhG,IAAAgG,MAEA,IAAAhS,IAAA,IAEAgM,KAAAgG,GAAAC,SAAA,WAEAhG,GAAAiG,MAAA3V,KAAA4V,UACA,IAAA7V,GAAAC,IAEAA,MAAA2H,KAAA,SAEA3H,KAAA6V,QAAA7V,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,UAAAuP,uBAEA,IAAAuG,GAAAC,KAAA1J,QACA0J,MAAAC,IAAAF,EAAA,EAAA,EAAA,IAEA9V,KAAAiU,YAAA,SAAAD,GAEA3R,GAAA4T,OAAA5T,GAAA6T,YACAzS,GAAA0S,WAAA,EAAA,EAAA,EAAA,GACA1S,GAAAY,MAAAZ,GAAA2S,iBAAA3S,GAAA4S,kBACAhU,GAAAiU,SAAA,EAAA,EAAAvW,EAAAwW,OAAAC,YAAAzW,EAAAwW,OAAAE,cACArK,KAAAsK,YAAA1L,IAAAC,QAAA,GAAAlL,EAAAwW,OAAAC,YAAAzW,EAAAwW,OAAAE,aAAA,IAAA,MAEAzL,IAAAmC,cACAnC,IAAAgC,eAEAZ,KAAAE,SAAAtB,IAAAE,UACAkB,KAAAuK,UAAA3L,IAAAE,SAAAF,IAAAE,SAAA4K,GAEArS,GAAAwS,OAAAxS,GAAAmT,OACAnT,GAAAoT,UAAApT,GAAAqT,UAAArT,GAAAsT,qBAEA/L,IAAAyB,aAEA1M,EAAA8V,QAAAzD,OAEApH,IAAAkC,cACAlC,IAAAoC,aACApC,IAAA2B,YAGA3M,KAAAuW,OAAAS,SAAAC,eAAA,YACAxT,GAAAzD,KAAAuW,OAAAW,WAAA,sBACA7U,GAAArC,KAAAuW,OAAAW,WAAA,uBAIAzH,IAAAgG,GAAAC,SAAAF,UAAA,GAAA9F,IAIAD,IAAAgG,GAAA0B,WAAA,WAEAzH,GAAAiG,MAAA3V,KAAA4V,UACA,IAAA7V,GAAAC,IAEAA,MAAA2H,KAAA,aAEA3H,KAAAoX,OAAApX,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,iBACAA,KAAAqX,OAAArX,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,iBACAA,KAAAsX,OAAAtX,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,iBAEAA,KAAAuX,SAAAvX,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,aACAA,KAAAwX,SAAAxX,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,aACAA,KAAAyX,SAAAzX,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,aAEA0X,KAAAC,KAAA,SAAAC,GAEA7X,EAAAqX,OAAA5W,IAAAoX,EAAAC,aAAA,GACA9X,EAAAsX,OAAA7W,IAAAoX,EAAAC,aAAA,GACA9X,EAAAuX,OAAA9W,IAAAoX,EAAAC,aAAA,GAEAD,EAAAE,QAAA7U,OAAA,IAEAlD,EAAAwX,SAAA/W,IAAAoX,EAAAE,QAAA,GAAAC,YAAA,GACAhY,EAAAyX,SAAAhX,IAAAoX,EAAAE,QAAA,GAAAC,YAAA,GACAhY,EAAA0X,SAAAjX,IAAAoX,EAAAE,QAAA,GAAAC,YAAA,OAKAtI,IAAAgG,GAAA0B,WAAA3B,UAAA,GAAA9F,IAIAD,IAAAgG,GAAAuC,WAAA,WAEAtI,GAAAiG,MAAA3V,KAAA4V,UACA,IAAA7V,GAAAC,IAEAA,MAAA2H,KAAA,aACA3H,KAAAsD,OAAAtD,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,SAAAuP,wBACAvP,KAAA6V,QAAA7V,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,UAAAuP,wBAEAvP,KAAAc,EAAAd,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,MACAA,KAAAiY,EAAAjY,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,MACAA,KAAAwE,EAAAxE,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,MAEAA,KAAAc,EAAAN,IAAA,GACAR,KAAAiY,EAAAzX,IAAA,GACAR,KAAAwE,EAAAhE,IAAA,GACAR,KAAAsD,OAAAqO,YAAA,WAEAlO,GAAA0S,WAAApW,EAAAe,EAAAN,IAAAT,EAAAkY,EAAAzX,IAAAT,EAAAyE,EAAAhE,IAAA,GACAiD,GAAAY,MAAAZ,GAAA2S,iBAAA3S,GAAA4S,kBAEAtW,EAAA8V,QAAAzD,SAKA3C,IAAAgG,GAAAuC,WAAAxC,UAAA,GAAA9F,IAKAD,IAAAgG,GAAAyC,WAAA,WAEAxI,GAAAiG,MAAA3V,KAAA4V,UACA,IAAA7V,GAAAC,IAEAA,MAAA2H,KAAA,aACA3H,KAAAsD,OAAAtD,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,SAAAuP,wBACAvP,KAAA6V,QAAA7V,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,UAAAuP,wBAEAvP,KAAAsD,OAAAqO,YAAA,WAEAlO,GAAAY,MAAAZ,GAAA4S,kBACAtW,EAAA8V,QAAAzD,SAIA3C,IAAAgG,GAAAyC,WAAA1C,UAAA,GAAA9F,IAKAD,IAAAgG,GAAA0C,aAAA,WAEAzI,GAAAiG,MAAA3V,KAAA4V,UACA,IAAA7V,GAAAC,IAEAA,MAAA2H,KAAA,gBACA3H,KAAAoY,MAAApY,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,QAAAsP,qBACAtP,KAAAqY,OAAArY,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,SAAAsP,qBAEAtP,KAAAsY,WAAAtY,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,UAAAwP,uBACAxP,KAAAsN,IAAA,GAAAvL,KAAAsL,OAEA,IAAAkL,GAAA,WAEAxY,EAAAuN,IAAAO,QAAA9N,EAAAqY,MAAA5X,IAAAT,EAAAsY,OAAA7X,KACAT,EAAAuY,WAAA9X,IAAAT,EAAAuN,IAAAA,IAGAtN,MAAAoY,MAAA1G,eAAA6G,EACAvY,KAAAqY,OAAA3G,eAAA6G,EAEAvY,KAAAoY,MAAA5X,IAAA,EACAR,KAAAqY,OAAA7X,IAAA,GAIAiP,IAAAgG,GAAA0C,aAAA3C,UAAA,GAAA9F,IAKAD,IAAAgG,GAAApI,QAAA,WAEAqC,GAAAiG,MAAA3V,KAAA4V,UACA,IAAA7V,GAAAC,IAEAA,MAAA2H,KAAA,UACA3H,KAAAwY,SAAAxY,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,OAAAsP,qBACAtP,KAAAsY,WAAAtY,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,UAAAwP,uBAEAxP,KAAAwY,SAAA9G,eAAA,WAEAhJ,QAAAC,IAAA,mBACA5I,EAAAuN,IAAAvL,IAAAsL,QAAA2B,KAAAjP,EAAAyY,SAAAhY,KACAT,EAAAuY,WAAA9X,IAAAT,EAAAuN,IAAAA,KAGAtN,KAAAwY,SAAAhY,IAAA,oBAGAiP,IAAAgG,GAAApI,QAAAmI,UAAA,GAAA9F,IAMAD,IAAAgG,GAAAgD,UAEAhJ,IAAAgG,GAAAgD,OAAAC,UAAA,WAEAhJ,GAAAiG,MAAA3V,KAAA4V,UACA,IAAA7V,GAAAC,IAEAA,MAAA2H,KAAA,YACA3H,KAAAsD,OAAAtD,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,SAAAuP,wBACAvP,KAAA6V,QAAA7V,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,UAAAuP,wBAEAvP,KAAAsD,OAAAqO,YAAA,WAEA5R,EAAA4Y,KAAArV,OAAA0H,IAAA8B,aACA/M,EAAA8V,QAAAzD,OAGA,IAAAlQ,GAAA,GAAAH,KAAAmC,QACAhC,GAAAW,UACA,EAAA,EAAA,EACA,GAAA,EAAA,EACA,EAAA,GAAA,EACA,GAAA,GAAA,GAGAX,EAAAmB,WACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,GAGAnB,EAAAkB,iBACA,EAAA,EAAA,EACA,EAAA,EAAA,GAEApD,KAAA2Y,KAAA,GAAA5W,KAAAE,KAAAC,IAIAuN,IAAAgG,GAAAgD,OAAAC,UAAAlD,UAAA,GAAA9F,IAIAD,IAAAgG,GAAAgD,OAAAG,oBAAA,WAEAlJ,GAAAiG,MAAA3V,KAAA4V,UACA,IAAA7V,GAAAC,IAEAA,MAAA2H,KAAA,uBACA3H,KAAAsD,OAAAtD,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,SAAAuP,wBACAvP,KAAA6V,QAAA7V,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,UAAAuP,wBAEAvP,KAAAsD,OAAAqO,YAAA,WAEA3G,IAAAmC,cACAf,KAAAE,SAAAtB,IAAAC,SAEAD,IAAAgC,eACAZ,KAAAE,SAAAtB,IAAAE,UAEAnL,EAAA4Y,KAAArV,OAAA0H,IAAA8B,aACA/M,EAAA8V,QAAAzD,OAEApH,IAAAoC,aACApC,IAAAkC,cAIA,IAAAhL,GAAA,GAAAH,KAAAmC,QACAhC,GAAAW,UACA,EAAA,EAAA,EACA,GAAA,EAAA,EACA,EAAA,GAAA,EACA,GAAA,GAAA,GAGAX,EAAAmB,WACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,GAGAnB,EAAAkB,iBACA,EAAA,EAAA,EACA,EAAA,EAAA,GAEApD,KAAA2Y,KAAA,GAAA5W,KAAAE,KAAAC,IAIAuN,IAAAgG,GAAAgD,OAAAG,oBAAApD,UAAA,GAAA9F,IAIAD,IAAAgG,GAAAgD,OAAAI,OAAA,WA2BA,QAAAC,KAEA5W,EAAAmC,OAIA,KAAA,GAHA0U,GAAA,EACAC,EAAA,EAEA3P,EAAA,EAAAA,GAAAtJ,EAAAkZ,SAAAzY,IAAAT,EAAAmZ,QAAA1Y,IAAA6I,IACA,CACA,GAAA8P,GAAA,IAAApZ,EAAAkZ,SAAAzY,IAAA6I,EAAAtH,IAAAC,QACAoX,EAAArY,KAAAsY,IAAAF,GAAApZ,EAAAuZ,OAAA9Y,IACA+Y,EAAAxY,KAAAyY,IAAAL,GAAApZ,EAAAuZ,OAAA9Y,GAEA0B,GAAAoC,SACA8U,EAAAG,EAAA,IACAR,EAAAC,EAAA,IACA,EAAA,EAAA,IAGAD,EAAAK,EACAJ,EAAAO,EAGAZ,EAAAnW,QAAAN,GA/CAwN,GAAAiG,MAAA3V,KAAA4V,UACA,IAAA7V,GAAAC,IAEAA,MAAA2H,KAAA,SACA3H,KAAAsD,OAAAtD,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,SAAAuP,wBAEAvP,KAAAiZ,SAAAjZ,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,aACAA,KAAAsZ,OAAAtZ,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,WACAA,KAAAkZ,QAAAlZ,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,YAEAA,KAAA6V,QAAA7V,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,UAAAuP,wBAEAvP,KAAAsD,OAAAqO,YAAA,WAEAgH,EAAArV,OAAA0H,IAAA8B,aACA/M,EAAA8V,QAAAzD,QAGApS,KAAAiZ,SAAAzY,IAAA,GACAR,KAAAsZ,OAAA9Y,IAAA,EACAR,KAAAkZ,QAAA1Y,IAAA,CAEA,IAAA0B,GAAA,GAAAH,KAAAmC,SACAyU,EAAA,GAAA5W,KAAAE,KAAAC,EA2BAlC,MAAAiZ,SAAAvH,eAAAoH,EACA9Y,KAAAsZ,OAAA5H,eAAAoH,EACA9Y,KAAAkZ,QAAAxH,eAAAoH,GAGArJ,IAAAgG,GAAAgD,OAAAI,OAAArD,UAAA,GAAA9F,IAIAD,IAAAgG,GAAAgD,OAAAgB,QAAA,WAEA/J,GAAAiG,MAAA3V,KAAA4V,UACA,IAAA7V,GAAAC,IAEAA,MAAA2H,KAAA,WACA3H,KAAAsD,OAAAtD,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,SAAAuP,wBACAvP,KAAA6V,QAAA7V,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,UAAAuP,wBAEAvP,KAAA2Y,KAAA,KAEA3Y,KAAAsD,OAAAqO,YAAA,WAEA5R,EAAA4Y,MAAA5Y,EAAA4Y,KAAArV,OAAA0H,IAAA8B,aAEA/M,EAAA8V,QAAAzD,QAIAjR,YAAA,mBAAA,SAAAU,GAEA6G,QAAAC,IAAA9G,EAEA,IAAAf,GAAA8D,SAAA/C,EAEA6X,QAAA,SAAAC,EAAAC,EAAAC,GAGA,IAAA,GADAC,GAAA,GAAAC,OAAAhZ,KAAAE,MAAA0Y,EAAA1W,OAAA,GAAA4W,GACAxQ,EAAA,EAAAA,EAAAsQ,EAAA1W,OAAAoG,IAEA,IAAA,GAAA2Q,GAAA,EAAAH,EAAAG,EAAAA,IAEAF,EAAAzQ,EAAAwQ,EAAAG,GAAAJ,EAAAD,EAAAtQ,GAAAwQ,EAAAG,EAGA,OAAAF,GAGA,IAAAjI,GAAA/Q,EAAAsC,gBAAAH,MACAnC,GAAA+B,SAAA6W,OAAA5Y,EAAAsC,gBAAAtC,EAAA+B,SAAA,GACA/B,EAAAuC,UAAAqW,OAAA5Y,EAAAsD,iBAAAtD,EAAAuC,UAAA,GACAvC,EAAAsC,kBACA,KAAA,GAAAiG,GAAA,EAAAwI,EAAAxI,EAAAA,IAAAvI,EAAAsC,gBAAAuB,KAAA0E,EAEAtJ,GAAA4Y,KAAA,GAAA5W,KAAAE,KAAAnB,MAIA2O,IAAAgG,GAAAgD,OAAAgB,QAAAjE,UAAA,GAAA9F,IAIAD,IAAAgG,GAAAgD,OAAAwB,KAAA,WAEAvK,GAAAiG,MAAA3V,KAAA4V,UACA,IAAA7V,GAAAC,IAEAA,MAAA2H,KAAA,OACA3H,KAAAsD,OAAAtD,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,SAAAuP,wBACAvP,KAAA6V,QAAA7V,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,UAAAuP,wBAEAvP,KAAA2Y,KAAA,KAEA3Y,KAAAsD,OAAAqO,YAAA,WAEA,OAAA5R,EAAA4Y,MAAA5Y,EAAA4Y,KAAArV,OAAA0H,IAAA8B,aACA/M,EAAA8V,QAAAzD,OAGA,IAAAlQ,GAAA,GAAAH,KAAAmC,QAEAhC,GAAAW,UAEA,GAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,EAAA,EACA,GAAA,EAAA,EAEA,GAAA,GAAA,GACA,GAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,GAAA,GAEA,GAAA,EAAA,GACA,GAAA,EAAA,EACA,EAAA,EAAA,EACA,EAAA,EAAA,GAEA,GAAA,GAAA,GACA,EAAA,GAAA,GACA,EAAA,GAAA,EACA,GAAA,GAAA,EAEA,EAAA,GAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,EACA,EAAA,GAAA,EAEA,GAAA,GAAA,GACA,GAAA,GAAA,EACA,GAAA,EAAA,EACA,GAAA,EAAA,IAGAX,EAAAmB,WAEA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EAEA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EAEA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EAEA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EAEA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EAEA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,GAGAnB,EAAAkB,iBACA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,GAAA,EAAA,GAAA,GACA,GAAA,GAAA,GAAA,GAAA,GAAA,GACA,GAAA,GAAA,GAAA,GAAA,GAAA,GACA,GAAA,GAAA,GAAA,GAAA,GAAA,IAGApD,KAAA2Y,KAAA,GAAA5W,KAAAE,KAAAC,IAGAuN,IAAAgG,GAAAgD,OAAAwB,KAAAzE,UAAA,GAAA9F,IAIAD,IAAAgG,GAAAgD,OAAAyB,QAAA,WA+BA,QAAAvX,KAEAN,GAAA8X,UAAA,GAEA9X,GAAAI,WAAAJ,GAAAK,aAAA3C,EAAAqa,QACA/X,GAAAM,WAAAN,GAAAK,aAAA,GAAAE,cAAA7C,EAAA8C,UAAAR,GAAAS,aACA/C,EAAAqa,OAAArX,SAAA,EACAhD,EAAAqa,OAAApX,SAAAqX,EApCA3K,GAAAiG,MAAA3V,KAAA4V,UACA,IAAA7V,GAAAC,IAEAA,MAAA2H,KAAA,UACA3H,KAAAsD,OAAAtD,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,SAAAuP,wBACAvP,KAAAwI,EAAAxI,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,UACAA,KAAA6V,QAAA7V,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,UAAAuP,wBAEAvP,KAAAsD,OAAAqO,YAAA,WAEAtP,GAAAwB,oBAAAmH,IAAA8B,YAAAnJ,mBAAA5D,EAAAqa,OAAArX,SAAAV,GAAAyB,OAAA,EAAA,EAAA,GACAkH,IAAA8B,YAAAtJ,OACAnB,GAAAI,WAAAJ,GAAAK,aAAA3C,EAAAqa,QACA/X,GAAAiY,WAAAjY,GAAAkY,WAAA,EAAAxa,EAAAqa,OAAApX,UAEAjD,EAAA8V,QAAAzD,QAGApS,KAAAoa,OAAA/X,GAAAC,cAEA,IAAA+X,GAAA,EACAra,MAAA6C,WACA,KAAA,GAAAwG,GAAA,EAAAgR,EAAAhR,EAAAA,IAEArJ,KAAA6C,SAAA8B,KAAA,EAAA0V,EAAAhR,GACArJ,KAAA6C,SAAA8B,KAAA5D,KAAAC,SAAA,IACAhB,KAAA6C,SAAA8B,KAAA,EAYAhC,KAEA3C,KAAAwI,EAAAkJ,eAAA,WAEA3R,EAAA8C,SAAAyG,OAAA,EAAA,GACAvJ,EAAA8C,SAAA8B,KAAA,GACA5E,EAAA8C,SAAA8B,KAAA5E,EAAAyI,EAAAhI,KACAT,EAAA8C,SAAA8B,KAAA,EAEA,KAAA,GAAA0E,GAAA,EAAA,EAAAgR,EAAAhR,EAAAA,GAAA,EAEAtJ,EAAA8C,SAAAwG,GAAA,EAAAgR,EAAAhR,CAGA1G,OAIA8M,IAAAgG,GAAAgD,OAAAyB,QAAA1E,UAAA,GAAA9F,IAIAD,IAAAgG,GAAAgD,OAAA+B,SAAA,WAEA9K,GAAAiG,MAAA3V,KAAA4V,UACA,IAAA7V,GAAAC,IAEAA,MAAA2H,KAAA,WACA3H,KAAAsD,OAAAtD,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,SAAAuP,wBACAvP,KAAA6V,QAAA7V,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,UAAAuP,wBAEAvP,KAAAsD,OAAAqO,YAAA,WAEA5R,EAAA4Y,KAAArV,OAAA0H,IAAA8B,aACA/M,EAAA8V,QAAAzD,OAGA,IAAAlQ,GAAA,GAAAH,KAAAmC,QACAhC,GAAAW,UACA,EAAA,EAAA,EACA,GAAA,GAAA,EACA,EAAA,GAAA,GAGAX,EAAAkB,iBACA,EAAA,EAAA,GAEApD,KAAA2Y,KAAA,GAAA5W,KAAAE,KAAAC,IAGAuN,IAAAgG,GAAAgD,OAAA+B,SAAAhF,UAAA,GAAA9F,IAIAD,IAAAgG,GAAAzM,UAEAyG,IAAAgG,GAAAzM,OAAAyR,cAAA,WAEA/K,GAAAiG,MAAA3V,KAAA4V,UACA,IAAA7V,GAAAC,IAEAA,MAAA2H,KAAA,gBACA3H,KAAAsD,OAAAtD,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,SAAAuP,wBACAvP,KAAA6V,QAAA7V,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,UAAAuP,wBAEAvP,KAAA0a,SAAA,WAEA1P,IAAA0B,WAAAnJ,GAEAxD,EAAAkP,QAAAzO,MAEA6B,GAAAoL,cAAApL,GAAAqL,UACArL,GAAAsL,YAAAtL,GAAAuL,WAAA7N,EAAAkP,QAAAzO,MAGAT,EAAA8V,QAAAzD,OAEApH,IAAA4B,YAGA,IAAAjD,GAAA,qRAgBA,YAAAS,OACA,mCAKA7G,EAAA,GAAAxB,KAAAiH,MACAzF,GAAAqG,UAAArG,EAAAiG,yBAAAG,GAEA3J,KAAAc,EAAAd,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,MACAA,KAAAc,EAAA4Q,eAAA,WAEA3R,EAAAe,EAAA6Z,QACA5a,EAAAe,EAAA6Z,QAAA7R,SAAA/I,EAAAe,EAAAN,KADAT,EAAAe,EAAA6Z,QAAA,GAAA5Y,KAAAsF,QAAA9D,EAAA,IAAA,IAAAxD,EAAAe,EAAAN,MAIAR,KAAAiY,EAAAjY,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,MACAA,KAAAiY,EAAAvG,eAAA,WAEA3R,EAAAkY,EAAA0C,QACA5a,EAAAkY,EAAA0C,QAAA7R,SAAA/I,EAAAkY,EAAAzX,KADAT,EAAAkY,EAAA0C,QAAA,GAAA5Y,KAAAsF,QAAA9D,EAAA,IAAA,IAAAxD,EAAAkY,EAAAzX,MAIAR,KAAAwE,EAAAxE,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,MACAA,KAAAwE,EAAAkN,eAAA,WAEA3R,EAAAyE,EAAAmW,QACA5a,EAAAyE,EAAAmW,QAAA7R,SAAA/I,EAAAyE,EAAAhE,KADAT,EAAAyE,EAAAmW,QAAA,GAAA5Y,KAAAsF,QAAA9D,EAAA,IAAA,IAAAxD,EAAAyE,EAAAhE,MAIAR,KAAAuE,EAAAvE,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,MACAA,KAAAuE,EAAAmN,eAAA,WAEA3R,EAAAwE,EAAAoW,QACA5a,EAAAwE,EAAAoW,QAAA7R,SAAA/I,EAAAwE,EAAA/D,KADAT,EAAAwE,EAAAoW,QAAA,GAAA5Y,KAAAsF,QAAA9D,EAAA,IAAA,IAAAxD,EAAAwE,EAAA/D,MAIAR,KAAAc,EAAAN,IAAAO,KAAAC,SACAhB,KAAAiY,EAAAzX,IAAAO,KAAAC,SACAhB,KAAAwE,EAAAhE,IAAAO,KAAAC,SACAhB,KAAAuE,EAAA/D,IAAA,EAEAR,KAAAsD,OAAAqO,YAAA3R,KAAA0a,SACA1a,KAAAiP,QAAAjP,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,UAAAwP,uBACAxP,KAAAiP,QAAAyC,eAAA,WAEA3R,EAAAkP,QAAAzO,KAEAkI,QAAAC,IAAA,iBACA5I,EAAA6a,eAAA,GAAA7Y,KAAAsF,QAAA9D,EAAA,IAAA,MAAA,IAIAA,EAAA6F,cAAA,QAIApJ,KAAA0a,YAGAjL,IAAAgG,GAAAzM,OAAAyR,cAAAjF,UAAA,GAAA9F,IAIAD,IAAAgG,GAAAzM,OAAA6R,UAAA,WAEAnL,GAAAiG,MAAA3V,KAAA4V,UACA,IAAA7V,GAAAC,IAEAA,MAAA2H,KAAA,YACA3H,KAAAsD,OAAAtD,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,SAAAuP,wBACAvP,KAAAmT,MAAAnT,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,SACAA,KAAA6V,QAAA7V,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,UAAAuP,wBAEAvP,KAAA0a,SAAA,WAEA1P,IAAA0B,WAAAnJ,GAEAxD,EAAAoT,MAAA2H,SAEAvX,EAAAC,OACAzD,EAAAoT,MAAA2H,OAAAzY,GAAA+F,mBAAA7E,EAAA8E,aAAA,SAEAhG,GAAAiG,UAAAvI,EAAAoT,MAAA2H,OAAA/a,EAAAoT,MAAA3S,KAEAwK,IAAA4B,UAAArJ,GAEAxD,EAAA8V,QAAAzD,OAGA,IAAAzI,GAAA,oOAUApG,EAAA,GAAAxB,KAAAiH,MACAzF,GAAA2G,QAAA3G,EAAAiG,yBAAAG,GAEA3J,KAAA0a,WACA1a,KAAAsD,OAAAqO,YAAA3R,KAAA0a,UAGAjL,IAAAgG,GAAAzM,OAAA6R,UAAArF,UAAA,GAAA9F,IAIAD,IAAAgG,GAAAzM,OAAA+R,MAAA,WAEArL,GAAAiG,MAAA3V,KAAA4V,UACA,IAAA7V,GAAAC,IAEAA,MAAA2H,KAAA,QACA3H,KAAAsD,OAAAtD,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,SAAAuP,wBACAvP,KAAA6V,QAAA7V,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,UAAAuP,uBAEA,IAAAyL,GAAA,GACAnb,EAAA,EAEAG,MAAA0a,SAAA,WAEA1P,IAAA0B,WAAAnJ,GACA,IAAAyX,IAEAnb,EAAAF,KAAAC,MACA2D,EAAAC,OACAwX,EAAA3Y,GAAA+F,mBAAA7E,EAAA8E,aAAA,SAGAhG,GAAAiG,UAAA0S,GAAArb,KAAAC,MAAAC,GAAA,KACAmL,IAAA4B,YAEA7M,EAAA8V,QAAAzD,OAGA,IAAAzI,GAAA,uPAeApG,EAAA,GAAAxB,KAAAiH,MACAzF,GAAA2G,QAAA3G,EAAAiG,yBAAAG,GAEA3J,KAAA0a,WACA1a,KAAAsD,OAAAqO,YAAA3R,KAAA0a,UAGAjL,IAAAgG,GAAAzM,OAAA+R,MAAAvF,UAAA,GAAA9F,IAIAD,IAAAgG,GAAAwF,UAEAxL,IAAAgG,GAAAwF,OAAAC,UAAA,WAEAxL,GAAAiG,MAAA3V,KAAA4V,UACA,IAAA7V,GAAAC,IAEAA,MAAA2H,KAAA,YACA3H,KAAAsD,OAAAtD,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,SAAAuP,wBACAvP,KAAA6V,QAAA7V,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,UAAAuP,wBAEAvP,KAAA6F,EAAA7F,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,MACAA,KAAA+F,EAAA/F,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,MACAA,KAAAgG,EAAAhG,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,MACAA,KAAA6F,EAAArF,IAAA,EACAR,KAAA+F,EAAAvF,IAAA,EACAR,KAAAgG,EAAAxF,IAAA,CAEA,IAAA2a,GAAApF,KAAA1J,QAEArM,MAAAsD,OAAAqO,YAAA,WAEAoE,KAAAC,IAAAmF,EAAApb,EAAA8F,EAAArF,IAAAT,EAAAgG,EAAAvF,IAAAT,EAAAiG,EAAAxF,KACAwK,IAAAgC,eACAZ,KAAAuK,UAAA3L,IAAAE,SAAAF,IAAAE,SAAAiQ,GACApb,EAAA8V,QAAAzD,OACApH,IAAAkC,gBAIAuC,IAAAgG,GAAAwF,OAAAC,UAAA1F,UAAA,GAAA9F,IAIAD,IAAAgG,GAAAwF,OAAAG,MAAA,WAEA1L,GAAAiG,MAAA3V,KAAA4V,UACA,IAAA7V,GAAAC,IAEAA,MAAA2H,KAAA,QACA3H,KAAAsD,OAAAtD,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,SAAAuP,wBACAvP,KAAA6V,QAAA7V,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,UAAAuP,wBAEAvP,KAAAqb,MAAArb,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,SAEA,IAAAsb,GAAAvF,KAAA1J,SACAkP,EAAAnP,KAAAC,QACAD,MAAAE,SAAAiP,EAEA,IAAAC,IAAA,CAEAxb,MAAAsD,OAAAqO,YAAA,WAEA3G,IAAAgC,eACAZ,KAAAqP,SAAAvQ,SAAAA,SAAAqQ,GACAxb,EAAA8V,QAAAzD,OACApH,IAAAkC,cAGA,IAAAwO,GAAA,WAEAtP,KAAAE,SAAAiP,GACAnP,KAAAiP,MAAAE,EAAAA,EAAAD,GAGAtb,MAAA2b,aAAA,WAEAH,GAAA,EACAzF,KAAAC,IAAAsF,EAAAvb,EAAAsb,MAAA7a,IAAAT,EAAAsb,MAAA7a,IAAAT,EAAAsb,MAAA7a,KACAkb,KAGA1b,KAAAqb,MAAA3J,eAAA1R,KAAA2b,aACA3b,KAAAqb,MAAA7a,IAAA,EACAkb,KAGAjM,IAAAgG,GAAAwF,OAAAG,MAAA5F,UAAA,GAAA9F,IAIAD,IAAAgG,GAAAwF,OAAAW,UAAA,WAEAlM,GAAAiG,MAAA3V,KAAA4V,UACA,IAAA7V,GAAAC,IACAA,MAAA2H,KAAA,YACA3H,KAAAsD,OAAAtD,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,SAAAuP,wBACAvP,KAAA6V,QAAA7V,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,UAAAuP,wBAEAvP,KAAA6b,KAAA7b,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,SACAA,KAAA8b,KAAA9b,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,SACAA,KAAA+b,KAAA/b,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,SAEAA,KAAAgc,OAAAhc,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,WACAA,KAAAic,OAAAjc,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA;AACAA,KAAAkc,OAAAlc,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,WAEAA,KAAAmc,KAAAnc,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,SACAA,KAAAoc,KAAApc,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,SACAA,KAAAqc,KAAArc,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,QAEA,IAAAsc,GAAAvG,KAAA1J,SACAiP,EAAAvF,KAAA1J,SACAkP,EAAAnP,KAAAC,QACAD,MAAAE,SAAAiP,EAEA,IAAAC,IAAA,EACAe,GAAA,CAEAvc,MAAAsD,OAAAqO,YAAA,WAEA3G,IAAAgC,eACAZ,KAAAqP,SAAAzQ,IAAAE,SAAAF,IAAAE,SAAAqQ,GACAxb,EAAA8V,QAAAzD,OACApH,IAAAkC,cAGA,IAAAwO,GAAA,WAEAtP,KAAAE,SAAAiP,GACAgB,GAAAnQ,KAAAuK,UAAA4E,EAAAA,EAAAe,GAEA,IAAAvc,EAAAoc,KAAA3b,KAAA4L,KAAAoQ,QAAAjB,EAAAA,EAAAxb,EAAAoc,KAAA3b,IAAAuB,IAAAC,SACA,IAAAjC,EAAAqc,KAAA5b,KAAA4L,KAAAqQ,QAAAlB,EAAAA,EAAAxb,EAAAqc,KAAA5b,IAAAuB,IAAAC,SACA,IAAAjC,EAAAsc,KAAA7b,KAAA4L,KAAAsQ,QAAAnB,EAAAA,EAAAxb,EAAAsc,KAAA7b,IAAAuB,IAAAC,SAEAwZ,GAAApP,KAAAiP,MAAAE,EAAAA,EAAAD,GAGAtb,MAAA2c,iBAAA,WAEAJ,GAAA,GACA,IAAAxc,EAAA8b,KAAArb,KAAA,IAAAT,EAAA+b,KAAAtb,KAAA,IAAAT,EAAAgc,KAAAvb,OAAA+b,GAAA,GACAxG,KAAAC,IAAAsG,EAAAvc,EAAA8b,KAAArb,IAAAT,EAAA+b,KAAAtb,IAAAT,EAAAgc,KAAAvb,KACAkb,KAGA1b,KAAA2b,aAAA,WAEAH,GAAA,GACA,IAAAzb,EAAAic,OAAAxb,KAAA,IAAAT,EAAAkc,OAAAzb,KAAA,IAAAT,EAAAmc,OAAA1b,OAAAgb,GAAA,GACAzF,KAAAC,IAAAsF,EAAAvb,EAAAic,OAAAxb,IAAAT,EAAAkc,OAAAzb,IAAAT,EAAAmc,OAAA1b,KACAkb,KAGA1b,KAAA4c,WAAA,WAEAlB,KAGA1b,KAAAmc,KAAAzK,eAAA1R,KAAA4c,WACA5c,KAAAoc,KAAA1K,eAAA1R,KAAA4c,WACA5c,KAAAqc,KAAA3K,eAAA1R,KAAA4c,WAEA5c,KAAAgc,OAAAtK,eAAA1R,KAAA2b,aACA3b,KAAAic,OAAAvK,eAAA1R,KAAA2b,aACA3b,KAAAkc,OAAAxK,eAAA1R,KAAA2b,aAEA3b,KAAA6b,KAAAnK,eAAA1R,KAAA2c,iBACA3c,KAAA8b,KAAApK,eAAA1R,KAAA2c,iBACA3c,KAAA+b,KAAArK,eAAA1R,KAAA2c,iBAEA3c,KAAAmc,KAAA3b,IAAA,EACAR,KAAAoc,KAAA5b,IAAA,EACAR,KAAAqc,KAAA7b,IAAA,EAEAR,KAAAgc,OAAAxb,IAAA,EACAR,KAAAic,OAAAzb,IAAA,EACAR,KAAAkc,OAAA1b,IAAA,EAEAR,KAAA6b,KAAArb,IAAA,EACAR,KAAA8b,KAAAtb,IAAA,EACAR,KAAA+b,KAAAvb,IAAA,EAEAkb,KAGAjM,IAAAgG,GAAAwF,OAAAW,UAAApG,UAAA,GAAA9F,IAIAD,IAAAoN,cAAA,WAwCA,QAAAC,KAEA/c,EAAAgd,WACAhd,EAAAid,cACAjd,EAAAkd,gBAEA,KAAA,GAAA5T,GAAA,EAAAA,EAAAtJ,EAAAsa,IAAA7Z,IAAA6I,IAEAtJ,EAAAkd,cAAAtY,KAAA5D,KAAAC,UACAjB,EAAAgd,QAAApY,KAAAoR,KAAAmH,YACAnc,KAAAC,SAAA,IAAAjB,EAAAod,KAAA3c,KACAO,KAAAC,SAAA,IAAAjB,EAAAod,KAAA3c,KACAO,KAAAC,SAAA,IAAAjB,EAAAod,KAAA3c,MAEAT,EAAAid,WAAArY,KAAAoR,KAAAmH,WACA,IAAAnc,KAAAC,SAAAe,IAAAC,QACA,IAAAjB,KAAAC,SAAAe,IAAAC,QACA,IAAAjB,KAAAC,SAAAe,IAAAC,UAvDA0N,GAAAiG,MAAA3V,KAAA4V,UACA,IAAA7V,GAAAC,IAEAA,MAAA2H,KAAA,iBACA3H,KAAAod,IAAApd,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,MAAAuP,wBACAvP,KAAAqa,IAAAra,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,QACAA,KAAAmd,KAAAnd,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,SAEAA,KAAA6V,QAAA7V,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,UAAAuP,wBACAvP,KAAAqd,IAAArd,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,UACAA,KAAAsd,IAAAtd,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,QACAA,KAAA+c,WACA/c,KAAAgd,cACAhd,KAAAid,gBAEAlH,MAAA1J,QAEArM,MAAAod,IAAAzL,YAAA,WAEA,IAAA,GAAAtI,GAAA,EAAAA,EAAAtJ,EAAAgd,QAAA9Z,OAAAoG,IAEA2B,IAAAgC,eAEAZ,KAAAuK,UAAA3L,IAAAE,SAAAF,IAAAE,SAAAnL,EAAAgd,QAAA1T,IAEA+C,KAAAoQ,QAAAxR,IAAAE,SAAAF,IAAAE,SAAAnL,EAAAid,WAAA3T,GAAA,IACA+C,KAAAqQ,QAAAzR,IAAAE,SAAAF,IAAAE,SAAAnL,EAAAid,WAAA3T,GAAA,IACA+C,KAAAsQ,QAAA1R,IAAAE,SAAAF,IAAAE,SAAAnL,EAAAid,WAAA3T,GAAA,IAEAtJ,EAAAsd,IAAA7c,IAAA6I,EACAtJ,EAAAud,IAAA9c,IAAAT,EAAAkd,cAAA5T,GAEAtJ,EAAA8V,QAAAzD,OAEApH,IAAAkC,eA0BAlN,KAAAqa,IAAA3I,eAAAoL,EACA9c,KAAAmd,KAAAzL,eAAAoL,EAEA9c,KAAAqa,IAAA7Z,IAAA,KAGAiP,IAAAoN,cAAArH,UAAA,GAAA9F,IASAD,IAAAgG,GAAA8H,eAAA,WAEA7N,GAAAiG,MAAA3V,KAAA4V,UACA,IAAA7V,GAAAC,IAEAA,MAAA2H,KAAA,oBACA3H,KAAAsD,OAAAtD,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,SAAAuP,wBACAvP,KAAA6V,QAAA7V,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,UAAAuP,uBAEA,IAAAiO,GACAvO,EAAA,GAAAlN,KAAAsL,OAEArN,MAAAoY,MAAApY,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,kBACAA,KAAAqY,OAAArY,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,kBACAA,KAAAsN,IAAAtN,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,UAAAwP,uBAGAxP,KAAAoY,MAAA5X,IAAA,KACAR,KAAAqY,OAAA7X,IAAA,KAGAyO,EAAApB,QAAA7N,KAAAoY,MAAA5X,IAAAR,KAAAqY,OAAA7X,KAEAgd,EAAA/Z,GAAAga,oBACAha,GAAAia,gBAAAja,GAAAka,YAAAH,EAYA,IAAAI,GAAAna,GAAAoa,oBACApa,IAAAqa,iBAAAra,GAAAsa,aAAAH,GACAna,GAAAua,oBAAAva,GAAAsa,aAAAta,GAAAwa,kBAAAje,KAAAoY,MAAA5X,IAAAR,KAAAqY,OAAA7X,KACAiD,GAAAya,qBAAAza,GAAAka,YAAAla,GAAA0a,kBAAA1a,GAAAmK,WAAAqB,EAAA3B,IAAA,GACA7J,GAAA2a,wBAAA3a,GAAAka,YAAAla,GAAA4a,iBAAA5a,GAAAsa,aAAAH,GACAna,GAAAkK,YAAAlK,GAAAmK,WAAA,MACAnK,GAAAqa,iBAAAra,GAAAsa,aAAA,MACAta,GAAAia,gBAAAja,GAAAka,YAAA,MAYA5d,EAAAuN,IAAA9M,IAAAyO,EAAA3B,IAGAtN,KAAAsD,OAAAqO,YAAA,WAEA3G,IAAAgC,eAEAvJ,GAAAia,gBAAAja,GAAAka,YAAAH,GAEAxS,IAAAmC,cACA9K,GAAAiU,SAAA,EAAA,EAAA,KAAA,MACAlK,KAAAsK,YAAA1L,IAAAC,QAAA,GAAAlL,EAAAqY,MAAA5X,IAAAT,EAAAsY,OAAA7X,IAAA,IAAA,MAGAT,EAAA8V,QAAAzD,OAEApH,IAAAoC,aAEA3J,GAAAia,gBAAAja,GAAAka,YAAA,MAEA3S,IAAAkC,cACA7K,GAAAiU,SAAA,EAAA,EAAA,IAAA,OAMA7G,IAAAgG,GAAA8H,eAAA/H,UAAA,GAAA9F,ICznCAD,IAAA6O,IAAA,WAEA5O,GAAAiG,MAAA3V,KAAA4V,UACA,IAAA7V,GAAAC,IAEAA,MAAA2H,KAAA,SACA3H,KAAAod,IAAApd,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,MAAAuP,wBACAvP,KAAAue,MAAAve,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,UACAA,KAAAue,MAAA/d,IAAA,GAEAR,KAAAuQ,KAAA,WAEA7H,QAAAC,IAAA,SAAA5I,EAAAwe,MAAA/d,MAGAR,KAAAod,IAAAzL,YAAA3R,KAAAuQ,KACAvQ,KAAAue,MAAA7M,eAAA1R,KAAAuQ,MAEAd,IAAA6O,IAAA9I,UAAA,GAAA9F,IAMAD,IAAA+O,eAAA,WAEA9O,GAAAiG,MAAA3V,KAAA4V,UACA,IAAA7V,GAAAC,IAEAA,MAAA2H,KAAA,iBACA3H,KAAAod,IAAApd,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,MAAAuP,wBAEAvP,KAAAH,UAAA,EACAG,KAAAye,IAAA,EAEAze,KAAAod,IAAAzL,YAAA,WAEA,IAAA5R,EAAAF,YAAAE,EAAAF,UAAAF,KAAAC,MACA,IAAAA,GAAAD,KAAAC,KAEAA,GAAAG,EAAAF,UAAA,MAEAE,EAAAF,UAAAF,KAAAC,MACA8I,QAAAC,IAAA,QAAA5I,EAAA0e,KACA1e,EAAA0e,IAAA,GAGA1e,EAAA0e,QAGAhP,IAAA+O,eAAAhJ,UAAA,GAAA9F,IAKAD,IAAAiP,MAAA,WAEAhP,GAAAiG,MAAA3V,KAAA4V,UACA,IAAA7V,GAAAC,IAEAA,MAAA2H,KAAA,QACA3H,KAAAwI,EAAAxI,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,UACAA,KAAA2e,OAAA3e,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,WAEAA,KAAAuQ,KAAA,WAEAxQ,EAAA4e,OAAAne,IAAAT,EAAAyI,EAAAhI,KAGAR,KAAAwI,EAAAkJ,eAAA1R,KAAAuQ,MAGAd,IAAAiP,MAAAlJ,UAAA,GAAA9F,IAMAD,IAAAmP,aAAA,WAEAlP,GAAAiG,MAAA3V,KAAA4V,UAGA5V,MAAA2H,KAAA,eACA3H,KAAA6e,QAAA7e,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,SAEAA,KAAAiU,YAAA,SAAAD,GAEAhU,KAAA6e,QAAAre,IAAAwT,IAIAvE,IAAAmP,aAAApJ,UAAA,GAAA9F,IAQAD,IAAAqP,OAAA,WAEApP,GAAAiG,MAAA3V,KAAA4V,UACA,IAAA7V,GAAAC,IAEAA,MAAA2H,KAAA,SACA3H,KAAAod,IAAApd,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,MAAAuP,wBAEAvP,KAAAqa,IAAAra,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,QACAA,KAAAqa,IAAA7Z,IAAA,EAEAR,KAAA6V,QAAA7V,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,UAAAuP,wBACAvP,KAAAqd,IAAArd,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,UAEAA,KAAAod,IAAAzL,YAAA,WAGA,IAAA,GAAAtI,GAAA,EAAAA,EAAAtJ,EAAAsa,IAAAxS,MAAAwB,IAEAtJ,EAAAsd,IAAA7c,IAAA6I,EACAtJ,EAAA8V,QAAAzD,SAKA3C,IAAAqP,OAAAtJ,UAAA,GAAA9F,IAQAD,IAAAsP,WAAA,WAEArP,GAAAiG,MAAA3V,KAAA4V,UACA,IAAA7V,GAAAC,IAEAA,MAAA2H,KAAA,eACA3H,KAAAod,IAAApd,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,MAAAuP,wBAEAvP,KAAAgf,KAAAhf,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,YACAA,KAAAgf,KAAAxe,KAAA,EAEAR,KAAAif,YAAAjf,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,OAAAuP,wBACAvP,KAAAkf,YAAAlf,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,OAAAuP,wBAEAvP,KAAAod,IAAAzL,YAAA,WAEA5R,EAAAif,KAAAxe,OAAA,EAEAT,EAAAkf,YAAA7M,OAIArS,EAAAmf,YAAA9M,QAIApS,KAAAgf,KAAAtN,eAAA,WAEA3R,EAAAqd,IAAAzL,gBAIAlC,IAAAsP,WAAAvJ,UAAA,GAAA9F,IAOAD,IAAA0P,MAAA,WAEAzP,GAAAiG,MAAA3V,KAAA4V,UACA,IAAA7V,GAAAC,IAEAA,MAAA2H,KAAA,QACA3H,KAAAod,IAAApd,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,MAAAuP,wBAEAvP,KAAAof,WAEA,KAAA,GAAA/V,GAAA,EAAA,GAAAA,EAAAA,IAEArJ,KAAAof,SAAAza,KAAA3E,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,WAAAqJ,EAAAkG,wBAGAvP,MAAAod,IAAAzL,YAAA,WAEA,IAAA,GAAAtI,KAAAtJ,GAAAqf,SAEArf,EAAAqf,SAAA/V,GAAA+I,SAOA3C,IAAA0P,MAAA3J,UAAA,GAAA9F,IAOAD,IAAA4P,SAAA,WAEA3P,GAAAiG,MAAA3V,KAAA4V,WAEA5V,KAAA2H,KAAA,WACA3H,KAAAsf,UAAA,GACAtf,KAAAuf,SAAAvf,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,aACAA,KAAAuf,SAAA/e,IAAA,IACAR,KAAA6V,QAAA7V,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,UAAAuP,wBAEAvP,KAAAuQ,KAAA,WAEA,GAAA,IAAAvQ,KAAAsf,UAAA,CACA,GAAAvf,GAAAC,IAEAA,MAAAsf,UAAAE,WAAA,WAEAzf,EAAAuf,UAAA,GACAvf,EAAA8V,QAAAzD,OACArS,EAAAwQ,QAEAvQ,KAAAuf,SAAA/e,OAGAR,KAAAuQ,QAIAd,IAAA4P,SAAA7J,UAAA,GAAA9F,IAOAD,IAAAgQ,QAEAhQ,IAAAgQ,KAAAC,UAAA,WAEAhQ,GAAAiG,MAAA3V,KAAA4V,WAEA5V,KAAA2H,KAAA,YACA3H,KAAAod,IAAApd,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,MAAAuP,wBACAvP,KAAA2e,OAAA3e,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,UAEA,IAAAD,GAAAC,IAEAA,MAAAod,IAAAzL,YAAA,WAEA5R,EAAA4e,OAAAne,IAAAO,KAAAyY,IAAA7Z,KAAAC,MAAA,MAGAI,KAAAod,IAAAzL,eAIAlC,IAAAgQ,KAAAC,UAAAlK,UAAA,GAAA9F,IAQAD,IAAAgQ,KAAAE,aAAA,WAEAjQ,GAAAiG,MAAA3V,KAAA4V,WAEA5V,KAAA2H,KAAA,eACA3H,KAAAod,IAAApd,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,MAAAuP,wBACAvP,KAAA2e,OAAA3e,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,UAEA,IAAAD,GAAAC,KACA4f,EAAAjgB,KAAAC,MAAA,GAEAI,MAAAod,IAAAzL,YAAA,WAEA5R,EAAA4e,OAAAne,IAAAb,KAAAC,MAAA,IAAAggB,GAGA5f,KAAAod,IAAAzL,eAIAlC,IAAAgQ,KAAAE,aAAAnK,UAAA,GAAA9F,IAKAD,IAAAoQ,SAEApQ,IAAAoQ,MAAAC,QAAA,WAEApQ,GAAAiG,MAAA3V,KAAA4V,WAEA5V,KAAA2H,KAAA,UACA3H,KAAAod,IAAApd,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,MAAAuP,wBACAvP,KAAA+f,QAAA/f,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,YACAA,KAAAggB,MAAAhgB,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,UACAA,KAAAigB,MAAAjgB,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,UACAA,KAAAkgB,MAAAlgB,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,UACAA,KAAAmgB,MAAAngB,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,UACAA,KAAAogB,QAAApgB,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,YACAA,KAAAqgB,QAAArgB,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,YACAA,KAAAsgB,QAAAtgB,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,YACAA,KAAAugB,QAAAvgB,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,YACAA,KAAAwgB,QAAAxgB,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,WAEA,EAAA,GAAAD,GAAAC,IACAL,MAAAC,MAAA,IAEAI,KAAAod,IAAAzL,YAAA,WAEA,GAAA8O,GAAAC,UAAAC,cACAC,EAAA,CAEA,KAAA,GAAAC,KAAAJ,GAEAA,EAAAI,GAAAC,OAEA/gB,EAAAigB,MAAAxf,IAAAigB,EAAAI,GAAAC,KAAA,GACA/gB,EAAAkgB,MAAAzf,IAAAigB,EAAAI,GAAAC,KAAA,GACA/gB,EAAAmgB,MAAA1f,IAAAigB,EAAAI,GAAAC,KAAA,GACA/gB,EAAAogB,MAAA3f,IAAAigB,EAAAI,GAAAC,KAAA,GAEA/gB,EAAAqgB,QAAA5f,IAAAigB,EAAAI,GAAAE,QAAA,GAAAC,QACAjhB,EAAAqgB,QAAA5f,IAAAigB,EAAAI,GAAAE,QAAA,GAAAC,QACAjhB,EAAAugB,QAAA9f,IAAAigB,EAAAI,GAAAE,QAAA,GAAAC,QACAjhB,EAAAwgB,QAAA/f,IAAAigB,EAAAI,GAAAE,QAAA,GAAAC,QACAjhB,EAAAygB,QAAAhgB,IAAAigB,EAAAI,GAAAE,QAAA,GAAAC,QAEAJ,IAIA7gB,GAAAggB,QAAAvf,IAAAogB,GAGA5gB,KAAAod,IAAAzL,eAIAlC,IAAAoQ,MAAAC,QAAAtK,UAAA,GAAA9F,IC7VAD,IAAA1O,QAGA0O,IAAA1O,KAAAkgB,OAAA,WAEA,GAAAlhB,GAAAC,IACA0P,IAAAiG,MAAA3V,KAAA4V,WAEA5V,KAAA2H,KAAA,SACA3H,KAAAod,IAAApd,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,MAAAuP,wBACAvP,KAAA2e,OAAA3e,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,WAEAA,KAAAod,IAAAzL,YAAA,WAEA5R,EAAA4e,OAAAne,IAAAO,KAAAC,UAGAhB,KAAAod,IAAAzL,eAGAlC,IAAA1O,KAAAkgB,OAAAzL,UAAA,GAAA9F,IAIAD,IAAA1O,KAAAmgB,MAAA,WAWA,QAAAC,KAEAphB,EAAA4e,OAAAne,IAAAO,KAAAqgB,IAAArgB,KAAAsgB,IAAAthB,EAAAS,IAAAA,IAAAT,EAAAqhB,IAAA5gB,KAAAT,EAAAshB,IAAA7gB,KAXA,GAAAT,GAAAC,IACA0P,IAAAiG,MAAA3V,KAAA4V,WAEA5V,KAAA2H,KAAA,QACA3H,KAAAQ,IAAAR,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,QACAA,KAAAohB,IAAAphB,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,QACAA,KAAAqhB,IAAArhB,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,QACAA,KAAA2e,OAAA3e,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,WAOAA,KAAAohB,IAAA5gB,IAAA,EACAR,KAAAqhB,IAAA7gB,IAAA,EAEAR,KAAAQ,IAAAkR,eAAAyP,EACAnhB,KAAAohB,IAAA1P,eAAAyP,EACAnhB,KAAAqhB,IAAA3P,eAAAyP,EAEAnhB,KAAAQ,IAAAA,IAAA,IAGAiP,IAAA1O,KAAAmgB,MAAA1L,UAAA,GAAA9F,IAKAD,IAAA1O,KAAAugB,WAAA,WAWA,QAAAC,KAEA,GAAA1b,GAAA9E,KAAAsgB,IAAA,EAAAtgB,KAAAqgB,IAAA,GAAArhB,EAAAS,IAAAA,IAAAT,EAAAqhB,IAAA5gB,MAAAT,EAAAshB,IAAA7gB,IAAAT,EAAAqhB,IAAA5gB,MACAT,GAAA4e,OAAAne,IAAAqF,EAAAA,GAAA,EAAA,EAAAA,GAZA,GAAA9F,GAAAC,IACA0P,IAAAiG,MAAA3V,KAAA4V,WAEA5V,KAAA2H,KAAA,aACA3H,KAAAQ,IAAAR,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,QACAA,KAAAohB,IAAAphB,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,QACAA,KAAAqhB,IAAArhB,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,QACAA,KAAA2e,OAAA3e,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,WAQAA,KAAAohB,IAAA5gB,IAAA,EACAR,KAAAqhB,IAAA7gB,IAAA,EAEAR,KAAAQ,IAAAkR,eAAA6P,EACAvhB,KAAAohB,IAAA1P,eAAA6P,EACAvhB,KAAAqhB,IAAA3P,eAAA6P,EAEAvhB,KAAAQ,IAAAA,IAAA,IAGAiP,IAAA1O,KAAAugB,WAAA9L,UAAA,GAAA9F,IAKAD,IAAA1O,KAAAygB,SAAA,WAEA9R,GAAAiG,MAAA3V,KAAA4V,UACA,IAAA7V,GAAAC,IAEAA,MAAA2H,KAAA,kBACA3H,KAAA2e,OAAA3e,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,WACAA,KAAAwI,EAAAxI,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,UACAA,KAAAyhB,QAAAzhB,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,YACAA,KAAA0hB,QAAA1hB,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,YACAA,KAAA2hB,QAAA3hB,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,YACAA,KAAA4hB,QAAA5hB,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,YAEAA,KAAAuQ,KAAA,WAEA,GAAAxQ,EAAAyI,EAAAhI,IAAAT,EAAA2hB,QAAAlhB,IAGA,YADAT,EAAA4e,OAAAne,IAAAT,EAAA6hB,QAAAphB,IAIA,IAAAT,EAAAyI,EAAAhI,IAAAT,EAAA0hB,QAAAjhB,IAGA,YADAT,EAAA4e,OAAAne,IAAAT,EAAA4hB,QAAAnhB,IAIA,IAAAqhB,GAAA/b,WAAA/F,EAAA4hB,QAAAnhB,KACAshB,EAAAhc,WAAA/F,EAAA6hB,QAAAphB,KACAuhB,EAAAjc,WAAA/F,EAAA0hB,QAAAjhB,KACAwhB,EAAAlc,WAAA/F,EAAA2hB,QAAAlhB,KACAqF,EAAAC,WAAA/F,EAAAyI,EAAAhI,KAEAyhB,GAAA,EACAC,EAAAnhB,KAAAqgB,IAAAW,EAAAC,GACAG,EAAAphB,KAAAsgB,IAAAU,EAAAC,EACAE,IAAAH,IAAAE,GAAA,EAEA,IAAAG,IAAA,EACAC,EAAAthB,KAAAqgB,IAAAS,EAAAC,GACAQ,EAAAvhB,KAAAsgB,IAAAQ,EAAAC,EACAO,IAAAR,IAAAO,GAAA,EAEA,IAAAG,GAAA,CAEAA,GAAAN,GAAAE,EAAAtc,IAAAyc,EAAAD,IAAAF,EAAAD,IACArc,EAAAqc,IAAAI,EAAAD,IAAAF,EAAAD,GAEAniB,EAAA4e,OAAAne,IAAA4hB,EAAAE,EAAAC,EACAA,EAAAF,GAIAriB,KAAAwI,EAAAhI,IAAA,EACAR,KAAAyhB,QAAAjhB,IAAA,GACAR,KAAA0hB,QAAAlhB,IAAA,EACAR,KAAA2hB,QAAAnhB,IAAA,EACAR,KAAA4hB,QAAAphB,IAAA,EAGAR,KAAAwI,EAAAkJ,eAAA1R,KAAAuQ,KACAvQ,KAAAyhB,QAAA/P,eAAA1R,KAAAuQ,KACAvQ,KAAA0hB,QAAAhQ,eAAA1R,KAAAuQ,KACAvQ,KAAA2hB,QAAAjQ,eAAA1R,KAAAuQ,KACAvQ,KAAA4hB,QAAAlQ,eAAA1R,KAAAuQ,KAEAvQ,KAAAuQ,QAIAd,IAAA1O,KAAAygB,SAAAhM,UAAA,GAAA9F,IAMAD,IAAA1O,KAAAyhB,IAAA,WAEA9S,GAAAiG,MAAA3V,KAAA4V,UACA,IAAA7V,GAAAC,IACAA,MAAA2H,KAAA,MACA3H,KAAAyiB,OAAAziB,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,WACAA,KAAA2e,OAAA3e,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,WAEAA,KAAAyiB,OAAA/Q,eAAA,WAEA3R,EAAA4e,OAAAne,IAAAO,KAAA2hB,IAAA3iB,EAAA0iB,OAAAjiB,OAIAiP,IAAA1O,KAAAyhB,IAAAhN,UAAA,GAAA9F,IAIAD,IAAA1O,KAAA4hB,IAAA,WAEAjT,GAAAiG,MAAA3V,KAAA4V,UACA,IAAA7V,GAAAC,IACAA,MAAA2H,KAAA,QACA3H,KAAAyiB,OAAAziB,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,WACAA,KAAA2e,OAAA3e,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,WAEAA,KAAAyiB,OAAA/Q,eAAA,WAEA3R,EAAA4e,OAAAne,IAAAO,KAAAyY,IAAAzZ,EAAA0iB,OAAAjiB,OAIAiP,IAAA1O,KAAA4hB,IAAAnN,UAAA,GAAA9F,IAKAD,IAAA1O,KAAA6hB,IAAA,WAEAlT,GAAAiG,MAAA3V,KAAA4V,UACA,IAAA7V,GAAAC,IAEAA,MAAA2H,KAAA,MACA3H,KAAA2e,OAAA3e,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,WACAA,KAAA6iB,QAAA7iB,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,YACAA,KAAA8iB,QAAA9iB,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,YAEAA,KAAAuQ,KAAA,WAEAxQ,EAAA4e,OAAAne,IAAAsF,WAAA/F,EAAA8iB,QAAAriB,KAAAsF,WAAA/F,EAAA+iB,QAAAtiB,MAGAR,KAAA6iB,QAAAnR,eAAA1R,KAAAuQ,KACAvQ,KAAA8iB,QAAApR,eAAA1R,KAAAuQ,KAEAvQ,KAAA6iB,QAAAriB,IAAA,EACAR,KAAA8iB,QAAAtiB,IAAA,GAGAiP,IAAA1O,KAAA6hB,IAAApN,UAAA,GAAA9F,IAMAD,IAAA1O,KAAAgiB,SAAA,WAEArT,GAAAiG,MAAA3V,KAAA4V,UACA,IAAA7V,GAAAC,IAEAA,MAAA2H,KAAA,WACA3H,KAAA2e,OAAA3e,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,WACAA,KAAA6iB,QAAA7iB,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,YACAA,KAAA8iB,QAAA9iB,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,YAEAA,KAAAuQ,KAAA,WAEAxQ,EAAA4e,OAAAne,IAAAT,EAAA8iB,QAAAriB,IAAAT,EAAA+iB,QAAAtiB,KAGAR,KAAA6iB,QAAAnR,eAAA1R,KAAAuQ,KACAvQ,KAAA8iB,QAAApR,eAAA1R,KAAAuQ,KAEAvQ,KAAA6iB,QAAAriB,IAAA,EACAR,KAAA8iB,QAAAtiB,IAAA,GAIAiP,IAAA1O,KAAAgiB,SAAAvN,UAAA,GAAA9F,IAIAD,IAAA1O,KAAAiiB,OAAA,WAEAtT,GAAAiG,MAAA3V,KAAA4V,UACA,IAAA7V,GAAAC,IAEAA,MAAA2H,KAAA,SACA3H,KAAA2e,OAAA3e,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,WACAA,KAAA6iB,QAAA7iB,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,YACAA,KAAA8iB,QAAA9iB,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,YAEAA,KAAAuQ,KAAA,WAEAxQ,EAAA4e,OAAAne,IAAAT,EAAA8iB,QAAAriB,IAAAT,EAAA+iB,QAAAtiB,KAGAR,KAAA6iB,QAAAnR,eAAA1R,KAAAuQ,KACAvQ,KAAA8iB,QAAApR,eAAA1R,KAAAuQ,MAGAd,IAAA1O,KAAAiiB,OAAAxN,UAAA,GAAA9F,IAKAD,IAAA1O,KAAAkiB,WAKAxT,IAAA1O,KAAAkiB,QAAAC,OAAA,WAEAxT,GAAAiG,MAAA3V,KAAA4V,UACA,IAAA7V,GAAAC,IAEAA,MAAA2H,KAAA,SACA3H,KAAA2e,OAAA3e,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,WACAA,KAAA6iB,QAAA7iB,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,YAEAA,KAAAuQ,KAAA,WAEAxQ,EAAA4e,OAAAne,MAAA,EAAAT,EAAA8iB,QAAAriB,MAGAR,KAAA6iB,QAAAnR,eAAA1R,KAAAuQ,MAGAd,IAAA1O,KAAAkiB,QAAAC,OAAA1N,UAAA,GAAA9F,IAMAD,IAAA1O,KAAAkiB,QAAAE,QAAA,WAEAzT,GAAAiG,MAAA3V,KAAA4V,UACA,IAAA7V,GAAAC,IAEAA,MAAA2H,KAAA,UACA3H,KAAA2e,OAAA3e,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,WACAA,KAAA6iB,QAAA7iB,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,YACAA,KAAA8iB,QAAA9iB,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,YAEAA,KAAAuQ,KAAA,WAEAxQ,EAAA4e,OAAAne,IAAAT,EAAA8iB,QAAAriB,IAAAT,EAAA+iB,QAAAtiB,KAGAR,KAAA6iB,QAAAnR,eAAA1R,KAAAuQ,KACAvQ,KAAA8iB,QAAApR,eAAA1R,KAAAuQ,MAGAd,IAAA1O,KAAAkiB,QAAAE,QAAA3N,UAAA,GAAA9F,IAMAD,IAAA1O,KAAAkiB,QAAAG,QAAA,WAEA1T,GAAAiG,MAAA3V,KAAA4V,UACA,IAAA7V,GAAAC,IAEAA,MAAA2H,KAAA,UACA3H,KAAA2e,OAAA3e,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,WACAA,KAAAyiB,OAAAziB,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,UACAA,KAAA6iB,QAAA7iB,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,YACAA,KAAA8iB,QAAA9iB,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,YACAA,KAAAyiB,OAAAjiB,IAAA,EACAR,KAAA6iB,QAAAriB,IAAA,EACAR,KAAA8iB,QAAAtiB,IAAA,EAEAR,KAAAuQ,KAAA,WAEAxQ,EAAA4e,OAAAne,IAEAT,EAAA0iB,OAAAjiB,IAAAO,KAAAqgB,IAAArhB,EAAA8iB,QAAAriB,IAAAT,EAAA+iB,QAAAtiB,MACAT,EAAA0iB,OAAAjiB,IAAAO,KAAAsgB,IAAAthB,EAAA8iB,QAAAriB,IAAAT,EAAA+iB,QAAAtiB,MAIAR,KAAA6iB,QAAAnR,eAAA1R,KAAAuQ,KACAvQ,KAAA8iB,QAAApR,eAAA1R,KAAAuQ,KACAvQ,KAAAyiB,OAAA/Q,eAAA1R,KAAAuQ,MAEAd,IAAA1O,KAAAkiB,QAAAG,QAAA5N,UAAA,GAAA9F,IAKAD,IAAA1O,KAAAkiB,QAAAI,OAAA,WAEA3T,GAAAiG,MAAA3V,KAAA4V,UACA,IAAA7V,GAAAC,IAEAA,MAAA2H,KAAA,SACA3H,KAAA2e,OAAA3e,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,WACAA,KAAA6iB,QAAA7iB,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,YACAA,KAAA8iB,QAAA9iB,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,YAEAA,KAAAuQ,KAAA,WAEAxQ,EAAA4e,OAAAne,IAAAT,EAAA8iB,QAAAriB,IAAAT,EAAA+iB,QAAAtiB,KAGAR,KAAA6iB,QAAAnR,eAAA1R,KAAAuQ,KACAvQ,KAAA8iB,QAAApR,eAAA1R,KAAAuQ,MAIAd,IAAA1O,KAAAkiB,QAAAI,OAAA7N,UAAA,GAAA9F,IAMAD,IAAA1O,KAAAkiB,QAAAK,OAAA,WAEA5T,GAAAiG,MAAA3V,KAAA4V,UACA,IAAA7V,GAAAC,IAEAA,MAAA2H,KAAA,SACA3H,KAAA2e,OAAA3e,KAAAiQ,WAAA,GAAAmB,MAAApR,KAAA,WACAA,KAAA6iB,QAAA7iB,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,YACAA,KAAA8iB,QAAA9iB,KAAAqQ,UAAA,GAAAe,MAAApR,KAAA,YAEAA,KAAAuQ,KAAA,WAEAxQ,EAAA4e,OAAAne,IAAAT,EAAA8iB,QAAAriB,KAAAT,EAAA+iB,QAAAtiB,KAGAR,KAAA6iB,QAAAnR,eAAA1R,KAAAuQ,KACAvQ,KAAA8iB,QAAApR,eAAA1R,KAAAuQ,MAGAd,IAAA1O,KAAAkiB,QAAAK,OAAA9N,UAAA,GAAA9F","file":"cables.min.js","sourcesContent":["\n\nfunction Timer()\n{\n    var self=this;\n    var timeStart=Date.now();\n    var timeOffset=0;\n\n    var currentTime=0;\n    var lastTime=0;\n    var paused=true;\n\n    function getTime()\n    {\n        lastTime=(Date.now()-timeStart)/1000;\n        return lastTime+timeOffset;\n\n    }\n\n    this.update=function()\n    {\n        if(paused) return;\n        currentTime=getTime();\n\n        return currentTime;\n    };\n\n    this.getTime=function()\n    {\n        return currentTime;\n    };\n\n    this.togglePlay=function()\n    {\n        if(paused)self.play();\n            else self.pause();\n    };\n\n    this.setOffset=function(val)\n    {\n        if(currentTime+val<0)\n        {\n            timeStart=Date.now();\n            timeOffset=0;\n            currentTime=0;\n        }\n        else\n        {\n            timeOffset+=val;\n            currentTime=lastTime+timeOffset;\n        }\n        \n\n    };\n\n    this.play=function()\n    {\n        timeStart=Date.now();\n        paused=false;\n    };\n\n    this.pause=function()\n    {\n        timeOffset=currentTime;\n        paused=true;\n    };\n\n}","function generateUUID()\n{\n    var d = new Date().getTime();\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c)\n    {\n        var r = (d + Math.random()*16)%16 | 0;\n        d = Math.floor(d/16);\n        return (c=='x' ? r : (r&0x3|0x8)).toString(16);\n    });\n    return uuid;\n}\n\n// ----------------------------------------------------------------\nfunction ajaxRequest(url, callback)\n{\n    var request = new XMLHttpRequest();\n    request.open(\"GET\", url, true);\n    request.responseType = \"arraybuffer\";\n    request.onload = function(e)\n    {\n        callback(e.target.response);\n    };\n    request.send();\n}\n\nString.prototype.endl = function(){return this+'\\n';};\n\n\n","var CGL=CGL ||\n{\n    DEG2RAD:3.14159/180.0\n};\n\n\n\nCGL.Mesh=function(geom)\n{\n    var bufTexCoords=-1;\n    var bufVertices = gl.createBuffer();\n    var bufVerticesIndizes = gl.createBuffer();\n\n    this.setGeom=function(geom)\n    {\n        \n        gl.bindBuffer(gl.ARRAY_BUFFER, bufVertices);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(geom.vertices), gl.STATIC_DRAW);\n        bufVertices.itemSize = 3;\n        bufVertices.numItems = geom.vertices.length/3;\n\n\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufVerticesIndizes);\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(geom.verticesIndices), gl.STATIC_DRAW);\n        bufVerticesIndizes.itemSize = 1;\n        bufVerticesIndizes.numItems = geom.verticesIndices.length;\n\n        if(geom.texCoords.length>0)\n        {\n            if(bufTexCoords==-1)bufTexCoords = gl.createBuffer();\n            gl.bindBuffer(gl.ARRAY_BUFFER, bufTexCoords);\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(geom.texCoords), gl.STATIC_DRAW);\n            bufTexCoords.itemSize = 2;\n            bufTexCoords.numItems = geom.texCoords.length/bufTexCoords.itemSize;\n        }\n\n    };\n\n    this.setGeom(geom);\n\n\n    this.render=function(shader)\n    {\n        shader.bind();\n\n        GL.enableVertexAttribArray(shader.getAttrVertexPos());\n        if(bufTexCoords!=-1) GL.enableVertexAttribArray(shader.getAttrTexCoords());\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, bufVertices);\n        gl.vertexAttribPointer(shader.getAttrVertexPos(),bufVertices.itemSize, gl.FLOAT, false, 0, 0);\n\n        if(bufTexCoords!=-1)\n        {\n            gl.bindBuffer(gl.ARRAY_BUFFER, bufTexCoords);\n            gl.vertexAttribPointer(shader.getAttrTexCoords(),bufTexCoords.itemSize, gl.FLOAT, false, 0, 0);\n        }\n\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufVerticesIndizes);\n        gl.drawElements(gl.TRIANGLES, bufVerticesIndizes.numItems, gl.UNSIGNED_SHORT, 0);\n    };\n\n};\n\nCGL.Geometry=function()\n{\n    this.faceVertCount=3;\n    this.vertices=[];\n    this.verticesIndices=[];\n    this.texCoords=[];\n    this.texCoordsIndices=[];\n\n    this.clear=function()\n    {\n        this.vertices.length=0;\n        this.verticesIndices.length=0;\n        this.texCoords.length=0;\n        this.texCoordsIndices.length=0;\n    };\n\n    this.addFace=function(a,b,c)\n    {\n        var face=[-1,-1,-1];\n\n        for(var iv=0;iv<this.vertices;iv+=3)\n        {\n            if( this.vertices[iv+0]==a[0] &&\n                this.vertices[iv+1]==a[1] &&\n                this.vertices[iv+2]==a[2]) face[0]=iv/3;\n\n            if( this.vertices[iv+0]==b[0] &&\n                this.vertices[iv+1]==b[1] &&\n                this.vertices[iv+2]==b[2]) face[1]=iv/3;\n\n            if( this.vertices[iv+0]==c[0] &&\n                this.vertices[iv+1]==c[1] &&\n                this.vertices[iv+2]==c[2]) face[2]=iv/3;\n        }\n\n        if(face[0]==-1)\n        {\n            this.vertices.push(a[0],a[1],a[2]);\n            face[0]=(this.vertices.length-1)/3;\n        }\n\n        if(face[1]==-1)\n        {\n            this.vertices.push(b[0],b[1],b[2]);\n            face[1]=(this.vertices.length-1)/3;\n        }\n\n        if(face[2]==-1)\n        {\n            this.vertices.push(c[0],c[1],c[2]);\n            face[2]=(this.vertices.length-1)/3;\n        }\n\n        this.verticesIndices.push(face[0]);\n        this.verticesIndices.push(face[1]);\n        this.verticesIndices.push(face[2]);\n\n    };\n\n\n\n};\n\nparseOBJ = function(buff)\n{\n\n    _readline = function(a, off)  // Uint8Array, offset\n    {\n        var s = \"\";\n        while(a[off] != 10) s += String.fromCharCode(a[off++]);\n        return s;\n    };\n\n    var geom = new CGL.Geometry();\n    geom.groups = {};\n    \n    // geom.texCoords   = [];\n    geom.c_norms = [];\n    \n    // geom.texCoordsIndices   = [];\n    geom.i_norms = [];\n    \n    var cg = {from: 0, to:0};   // current group\n    var off = 0;\n    var a = new Uint8Array(buff);\n    \n    while(off < a.length)\n    {\n        var line = _readline(a, off);\n        off += line.length + 1;\n        line = line.replace(/ +(?= )/g,'');\n        line = line.replace(/(^\\s+|\\s+$)/g, '');\n        var cds = line.split(\" \");\n        if(cds[0] == \"g\")\n        {\n            cg.to = geom.verticesIndices.length;\n            if(geom.groups[cds[1]] == null) geom.groups[cds[1]] = {from:geom.verticesIndices.length, to:0};\n            cg = geom.groups[cds[1]];\n        }\n        if(cds[0] == \"v\")\n        {\n            var x = parseFloat(cds[1]);\n            var y = parseFloat(cds[2]);\n            var z = parseFloat(cds[3]);\n            geom.vertices.push(x,y,z);\n        }\n        if(cds[0] == \"vt\")\n        {\n            var x = parseFloat(cds[1]);\n            var y = 1-parseFloat(cds[2]);\n            geom.texCoords.push(x,y);\n        }\n        if(cds[0] == \"vn\")\n        {\n            var x = parseFloat(cds[1]);\n            var y = parseFloat(cds[2]);\n            var z = parseFloat(cds[3]);\n            geom.c_norms.push(x,y,z);\n        }\n        if(cds[0] == \"f\")\n        {\n            var v0a = cds[1].split(\"/\"), v1a = cds[2].split(\"/\"), v2a = cds[3].split(\"/\");\n            var vi0 = parseInt(v0a[0])-1, vi1 = parseInt(v1a[0])-1, vi2 = parseInt(v2a[0])-1;\n            var ui0 = parseInt(v0a[1])-1, ui1 = parseInt(v1a[1])-1, ui2 = parseInt(v2a[1])-1;\n            var ni0 = parseInt(v0a[2])-1, ni1 = parseInt(v1a[2])-1, ni2 = parseInt(v2a[2])-1;\n            \n            var vlen = geom.vertices.length/3, ulen = geom.texCoords.length/2, nlen = geom.c_norms.length/3;\n            if(vi0<0) vi0 = vlen + vi0+1; if(vi1<0) vi1 = vlen + vi1+1; if(vi2<0) vi2 = vlen + vi2+1;\n            if(ui0<0) ui0 = ulen + ui0+1; if(ui1<0) ui1 = ulen + ui1+1; if(ui2<0) ui2 = ulen + ui2+1;\n            if(ni0<0) ni0 = nlen + ni0+1; if(ni1<0) ni1 = nlen + ni1+1; if(ni2<0) ni2 = nlen + ni2+1;\n            \n            geom.verticesIndices.push(vi0, vi1, vi2);  //cg.verticesIndices.push(vi0, vi1, vi2)\n            geom.texCoordsIndices  .push(ui0, ui1, ui2);  //cg.texCoordsIndices  .push(ui0, ui1, ui2);\n            geom.i_norms.push(ni0, ni1, ni2);  //cg.i_norms.push(ni0, ni1, ni2);\n            if(cds.length == 5)\n            {\n                var v3a = cds[4].split(\"/\");\n                var vi3 = parseInt(v3a[0])-1, ui3 = parseInt(v3a[1])-1, ni3 = parseInt(v3a[2])-1;\n                if(vi3<0) vi3 = vlen + vi3+1;\n                if(ui3<0) ui3 = ulen + ui3+1;\n                if(ni3<0) ni3 = nlen + ni3+1;\n                geom.verticesIndices.push(vi0, vi2, vi3);  //cg.verticesIndices.push(vi0, vi2, vi3);\n                geom.texCoordsIndices  .push(ui0, ui2, ui3);  //cg.texCoordsIndices  .push(ui0, ui2, ui3);\n                geom.i_norms.push(ni0, ni2, ni3);  //cg.i_norms.push(ni0, ni2, ni3);\n            }\n        }\n    }\n    cg.to = geom.verticesIndices.length;\n    \n    return geom;\n};\n\n\n","var CGL=CGL || {};\n\n// ---------------------------------------------------------------------------\n\nCGL.Uniform=function(_shader,_type,_name,_value)\n{\n    var self=this;\n    var loc=-1;\n    var name=_name;\n    var type=_type;\n    var value=0;\n    var shader=_shader;\n    this.needsUpdate=true;\n\n    shader.addUniform(this);\n\n    this.getType=function() {return type;};\n    this.getName=function() {return name;};\n\n    this.resetLoc=function() { loc=-1;};\n\n    this.updateValueF=function()\n    {\n        if(loc==-1) loc=gl.getUniformLocation(shader.getProgram(), name);\n        gl.uniform1f(loc, value);\n    };\n\n    this.setValueF=function(v)\n    {\n        self.needsUpdate=true;\n        value=v;\n    };\n\n    this.updateValueT=function()\n    {\n        if(loc==-1)\n        {\n            loc=gl.getUniformLocation(shader.getProgram(), name);\n            if(loc==-1) console.log('texture loc unknown!!');\n        }\n\n        gl.uniform1i(loc, 0);\n    };\n\n    this.setValueT=function(v)\n    {\n        self.needsUpdate=true;\n        value=v;\n    };\n\n    if(type=='f')\n    {\n        this.setValue=this.setValueF;\n        this.updateValue=this.updateValueF;\n    }\n\n    if(type=='t')\n    {\n        this.setValue=this.setValueT;\n        this.updateValue=this.updateValueT;\n    }\n\n    this.setValue(_value);\n};\n\n// ---------------------------------------------------------------------------\n\nCGL.Shader=function()\n{\n    var self=this;\n    var program=false;\n    var uniforms=[];\n    var needsRecompile=true;\n\n    this.removeUniform=function(name)\n    {\n        console.log('before: '+uniforms.length);\n        for(var i in uniforms)\n        {\n            if(uniforms[i].getName()==name)\n            {\n                uniforms.splice(i,1);\n                break;\n            }\n        }\n        needsRecompile=true;\n        console.log(uniforms.length);\n                \n    };\n\n    this.addUniform=function(uni)\n    {\n        uniforms.push(uni);\n        needsRecompile=true;\n    };\n\n    this.getDefaultVertexShader=function()\n    {\n        return ''+\n        'attribute vec3 vPosition;\\n'+\n        'attribute vec2 attrTexCoord;\\n'+\n        'varying vec2 texCoord;\\n'+\n        'uniform mat4 projMatrix;\\n'+\n        'uniform mat4 mvMatrix;\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        '   texCoord=attrTexCoord;\\n'+\n        // '   gl_PointSize=3.0;\\n'+\n        '   gl_Position = projMatrix * mvMatrix * vec4(vPosition,  1.0);\\n'+\n        '}\\n';\n    };\n\n    this.getDefaultFragmentShader=function()\n    {\n        return ''+\n        'precision mediump float;\\n'+\n        'void main()\\n'+\n        '{\\n'+\n\n        '   gl_FragColor = vec4(0.5,0.5,0.5,1.0);\\n'+\n        '}\\n';\n    };\n\n    this.srcVert=this.getDefaultVertexShader();\n    this.srcFrag=this.getDefaultFragmentShader();\n\n    this.setSource=function(srcVert,srcFrag)\n    {\n        this.srcVert=srcVert;\n        this.srcFrag=srcFrag;\n    };\n\n    var projMatrixUniform=-1;\n    var mvMatrixUniform=-1;\n\n    var attrTexCoords = -1;\n    var attrVertexPos = -1;\n\n    this.getAttrTexCoords=function(){return attrTexCoords;};\n    this.getAttrVertexPos=function(){return attrVertexPos;};\n\n    this.hasTextureUniforms=function()\n    {\n        for(var i in uniforms)\n        {\n            if(uniforms[i].getType()=='t') return true;\n        }\n        return false;\n    };\n\n    this.compile=function()\n    {\n        var defines='';\n        if(self.hasTextureUniforms()) defines+='#define HAS_TEXTURES'.endl();\n\n        console.log('shader compile...');\n        console.log('has textures: '+self.hasTextureUniforms() );\n        \n\n        var vs=defines+self.srcVert;\n        var fs=defines+self.srcFrag;\n\n        if(!program)\n        {\n            console.log('create shaderprogram');\n                    \n            program=createProgram(vs,fs, program);\n        }\n        else\n        {\n            console.log('recompile shaders...');\n\n            self.vshader=createShader(vs, gl.VERTEX_SHADER, self.vshader );\n            self.fshader=createShader(fs, gl.VERTEX_SHADER, self.fshader );\n            linkProgram(program);\n            mvMatrixUniform=-1;\n\n            for(var i in uniforms)uniforms[i].resetLoc();\n            \n\n        }\n\n        needsRecompile=false;\n    };\n\n    this.bind=function()\n    {\n        if(!program || needsRecompile) self.compile();\n\n        if(mvMatrixUniform==-1)\n        {\n            attrTexCoords = gl.getAttribLocation(program, 'attrTexCoord');\n            attrVertexPos = gl.getAttribLocation(program, 'vPosition');\n\n            projMatrixUniform = gl.getUniformLocation(program, \"projMatrix\");\n            mvMatrixUniform = gl.getUniformLocation(program, \"mvMatrix\");\n        }\n\n        GL.useProgram(program);\n\n        for(var i in uniforms)\n        {\n            if(uniforms[i].needsUpdate)uniforms[i].updateValue();\n        }\n\n        gl.uniformMatrix4fv(projMatrixUniform, false, cgl.pMatrix);\n        gl.uniformMatrix4fv(mvMatrixUniform, false, cgl.mvMatrix);\n    };\n\n    this.getProgram=function()\n    {\n        return program;\n    };\n\n\n    createShader =function(str, type,_shader)\n    {\n        var shader = _shader || gl.createShader(type);\n        gl.shaderSource(shader, str);\n        gl.compileShader(shader);\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\n        {\n            console.log('compile status: ');\n\n            if(type==gl.VERTEX_SHADER)console.log('VERTEX_SHADER');\n            if(type==gl.FRAGMENT_SHADER)console.log('FRAGMENT_SHADER');\n            \n            throw gl.getShaderInfoLog(shader);\n        }\n        return shader;\n    };\n\n    linkProgram=function(program)\n    {\n        gl.linkProgram(program);\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS))\n        {\n            throw gl.getProgramInfoLog(program);\n        }\n\n    };\n\n    createProgram=function(vstr, fstr)\n    {\n        var program = gl.createProgram();\n        self.vshader = createShader(vstr, gl.VERTEX_SHADER);\n        self.fshader = createShader(fstr, gl.FRAGMENT_SHADER);\n        gl.attachShader(program, self.vshader);\n        gl.attachShader(program, self.fshader);\n\n        linkProgram(program);\n        return program;\n    };\n\n\n\n};\n\n","\nvar CGL=CGL || {};\n\nCGL.State=function()\n{\n    var self=this;\n    var mvMatrixStack=[];\n    var pMatrixStack=[];\n    var shaderStack=[];\n\n    this.pMatrix=mat4.create();\n    this.mvMatrix=mat4.create();\n\n    mat4.identity(self.mvMatrix);\n\n    var simpleShader=new CGL.Shader();\n    var currentShader=simpleShader;\n\n\n    this.beginFrame=function()\n    {\n        self.pushShader(simpleShader);\n    };\n\n    this.endFrame=function()\n    {\n        self.popShader();\n        if(mvMatrixStack.length>0) console.warn('mvmatrix stack length !=0 at end of rendering...');\n        if(pMatrixStack.length>0) console.warn('pmatrix stack length !=0 at end of rendering...');\n        if(shaderStack.length>0) console.warn('shaderStack length !=0 at end of rendering...');\n    };\n\n    // shader stack\n\n    this.getShader=function()\n    {\n        return currentShader;\n    };\n\n    this.pushShader=function(shader)\n    {\n        shaderStack.push(shader);\n        currentShader=shader;\n    };\n\n    this.popShader=function()\n    {\n        if(shaderStack.length===0) throw \"Invalid movelview popMatrix!\";\n        currentShader = shaderStack.pop();\n    };\n\n    // modelview matrix stack\n\n    this.pushMvMatrix=function()\n    {\n        var copy = mat4.create();\n        mat4.copy(copy,self.mvMatrix);\n        mvMatrixStack.push(copy);\n    };\n\n    this.popMvMatrix=function()\n    {\n        if(mvMatrixStack.length===0) throw \"Invalid movelview popMatrix!\";\n        self.mvMatrix = mvMatrixStack.pop();\n    };\n\n    // projection matrix stack\n\n    this.pushPMatrix=function()\n    {\n        var copy = mat4.create();\n        mat4.copy(copy,self.pMatrix);\n        pMatrixStack.push(copy);\n    };\n\n    this.popPMatrix=function()\n    {\n        if(pMatrixStack.length===0) throw \"Invalid projection popMatrix!\";\n        self.pMatrix = pMatrixStack.pop();\n    };\n\n\n};\n\ncgl=new CGL.State();\n\n","var CGL=CGL || {};\n\nCGL.Texture=function()\n{\n    var self=this;\n    this.tex = gl.createTexture();\n\n    // gl.bindTexture(gl.TEXTURE_2D, this.tex);\n    // gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([111, 111, 111, 255]));\n    // gl.bindTexture(gl.TEXTURE_2D, null);\n\n    this.bind=function(slot)\n    {\n        gl.activeTexture(gl.TEXTURE0+slot);\n        gl.bindTexture(gl.TEXTURE_2D, self.tex);\n    };\n\n    this.setSize=function(w,h)\n    {\n        gl.bindTexture(gl.TEXTURE_2D, self.tex);\n        \n        var arr=[];\n        for(var x=0;x<w;x++)\n        {\n            for(var y=0;y<h;y++)\n            {\n                // var index=x+y*w;\n                arr.push( parseInt( (x/w)*255,10) );\n                arr.push(0);\n                arr.push( parseInt((y/w)*255,10));\n                arr.push(255);\n            }\n        }\n        var uarr=new Uint8Array(arr);\n\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, w, h, 0, gl.RGBA, gl.UNSIGNED_BYTE, uarr);\n\n        gl.bindTexture(gl.TEXTURE_2D, null);\n    };\n\n    this.initTexture=function(img)\n    {\n        gl.bindTexture(gl.TEXTURE_2D, self.tex);\n        // gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, self.image);\n\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\n        // non power of two:\n        // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n\n        gl.bindTexture(gl.TEXTURE_2D, null);\n    };\n\n    this.setSize(8,8);\n};\n\nCGL.Texture.load=function(url)\n{\n    var texture=new CGL.Texture();\n    texture.image = new Image();\n    texture.image.onload = function ()\n    {\n        console.log(texture.image);\n                \n        texture.initTexture(texture.image);\n    };\n    texture.image.src = url;\n    return texture;\n};\n\n// ---------------------------------------------------------------------------\n","\nvar PORT_DIR_IN=0;\nvar PORT_DIR_OUT=1;\n\nvar OP_PORT_TYPE_VALUE =0;\nvar OP_PORT_TYPE_FUNCTION =1;\nvar OP_PORT_TYPE_TEXTURE =2;\n\nvar Ops = {};\n\n\nvar Op = function()\n{\n    this.objName='';\n    this.portsOut=[];\n    this.portsIn=[];\n    this.posts=[];\n    this.uiAttribs={};\n    this.name='unknown';\n    this.id=generateUUID();\n\n    this.getName= function()\n    {\n        return this.name;\n    };\n    this.addOutPort=function(p)\n    {\n        p.direction=PORT_DIR_OUT;\n        p.parent=this;\n        this.portsOut.push(p);\n        return p;\n    };\n    this.addInPort=function(p)\n    {\n        p.direction=PORT_DIR_IN;\n        p.parent=this;\n        this.portsIn.push(p);\n        return p;\n    };\n    this.execute=function()\n    {\n        this.exec();\n    };\n    this.printInfo=function()\n    {\n        for(var i=0;i<this.portsIn.length;i++)\n            console.log('in: '+this.portsIn[i].getName());\n\n        for(var ipo in this.portsOut)\n            console.log('out: '+this.portsOut[ipo].getName());\n    };\n\n    this.removeLinks=function()\n    {\n        for(var i=0;i<this.portsIn.length;i++)\n            this.portsIn[i].removeLinks();\n        for(var ipo in this.portsOut)\n            this.portsOut[ipo].removeLinks();\n    };\n\n    this.getPort=function(name)\n    {\n        for(var ipi in this.portsIn)\n            if(this.portsIn[ipi].getName()==name)return this.portsIn[ipi];\n\n        for(var ipo in this.portsOut)\n            if(this.portsOut[ipo].getName()==name)return this.portsOut[ipo];\n    };\n\n    this.findFittingPort=function(otherPort)\n    {\n        for(var ipo in this.portsOut)\n        {\n            console.log('.');\n            if(Link.canLink(otherPort,this.portsOut[ipo]))return this.portsOut[ipo];\n        }\n    \n        for(var ipi in this.portsIn)\n        {\n            console.log('.');\n            if(Link.canLink(otherPort,this.portsIn[ipi]))return this.portsIn[ipi];\n        }\n\n    };\n\n\n    this.getSerialized=function()\n    {\n        var op={};\n        op.name=this.getName();\n        op.objName=this.objName;\n        op.id=this.id;\n        op.uiAttribs=this.uiAttribs;\n\n        op.portsIn=[];\n        op.portsOut=[];\n\n        for(var i=0;i<this.portsIn.length;i++)\n            op.portsIn.push( this.portsIn[i].getSerialized() );\n\n        for(var ipo in this.portsOut)\n            op.portsOut.push( this.portsOut[ipo].getSerialized() );\n\n        return op;\n    };\n\n    this.getPortByName=function(name)\n    {\n        for(var i=0;i<this.portsIn.length;i++)\n            if(this.portsIn[i].name==name)return this.portsIn[i];\n        \n        for(var ipo in this.portsOut)\n            if(this.portsOut[ipo].name==name)return this.portsOut[ipo];\n    };\n\n};\n\n// ------------------------------------------------------------------------------------\n\nvar Port=function(parent,name,type)\n{\n    var self=this;\n    this.direction=PORT_DIR_IN;\n    this.id=generateUUID();\n    this.parent=parent;\n    this.links=[];\n    this.value=null;\n    this.name=name;\n    this.type=type || OP_PORT_TYPE_VALUE;\n    var valueBeforeLink=null;\n\n    this.__defineGetter__(\"val\", function()\n    {\n        return this.value;\n    });\n\n    this.__defineSetter__(\"val\", function(v)\n    {\n        this.setValue(v);\n    });\n\n    this.getType=function(){ return this.type; };\n    this.isLinked=function(){ return this.links.length>0; };\n    this.onValueChanged=function(){};\n    this.onTriggered=function(){};\n\n    this.setValue=function(v)\n    {\n        if(v!=this.value)\n        {\n            this.value=v;\n            this.onValueChanged();\n\n            for(var i in this.links)\n            {\n                this.links[i].setValue();\n            }\n        }\n    };\n\n    this.getName= function()\n    {\n        return this.name;\n    };\n\n    this.addLink=function(l)\n    {\n        valueBeforeLink=self.value;\n        this.links.push(l);\n    };\n\n    this.removeLinkTo=function(p2)\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i].portIn==p2 || this.links[i].portOut==p2)\n            {\n                this.links[i].remove();\n            }\n        }\n\n    };\n\n    this.isLinkedTo=function(p2)\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i].portIn==p2 || this.links[i].portOut==p2)return true;\n        }\n        return false;\n    };\n\n    this.call=function()\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i].portIn !=this)this.links[i].portIn.onTriggered();\n            if(this.links[i].portOut!=this)this.links[i].portOut.onTriggered();\n        }\n    };\n\n\n    this.execute=function()\n    {\n        console.log('### execute port: '+this.getName() , this.goals.length);\n    };\n\n    this.getTypeString=function()\n    {\n        if(this.type==OP_PORT_TYPE_VALUE)return 'value';\n        if(this.type==OP_PORT_TYPE_FUNCTION)return 'function';\n        if(this.type==OP_PORT_TYPE_TEXTURE)return 'texture';\n    };\n\n    this.getSerialized=function()\n    {\n        var obj={};\n        obj.name=this.getName();\n        obj.value=this.value;\n\n        if(this.direction==PORT_DIR_IN && this.links.length>0)\n        {\n            obj.links=[];\n            for(var i in this.links)\n            {\n                obj.links.push( this.links[i].getSerialized() );\n            }\n        }\n        return obj;\n    };\n\n    this.removeLinks=function()\n    {\n        while(this.links.length>0)\n        {\n            this.links[0].remove();\n        }\n    };\n\n    this.removeLink=function(link)\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i]==link)this.links.splice( i, 1 );\n        }\n        self.setValue(valueBeforeLink);\n    };\n};\n\n\n\n// ---------------------------------------------------------------------------\n\nvar Link = function(scene)\n{\n    this.portIn=null;\n    this.portOut=null;\n    this.scene=scene;\n\n    this.setValue=function()\n    {\n        if(this.portIn.val!=this.portOut.val)\n            this.portIn.val=this.portOut.val;\n    };\n\n    this.getOtherPort=function(p)\n    {\n        if(p==this.portIn)return this.portOut;\n        return this.portIn;\n    };\n\n    this.remove=function()\n    {\n        this.portIn.removeLink(this);\n        this.portOut.removeLink(this);\n        this.scene.onUnLink(this.portIn,this.portOut);\n        this.portIn=null;\n        this.portOut=null;\n        this.scene=null;\n    };\n\n\n    this.link=function(p1,p2)\n    {\n        if(!Link.canLink(p1,p2))\n        {\n            console.log('cannot link ports!');\n            return false;\n        }\n        if(p1.direction==PORT_DIR_IN)\n        {\n            this.portIn=p1;\n            this.portOut=p2;\n        }\n        else\n        {\n            this.portIn=p2;\n            this.portOut=p1;\n        }\n\n        p1.addLink(this);\n        p2.addLink(this);\n        this.setValue();\n    };\n\n    this.getSerialized=function()\n    {\n        var obj={};\n\n        obj.portIn=this.portIn.getName();\n        obj.portOut=this.portOut.getName();\n        obj.objIn=this.portIn.parent.id;\n        obj.objOut=this.portOut.parent.id;\n\n        return obj;\n    };\n};\n\n\nLink.canLinkText=function(p1,p2)\n{\n    if(!p1)return 'can not link: port 1 invalid';\n    if(!p2)return 'can not link: port 2 invalid';\n    if(p1.direction==PORT_DIR_IN && p1.links.length>0)return 'input port already busy';\n    if(p2.direction==PORT_DIR_IN && p2.links.length>0)return 'input port already busy';\n    if(p1.isLinkedTo(p2))return 'ports already linked';\n    if(p1.direction==p2.direction)return 'can not link: same direction';\n    if(p1.type!=p2.type)return 'can not link: different type';\n    if(p1.parent==p2.parent)return 'can not link: same op';\n    return 'can link';\n};\n\nLink.canLink=function(p1,p2)\n{\n    if(!p1)return false;\n    if(!p2)return false;\n    if(p1.direction==PORT_DIR_IN && p1.links.length>0)return false;\n    if(p2.direction==PORT_DIR_IN && p2.links.length>0)return false;\n    if(p1.isLinkedTo(p2))return false;\n    if(p1.direction==p2.direction)return false;\n    if(p1.type!=p2.type)return false;\n    if(p1.parent==p2.parent)return false;\n\n    return true;\n};\n\n\n// ------------------------------------------------------------------------------------\n\n\nvar Scene = function()\n{\n    var self=this;\n    this.ops=[];\n    this.timer=new Timer();\n    this.animFrameOps=[];\n    \n\n    this.clear=function()\n    {\n        this.timer=new Timer();\n        while(this.ops.length>0)\n        {\n            this.deleteOp(this.ops[0].id);\n        }\n    };\n\n    this.addOp=function(objName,uiAttribs)\n    {\n        var op=eval('new '+objName+'();');\n        op.objName=objName;\n        op.uiAttribs=uiAttribs;\n\n        if(op.hasOwnProperty('onAnimFrame')) this.animFrameOps.push(op);\n\n        this.ops.push(op);\n        if(this.onAdd)this.onAdd(op);\n        return op;\n    };\n\n    this.deleteOp=function(opid,tryRelink)\n    {\n\n        for(var i in this.ops)\n        {\n            if(this.ops[i].id==opid)\n            {\n                var op=this.ops[i];\n                var reLinkP1=null;\n                var reLinkP2=null;\n\n                if(op)\n                {\n                    if(tryRelink)\n                    {\n                        if(this.ops[i].portsIn[0].isLinked() && this.ops[i].portsOut[0].isLinked())\n                        {\n                            if(this.ops[i].portsIn[0].getType()==this.ops[i].portsOut[0].getType())\n                            {\n                                reLinkP1=this.ops[i].portsIn[0].links[0].getOtherPort(this.ops[i].portsIn[0]);\n                                reLinkP2=this.ops[i].portsOut[0].links[0].getOtherPort(this.ops[i].portsOut[0]);\n                            }\n                        }\n                    }\n\n                    this.ops[i].removeLinks();\n                    this.onDelete(this.ops[i]);\n                    this.ops.splice( i, 1 );\n\n                    if(reLinkP1!==null && reLinkP2!==null)\n                    {\n                        self.link(\n                            reLinkP1.parent,\n                            reLinkP1.getName(),\n                            reLinkP2.parent,\n                            reLinkP2.getName()\n                            );\n                    }\n                }\n            }\n\n        }\n\n\n    };\n\n    this.exec=function()\n    {\n        requestAnimationFrame(self.exec);\n        self.timer.update();\n\n        var time=self.timer.getTime();\n\n        for(var i in self.animFrameOps)\n        {\n            self.animFrameOps[i].onAnimFrame(time);\n        }\n\n    };\n\n    this.link=function(op1,port1Name,op2,port2Name)\n    {\n        var port1=op1.getPort(port1Name);\n        var port2=op2.getPort(port2Name);\n\n        if(Link.canLink(port1,port2))\n        {\n            var link=new Link(this);\n            link.link(port1,port2);\n            this.onLink(port1,port2);\n            return link;\n        }\n        else\n        {\n            console.log(Link.canLinkText(port1,port2));\n        }\n    };\n    this.onAdd=function(op){};\n    this.onDelete=function(op){};\n    this.onLink=function(p1,p2){};\n    this.onUnLink=function(p1,p2){};\n    this.serialize=function()\n    {\n        var obj={};\n\n        obj.ops=[];\n        for(var i in this.ops)\n        {\n            obj.ops.push( this.ops[i].getSerialized() );\n        }\n        \n        return JSON.stringify(obj);\n    };\n    this.getOpById=function(opid)\n    {\n        for(var i in this.ops)\n        {\n            if(this.ops[i].id==opid)return this.ops[i];\n        }\n\n    };\n    this.deSerialize=function(obj)\n    {\n        if (typeof obj === \"string\") obj=JSON.parse(obj);\n        var self=this;\n\n        function addLink(opinid,opoutid,inName,outName)\n        {\n            var found=false;\n            if(!found)\n            {\n                self.link(\n                    self.getOpById(opinid),\n                    inName,\n                    self.getOpById(opoutid),\n                    outName\n                    );\n            }\n        }\n\n        // add ops...\n        for(var iop in obj.ops)\n        {\n            var op=this.addOp(obj.ops[iop].objName,obj.ops[iop].uiAttribs);\n            op.id=obj.ops[iop].id;\n\n            for(var ipi in obj.ops[iop].portsIn)\n            {\n                var port=op.getPortByName(obj.ops[iop].portsIn[ipi].name);\n                if(port && port.type!=OP_PORT_TYPE_TEXTURE)port.val=obj.ops[iop].portsIn[ipi].value;\n            }\n\n            for(var ipo in obj.ops[iop].portsOut)\n            {\n                var port2=op.getPortByName(obj.ops[iop].portsOut[ipo].name);\n                if(port2&& port2.type!=OP_PORT_TYPE_TEXTURE)port2.val=obj.ops[iop].portsOut[ipo].value;\n            }\n\n\n            // op.uiAttribs=obj.ops[iop].uiAttribs;\n        }\n\n        // create links...\n        for(iop in obj.ops)\n        {\n            for(var ipi2 in obj.ops[iop].portsIn)\n            {\n\n                for(var ili in obj.ops[iop].portsIn[ipi2].links)\n                {\n                    addLink(\n                        obj.ops[iop].portsIn[ipi2].links[ili].objIn,\n                        obj.ops[iop].portsIn[ipi2].links[ili].objOut,\n                        obj.ops[iop].portsIn[ipi2].links[ili].portIn,\n                        obj.ops[iop].portsIn[ipi2].links[ili].portOut);\n                }\n            }\n\n\n            // for(var ipo in obj.ops[iop].portsOut)\n            // {\n            //     for(var ili in obj.ops[iop].portsOut[ipo].links)\n            //     {\n            //         addLink(\n            //             obj.ops[iop].portsOut[ipo].links[ili].objIn,\n            //             obj.ops[iop].portsOut[ipo].links[ili].objOut,\n            //             obj.ops[iop].portsOut[ipo].links[ili].portIn,\n            //             obj.ops[iop].portsOut[ipo].links[ili].portOut);\n\n            //     }\n            // }\n        }\n\n\n        for(var i in this.ops)\n        {\n            this.ops[i].id=generateUUID();\n        }\n\n\n\n    };\n\n    this.exec();\n\n};\n\n\n\n\n","\n//http://k3d.ivank.net/K3D.js\n//http://fhtr.blogspot.de/2009/12/3d-models-and-parsing-binary-data-with.html\n//https://github.com/gpjt/webgl-lessons/blob/master/lesson05/index.html\n\nOps.Gl=Ops.Gl || {};\n\nvar GL=null;\n\nOps.Gl.Renderer = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='render';\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var initTranslate=vec3.create();\n    vec3.set(initTranslate, 0,0,-2);\n\n    this.onAnimFrame=function(time)\n    {\n        gl.enable(gl.DEPTH_TEST);\n        GL.clearColor(0,0,0,1);\n        GL.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n        gl.viewport(0,0,self.canvas.clientWidth,self.canvas.clientHeight);\n        mat4.perspective(cgl.pMatrix,45, self.canvas.clientWidth/self.canvas.clientHeight, 0.01, 1100.0);\n\n        cgl.pushPMatrix();\n        cgl.pushMvMatrix();\n\n        mat4.identity(cgl.mvMatrix);\n        mat4.translate(cgl.mvMatrix,cgl.mvMatrix, initTranslate);\n\n        GL.enable(GL.BLEND);\n        GL.blendFunc(GL.SRC_ALPHA,GL.ONE_MINUS_SRC_ALPHA);\n\n        cgl.beginFrame();\n\n        self.trigger.call();\n\n        cgl.popMvMatrix();\n        cgl.popPMatrix();\n        cgl.endFrame();\n    };\n\n    this.canvas = document.getElementById(\"glcanvas\");\n    GL = this.canvas.getContext(\"experimental-webgl\");\n    gl = this.canvas.getContext(\"experimental-webgl\");\n\n};\n\nOps.Gl.Renderer.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.LeapMotion = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='LeapMotion';\n\n    this.transX=this.addOutPort(new Port(this,\"translationX\"));\n    this.transY=this.addOutPort(new Port(this,\"translationY\"));\n    this.transZ=this.addOutPort(new Port(this,\"translationZ\"));\n\n    this.finger0X=this.addOutPort(new Port(this,\"finger0X\"));\n    this.finger0Y=this.addOutPort(new Port(this,\"finger0Y\"));\n    this.finger0Z=this.addOutPort(new Port(this,\"finger0Z\"));\n\n    Leap.loop(function (frame)\n    {\n        self.transX.val=frame._translation[0];\n        self.transY.val=frame._translation[1];\n        self.transZ.val=frame._translation[2];\n\n        if(frame.fingers.length>0)\n        {\n            self.finger0X.val=frame.fingers[0].tipPosition[0];\n            self.finger0Y.val=frame.fingers[0].tipPosition[1];\n            self.finger0Z.val=frame.fingers[0].tipPosition[2];\n        }\n    });\n};\n\nOps.Gl.LeapMotion.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.ClearColor = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='ClearColor';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.r=this.addInPort(new Port(this,\"r\"));\n    this.g=this.addInPort(new Port(this,\"g\"));\n    this.b=this.addInPort(new Port(this,\"b\"));\n\n    this.r.val=0.3;\n    this.g.val=0.3;\n    this.b.val=0.3;\n    this.render.onTriggered=function()\n    {\n        GL.clearColor(self.r.val,self.g.val,self.b.val,1);\n        GL.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n\n        self.trigger.call();\n    };\n\n};\n\nOps.Gl.ClearColor.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.ClearDepth = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='ClearDepth';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        GL.clear(GL.DEPTH_BUFFER_BIT);\n        self.trigger.call();\n    };\n};\n\nOps.Gl.ClearDepth.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n    \nOps.Gl.TextureEmpty = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='texture empty';\n    this.width=this.addInPort(new Port(this,\"width\",OP_PORT_TYPE_VALUE));\n    this.height=this.addInPort(new Port(this,\"height\",OP_PORT_TYPE_VALUE));\n\n    this.textureOut=this.addOutPort(new Port(this,\"texture\",OP_PORT_TYPE_TEXTURE));\n    this.tex=new CGL.Texture();\n    \n    var sizeChanged=function()\n    {\n        self.tex.setSize(self.width.val,self.height.val);\n        self.textureOut.val=self.tex.tex;\n    };\n\n    this.width.onValueChanged=sizeChanged;\n    this.height.onValueChanged=sizeChanged;\n\n    this.width.val=8;\n    this.height.val=8;\n\n};\n\nOps.Gl.TextureEmpty.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n    \nOps.Gl.Texture = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='texture';\n    this.filename=this.addInPort(new Port(this,\"file\",OP_PORT_TYPE_VALUE));\n    this.textureOut=this.addOutPort(new Port(this,\"texture\",OP_PORT_TYPE_TEXTURE));\n    \n    this.filename.onValueChanged=function()\n    {\n        console.log('load texture...');\n        self.tex=CGL.Texture.load(self.filename.val);\n        self.textureOut.val=self.tex.tex;\n    };\n\n    this.filename.val='assets/skull.png';\n};\n\nOps.Gl.Texture.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.Meshes={};\n\nOps.Gl.Meshes.Rectangle = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='rectangle';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        self.mesh.render(cgl.getShader());\n        self.trigger.call();\n    };\n\n    var geom=new CGL.Geometry();\n    geom.vertices = [\n         1.0,  1.0,  0.0,\n        -1.0,  1.0,  0.0,\n         1.0, -1.0,  0.0,\n        -1.0, -1.0,  0.0\n    ];\n\n    geom.texCoords = [\n         1.0, 1.0,\n         0.0, 1.0,\n         1.0, 0.0,\n         0.0, 0.0\n    ];\n\n    geom.verticesIndices = [\n        0, 1, 2,\n        3, 1, 2\n    ];\n    this.mesh=new CGL.Mesh(geom);\n\n};\n\nOps.Gl.Meshes.Rectangle.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Meshes.FullscreenRectangle = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='fullscreen rectangle';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        cgl.pushPMatrix();\n        mat4.identity(cgl.pMatrix);\n\n        cgl.pushMvMatrix();\n        mat4.identity(cgl.mvMatrix);\n\n        self.mesh.render(cgl.getShader());\n        self.trigger.call();\n\n        cgl.popPMatrix();\n        cgl.popMvMatrix();\n\n    };\n\n    var geom=new CGL.Geometry();\n    geom.vertices = [\n         1.0,  1.0,  0.0,\n        -1.0,  1.0,  0.0,\n         1.0, -1.0,  0.0,\n        -1.0, -1.0,  0.0\n    ];\n\n    geom.texCoords = [\n         1.0, 1.0,\n         0.0, 1.0,\n         1.0, 0.0,\n         0.0, 0.0\n    ];\n\n    geom.verticesIndices = [\n        0, 1, 2,\n        3, 1, 2\n    ];\n    this.mesh=new CGL.Mesh(geom);\n\n};\n\nOps.Gl.Meshes.FullscreenRectangle.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Meshes.Circle = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Circle';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n\n    this.segments=this.addInPort(new Port(this,\"segments\"));\n    this.radius=this.addInPort(new Port(this,\"radius\"));\n    this.percent=this.addInPort(new Port(this,\"percent\"));\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        mesh.render(cgl.getShader());\n        self.trigger.call();\n    };\n\n    this.segments.val=20;\n    this.radius.val=1;\n    this.percent.val=1;\n\n    var geom=new CGL.Geometry();\n    var mesh=new CGL.Mesh(geom);\n\n    function calc()\n    {\n        geom.clear();\n        var oldPosX=0;\n        var oldPosY=0;\n\n        for (var i=0; i <= self.segments.val*self.percent.val; i++)\n        {\n            var degInRad = (360/self.segments.val)*i*CGL.DEG2RAD;\n            var posx=Math.cos(degInRad)*self.radius.val;\n            var posy=Math.sin(degInRad)*self.radius.val;\n\n            geom.addFace(\n                        [posx,posy,0],\n                        [oldPosX,oldPosY,0],\n                        [0,0,0]\n            );\n\n            oldPosX=posx;\n            oldPosY=posy;\n        }\n\n        mesh.setGeom(geom);\n    }\n\n    this.segments.onValueChanged=calc;\n    this.radius.onValueChanged=calc;\n    this.percent.onValueChanged=calc;\n};\n\nOps.Gl.Meshes.Circle.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Meshes.ObjMesh = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='OBJ Mesh';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.mesh=null;\n\n    this.render.onTriggered=function()\n    {\n        if(self.mesh) self.mesh.render(cgl.getShader());\n\n        self.trigger.call();\n    };\n\n\n    ajaxRequest('assets/skull.obj',function(response)\n    {\n        console.log(response);\n                \n        var r=parseOBJ(response);\n\n    unwrap = function(ind, crd, cpi)\n    {\n        var ncrd = new Array(Math.floor(ind.length/3)*cpi);\n        for(var i=0; i<ind.length; i++)\n        {\n            for(var j=0; j<cpi; j++)\n            {\n                ncrd[i*cpi+j] = crd[ind[i]*cpi+j];\n            }\n        }\n        return ncrd;\n    };\n\n    var l=r.verticesIndices.length;\n        r.vertices = unwrap(r.verticesIndices, r.vertices, 3);\n        r.texCoords = unwrap(r.texCoordsIndices  , r.texCoords  , 2);\n        r.verticesIndices = [];\n        for(var i=0; i<l; i++) r.verticesIndices.push(i);\n        \n        self.mesh=new CGL.Mesh(r);\n    });\n};\n\nOps.Gl.Meshes.ObjMesh.prototype = new Op();\n\n// ----------------------------------------------------------------\n\nOps.Gl.Meshes.Cube = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Cube';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.mesh=null;\n\n    this.render.onTriggered=function()\n    {\n        if(self.mesh!==null) self.mesh.render(cgl.getShader());\n        self.trigger.call();\n    };\n\n    var geom=new CGL.Geometry();\n\n            geom.vertices = [\n            // Front face\n            -1.0, -1.0,  1.0,\n             1.0, -1.0,  1.0,\n             1.0,  1.0,  1.0,\n            -1.0,  1.0,  1.0,\n            // Back face\n            -1.0, -1.0, -1.0,\n            -1.0,  1.0, -1.0,\n             1.0,  1.0, -1.0,\n             1.0, -1.0, -1.0,\n            // Top face\n            -1.0,  1.0, -1.0,\n            -1.0,  1.0,  1.0,\n             1.0,  1.0,  1.0,\n             1.0,  1.0, -1.0,\n            // Bottom face\n            -1.0, -1.0, -1.0,\n             1.0, -1.0, -1.0,\n             1.0, -1.0,  1.0,\n            -1.0, -1.0,  1.0,\n            // Right face\n             1.0, -1.0, -1.0,\n             1.0,  1.0, -1.0,\n             1.0,  1.0,  1.0,\n             1.0, -1.0,  1.0,\n            // Left face\n            -1.0, -1.0, -1.0,\n            -1.0, -1.0,  1.0,\n            -1.0,  1.0,  1.0,\n            -1.0,  1.0, -1.0,\n        ];\n\n        geom.texCoords = [\n          // Front face\n          0.0, 0.0,\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n          // Back face\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n          0.0, 0.0,\n          // Top face\n          0.0, 1.0,\n          0.0, 0.0,\n          1.0, 0.0,\n          1.0, 1.0,\n          // Bottom face\n          1.0, 1.0,\n          0.0, 1.0,\n          0.0, 0.0,\n          1.0, 0.0,\n          // Right face\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n          0.0, 0.0,\n          // Left face\n          0.0, 0.0,\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n        ];\n\n        geom.verticesIndices = [\n            0, 1, 2,      0, 2, 3,    // Front face\n            4, 5, 6,      4, 6, 7,    // Back face\n            8, 9, 10,     8, 10, 11,  // Top face\n            12, 13, 14,   12, 14, 15, // Bottom face\n            16, 17, 18,   16, 18, 19, // Right face\n            20, 21, 22,   20, 22, 23  // Left face\n        ];\n\n    this.mesh=new CGL.Mesh(geom);\n};\n\nOps.Gl.Meshes.Cube.prototype = new Op();\n\n// ----------------------------------------------------------------\n\nOps.Gl.Meshes.Plotter = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Plotter';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.v=this.addInPort(new Port(this,\"value\"));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        gl.vertexAttribPointer(cgl.getShader().getAttrVertexPos(),self.buffer.itemSize, gl.FLOAT, false, 0, 0);\n        cgl.getShader().bind();\n        gl.bindBuffer(gl.ARRAY_BUFFER, self.buffer);\n        gl.drawArrays(gl.LINE_STRIP, 0, self.buffer.numItems);\n\n        self.trigger.call();\n    };\n\n    this.buffer = gl.createBuffer();\n    \n    var num=50;\n    this.vertices = [];\n    for(var i=0;i<num;i++)\n    {\n        this.vertices.push(1/num*i);\n        this.vertices.push(Math.random()-0.5);\n        this.vertices.push(0);\n    }\n\n    function bufferData()\n    {\n        gl.lineWidth(4);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, self.buffer);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(self.vertices), gl.STATIC_DRAW);\n        self.buffer.itemSize = 3;\n        self.buffer.numItems = num;\n    }\n    bufferData();\n\n    this.v.onValueChanged=function()\n    {\n        self.vertices.splice(0,3);\n        self.vertices.push(1);\n        self.vertices.push(self.v.val);\n        self.vertices.push(0);\n\n        for(var i=0;i<num*3;i+=3)\n        {\n            self.vertices[i]=1/num*i;\n        }\n\n        bufferData();\n    };\n};\n\nOps.Gl.Meshes.Plotter.prototype = new Op();\n\n// ----------------------------------------------------------------\n\nOps.Gl.Meshes.Triangle = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Triangle';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        self.mesh.render(cgl.getShader());\n        self.trigger.call();\n    };\n\n    var geom=new CGL.Geometry();\n    geom.vertices = [\n         0.0,  1.0,  0.0,\n        -1.0,  -1.0,  0.0,\n         1.0, -1.0,  0.0\n    ];\n\n    geom.verticesIndices = [\n        0, 1, 2\n    ];\n    this.mesh=new CGL.Mesh(geom);\n};\n\nOps.Gl.Meshes.Triangle.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Shader={};\n\nOps.Gl.Shader.BasicMaterial = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='BasicMaterial';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.doRender=function()\n    {\n        cgl.pushShader(shader);\n\n        if(self.texture.val)\n        {\n            gl.activeTexture(gl.TEXTURE0);\n            gl.bindTexture(gl.TEXTURE_2D, self.texture.val);\n        }\n\n        self.trigger.call();\n\n        cgl.popShader();\n    };\n\n    var srcFrag=''+\n        'precision highp float;\\n'+\n        '#ifdef HAS_TEXTURES\\n'+\n        '  varying vec2 texCoord;\\n'+\n        '  uniform sampler2D tex;\\n'+\n        '#endif\\n'+\n        'uniform float r;\\n'+\n        'uniform float g;\\n'+\n        'uniform float b;\\n'+\n        'uniform float a;\\n'+\n        '\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        'vec4 col=vec4(r,g,b,a);\\n'+\n        '#ifdef HAS_TEXTURES\\n'+\n        '   col=texture2D(tex,texCoord);\\n'+\n        'col.a*=a;'.endl()+\n        '#endif\\n'+\n        'gl_FragColor = col;\\n'+\n        '}\\n';\n\n\n    var shader=new CGL.Shader();\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n\n    this.r=this.addInPort(new Port(this,\"r\"));\n    this.r.onValueChanged=function()\n    {\n        if(!self.r.uniform) self.r.uniform=new CGL.Uniform(shader,'f','r',self.r.val);\n        else self.r.uniform.setValue(self.r.val);\n    };\n\n    this.g=this.addInPort(new Port(this,\"g\"));\n    this.g.onValueChanged=function()\n    {\n        if(!self.g.uniform) self.g.uniform=new CGL.Uniform(shader,'f','g',self.g.val);\n        else self.g.uniform.setValue(self.g.val);\n    };\n\n    this.b=this.addInPort(new Port(this,\"b\"));\n    this.b.onValueChanged=function()\n    {\n        if(!self.b.uniform) self.b.uniform=new CGL.Uniform(shader,'f','b',self.b.val);\n        else self.b.uniform.setValue(self.b.val);\n    };\n\n    this.a=this.addInPort(new Port(this,\"a\"));\n    this.a.onValueChanged=function()\n    {\n        if(!self.a.uniform) self.a.uniform=new CGL.Uniform(shader,'f','a',self.a.val);\n        else self.a.uniform.setValue(self.a.val);\n    };\n\n    this.r.val=Math.random();\n    this.g.val=Math.random();\n    this.b.val=Math.random();\n    this.a.val=1.0;\n\n    this.render.onTriggered=this.doRender;\n    this.texture=this.addInPort(new Port(this,\"texture\",OP_PORT_TYPE_TEXTURE));\n    this.texture.onValueChanged=function()\n    {\n        if(self.texture.val)\n        {\n            console.log('TEXTURE ADDED');\n            self.textureUniform=new CGL.Uniform(shader,'t','tex',0);\n        }\n        else\n        {\n            shader.removeUniform('tex');\n        }\n    };\n\n    this.doRender();\n};\n\nOps.Gl.Shader.BasicMaterial.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Shader.Schwurbel = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Schwurbel';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.timer=this.addInPort(new Port(this,\"time\"));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.doRender=function()\n    {\n        cgl.pushShader(shader);\n\n        if(!self.timer.uniLoc)\n        {\n            shader.bind();\n            self.timer.uniLoc=gl.getUniformLocation(shader.getProgram(), \"time\");\n        }\n        gl.uniform1f(self.timer.uniLoc, self.timer.val);\n\n        cgl.popShader(shader);\n\n        self.trigger.call();\n    };\n\n    var srcFrag=''+\n        'precision mediump float;\\n'+\n        'uniform float time;\\n'+\n        '\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        'float c=sqrt(sin(time*0.02)*cos((time+gl_FragCoord.y)*0.02)+sin(time+gl_FragCoord.x*0.02)*sin(time+gl_FragCoord.y*0.02));\\n'+\n        'gl_FragColor = vec4( c,c,c,1.0);\\n'+\n        '}\\n';\n\n    var shader=new CGL.Shader();\n    shader.compile(shader.getDefaultVertexShader(),srcFrag);\n\n    this.doRender();\n    this.render.onTriggered=this.doRender;\n};\n\nOps.Gl.Shader.Schwurbel.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Shader.Noise = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Noise';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var timeUniform=-1;\n    var timeStart=-1;\n\n    this.doRender=function()\n    {\n        cgl.pushShader(shader);\n        if(timeUniform==-1)\n        {\n            timeStart=Date.now();\n            shader.bind();\n            timeUniform=gl.getUniformLocation(shader.getProgram(), \"time\");\n        }\n\n        gl.uniform1f(timeUniform, (Date.now()-timeStart)/1000);\n        cgl.popShader();\n\n        self.trigger.call();\n    };\n\n    var srcFrag=''+\n        'precision mediump float;\\n'+\n        'uniform float time;\\n'+\n        '\\n'+\n        'float random(vec2 co)\\n'+\n        '{\\n'+\n        '   return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\\n'+\n        '}\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        '   float c=random(time*gl_FragCoord.xy);'+\n        '   gl_FragColor = vec4( c,c,c,1.0);\\n'+\n        '}\\n';\n\n\n    var shader=new CGL.Shader();\n    shader.compile(shader.getDefaultVertexShader(),srcFrag);\n\n    this.doRender();\n    this.render.onTriggered=this.doRender;\n};\n\nOps.Gl.Shader.Noise.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Matrix={};\n\nOps.Gl.Matrix.Translate = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='translate';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.x=this.addInPort(new Port(this,\"x\"));\n    this.y=this.addInPort(new Port(this,\"y\"));\n    this.z=this.addInPort(new Port(this,\"z\"));\n    this.x.val=0.0;\n    this.y.val=0.0;\n    this.z.val=0.0;\n    \n    var vec=vec3.create();\n\n    this.render.onTriggered=function()\n    {\n        vec3.set(vec, self.x.val,self.y.val,self.z.val);\n        cgl.pushMvMatrix();\n        mat4.translate(cgl.mvMatrix,cgl.mvMatrix, vec);\n        self.trigger.call();\n        cgl.popMvMatrix();\n    };\n};\n\nOps.Gl.Matrix.Translate.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Matrix.Scale = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='scale';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.scale=this.addInPort(new Port(this,\"scale\"));\n    \n    var vScale=vec3.create();\n    var transMatrix = mat4.create();\n    mat4.identity(transMatrix);\n\n    var doScale=false;\n\n    this.render.onTriggered=function()\n    {\n        cgl.pushMvMatrix();\n        mat4.multiply(mvMatrix,mvMatrix,transMatrix);\n        self.trigger.call();\n        cgl.popMvMatrix();\n    };\n\n    var updateMatrix=function()\n    {\n        mat4.identity(transMatrix);\n        mat4.scale(transMatrix,transMatrix, vScale);\n    };\n\n    this.scaleChanged=function()\n    {\n        doScale=false;\n        vec3.set(vScale, self.scale.val,self.scale.val,self.scale.val);\n        updateMatrix();\n    };\n\n    this.scale.onValueChanged=this.scaleChanged;\n    this.scale.val=1.0;\n    updateMatrix();\n};\n\nOps.Gl.Matrix.Scale.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Matrix.Transform = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    this.name='transform';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.posX=this.addInPort(new Port(this,\"posX\"));\n    this.posY=this.addInPort(new Port(this,\"posY\"));\n    this.posZ=this.addInPort(new Port(this,\"posZ\"));\n\n    this.scaleX=this.addInPort(new Port(this,\"scaleX\"));\n    this.scaleY=this.addInPort(new Port(this,\"scaleY\"));\n    this.scaleZ=this.addInPort(new Port(this,\"scaleZ\"));\n\n    this.rotX=this.addInPort(new Port(this,\"rotX\"));\n    this.rotY=this.addInPort(new Port(this,\"rotY\"));\n    this.rotZ=this.addInPort(new Port(this,\"rotZ\"));\n    \n    var vPos=vec3.create();\n    var vScale=vec3.create();\n    var transMatrix = mat4.create();\n    mat4.identity(transMatrix);\n\n    var doScale=false;\n    var doTranslate=false;\n\n    this.render.onTriggered=function()\n    {\n        cgl.pushMvMatrix();\n        mat4.multiply(cgl.mvMatrix,cgl.mvMatrix,transMatrix);\n        self.trigger.call();\n        cgl.popMvMatrix();\n    };\n\n    var updateMatrix=function()\n    {\n        mat4.identity(transMatrix);\n        if(doTranslate)mat4.translate(transMatrix,transMatrix, vPos);\n\n        if(self.rotX.val!==0)mat4.rotateX(transMatrix,transMatrix, self.rotX.val*CGL.DEG2RAD);\n        if(self.rotY.val!==0)mat4.rotateY(transMatrix,transMatrix, self.rotY.val*CGL.DEG2RAD);\n        if(self.rotZ.val!==0)mat4.rotateZ(transMatrix,transMatrix, self.rotZ.val*CGL.DEG2RAD);\n\n        if(doScale)mat4.scale(transMatrix,transMatrix, vScale);\n    };\n\n    this.translateChanged=function()\n    {\n        doTranslate=false;\n        if(self.posX.val!==0.0 || self.posY.val!==0.0 || self.posZ.val!==0.0)doTranslate=true;\n        vec3.set(vPos, self.posX.val,self.posY.val,self.posZ.val);\n        updateMatrix();\n    };\n\n    this.scaleChanged=function()\n    {\n        doScale=false;\n        if(self.scaleX.val!==0.0 || self.scaleY.val!==0.0 || self.scaleZ.val!==0.0)doScale=true;\n        vec3.set(vScale, self.scaleX.val,self.scaleY.val,self.scaleZ.val);\n        updateMatrix();\n    };\n\n    this.rotChanged=function()\n    {\n        updateMatrix();\n    };\n\n    this.rotX.onValueChanged=this.rotChanged;\n    this.rotY.onValueChanged=this.rotChanged;\n    this.rotZ.onValueChanged=this.rotChanged;\n\n    this.scaleX.onValueChanged=this.scaleChanged;\n    this.scaleY.onValueChanged=this.scaleChanged;\n    this.scaleZ.onValueChanged=this.scaleChanged;\n\n    this.posX.onValueChanged=this.translateChanged;\n    this.posY.onValueChanged=this.translateChanged;\n    this.posZ.onValueChanged=this.translateChanged;\n\n    this.rotX.val=0.0;\n    this.rotY.val=0.0;\n    this.rotZ.val=0.0;\n\n    this.scaleX.val=1.0;\n    this.scaleY.val=1.0;\n    this.scaleZ.val=1.0;\n\n    this.posX.val=0.0;\n    this.posY.val=0.0;\n    this.posZ.val=0.0;\n\n    updateMatrix();\n};\n\nOps.Gl.Matrix.Transform.prototype = new Op();\n\n// ----------------------------------------------------\n\nOps.RandomCluster = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='random cluster';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.num=this.addInPort(new Port(this,\"num\"));\n    this.size=this.addInPort(new Port(this,\"size\"));\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION)) ;\n    this.idx=this.addOutPort(new Port(this,\"index\")) ;\n    this.rnd=this.addOutPort(new Port(this,\"rnd\")) ;\n    this.randoms=[];\n    this.randomsRot=[];\n    this.randomsFloats=[];\n\n    var transVec=vec3.create();\n\n    this.exe.onTriggered=function()\n    {\n        for(var i=0;i<self.randoms.length;i++)\n        {\n            cgl.pushMvMatrix();\n\n            mat4.translate(cgl.mvMatrix,cgl.mvMatrix, self.randoms[i]);\n\n            mat4.rotateX(cgl.mvMatrix,cgl.mvMatrix, self.randomsRot[i][0]);\n            mat4.rotateY(cgl.mvMatrix,cgl.mvMatrix, self.randomsRot[i][1]);\n            mat4.rotateZ(cgl.mvMatrix,cgl.mvMatrix, self.randomsRot[i][2]);\n\n            self.idx.val=i;\n            self.rnd.val=self.randomsFloats[i];\n\n            self.trigger.call();\n\n            cgl.popMvMatrix();\n        }\n    };\n\n    function reset()\n    {\n        self.randoms=[];\n        self.randomsRot=[];\n        self.randomsFloats=[];\n\n        for(var i=0;i<self.num.val;i++)\n        {\n            self.randomsFloats.push(Math.random());\n            self.randoms.push(vec3.fromValues(\n                (Math.random()-0.5)*self.size.val,\n                (Math.random()-0.5)*self.size.val,\n                (Math.random()-0.5)*self.size.val\n                ));\n            self.randomsRot.push(vec3.fromValues(\n                Math.random()*360*CGL.DEG2RAD,\n                Math.random()*360*CGL.DEG2RAD,\n                Math.random()*360*CGL.DEG2RAD\n                ));\n        }\n    }\n\n    this.num.onValueChanged=reset;\n    this.size.onValueChanged=reset;\n\n    this.num.val=100;\n};\n\nOps.RandomCluster.prototype = new Op();\n\n\n\n\n\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Render2Texture = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='render to texture';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var rttFramebuffer;\n    var texture=new CGL.Texture();\n\nthis.width=this.addInPort(new Port(this,\"texture width\"));\nthis.height=this.addInPort(new Port(this,\"texture width\"));\nthis.tex=this.addOutPort(new Port(this,\"texture\",OP_PORT_TYPE_TEXTURE));\n\n\n    this.width.val=1024;\n    this.height.val=1024;\n\n\n    texture.setSize(this.width.val,this.height.val);\n\n    rttFramebuffer = GL.createFramebuffer();\n    GL.bindFramebuffer(GL.FRAMEBUFFER, rttFramebuffer);\n    // rttFramebuffer.width = this.width.val;\n    // rttFramebuffer.height = this.height.val;\n\n\n    // rttTexture = GL.createTexture();\n    // GL.bindTexture(GL.TEXTURE_2D, rttTexture);\n    // GL.texParameteri(GL.TEXTURE_2D, GL.TEXTURE_MAG_FILTER, GL.LINEAR);\n    // GL.texParameteri(GL.TEXTURE_2D, GL.TEXTURE_MIN_FILTER, GL.LINEAR_MIPMAP_NEAREST);\n    // GL.generateMipmap(GL.TEXTURE_2D);\n    // GL.texImage2D(GL.TEXTURE_2D, 0, GL.RGBA, rttFramebuffer.width, rttFramebuffer.height, 0, GL.RGBA, GL.UNSIGNED_BYTE, null);\n\n    var renderbuffer = GL.createRenderbuffer();\n    GL.bindRenderbuffer(GL.RENDERBUFFER, renderbuffer);\n    GL.renderbufferStorage(GL.RENDERBUFFER, GL.DEPTH_COMPONENT16, this.width.val,this.height.val);\n    GL.framebufferTexture2D(GL.FRAMEBUFFER, GL.COLOR_ATTACHMENT0, GL.TEXTURE_2D, texture.tex, 0);\n    GL.framebufferRenderbuffer(GL.FRAMEBUFFER, GL.DEPTH_ATTACHMENT, GL.RENDERBUFFER, renderbuffer);\n    GL.bindTexture(GL.TEXTURE_2D, null);\n    GL.bindRenderbuffer(GL.RENDERBUFFER, null);\n    GL.bindFramebuffer(GL.FRAMEBUFFER, null);\n\n    // var sizeChanged=function()\n    // {\n    //     texture.setSize(self.width.val,self.height.val);\n    //     self.tex.val=self.tex.tex;\n    // };\n\n    // this.width.onValueChanged=sizeChanged;\n    // this.height.onValueChanged=sizeChanged;\n    // sizeChanged();\n\n    self.tex.val=texture.tex;\n\n\n    this.render.onTriggered=function()\n    {\n        cgl.pushMvMatrix();\n\n        GL.bindFramebuffer(GL.FRAMEBUFFER, rttFramebuffer);\n        \n        cgl.pushPMatrix();\n        gl.viewport(0, 0, 1920,1080);\n        mat4.perspective(cgl.pMatrix,45, self.width.val/self.height.val, 0.01, 1100.0);\n\n\n        self.trigger.call();\n\n        cgl.popPMatrix();\n        \n        GL.bindFramebuffer(GL.FRAMEBUFFER, null);\n        \n        cgl.popMvMatrix();\n        gl.viewport(0, 0, 640,360);\n    };\n\n\n};\n\nOps.Gl.Render2Texture.prototype = new Op();\n\n\n\n\n\n\n\n\n\n\n","// https://github.com/automat/foam-gl\n// http://howlerjs.com/\n//http://learningwebgl.com/lessons/lesson01/index.html\n\n\nOps.Log = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='logger';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.input=this.addInPort(new Port(this,\"input\"));\n    this.input.val='';\n\n    this.exec=function()\n    {\n        console.log(\"[log] \" + self.input.val);\n    };\n\n    this.exe.onTriggered=this.exec;\n    this.input.onValueChanged=this.exec;\n};\nOps.Log.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\n\nOps.CallsPerSecond = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='CallsPerSecond';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.timeStart=0;\n    this.cps=0;\n\n    this.exe.onTriggered=function()\n    {\n        if(self.timeStart===0)self.timeStart=Date.now();\n        var now = Date.now();\n\n        if(now-self.timeStart>1000)\n        {\n            self.timeStart=Date.now();\n            console.log('cps: '+self.cps);\n            self.cps=0;\n        }\n\n        self.cps++;\n    };\n};\nOps.CallsPerSecond.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\nOps.Value = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Value';\n    this.v=this.addInPort(new Port(this,\"value\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.v.val;\n    };\n\n    this.v.onValueChanged=this.exec;\n};\n\nOps.Value.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\n\nOps.TimeLineTime = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='TimeLineTime';\n    this.theTime=this.addOutPort(new Port(this,\"time\"));\n\n    this.onAnimFrame=function(time)\n    {\n        this.theTime.val=time;\n    };\n\n};\nOps.TimeLineTime.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\n\n\n\nOps.Repeat = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Repeat';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.num=this.addInPort(new Port(this,\"num\"));\n    this.num.val=5;\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n    this.idx=this.addOutPort(new Port(this,\"index\"));\n\n    this.exe.onTriggered=function()\n    {\n\n        for(var i=0;i<self.num.value;i++)\n        {\n            self.idx.val=i;\n            self.trigger.call();\n        }\n\n    };\n};\nOps.Repeat.prototype = new Op();\n\n\n\n\n// ---------------------------------------------------------------------------\n\n\nOps.IfTrueThen = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='if true then';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.bool=this.addInPort(new Port(this,\"boolean\"));\n    this.bool.val=false;\n\n    this.triggerThen=this.addOutPort(new Port(this,\"then\",OP_PORT_TYPE_FUNCTION));\n    this.triggerElse=this.addOutPort(new Port(this,\"else\",OP_PORT_TYPE_FUNCTION));\n\n    this.exe.onTriggered=function()\n    {\n        if(self.bool.val===true)\n        {\n            self.triggerThen.call();\n        }\n        else\n        {\n            self.triggerElse.call();\n        }\n    };\n\n    this.bool.onValueChanged=function()\n    {\n        self.exe.onTriggered();\n    };\n\n};\nOps.IfTrueThen.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------\n\n\nOps.Group = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='group';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.triggers=[];\n\n    for(var i=0;i<10;i++)\n    {\n        this.triggers.push( this.addOutPort(new Port(this,\"trigger \"+i,OP_PORT_TYPE_FUNCTION)) );\n    }\n\n    this.exe.onTriggered=function()\n    {\n        for(var i in self.triggers)\n        {\n            self.triggers[i].call();\n        }\n\n    };\n\n\n};\nOps.Group.prototype = new Op();\n\n\n\n\n// ---------------------------------------------------------------------------\n\nOps.Interval = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='Interval';\n    this.timeOutId=-1;\n    this.interval=this.addInPort(new Port(this,\"interval\"));\n    this.interval.val=1000;\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.exec=function()\n    {\n        if(this.timeOutId!=-1)return;\n        var self=this;\n\n        this.timeOutId=setTimeout(function()\n        {\n            self.timeOutId=-1;\n            self.trigger.call();\n            self.exec();\n        },\n        this.interval.val );\n    };\n\n    this.exec();\n\n};\n\nOps.Interval.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\n// --------------------------------------------------------------------------\n\nOps.Anim={};\n\nOps.Anim.SinusAnim = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='SinusAnim';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    var self=this;\n\n    this.exe.onTriggered=function()\n    {\n        self.result.val=Math.sin(Date.now()/1000.0);\n    };\n\n    this.exe.onTriggered();\n\n};\n\nOps.Anim.SinusAnim.prototype = new Op();\n\n\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Anim.RelativeTime = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='RelativeTime';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    var self=this;\n    var startTime=Date.now()/1000.0;\n\n    this.exe.onTriggered=function()\n    {\n        self.result.val=Date.now()/1000.0-startTime;\n    };\n\n    this.exe.onTriggered();\n\n};\n\nOps.Anim.RelativeTime.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\nOps.Input={};\n\nOps.Input.GamePad = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='GamePad';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.numPads=this.addOutPort(new Port(this,\"numPads\"));\n    this.axis1=this.addOutPort(new Port(this,\"axis1\"));\n    this.axis2=this.addOutPort(new Port(this,\"axis2\"));\n    this.axis3=this.addOutPort(new Port(this,\"axis3\"));\n    this.axis4=this.addOutPort(new Port(this,\"axis4\"));\n    this.button0=this.addOutPort(new Port(this,\"button0\"));\n    this.button1=this.addOutPort(new Port(this,\"button1\"));\n    this.button2=this.addOutPort(new Port(this,\"button2\"));\n    this.button3=this.addOutPort(new Port(this,\"button3\"));\n    this.button4=this.addOutPort(new Port(this,\"button4\"));\n\n    var self=this;\n    var startTime=Date.now()/1000.0;\n\n    this.exe.onTriggered=function()\n    {\n        var gamePads=navigator.getGamepads();\n        var count=0;\n\n        for(var gp in gamePads)\n        {\n            if(gamePads[gp].axes)\n            {\n                self.axis1.val=gamePads[gp].axes[0];\n                self.axis2.val=gamePads[gp].axes[1];\n                self.axis3.val=gamePads[gp].axes[2];\n                self.axis4.val=gamePads[gp].axes[3];\n\n                self.button0.val=gamePads[gp].buttons[0].pressed;\n                self.button0.val=gamePads[gp].buttons[1].pressed;\n                self.button2.val=gamePads[gp].buttons[2].pressed;\n                self.button3.val=gamePads[gp].buttons[3].pressed;\n                self.button4.val=gamePads[gp].buttons[4].pressed;\n\n                count++;\n            }\n        }\n\n        self.numPads.val=count;\n    };\n\n    this.exe.onTriggered();\n\n};\n\nOps.Input.GamePad.prototype = new Op();\n\n","\n// TODO: CLAMP!\n\nOps.Math={};\n\n\nOps.Math.Random = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='random';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.exe.onTriggered=function()\n    {\n        self.result.val=Math.random();\n    };\n\n    this.exe.onTriggered();\n};\n\nOps.Math.Random.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Clamp = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='Clamp';\n    this.val=this.addInPort(new Port(this,\"val\"));\n    this.min=this.addInPort(new Port(this,\"min\"));\n    this.max=this.addInPort(new Port(this,\"max\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    function clamp()\n    {\n        self.result.val= Math.min(Math.max(self.val.val, self.min.val), self.max.val);\n    }\n\n    this.min.val=0;\n    this.max.val=1;\n\n    this.val.onValueChanged=clamp;\n    this.min.onValueChanged=clamp;\n    this.max.onValueChanged=clamp;\n\n    this.val.val=0.5;\n};\n\nOps.Math.Clamp.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\nOps.Math.SmoothStep = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='SmoothStep';\n    this.val=this.addInPort(new Port(this,\"val\"));\n    this.min=this.addInPort(new Port(this,\"min\"));\n    this.max=this.addInPort(new Port(this,\"max\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    function smoothstep ()\n    {\n        var x = Math.max(0,Math.min(1,(self.val.val-self.min.val)/(self.max.val-self.min.val)));\n        self.result.val=x*x*(3-2*x);\n    }\n\n    this.min.val=0;\n    this.max.val=1;\n    \n    this.val.onValueChanged=smoothstep;\n    this.min.onValueChanged=smoothstep;\n    this.max.onValueChanged=smoothstep;\n\n    this.val.val=0.5;\n};\n\nOps.Math.SmoothStep.prototype = new Op();\n\n// ----------------------------------------------------------------------------\n\n\nOps.Math.MapRange = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='map value range';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.v=this.addInPort(new Port(this,\"value\"));\n    this.old_min=this.addInPort(new Port(this,\"old min\"));\n    this.old_max=this.addInPort(new Port(this,\"old max\"));\n    this.new_min=this.addInPort(new Port(this,\"new min\"));\n    this.new_max=this.addInPort(new Port(this,\"new max\"));\n\n    this.exec= function()\n    {\n        if(self.v.val>self.old_max.val)\n        {\n            self.result.val=self.new_max.val;\n            return;\n        }\n        else\n        if(self.v.val<self.old_min.val)\n        {\n            self.result.val=self.new_min.val;\n            return;\n        }\n\n        var nMin=parseFloat(self.new_min.val);\n        var nMax=parseFloat(self.new_max.val);\n        var oMin=parseFloat(self.old_min.val);\n        var oMax=parseFloat(self.old_max.val);\n        var x=parseFloat(self.v.val);\n\n        var reverseInput = false;\n        var oldMin = Math.min( oMin, oMax );\n        var oldMax = Math.max( oMin, oMax );\n        if(oldMin!= oMin) reverseInput = true;\n\n        var reverseOutput = false;\n        var newMin = Math.min( nMin, nMax );\n        var newMax = Math.max( nMin, nMax );\n        if(newMin != nMin) reverseOutput = true;\n\n        var portion=0;\n\n        if(reverseInput) portion = (oldMax-x)*(newMax-newMin)/(oldMax-oldMin);\n            else portion = (x-oldMin)*(newMax-newMin)/(oldMax-oldMin);\n        \n        if(reverseOutput) self.result.val = newMax - portion;\n            else self.result.val = portion + newMin;\n\n    };\n\n    this.v.val=0;\n    this.old_min.val=-1;\n    this.old_max.val=1;\n    this.new_min.val=0;\n    this.new_max.val=1;\n\n\n    this.v.onValueChanged=this.exec;\n    this.old_min.onValueChanged=this.exec;\n    this.old_max.onValueChanged=this.exec;\n    this.new_min.onValueChanged=this.exec;\n    this.new_max.onValueChanged=this.exec;\n\n    this.exec();\n\n};\n\nOps.Math.MapRange.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Abs = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    this.name='abs';\n    this.number=this.addInPort(new Port(this,\"number\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.number.onValueChanged=function()\n    {\n        self.result.val=Math.abs(self.number.val);\n    };\n};\n\nOps.Math.Abs.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Sin = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    this.name='Sinus';\n    this.number=this.addInPort(new Port(this,\"number\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.number.onValueChanged=function()\n    {\n        self.result.val=Math.sin(self.number.val);\n    };\n};\n\nOps.Math.Sin.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Sum = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='sum';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=parseFloat(self.number1.val)+parseFloat(self.number2.val);\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n\n    this.number1.val=1;\n    this.number2.val=1;\n};\n\nOps.Math.Sum.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Multiply = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='multiply';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val*self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n\n    this.number1.val=1;\n    this.number2.val=2;\n\n};\n\nOps.Math.Multiply.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Divide = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Divide';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val/self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Divide.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\nOps.Math.Compare={};\n\n\n\n\nOps.Math.Compare.IsEven = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='isEven';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n\n    this.exec= function()\n    {\n        self.result.val=!( self.number1.val & 1 );\n    };\n\n    this.number1.onValueChanged=this.exec;\n};\n\nOps.Math.Compare.IsEven.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Math.Compare.Greater = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Greater';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val>self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Compare.Greater.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Math.Compare.Between = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Between';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number=this.addInPort(new Port(this,\"value\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n    this.number.val=2.0;\n    this.number1.val=1.0;\n    this.number2.val=3.0;\n\n    this.exec= function()\n    {\n        self.result.val=\n            (\n                self.number.val>Math.min(self.number1.val,self.number2.val) &&\n                self.number.val<Math.max(self.number1.val,self.number2.val)\n            );\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n    this.number.onValueChanged=this.exec;\n};\nOps.Math.Compare.Between.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Math.Compare.Lesser = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Lesser';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val<self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n\n};\n\nOps.Math.Compare.Lesser.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Math.Compare.Equals = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Equals';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val==self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Compare.Equals.prototype = new Op();\n\n"],"sourceRoot":"/source/"}