{"version":3,"sources":["timer.js","utils.js","cgl_mesh.js","cgl_shader.js","cgl_texture.js","holo.js","ops.gl.js","ops.js","ops.math.js"],"names":["Timer","getTime","lastTime","Date","now","timeStart","timeOffset","self","this","currentTime","paused","update","togglePlay","play","pause","setOffset","val","generateUUID","d","uuid","replace","c","r","Math","random","floor","toString","ajaxRequest","url","callback","request","XMLHttpRequest","open","responseType","onload","e","target","response","send","CGL","Mesh","geom","bufTexCoords","bufTexCoordsIndizes","bufVertices","gl","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","vertices","STATIC_DRAW","itemSize","numItems","length","bufVerticesIndizes","ELEMENT_ARRAY_BUFFER","Uint16Array","verticesIndices","texCoords","console","log","render","shader","bind","vertexAttribPointer","getAttrVertexPos","FLOAT","getAttrTexCoords","drawElements","TRIANGLES","UNSIGNED_SHORT","Geometry","faceVertCount","texCoordsIndices","parseOBJ","buff","_readline","a","off","s","String","fromCharCode","groups","c_norms","i_norms","cg","from","to","Uint8Array","line","cds","split","x","parseFloat","y","z","push","v0a","v1a","v2a","vi0","parseInt","vi1","vi2","ui0","ui1","ui2","ni0","ni1","ni2","vlen","ulen","nlen","v3a","vi3","ui3","ni3","Uniform","_shader","_type","_name","_value","loc","name","type","value","needsUpdate","addUniform","updateValueF","getUniformLocation","getProgram","uniform1f","setValueF","v","updateValueT","uniform1i","setValueT","setValue","updateValue","Shader","program","uniforms","uni","getDefaultVertexShader","getDefaultFragmentShader","srcVert","srcFrag","setSource","projMatrixUniform","mvMatrixUniform","attrTexCoords","attrVertexPos","createProgram","GL","getAttribLocation","useProgram","i","enableVertexAttribArray","vertexPosAttrib","uniformMatrix4fv","pMatrix","mvMatrix","createShader","str","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","VERTEX_SHADER","FRAGMENT_SHADER","getShaderInfoLog","vstr","fstr","vshader","fshader","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","Texture","tex","createTexture","loaded","initTexture","img","bindTexture","TEXTURE_2D","pixelStorei","UNPACK_FLIP_Y_WEBGL","texImage2D","RGBA","UNSIGNED_BYTE","texParameteri","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","load","texture","image","Image","src","PORT_DIR_IN","PORT_DIR_OUT","OP_PORT_TYPE_VALUE","OP_PORT_TYPE_FUNCTION","Ops","Op","objName","portsOut","portsIn","posts","uiAttribs","id","getName","addOutPort","p","direction","parent","addInPort","execute","exec","printInfo","ipo","removeLinks","getPort","ipi","getSerialized","op","getPortByName","Port","links","__defineGetter__","__defineSetter__","onValueChanged","onTriggered","addLink","l","isLinkedTo","p2","portIn","portOut","call","goals","getTypeString","obj","remove","removeLink","link","splice","Link","scene","onUnLink","p1","canLink","objIn","objOut","canLinkText","Scene","ops","timer","animFrameOps","clear","deleteOp","addOp","eval","hasOwnProperty","onAdd","opid","onDelete","requestAnimationFrame","time","onAnimFrame","op1","port1Name","op2","port2Name","port1","port2","onLink","serialize","JSON","stringify","getOpById","deSerialize","opinid","opoutid","inName","outName","found","parse","iop","port","ipi2","ili","Gl","mat4","create","Renderer","apply","arguments","simpleShader","trigger","initTranslate","vec3","set","currentShader","clearColor","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","viewport","perspective","identity","translate","enable","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","canvas","document","getElementById","getContext","prototype","ClearColor","g","b","Meshes","Rectangle","squareVertexPositionBuffer","drawArrays","TRIANGLE_STRIP","ObjMesh","mesh","Plotter","lineWidth","buffer","num","LINE_STRIP","Triangle","BasicMaterial","doRender","activeTexture","TEXTURE0","textureUniform","uniform","Schwurbel","uniLoc","compile","Noise","timeUniform","Matrix","Translate","vec","Transform","DEG2RAD","posX","posY","posZ","scaleX","scaleY","scaleZ","rotX","rotY","rotZ","vPos","vScale","oldMatrix","transMatrix","doScale","doTranslate","copy","multiply","updateMatrix","rotateX","rotateY","rotateZ","scale","translateChanged","scaleChanged","rotChanged","Log","exe","input","CallsPerSecond","cps","Value","result","TimeLineTime","theTime","Repeat","idx","IfTrueThen","bool","triggerThen","triggerElse","Interval","timeOutId","interval","setTimeout","Anim","SinusAnim","sin","RelativeTime","startTime","Input","GamePad","numPads","axis1","axis2","axis3","axis4","button0","button1","button2","button3","button4","gamePads","navigator","getGamepads","count","gp","axes","buttons","pressed","Random","MapRange","old_min","old_max","new_min","new_max","nMin","nMax","oMin","oMax","reverseInput","oldMin","min","oldMax","max","reverseOutput","newMin","newMax","portion","Abs","number","abs","Sin","Sum","number1","number2","Multiply","Divide","Compare","IsEven","Greater","Between","Lesser","Equals"],"mappings":"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","file":"cables.min.js","sourcesContent":["\n\nfunction Timer()\n{\n    var self=this;\n    var timeStart=Date.now();\n    var timeOffset=0;\n\n    var currentTime=0;\n    var lastTime=0;\n    var paused=true;\n\n    function getTime()\n    {\n        lastTime=(Date.now()-timeStart)/1000;\n        return lastTime+timeOffset;\n\n    }\n\n    this.update=function()\n    {\n        if(paused) return;\n        currentTime=getTime();\n\n        return currentTime;\n    };\n\n    this.getTime=function()\n    {\n        return currentTime;\n    };\n\n    this.togglePlay=function()\n    {\n        if(paused)self.play();\n            else self.pause();\n    };\n\n    this.setOffset=function(val)\n    {\n        if(currentTime+val<0)\n        {\n            timeStart=Date.now();\n            timeOffset=0;\n            currentTime=0;\n        }\n        else\n        {\n            timeOffset+=val;\n            currentTime=lastTime+timeOffset;\n        }\n        \n\n    };\n\n    this.play=function()\n    {\n        timeStart=Date.now();\n        paused=false;\n    };\n\n    this.pause=function()\n    {\n        timeOffset=currentTime;\n        paused=true;\n    };\n\n}","function generateUUID()\n{\n    var d = new Date().getTime();\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c)\n    {\n        var r = (d + Math.random()*16)%16 | 0;\n        d = Math.floor(d/16);\n        return (c=='x' ? r : (r&0x3|0x8)).toString(16);\n    });\n    return uuid;\n}\n\n// ----------------------------------------------------------------\nfunction ajaxRequest(url, callback)\n{\n    var request = new XMLHttpRequest();\n    request.open(\"GET\", url, true);\n    request.responseType = \"arraybuffer\";\n    request.onload = function(e)\n    {\n        callback(e.target.response);\n    };\n    request.send();\n}\n\n\n\n","var CGL=CGL || {};\n\nCGL.Mesh=function(geom)\n{\n    var bufTexCoords=-1;\n    var bufTexCoordsIndizes=-1;\n\n    var bufVertices = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, bufVertices);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(geom.vertices), gl.STATIC_DRAW);\n    bufVertices.itemSize = 3;\n    bufVertices.numItems = geom.vertices.length/3;\n\n\n    var bufVerticesIndizes = gl.createBuffer();\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufVerticesIndizes);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(geom.verticesIndices), gl.STATIC_DRAW);\n    bufVerticesIndizes.itemSize = 1;\n    bufVerticesIndizes.numItems = geom.verticesIndices.length;\n\n    if(geom.texCoords.length>0)\n    {\n        console.log('found texcoords!');\n                \n        bufTexCoords = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, bufTexCoords);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(geom.texCoords), gl.STATIC_DRAW);\n        bufTexCoords.itemSize = 2;\n        bufTexCoords.numItems = geom.texCoords.length/bufTexCoords.itemSize;\n\n        // bufTexCoordsIndizes = gl.createBuffer();\n        // gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufTexCoordsIndizes);\n\n        // gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(bufTexCoordsIndizes), gl.STATIC_DRAW);\n        // bufTexCoordsIndizes.itemSize = 1;\n        // bufTexCoordsIndizes.numItems = geom.texCoordsIndices.length;\n    }\n\n    console.log('geom.vertices.length '+geom.vertices.length);\n    console.log('bufTexCoordsIndizes.numItems '+bufTexCoordsIndizes.numItems);\n    console.log('bufTexCoords.numItems '+bufTexCoords.numItems);\n\n    console.log('bufVertices.numItems '+bufVertices.numItems);\n    console.log('bufVerticesIndizes.numItems '+bufVerticesIndizes.numItems);\n\n\n\n    this.render=function(shader)\n    {\n        // shader.setAttributeVertex( bufVertices.itemSize);\n        // shader.setAttributeTexCoord( bufTexCoordsIndizes.itemSize);\n        shader.bind();\n\n\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, bufVertices);\n        gl.vertexAttribPointer(shader.getAttrVertexPos(),bufVertices.itemSize, gl.FLOAT, false, 0, 0);\n\n        // gl.vertexAttribPointer(shaderProgram.textureCoordAttribute, cubeVertexTextureCoordBuffer.itemSize, gl.FLOAT, false, 0, 0);\n\n        if(bufTexCoordsIndizes.itemSize!=-1)\n        {\n            gl.bindBuffer(gl.ARRAY_BUFFER, bufTexCoords);\n            gl.vertexAttribPointer(shader.getAttrTexCoords(),bufTexCoords.itemSize, gl.FLOAT, false, 0, 0);\n        }\n\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufVerticesIndizes);\n        gl.drawElements(gl.TRIANGLES, bufVerticesIndizes.numItems, gl.UNSIGNED_SHORT, 0);\n\n        // gl.drawArrays(gl.POINTS, 0, bufVertices.numItems);\n\n    };\n\n};\n\nCGL.Geometry=function()\n{\n    this.faceVertCount=3;\n    this.vertices=[];\n    this.verticesIndices=[];\n    this.texCoords=[];\n    this.texCoordsIndices=[];\n};\n\nparseOBJ = function(buff)\n{\n\n    _readline = function(a, off)  // Uint8Array, offset\n    {\n        var s = \"\";\n        while(a[off] != 10) s += String.fromCharCode(a[off++]);\n        return s;\n    };\n\n    var geom = new CGL.Geometry();\n    geom.groups = {};\n    \n    // geom.texCoords   = [];\n    geom.c_norms = [];\n    \n    // geom.texCoordsIndices   = [];\n    geom.i_norms = [];\n    \n    var cg = {from: 0, to:0};   // current group\n    var off = 0;\n    var a = new Uint8Array(buff);\n    \n    while(off < a.length)\n    {\n        var line = _readline(a, off);\n        off += line.length + 1;\n        line = line.replace(/ +(?= )/g,'');\n        line = line.replace(/(^\\s+|\\s+$)/g, '');\n        var cds = line.split(\" \");\n        if(cds[0] == \"g\")\n        {\n            cg.to = geom.verticesIndices.length;\n            if(geom.groups[cds[1]] == null) geom.groups[cds[1]] = {from:geom.verticesIndices.length, to:0};\n            cg = geom.groups[cds[1]];\n        }\n        if(cds[0] == \"v\")\n        {\n            var x = parseFloat(cds[1]);\n            var y = parseFloat(cds[2]);\n            var z = parseFloat(cds[3]);\n            geom.vertices.push(x,y,z);\n        }\n        if(cds[0] == \"vt\")\n        {\n            var x = parseFloat(cds[1]);\n            var y = 1-parseFloat(cds[2]);\n            geom.texCoords.push(x,y);\n        }\n        if(cds[0] == \"vn\")\n        {\n            var x = parseFloat(cds[1]);\n            var y = parseFloat(cds[2]);\n            var z = parseFloat(cds[3]);\n            geom.c_norms.push(x,y,z);\n        }\n        if(cds[0] == \"f\")\n        {\n            var v0a = cds[1].split(\"/\"), v1a = cds[2].split(\"/\"), v2a = cds[3].split(\"/\");\n            var vi0 = parseInt(v0a[0])-1, vi1 = parseInt(v1a[0])-1, vi2 = parseInt(v2a[0])-1;\n            var ui0 = parseInt(v0a[1])-1, ui1 = parseInt(v1a[1])-1, ui2 = parseInt(v2a[1])-1;\n            var ni0 = parseInt(v0a[2])-1, ni1 = parseInt(v1a[2])-1, ni2 = parseInt(v2a[2])-1;\n            \n            var vlen = geom.vertices.length/3, ulen = geom.texCoords.length/2, nlen = geom.c_norms.length/3;\n            if(vi0<0) vi0 = vlen + vi0+1; if(vi1<0) vi1 = vlen + vi1+1; if(vi2<0) vi2 = vlen + vi2+1;\n            if(ui0<0) ui0 = ulen + ui0+1; if(ui1<0) ui1 = ulen + ui1+1; if(ui2<0) ui2 = ulen + ui2+1;\n            if(ni0<0) ni0 = nlen + ni0+1; if(ni1<0) ni1 = nlen + ni1+1; if(ni2<0) ni2 = nlen + ni2+1;\n            \n            geom.verticesIndices.push(vi0, vi1, vi2);  //cg.verticesIndices.push(vi0, vi1, vi2)\n            geom.texCoordsIndices  .push(ui0, ui1, ui2);  //cg.texCoordsIndices  .push(ui0, ui1, ui2);\n            geom.i_norms.push(ni0, ni1, ni2);  //cg.i_norms.push(ni0, ni1, ni2);\n            if(cds.length == 5)\n            {\n                var v3a = cds[4].split(\"/\");\n                var vi3 = parseInt(v3a[0])-1, ui3 = parseInt(v3a[1])-1, ni3 = parseInt(v3a[2])-1;\n                if(vi3<0) vi3 = vlen + vi3+1;\n                if(ui3<0) ui3 = ulen + ui3+1;\n                if(ni3<0) ni3 = nlen + ni3+1;\n                geom.verticesIndices.push(vi0, vi2, vi3);  //cg.verticesIndices.push(vi0, vi2, vi3);\n                geom.texCoordsIndices  .push(ui0, ui2, ui3);  //cg.texCoordsIndices  .push(ui0, ui2, ui3);\n                geom.i_norms.push(ni0, ni2, ni3);  //cg.i_norms.push(ni0, ni2, ni3);\n            }\n        }\n    }\n    cg.to = geom.verticesIndices.length;\n    \n    return geom;\n};\n\n\n","var CGL=CGL || {};\n\n// ---------------------------------------------------------------------------\n\nCGL.Uniform=function(_shader,_type,_name,_value)\n{\n    var self=this;\n    var loc=-1;\n    var name=_name;\n    var type=_type;\n    var value=0;\n    var shader=_shader;\n    this.needsUpdate=true;\n\n    shader.addUniform(this);\n\n    this.updateValueF=function()\n    {\n        if(loc==-1) loc=gl.getUniformLocation(shader.getProgram(), name);\n        gl.uniform1f(loc, value);\n    };\n\n    this.setValueF=function(v)\n    {\n        self.needsUpdate=true;\n        value=v;\n    };\n\n    this.updateValueT=function()\n    {\n        if(loc==-1)\n        {\n            loc=gl.getUniformLocation(shader.getProgram(), name);\n            if(loc==-1) console.log('texture loc unknown!!');\n        }\n\n        gl.uniform1i(loc, value);\n    };\n\n    this.setValueT=function(v)\n    {\n        self.needsUpdate=true;\n        value=v;\n    };\n\n    if(type=='f')\n    {\n        this.setValue=this.setValueF;\n        this.updateValue=this.updateValueF;\n    }\n\n    if(type=='t')\n    {\n        this.setValue=this.setValueT;\n        this.updateValue=this.updateValueT;\n    }\n\n    this.setValue(_value);\n};\n\n// ---------------------------------------------------------------------------\n\nCGL.Shader=function()\n{\n    var self=this;\n    var program=-1;\n    var uniforms=[];\n\n    this.addUniform=function(uni)\n    {\n        uniforms.push(uni);\n    };\n\n    this.getDefaultVertexShader=function()\n    {\n        return ''+\n        'attribute vec3 vPosition;\\n'+\n        'attribute vec2 attrTexCoord;\\n'+\n        'varying vec2 texCoord;\\n'+\n        'uniform mat4 projMatrix;\\n'+\n        'uniform mat4 mvMatrix;\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        '   texCoord=attrTexCoord;\\n'+\n        '   gl_PointSize=3.0;\\n'+\n        '   gl_Position = projMatrix * mvMatrix * vec4(vPosition,  1.0);\\n'+\n        '}\\n';\n    };\n\n    this.getDefaultFragmentShader=function()\n    {\n        return ''+\n        'precision mediump float;\\n'+\n        'void main()\\n'+\n        '{\\n'+\n\n        '   gl_FragColor = vec4(0.5,0.5,0.5,1.0);\\n'+\n        '}\\n';\n    };\n\n    this.srcVert=this.getDefaultVertexShader();\n    this.srcFrag=this.getDefaultFragmentShader();\n\n    this.setSource=function(srcVert,srcFrag)\n    {\n        this.srcVert=srcVert;\n        this.srcFrag=srcFrag;\n        // console.log('compiled!');\n    };\n\n    var projMatrixUniform=-1;\n    var mvMatrixUniform=-1;\n\n    var attrTexCoords = -1;\n    var attrVertexPos = -1;\n\n    this.getAttrTexCoords=function(){return attrTexCoords;};\n    this.getAttrVertexPos=function(){return attrVertexPos;};\n\n\n    this.bind=function()\n    {\n        if(program==-1) program=createProgram(self.srcVert,self.srcFrag);\n\n        if(mvMatrixUniform==-1)\n        {\n            attrTexCoords = GL.getAttribLocation(program, 'attrTexCoord');\n            attrVertexPos = GL.getAttribLocation(program, 'vPosition');\n\n            projMatrixUniform = gl.getUniformLocation(program, \"projMatrix\");\n            mvMatrixUniform = gl.getUniformLocation(program, \"mvMatrix\");\n        }\n\n        GL.useProgram(program);\n\n        for(var i in uniforms)\n        {\n            if(uniforms[i].needsUpdate)uniforms[i].updateValue();\n        }\n\n        GL.enableVertexAttribArray(program.vertexPosAttrib);\n\n        gl.uniformMatrix4fv(projMatrixUniform, false, pMatrix);\n        gl.uniformMatrix4fv(mvMatrixUniform, false, mvMatrix);\n    };\n\n    this.getProgram=function()\n    {\n        return program;\n    };\n\n\n    createShader =function(str, type)\n    {\n        var shader = gl.createShader(type);\n        gl.shaderSource(shader, str);\n        gl.compileShader(shader);\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\n        {\n            console.log('compile status: ');\n\n            if(type==gl.VERTEX_SHADER)console.log('VERTEX_SHADER');\n            if(type==gl.FRAGMENT_SHADER)console.log('FRAGMENT_SHADER');\n            \n            throw gl.getShaderInfoLog(shader);\n        }\n        return shader;\n    };\n\n    createProgram=function(vstr, fstr)\n    {\n        var program = gl.createProgram();\n        var vshader = createShader(vstr, gl.VERTEX_SHADER);\n        var fshader = createShader(fstr, gl.FRAGMENT_SHADER);\n        gl.attachShader(program, vshader);\n        gl.attachShader(program, fshader);\n        gl.linkProgram(program);\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS))\n        {\n            throw gl.getProgramInfoLog(program);\n        }\n        return program;\n    };\n\n\n\n};\n\n","var CGL=CGL || {};\n\nCGL.Texture=function()\n{\n    var self=this;\n    this.tex = gl.createTexture();\n    this.loaded=false;\n\n    this.initTexture=function(img)\n    {\n        gl.bindTexture(gl.TEXTURE_2D, self.tex);\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        self.loaded=true;\n    };\n};\n\nCGL.Texture.load=function(url)\n{\n    var texture=new CGL.Texture();\n    var image = new Image();\n    image.onload = function ()\n    {\n        texture.initTexture(image);\n    };\n    image.src = url;\n    return texture;\n};\n\n// ---------------------------------------------------------------------------\n","\nvar PORT_DIR_IN=0;\nvar PORT_DIR_OUT=1;\n\nvar OP_PORT_TYPE_VALUE =0;\nvar OP_PORT_TYPE_FUNCTION =1;\n\nvar Ops = {};\n\n\nvar Op = function()\n{\n    this.objName='';\n    this.portsOut=[];\n    this.portsIn=[];\n    this.posts=[];\n    this.uiAttribs={};\n    this.name='unknown';\n    this.id=generateUUID();\n\n    this.getName= function()\n    {\n        return this.name;\n    };\n    this.addOutPort=function(p)\n    {\n        p.direction=PORT_DIR_OUT;\n        p.parent=this;\n        this.portsOut.push(p);\n        return p;\n    };\n    this.addInPort=function(p)\n    {\n        p.direction=PORT_DIR_IN;\n        p.parent=this;\n        this.portsIn.push(p);\n        return p;\n    };\n    this.execute=function()\n    {\n        this.exec();\n    };\n    this.printInfo=function()\n    {\n        for(var i=0;i<this.portsIn.length;i++)\n            console.log('in: '+this.portsIn[i].getName());\n\n        for(var ipo in this.portsOut)\n            console.log('out: '+this.portsOut[ipo].getName());\n    };\n\n    this.removeLinks=function()\n    {\n        for(var i=0;i<this.portsIn.length;i++)\n            this.portsIn[i].removeLinks();\n        for(var ipo in this.portsOut)\n            this.portsOut[ipo].removeLinks();\n    };\n\n    this.getPort=function(name)\n    {\n        for(var ipi in this.portsIn)\n            if(this.portsIn[ipi].getName()==name)return this.portsIn[ipi];\n\n        for(var ipo in this.portsOut)\n            if(this.portsOut[ipo].getName()==name)return this.portsOut[ipo];\n    };\n\n    this.getSerialized=function()\n    {\n        var op={};\n        op.name=this.getName();\n        op.objName=this.objName;\n        op.id=this.id;\n        op.uiAttribs=this.uiAttribs;\n\n        op.portsIn=[];\n        op.portsOut=[];\n\n        for(var i=0;i<this.portsIn.length;i++)\n            op.portsIn.push( this.portsIn[i].getSerialized() );\n\n        for(var ipo in this.portsOut)\n            op.portsOut.push( this.portsOut[ipo].getSerialized() );\n\n        return op;\n    };\n\n    this.getPortByName=function(name)\n    {\n        for(var i=0;i<this.portsIn.length;i++)\n            if(this.portsIn[i].name==name)return this.portsIn[i];\n        \n        for(var ipo in this.portsOut)\n            if(this.portsOut[ipo].name==name)return this.portsOut[ipo];\n    };\n\n};\n\n// ------------------------------------------------------------------------------------\n\nvar Port=function(parent,name,type)\n{\n    var self=this;\n    this.direction=PORT_DIR_IN;\n    this.id=generateUUID();\n    this.parent=parent;\n    this.links=[];\n    this.value=null;\n    this.name=name;\n    this.type=type || OP_PORT_TYPE_VALUE;\n\n    this.__defineGetter__(\"val\", function()\n    {\n        return this.value;\n    });\n\n    this.__defineSetter__(\"val\", function(v)\n    {\n        this.setValue(v);\n    });\n\n    this.onValueChanged=function(){};\n    this.onTriggered=function(){};\n\n    this.setValue=function(v)\n    {\n        if(v!=this.value)\n        {\n            this.value=v;\n            this.onValueChanged();\n\n            for(var i in this.links)\n            {\n                this.links[i].setValue();\n            }\n        }\n    };\n\n    this.getName= function()\n    {\n        return this.name;\n    };\n\n    this.addLink=function(l)\n    {\n        this.links.push(l);\n    };\n\n    this.isLinkedTo=function(p2)\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i].portIn==p2 || this.links[i].portOut==p2)return true;\n        }\n        return false;\n    };\n\n    this.call=function()\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i].portIn !=this)this.links[i].portIn.onTriggered();\n            if(this.links[i].portOut!=this)this.links[i].portOut.onTriggered();\n        }\n    };\n\n\n    this.execute=function()\n    {\n        console.log('### execute port: '+this.getName() , this.goals.length);\n    };\n\n    this.getTypeString=function()\n    {\n        if(this.type==OP_PORT_TYPE_VALUE)return 'value';\n        if(this.type==OP_PORT_TYPE_FUNCTION)return 'function';\n    };\n\n    this.getSerialized=function()\n    {\n        var obj={};\n        obj.name=this.getName();\n        obj.value=this.value;\n\n\n        if(this.direction==PORT_DIR_IN && this.links.length>0)\n        {\n            obj.links=[];\n            for(var i in this.links)\n            {\n                obj.links.push( this.links[i].getSerialized() );\n            }\n        }\n        return obj;\n    };\n\n    this.removeLinks=function()\n    {\n        while(this.links.length>0)\n        {\n            this.links[0].remove();\n        }\n    };\n\n    this.removeLink=function(link)\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i]==link)this.links.splice( i, 1 );\n        }\n    };\n};\n\n\n\n// ---------------------------------------------------------------------------\n\nvar Link = function(scene)\n{\n    this.portIn=null;\n    this.portOut=null;\n    this.scene=scene;\n\n    this.setValue=function()\n    {\n        if(this.portIn.val!=this.portOut.val)\n            this.portIn.val=this.portOut.val;\n    };\n\n    this.remove=function()\n    {\n        this.portIn.removeLink(this);\n        this.portOut.removeLink(this);\n        this.scene.onUnLink(this.portIn,this.portOut);\n        this.portIn=null;\n        this.portOut=null;\n        this.scene=null;\n    };\n\n\n    this.link=function(p1,p2)\n    {\n        if(!Link.canLink(p1,p2))\n        {\n            console.log('cannot link ports!');\n            return false;\n        }\n        if(p1.direction==PORT_DIR_IN)\n        {\n            this.portIn=p1;\n            this.portOut=p2;\n        }\n        else\n        {\n            this.portIn=p2;\n            this.portOut=p1;\n        }\n\n        p1.addLink(this);\n        p2.addLink(this);\n        this.setValue();\n    };\n\n    this.getSerialized=function()\n    {\n        var obj={};\n\n        obj.portIn=this.portIn.getName();\n        obj.portOut=this.portOut.getName();\n        obj.objIn=this.portIn.parent.id;\n        obj.objOut=this.portOut.parent.id;\n\n        return obj;\n    };\n};\n\n\nLink.canLinkText=function(p1,p2)\n{\n    if(p1.direction==PORT_DIR_IN && p1.links.length>0)return 'input port already busy';\n    if(p2.direction==PORT_DIR_IN && p2.links.length>0)return 'input port already busy';\n    if(p1.isLinkedTo(p2))return 'ports already linked';\n    if(!p1)return 'can not link: port 1 invalid';\n    if(!p2)return 'can not link: port 2 invalid';\n    if(p1.direction==p2.direction)return 'can not link: same direction';\n    if(p1.type!=p2.type)return 'can not link: different type';\n    if(p1.parent==p2.parent)return 'can not link: same op';\n    return 'can link';\n};\n\nLink.canLink=function(p1,p2)\n{\n\n    if(p1.direction==PORT_DIR_IN && p1.links.length>0)return false;\n    if(p2.direction==PORT_DIR_IN && p2.links.length>0)return false;\n    if(p1.isLinkedTo(p2))return false;\n    if(!p1)return false;\n    if(!p2)return false;\n    if(p1.direction==p2.direction)return false;\n    if(p1.type!=p2.type)return false;\n    if(p1.parent==p2.parent)return false;\n\n    return true;\n};\n\n\n// ------------------------------------------------------------------------------------\n\n\nvar Scene = function()\n{\n    var self=this;\n    this.ops=[];\n    this.timer=new Timer();\n    this.animFrameOps=[];\n    \n\n    this.clear=function()\n    {\n        this.timer=new Timer();\n        while(this.ops.length>0)\n        {\n            this.deleteOp(this.ops[0].id);\n        }\n    };\n\n    this.addOp=function(objName,uiAttribs)\n    {\n        var op=eval('new '+objName+'();');\n        op.objName=objName;\n        op.uiAttribs=uiAttribs;\n\n        if(op.hasOwnProperty('onAnimFrame')) this.animFrameOps.push(op);\n\n        this.ops.push(op);\n        if(this.onAdd)this.onAdd(op);\n        return op;\n    };\n\n    this.deleteOp=function(opid)\n    {\n        for(var i in this.ops)\n        {\n            if(this.ops[i].id==opid)\n            {\n                this.ops[i].removeLinks();\n                this.onDelete(this.ops[i]);\n                this.ops.splice( i, 1 );\n            }\n        }\n    };\n\n    this.exec=function()\n    {\n        requestAnimationFrame(self.exec);\n        self.timer.update();\n\n        var time=self.timer.getTime();\n\n        for(var i in self.animFrameOps)\n        {\n            self.animFrameOps[i].onAnimFrame(time);\n        }\n\n    };\n\n    this.link=function(op1,port1Name,op2,port2Name)\n    {\n        var port1=op1.getPort(port1Name);\n        var port2=op2.getPort(port2Name);\n\n        if(Link.canLink(port1,port2))\n        {\n            var link=new Link(this);\n            link.link(port1,port2);\n            this.onLink(port1,port2);\n            return link;\n        }\n        else\n        {\n            console.log(Link.canLinkText(port1,port2));\n        }\n    };\n    this.onAdd=function(op){};\n    this.onDelete=function(op){};\n    this.onLink=function(p1,p2){};\n    this.onUnLink=function(p1,p2){};\n    this.serialize=function()\n    {\n        var obj={};\n\n        obj.ops=[];\n        for(var i in this.ops)\n        {\n            obj.ops.push( this.ops[i].getSerialized() );\n        }\n        \n        return JSON.stringify(obj);\n    };\n    this.getOpById=function(opid)\n    {\n        for(var i in this.ops)\n        {\n            if(this.ops[i].id==opid)return this.ops[i];\n        }\n\n    };\n    this.deSerialize=function(obj)\n    {\n        if (typeof obj === \"string\") obj=JSON.parse(obj);\n        var self=this;\n\n        function addLink(opinid,opoutid,inName,outName)\n        {\n            var found=false;\n            if(!found)\n            {\n                self.link(\n                    self.getOpById(opinid),\n                    inName,\n                    self.getOpById(opoutid),\n                    outName\n                    );\n            }\n        }\n\n        // add ops...\n        for(var iop in obj.ops)\n        {\n            var op=this.addOp(obj.ops[iop].objName,obj.ops[iop].uiAttribs);\n            op.id=obj.ops[iop].id;\n\n            for(var ipi in obj.ops[iop].portsIn)\n            {\n                var port=op.getPortByName(obj.ops[iop].portsIn[ipi].name);\n                if(port)port.val=obj.ops[iop].portsIn[ipi].value;\n            }\n\n            for(var ipo in obj.ops[iop].portsOut)\n            {\n                var port2=op.getPortByName(obj.ops[iop].portsOut[ipo].name);\n                if(port2)port2.val=obj.ops[iop].portsOut[ipo].value;\n            }\n\n\n            // op.uiAttribs=obj.ops[iop].uiAttribs;\n        }\n\n        // create links...\n        for(iop in obj.ops)\n        {\n            for(var ipi2 in obj.ops[iop].portsIn)\n            {\n\n                for(var ili in obj.ops[iop].portsIn[ipi2].links)\n                {\n                    addLink(\n                        obj.ops[iop].portsIn[ipi2].links[ili].objIn,\n                        obj.ops[iop].portsIn[ipi2].links[ili].objOut,\n                        obj.ops[iop].portsIn[ipi2].links[ili].portIn,\n                        obj.ops[iop].portsIn[ipi2].links[ili].portOut);\n                }\n            }\n\n\n            // for(var ipo in obj.ops[iop].portsOut)\n            // {\n            //     for(var ili in obj.ops[iop].portsOut[ipo].links)\n            //     {\n            //         addLink(\n            //             obj.ops[iop].portsOut[ipo].links[ili].objIn,\n            //             obj.ops[iop].portsOut[ipo].links[ili].objOut,\n            //             obj.ops[iop].portsOut[ipo].links[ili].portIn,\n            //             obj.ops[iop].portsOut[ipo].links[ili].portOut);\n\n            //     }\n            // }\n        }\n\n\n        for(var i in this.ops)\n        {\n            this.ops[i].id=generateUUID();\n        }\n\n\n\n    };\n\n    this.exec();\n\n};\n\n\n\n\n","//http://k3d.ivank.net/K3D.js\n//http://fhtr.blogspot.de/2009/12/3d-models-and-parsing-binary-data-with.html\n//https://github.com/gpjt/webgl-lessons/blob/master/lesson05/index.html\n\nOps.Gl={};\nvar GL=null;\nvar GL=null;\n\nvar mvMatrix = mat4.create();\nvar pMatrix = mat4.create();\n\nOps.Gl.Renderer = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    var simpleShader=new CGL.Shader();\n \n\n    this.name='WebGL Renderer';\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var initTranslate=vec3.create();\n    vec3.set(initTranslate, 0,0,-2);\n\n    this.onAnimFrame=function(time)\n    {\n        currentShader=simpleShader;\n\n        GL.clearColor(0,0,0,1);\n        GL.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n        gl.viewport(0,0,640,360);\n        mat4.perspective(pMatrix,45, 800 / 480, 0.01, 1100.0);\n        mat4.identity(mvMatrix);\n        mat4.translate(mvMatrix,mvMatrix, initTranslate);\n\n        GL.enable(GL.BLEND);\n        GL.blendFunc(GL.SRC_ALPHA,GL.ONE_MINUS_SRC_ALPHA);\n\n        self.trigger.call();\n    };\n\n    this.canvas = document.getElementById(\"glcanvas\");\n    GL = this.canvas.getContext(\"experimental-webgl\");\n    gl = this.canvas.getContext(\"experimental-webgl\");\n\n};\n\nOps.Gl.Renderer.prototype = new Op();\n\n\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.ClearColor = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='ClearColor';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.r=this.addInPort(new Port(this,\"r\"));\n    this.g=this.addInPort(new Port(this,\"g\"));\n    this.b=this.addInPort(new Port(this,\"b\"));\n\n    this.render.onTriggered=function()\n    {\n        GL.clearColor(self.r.val,self.g.val,self.b.val,1);\n        GL.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n\n        self.trigger.call();\n    };\n\n};\n\nOps.Gl.ClearColor.prototype = new Op();\n\n\nvar currentShader=null;\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Meshes={};\n\n\n\nOps.Gl.Meshes.Rectangle = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='rectangle';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        // currentShader.setAttributeVertex( self.squareVertexPositionBuffer.itemSize);\n        gl.vertexAttribPointer(currentShader.getAttrVertexPos(),self.squareVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);\n\n        currentShader.bind();\n        gl.bindBuffer(gl.ARRAY_BUFFER, self.squareVertexPositionBuffer);\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, self.squareVertexPositionBuffer.numItems);\n\n        self.trigger.call();\n    };\n\n    this.squareVertexPositionBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.squareVertexPositionBuffer);\n    this.vertices = [\n         1.0,  1.0,  0.0,\n        -1.0,  1.0,  0.0,\n         1.0, -1.0,  0.0,\n        -1.0, -1.0,  0.0\n    ];\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(this.vertices), gl.STATIC_DRAW);\n    this.squareVertexPositionBuffer.itemSize = 3;\n    this.squareVertexPositionBuffer.numItems = 4;\n};\n\nOps.Gl.Meshes.Rectangle.prototype = new Op();\n\n\n\n\n\n\nOps.Gl.Meshes.ObjMesh = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='OBJ Mesh';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.mesh=null;\n\n    this.render.onTriggered=function()\n    {\n        if(self.mesh)\n        {\n            self.mesh.render(currentShader);\n        }\n\n        self.trigger.call();\n    };\n\n\n    ajaxRequest('assets/43_ChinUpperRaise.obj',function(response)\n    {\n        console.log(response);\n                \n        var r=parseOBJ(response);\n        console.log(r);\n        \n        self.mesh=new CGL.Mesh(r);\n    });\n\n\n\n};\n\nOps.Gl.Meshes.ObjMesh.prototype = new Op();\n\n\n\n\n// ----------------------------------------------------------------\n\n\nOps.Gl.Meshes.Plotter = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Plotter';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.v=this.addInPort(new Port(this,\"value\"));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        // currentShader.setAttributeVertex( self.buffer.itemSize);\n        gl.vertexAttribPointer(currentShader.getAttrVertexPos(),self.buffer.itemSize, gl.FLOAT, false, 0, 0);\n        currentShader.bind();\n        gl.bindBuffer(gl.ARRAY_BUFFER, self.buffer);\n        gl.drawArrays(gl.LINE_STRIP, 0, self.buffer.numItems);\n\n        self.trigger.call();\n    };\n\n    this.buffer = gl.createBuffer();\n    \n    var num=50;\n    this.vertices = [];\n    for(var i=0;i<num;i++)\n    {\n        this.vertices.push(1/num*i);\n        this.vertices.push(Math.random()-0.5);\n        this.vertices.push(0);\n    }\n\n    function bufferData()\n    {\n        gl.lineWidth(4);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, self.buffer);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(self.vertices), gl.STATIC_DRAW);\n        self.buffer.itemSize = 3;\n        self.buffer.numItems = num;\n    }\n    bufferData();\n\n    this.v.onValueChanged=function()\n    {\n        self.vertices.splice(0,3);\n        self.vertices.push(1);\n        self.vertices.push(self.v.val);\n        self.vertices.push(0);\n\n        for(var i=0;i<num*3;i+=3)\n        {\n            self.vertices[i]=1/num*i;\n        }\n\n        bufferData();\n    };\n\n\n};\n\nOps.Gl.Meshes.Plotter.prototype = new Op();\n\n\n// ----------------------------------------------------------------\n\nOps.Gl.Meshes.Triangle = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Triangle';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        // currentShader.setAttributeVertex( self.squareVertexPositionBuffer.itemSize);\n        // gl.vertexAttribPointer(shader.getAttrVertexPos(),self.squareVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);\n        gl.vertexAttribPointer(currentShader.getAttrVertexPos(),self.squareVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);\n\n\n        currentShader.bind();\n        gl.bindBuffer(gl.ARRAY_BUFFER, self.squareVertexPositionBuffer);\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, self.squareVertexPositionBuffer.numItems);\n\n        self.trigger.call();\n    };\n\n    this.squareVertexPositionBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.squareVertexPositionBuffer);\n    this.vertices = [\n         0.0,  1.0,  0.0,\n        -1.0,  -1.0,  0.0,\n         1.0, -1.0,  0.0\n    ];\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(this.vertices), gl.STATIC_DRAW);\n    this.squareVertexPositionBuffer.itemSize = 3;\n    this.squareVertexPositionBuffer.numItems = 3;\n\n\n};\n\nOps.Gl.Meshes.Triangle.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.Shader={};\n\nOps.Gl.Shader.BasicMaterial = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='BasicMaterial';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n\n    this.texture=CGL.Texture.load('assets/remo_diffuse.jpg');\n\n\n    this.doRender=function()\n    {\n        currentShader=shader;\n\n        gl.activeTexture(gl.TEXTURE0);\n\n        if(self.texture.loaded===true)\n        {\n            gl.bindTexture(gl.TEXTURE_2D, self.texture.tex);\n\n            \n        }\n\n\n        self.trigger.call();\n    };\n\n    var srcFrag=''+\n        'precision mediump float;\\n'+\n        'varying vec2 texCoord;\\n'+\n        'uniform sampler2D texture;\\n'+\n        'uniform float r;\\n'+\n        'uniform float g;\\n'+\n        'uniform float b;\\n'+\n        'uniform float a;\\n'+\n        '\\n'+\n        'void main()\\n'+\n        '{\\n'+\n\n        '   float rr=texture2D(texture,texCoord).r;\\n'+\n\n        '   gl_FragColor = vec4(r,g,b,a);\\n'+\n        '}\\n';\n\n\n    var shader=new CGL.Shader();\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n\n    this.textureUniform=new CGL.Uniform(shader,'t','texture',this.texture);\n\n\n    this.doRender();\n\n    this.r=this.addInPort(new Port(this,\"r\"));\n    this.r.onValueChanged=function()\n    {\n        if(!self.r.uniform) self.r.uniform=new CGL.Uniform(shader,'f','r',self.r.val);\n        else self.r.uniform.setValue(self.r.val);\n\n        // shader.bind();\n        // if(!self.r.uniLoc) self.r.uniLoc=gl.getUniformLocation(shader.getProgram(), \"r\");\n        // gl.uniform1f(self.r.uniLoc, self.r.val);\n    };\n\n    this.g=this.addInPort(new Port(this,\"g\"));\n    this.g.onValueChanged=function()\n    {\n        if(!self.g.uniform) self.g.uniform=new CGL.Uniform(shader,'f','g',self.g.val);\n        else self.g.uniform.setValue(self.g.val);\n\n        // shader.bind();\n        // if(!self.g.uniLoc) self.g.uniLoc=gl.getUniformLocation(shader.getProgram(), \"g\");\n        // gl.uniform1f(self.g.uniLoc, self.g.val);\n    };\n\n    this.b=this.addInPort(new Port(this,\"b\"));\n    this.b.onValueChanged=function()\n    {\n        if(!self.b.uniform) self.b.uniform=new CGL.Uniform(shader,'f','b',self.b.val);\n        else self.b.uniform.setValue(self.b.val);\n\n        // shader.bind();\n        // if(!self.b.uniLoc) self.b.uniLoc=gl.getUniformLocation(shader.getProgram(), \"b\");\n        // gl.uniform1f(self.b.uniLoc, self.b.val);\n    };\n\n    this.a=this.addInPort(new Port(this,\"a\"));\n    this.a.onValueChanged=function()\n    {\n        if(!self.a.uniform) self.a.uniform=new CGL.Uniform(shader,'f','a',self.a.val);\n        else self.a.uniform.setValue(self.a.val);\n\n        // shader.bind();\n        // if(!self.a.uniLoc) self.a.uniLoc=gl.getUniformLocation(shader.getProgram(), \"a\");\n        // gl.uniform1f(self.a.uniLoc, self.a.val);\n    };\n\n    this.r.val=Math.random();\n    this.g.val=Math.random();\n    this.b.val=Math.random();\n    this.a.val=1.0;\n\n    this.render.onTriggered=this.doRender;\n};\n\nOps.Gl.Shader.BasicMaterial.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Shader.Schwurbel = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Schwurbel';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.timer=this.addInPort(new Port(this,\"time\"));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.doRender=function()\n    {\n        currentShader=shader;\n        if(!self.timer.uniLoc)\n        {\n            shader.bind();\n            self.timer.uniLoc=gl.getUniformLocation(shader.getProgram(), \"time\");\n        }\n        gl.uniform1f(self.timer.uniLoc, self.timer.val);\n\n        self.trigger.call();\n    };\n\n    var srcFrag=''+\n        'precision mediump float;\\n'+\n        'uniform float time;\\n'+\n        '\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        'float c=sqrt(sin(time*0.02)*cos((time+gl_FragCoord.y)*0.02)+sin(time+gl_FragCoord.x*0.02)*sin(time+gl_FragCoord.y*0.02));\\n'+\n        'gl_FragColor = vec4( c,c,c,1.0);\\n'+\n        '}\\n';\n\n    var shader=new CGL.Shader();\n    shader.compile(shader.getDefaultVertexShader(),srcFrag);\n\n    this.doRender();\n    this.render.onTriggered=this.doRender;\n};\n\nOps.Gl.Shader.Schwurbel.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Shader.Noise = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Noise';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var timeUniform=-1;\n    var timeStart=-1;\n\n    this.doRender=function()\n    {\n        if(timeUniform==-1)\n        {\n            timeStart=Date.now();\n            shader.bind();\n            timeUniform=gl.getUniformLocation(shader.getProgram(), \"time\");\n        }\n\n        gl.uniform1f(timeUniform, (Date.now()-timeStart)/1000);\n        currentShader=shader;\n\n        self.trigger.call();\n    };\n\n    var srcFrag=''+\n        'precision mediump float;\\n'+\n        'uniform float time;\\n'+\n        '\\n'+\n        'float random(vec2 co)\\n'+\n        '{\\n'+\n        '   return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\\n'+\n        '}\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        '   float c=random(time*gl_FragCoord.xy);'+\n        '   gl_FragColor = vec4( c,c,c,1.0);\\n'+\n        '}\\n';\n\n\n    var shader=new CGL.Shader();\n    shader.compile(shader.getDefaultVertexShader(),srcFrag);\n\n    this.doRender();\n    this.render.onTriggered=this.doRender;\n};\n\nOps.Gl.Shader.Noise.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.Matrix={};\n\n\nOps.Gl.Matrix.Translate = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='translate';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.x=this.addInPort(new Port(this,\"x\"));\n    this.y=this.addInPort(new Port(this,\"y\"));\n    this.z=this.addInPort(new Port(this,\"z\"));\n    this.x.val=0.0;\n    this.y.val=0.0;\n    this.z.val=0.0;\n    \n    var vec=vec3.create();\n\n    this.render.onTriggered=function()\n    {\n        vec3.set(vec, self.x.val,self.y.val,self.z.val);\n\n        mat4.translate(mvMatrix,mvMatrix, vec);\n        self.trigger.call();\n    };\n\n};\n\nOps.Gl.Matrix.Translate.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.Matrix.Transform = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var DEG2RAD = 3.14159/180.0;\n    this.name='transform';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.posX=this.addInPort(new Port(this,\"posX\"));\n    this.posY=this.addInPort(new Port(this,\"posY\"));\n    this.posZ=this.addInPort(new Port(this,\"posZ\"));\n\n    this.scaleX=this.addInPort(new Port(this,\"scaleX\"));\n    this.scaleY=this.addInPort(new Port(this,\"scaleY\"));\n    this.scaleZ=this.addInPort(new Port(this,\"scaleZ\"));\n\n    this.rotX=this.addInPort(new Port(this,\"rotX\"));\n    this.rotY=this.addInPort(new Port(this,\"rotY\"));\n    this.rotZ=this.addInPort(new Port(this,\"rotZ\"));\n    \n    var vPos=vec3.create();\n    var vScale=vec3.create();\n    var oldMatrix = mat4.create();\n    var transMatrix = mat4.create();\n    mat4.identity(transMatrix);\n\n    var doScale=false;\n    var doTranslate=false;\n\n    this.render.onTriggered=function()\n    {\n        mat4.copy(oldMatrix, mvMatrix);\n\n        mat4.multiply(mvMatrix,mvMatrix,transMatrix);\n\n        self.trigger.call();\n\n        mat4.copy(mvMatrix,oldMatrix);\n    };\n\n    var updateMatrix=function()\n    {\n        mat4.identity(transMatrix);\n        if(doTranslate)mat4.translate(transMatrix,transMatrix, vPos);\n\n        if(self.rotX.val!==0)mat4.rotateX(transMatrix,transMatrix, self.rotX.val*DEG2RAD);\n        if(self.rotY.val!==0)mat4.rotateY(transMatrix,transMatrix, self.rotY.val*DEG2RAD);\n        if(self.rotZ.val!==0)mat4.rotateZ(transMatrix,transMatrix, self.rotZ.val*DEG2RAD);\n\n        if(doScale)mat4.scale(transMatrix,transMatrix, vScale);\n    };\n\n    this.translateChanged=function()\n    {\n        doTranslate=false;\n        if(self.posX.val!==0.0 || self.posY.val!==0.0 || self.posZ.val!==0.0)doTranslate=true;\n        vec3.set(vPos, self.posX.val,self.posY.val,self.posZ.val);\n        updateMatrix();\n    };\n\n    this.scaleChanged=function()\n    {\n        doScale=false;\n        if(self.scaleX.val!==0.0 || self.scaleY.val!==0.0 || self.scaleZ.val!==0.0)doScale=true;\n        vec3.set(vScale, self.scaleX.val,self.scaleY.val,self.scaleZ.val);\n        updateMatrix();\n    };\n\n    this.rotChanged=function()\n    {\n        updateMatrix();\n    };\n\n    this.rotX.onValueChanged=this.rotChanged;\n    this.rotY.onValueChanged=this.rotChanged;\n    this.rotZ.onValueChanged=this.rotChanged;\n\n    this.scaleX.onValueChanged=this.scaleChanged;\n    this.scaleY.onValueChanged=this.scaleChanged;\n    this.scaleZ.onValueChanged=this.scaleChanged;\n\n    this.posX.onValueChanged=this.translateChanged;\n    this.posY.onValueChanged=this.translateChanged;\n    this.posZ.onValueChanged=this.translateChanged;\n\n    this.rotX.val=0.0;\n    this.rotY.val=0.0;\n    this.rotZ.val=0.0;\n\n    this.scaleX.val=1.0;\n    this.scaleY.val=1.0;\n    this.scaleZ.val=1.0;\n\n    this.posX.val=0.0;\n    this.posY.val=0.0;\n    this.posZ.val=0.0;\n\n    updateMatrix();\n};\n\nOps.Gl.Matrix.Translate.prototype = new Op();\n\n\n\n\n\n","// https://github.com/automat/foam-gl\n// http://howlerjs.com/\n//http://learningwebgl.com/lessons/lesson01/index.html\n\n\nOps.Log = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='logger';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.input=this.addInPort(new Port(this,\"input\"));\n    this.input.val='';\n\n    this.exec=function()\n    {\n        console.log(\"[log] \" + self.input.val);\n    };\n\n    this.exe.onTriggered=this.exec;\n    this.input.onValueChanged=this.exec;\n};\nOps.Log.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\n\nOps.CallsPerSecond = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='CallsPerSecond';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.timeStart=0;\n    this.cps=0;\n\n    this.exe.onTriggered=function()\n    {\n        if(self.timeStart===0)self.timeStart=Date.now();\n        var now = Date.now();\n\n        if(now-self.timeStart>1000)\n        {\n            self.timeStart=Date.now();\n            console.log('cps: '+self.cps);\n            self.cps=0;\n        }\n\n        self.cps++;\n    };\n};\nOps.CallsPerSecond.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\nOps.Value = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Value';\n    this.v=this.addInPort(new Port(this,\"value\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.v.val;\n    };\n\n    this.v.onValueChanged=this.exec;\n};\n\nOps.Value.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\n\nOps.TimeLineTime = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='TimeLineTime';\n    this.theTime=this.addOutPort(new Port(this,\"time\"));\n\n    this.onAnimFrame=function(time)\n    {\n        this.theTime.val=time;\n    };\n\n};\nOps.TimeLineTime.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\n\n\n\nOps.Repeat = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Repeat';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.num=this.addInPort(new Port(this,\"num\"));\n    this.num.val=5;\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n    this.idx=this.addOutPort(new Port(this,\"index\"));\n\n    this.exe.onTriggered=function()\n    {\n\n        for(var i=0;i<self.num.value;i++)\n        {\n            self.idx.val=i;\n            self.trigger.call();\n        }\n\n    };\n};\nOps.Repeat.prototype = new Op();\n\n\n\n\n// ---------------------------------------------------------------------------\n\n\nOps.IfTrueThen = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='if true then';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.bool=this.addInPort(new Port(this,\"boolean\"));\n    this.bool.val=false;\n\n    this.triggerThen=this.addOutPort(new Port(this,\"then\",OP_PORT_TYPE_FUNCTION));\n    this.triggerElse=this.addOutPort(new Port(this,\"else\",OP_PORT_TYPE_FUNCTION));\n\n    this.exe.onTriggered=function()\n    {\n        if(self.bool.val===true)\n        {\n            self.triggerThen.call();\n        }\n        else\n        {\n            self.triggerElse.call();\n        }\n    };\n\n    this.bool.onValueChanged=function()\n    {\n        self.exe.onTriggered();\n    };\n\n};\nOps.IfTrueThen.prototype = new Op();\n\n\n\n\n\n// ---------------------------------------------------------------------------\n\nOps.Interval = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='Interval';\n    this.timeOutId=-1;\n    this.interval=this.addInPort(new Port(this,\"interval\"));\n    this.interval.val=1000;\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.exec=function()\n    {\n        if(this.timeOutId!=-1)return;\n        var self=this;\n\n        this.timeOutId=setTimeout(function()\n        {\n            self.timeOutId=-1;\n            self.trigger.call();\n            self.exec();\n        },\n        this.interval.val );\n    };\n\n    this.exec();\n\n};\n\nOps.Interval.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\n// --------------------------------------------------------------------------\n\nOps.Anim={};\n\nOps.Anim.SinusAnim = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='SinusAnim';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    var self=this;\n\n    this.exe.onTriggered=function()\n    {\n        self.result.val=Math.sin(Date.now()/1000.0);\n    };\n\n    this.exe.onTriggered();\n\n};\n\nOps.Anim.SinusAnim.prototype = new Op();\n\n\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Anim.RelativeTime = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='RelativeTime';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    var self=this;\n    var startTime=Date.now()/1000.0;\n\n    this.exe.onTriggered=function()\n    {\n        self.result.val=Date.now()/1000.0-startTime;\n    };\n\n    this.exe.onTriggered();\n\n};\n\nOps.Anim.RelativeTime.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\nOps.Input={};\n\nOps.Input.GamePad = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='GamePad';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.numPads=this.addOutPort(new Port(this,\"numPads\"));\n    this.axis1=this.addOutPort(new Port(this,\"axis1\"));\n    this.axis2=this.addOutPort(new Port(this,\"axis2\"));\n    this.axis3=this.addOutPort(new Port(this,\"axis3\"));\n    this.axis4=this.addOutPort(new Port(this,\"axis4\"));\n    this.button0=this.addOutPort(new Port(this,\"button0\"));\n    this.button1=this.addOutPort(new Port(this,\"button1\"));\n    this.button2=this.addOutPort(new Port(this,\"button2\"));\n    this.button3=this.addOutPort(new Port(this,\"button3\"));\n    this.button4=this.addOutPort(new Port(this,\"button4\"));\n\n    var self=this;\n    var startTime=Date.now()/1000.0;\n\n    this.exe.onTriggered=function()\n    {\n        var gamePads=navigator.getGamepads();\n        var count=0;\n\n        for(var gp in gamePads)\n        {\n            if(gamePads[gp].axes)\n            {\n                self.axis1.val=gamePads[gp].axes[0];\n                self.axis2.val=gamePads[gp].axes[1];\n                self.axis3.val=gamePads[gp].axes[2];\n                self.axis4.val=gamePads[gp].axes[3];\n\n                self.button0.val=gamePads[gp].buttons[0].pressed;\n                self.button0.val=gamePads[gp].buttons[1].pressed;\n                self.button2.val=gamePads[gp].buttons[2].pressed;\n                self.button3.val=gamePads[gp].buttons[3].pressed;\n                self.button4.val=gamePads[gp].buttons[4].pressed;\n\n                count++;\n            }\n        }\n\n        self.numPads.val=count;\n    };\n\n    this.exe.onTriggered();\n\n};\n\nOps.Input.GamePad.prototype = new Op();\n\n","Ops.Math={};\n\n\nOps.Math.Random = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='random';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.exe.onTriggered=function()\n    {\n        self.result.val=Math.random();\n    };\n\n    this.exe.onTriggered();\n};\n\nOps.Math.Random.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\n\n\nOps.Math.MapRange = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='map value range';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.v=this.addInPort(new Port(this,\"value\"));\n    this.old_min=this.addInPort(new Port(this,\"old min\"));\n    this.old_max=this.addInPort(new Port(this,\"old max\"));\n    this.new_min=this.addInPort(new Port(this,\"new min\"));\n    this.new_max=this.addInPort(new Port(this,\"new max\"));\n\n    this.exec= function()\n    {\n        if(self.v.val>self.old_max.val)\n        {\n            self.result.val=self.new_max.val;\n            return;\n        }\n        else\n        if(self.v.val<self.old_min.val)\n        {\n            self.result.val=self.new_min.val;\n            return;\n        }\n\n        var nMin=parseFloat(self.new_min.val);\n        var nMax=parseFloat(self.new_max.val);\n        var oMin=parseFloat(self.old_min.val);\n        var oMax=parseFloat(self.old_max.val);\n        var x=parseFloat(self.v.val);\n\n        var reverseInput = false;\n        var oldMin = Math.min( oMin, oMax );\n        var oldMax = Math.max( oMin, oMax );\n        if(oldMin!= oMin) reverseInput = true;\n\n        var reverseOutput = false;\n        var newMin = Math.min( nMin, nMax );\n        var newMax = Math.max( nMin, nMax );\n        if(newMin != nMin) reverseOutput = true;\n\n        var portion=0;\n\n        if(reverseInput) portion = (oldMax-x)*(newMax-newMin)/(oldMax-oldMin);\n            else portion = (x-oldMin)*(newMax-newMin)/(oldMax-oldMin);\n        \n        if(reverseOutput) self.result.val = newMax - portion;\n            else self.result.val = portion + newMin;\n\n    };\n\n    this.v.val=0;\n    this.old_min.val=-1;\n    this.old_max.val=1;\n    this.new_min.val=0;\n    this.new_max.val=1;\n\n\n    this.v.onValueChanged=this.exec;\n    this.old_min.onValueChanged=this.exec;\n    this.old_max.onValueChanged=this.exec;\n    this.new_min.onValueChanged=this.exec;\n    this.new_max.onValueChanged=this.exec;\n\n    this.exec();\n\n};\n\nOps.Math.MapRange.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Abs = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    this.name='abs';\n    this.number=this.addInPort(new Port(this,\"number\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.number.onValueChanged=function()\n    {\n        self.result.val=Math.abs(self.number.val);\n    };\n};\n\nOps.Math.Abs.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Sin = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    this.name='Sinus';\n    this.number=this.addInPort(new Port(this,\"number\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.number.onValueChanged=function()\n    {\n        self.result.val=Math.sin(self.number.val);\n    };\n};\n\nOps.Math.Sin.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Sum = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='sum';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=parseFloat(self.number1.val)+parseFloat(self.number2.val);\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Sum.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Multiply = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='multiply';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val*self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n\n};\n\nOps.Math.Multiply.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Divide = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Divide';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val/self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Divide.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\nOps.Math.Compare={};\n\n\n\n\nOps.Math.Compare.IsEven = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='isEven';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n\n    this.exec= function()\n    {\n        self.result.val=!( self.number1.val & 1 );\n    };\n\n    this.number1.onValueChanged=this.exec;\n};\n\nOps.Math.Compare.IsEven.prototype = new Op();\n\n\n\nOps.Math.Compare.Greater = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Greater';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val>self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Compare.Greater.prototype = new Op();\n\n\n\n\n\n\nOps.Math.Compare.Between = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Between';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number=this.addInPort(new Port(this,\"value\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n    this.number.val=2.0;\n    this.number1.val=1.0;\n    this.number2.val=3.0;\n\n    this.exec= function()\n    {\n        self.result.val=\n            (\n                self.number.val>Math.min(self.number1.val,self.number2.val) &&\n                self.number.val<Math.max(self.number1.val,self.number2.val)\n            );\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n    this.number.onValueChanged=this.exec;\n};\nOps.Math.Compare.Between.prototype = new Op();\n\n\n\n\nOps.Math.Compare.Lesser = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Lesser';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val<self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n\n};\n\nOps.Math.Compare.Lesser.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Math.Compare.Equals = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Equals';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val==self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Compare.Equals.prototype = new Op();\n\n"],"sourceRoot":"/source/"}