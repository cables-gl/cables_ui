{"version":3,"sources":["geometry.js","timer.js","utils.js","glutils.js","holo.js","ops.gl.js","ops.js","ops.math.js"],"names":["Mesh","geom","this","render","shader","setAttributeVertex","self","bufVertices","itemSize","bind","gl","bindBuffer","ARRAY_BUFFER","drawArrays","POINTS","numItems","createBuffer","bufferData","Float32Array","vertices","STATIC_DRAW","faceVertCount","length","Geometry","verticesIndices","Timer","getTime","lastTime","Date","now","timeStart","timeOffset","currentTime","paused","update","togglePlay","play","pause","setOffset","val","generateUUID","d","uuid","replace","c","r","Math","random","floor","toString","ajaxRequest","url","callback","request","XMLHttpRequest","open","responseType","onload","e","target","response","send","parseOBJ","buff","_readline","a","off","s","String","fromCharCode","groups","c_uvt","c_norms","i_verts","i_uvt","i_norms","cg","from","to","Uint8Array","line","cds","split","x","parseFloat","y","z","push","v0a","v1a","v2a","vi0","parseInt","vi1","vi2","ui0","ui1","ui2","ni0","ni1","ni2","vlen","ulen","nlen","v3a","vi3","ui3","ni3","glShader","program","getDefaultVertexShader","getDefaultFragmentShader","compile","srcVert","srcFrag","glUtils","createProgram","console","log","projMatrixUniform","mvMatrixUniform","vertexAttributeSize","size","vertexPosAttrib","GL","getAttribLocation","getUniformLocation","useProgram","enableVertexAttribArray","uniformMatrix4fv","pMatrix","mvMatrix","vertexAttribPointer","FLOAT","getProgram","createShader","str","type","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","VERTEX_SHADER","FRAGMENT_SHADER","getShaderInfoLog","vstr","fstr","vshader","fshader","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","PORT_DIR_IN","PORT_DIR_OUT","OP_PORT_TYPE_VALUE","OP_PORT_TYPE_FUNCTION","Ops","Op","objName","portsOut","portsIn","posts","uiAttribs","name","id","getName","addOutPort","p","direction","parent","addInPort","execute","exec","printInfo","i","ipo","removeLinks","getPort","ipi","getSerialized","op","getPortByName","Port","links","value","__defineGetter__","__defineSetter__","v","setValue","onValueChanged","onTriggered","addLink","l","isLinkedTo","p2","portIn","portOut","call","goals","getTypeString","obj","remove","removeLink","link","splice","Link","scene","onUnLink","p1","canLink","objIn","objOut","canLinkText","Scene","ops","timer","animFrameOps","clear","deleteOp","addOp","eval","hasOwnProperty","onAdd","opid","onDelete","requestAnimationFrame","time","onAnimFrame","op1","port1Name","op2","port2Name","port1","port2","onLink","serialize","JSON","stringify","getOpById","deSerialize","opinid","opoutid","inName","outName","found","parse","iop","port","ipi2","ili","Gl","mat4","create","Renderer","apply","arguments","simpleShader","trigger","initTranslate","vec3","set","currentShader","clearColor","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","viewport","perspective","identity","translate","enable","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","canvas","document","getElementById","getContext","prototype","ClearColor","g","b","Meshes","Rectangle","squareVertexPositionBuffer","TRIANGLE_STRIP","ObjMesh","mesh","Plotter","lineWidth","buffer","num","LINE_STRIP","Triangle","Shader","BasicMaterial","doRender","uniLoc","uniform1f","Schwurbel","Noise","timeUniform","Cube","cubeVerticesBuffer","ELEMENT_ARRAY_BUFFER","cubeVerticesIndexBuffer","drawElements","TRIANGLES","UNSIGNED_SHORT","init","cubeVertexIndices","Uint16Array","Matrix","Translate","vec","Transform","DEG2RAD","posX","posY","posZ","scaleX","scaleY","scaleZ","rotX","rotY","rotZ","vPos","vScale","oldMatrix","transMatrix","doScale","doTranslate","copy","multiply","updateMatrix","rotateX","rotateY","rotateZ","scale","translateChanged","scaleChanged","rotChanged","Log","exe","input","CallsPerSecond","cps","Value","result","TimeLineTime","theTime","Repeat","idx","IfTrueThen","bool","triggerThen","triggerElse","Interval","timeOutId","interval","setTimeout","Anim","SinusAnim","sin","RelativeTime","startTime","Input","GamePad","numPads","axis1","axis2","axis3","axis4","button0","button1","button2","button3","button4","gamePads","navigator","getGamepads","count","gp","axes","buttons","pressed","Random","MapRange","old_min","old_max","new_min","new_max","nMin","nMax","oMin","oMax","reverseInput","oldMin","min","oldMax","max","reverseOutput","newMin","newMax","portion","Abs","number","abs","Sin","Sum","number1","number2","Multiply","Divide","Compare","IsEven","Greater","Between","Lesser","Equals"],"mappings":"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","file":"cables.min.js","sourcesContent":["\n\n\n\nfunction Mesh(geom)\n{\n\n\n    this.render=function(shader)\n    {\n        shader.setAttributeVertex( self.bufVertices.itemSize);\n        shader.bind();\n        gl.bindBuffer(gl.ARRAY_BUFFER, self.bufVertices);\n\n        gl.drawArrays(gl.POINTS, 0, self.bufVertices.numItems);\n\n    };\n\n\n    self.bufVertices = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, self.bufVertices);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(geom.vertices), gl.STATIC_DRAW);\n    self.bufVertices.itemSize = geom.faceVertCount;\n    self.bufVertices.numItems = geom.vertices.length/geom.faceVertCount;\n\n}\n\n\nfunction Geometry()\n{\n    this.faceVertCount=3;\n    this.vertices=[];\n    this.verticesIndices=[];\n\n}\n\n\n\n\n\nparseOBJ = function(buff)\n{\n\n    _readline = function(a, off)  // Uint8Array, offset\n    {\n        var s = \"\";\n        while(a[off] != 10) s += String.fromCharCode(a[off++]);\n        return s;\n    };\n\n    var geom = new Geometry();\n    geom.groups = {};\n    \n    geom.c_uvt   = [];\n    geom.c_norms = [];\n    \n    geom.i_verts = [];\n    geom.i_uvt   = [];\n    geom.i_norms = [];\n    \n    var cg = {from: 0, to:0};   // current group\n    var off = 0;\n    var a = new Uint8Array(buff);\n    \n    while(off < a.length)\n    {\n        var line = _readline(a, off);\n        off += line.length + 1;\n        line = line.replace(/ +(?= )/g,'');\n        line = line.replace(/(^\\s+|\\s+$)/g, '');\n        var cds = line.split(\" \");\n        if(cds[0] == \"g\")\n        {\n            cg.to = geom.i_verts.length;\n            if(geom.groups[cds[1]] == null) geom.groups[cds[1]] = {from:geom.i_verts.length, to:0};\n            cg = geom.groups[cds[1]];\n        }\n        if(cds[0] == \"v\")\n        {\n            var x = parseFloat(cds[1]);\n            var y = parseFloat(cds[2]);\n            var z = parseFloat(cds[3]);\n            geom.vertices.push(x,y,z);\n        }\n        if(cds[0] == \"vt\")\n        {\n            var x = parseFloat(cds[1]);\n            var y = 1-parseFloat(cds[2]);\n            geom.c_uvt.push(x,y);\n        }\n        if(cds[0] == \"vn\")\n        {\n            var x = parseFloat(cds[1]);\n            var y = parseFloat(cds[2]);\n            var z = parseFloat(cds[3]);\n            geom.c_norms.push(x,y,z);\n        }\n        if(cds[0] == \"f\")\n        {\n            var v0a = cds[1].split(\"/\"), v1a = cds[2].split(\"/\"), v2a = cds[3].split(\"/\");\n            var vi0 = parseInt(v0a[0])-1, vi1 = parseInt(v1a[0])-1, vi2 = parseInt(v2a[0])-1;\n            var ui0 = parseInt(v0a[1])-1, ui1 = parseInt(v1a[1])-1, ui2 = parseInt(v2a[1])-1;\n            var ni0 = parseInt(v0a[2])-1, ni1 = parseInt(v1a[2])-1, ni2 = parseInt(v2a[2])-1;\n            \n            var vlen = geom.vertices.length/3, ulen = geom.c_uvt.length/2, nlen = geom.c_norms.length/3;\n            if(vi0<0) vi0 = vlen + vi0+1; if(vi1<0) vi1 = vlen + vi1+1; if(vi2<0) vi2 = vlen + vi2+1;\n            if(ui0<0) ui0 = ulen + ui0+1; if(ui1<0) ui1 = ulen + ui1+1; if(ui2<0) ui2 = ulen + ui2+1;\n            if(ni0<0) ni0 = nlen + ni0+1; if(ni1<0) ni1 = nlen + ni1+1; if(ni2<0) ni2 = nlen + ni2+1;\n            \n            geom.i_verts.push(vi0, vi1, vi2);  //cg.i_verts.push(vi0, vi1, vi2)\n            geom.i_uvt  .push(ui0, ui1, ui2);  //cg.i_uvt  .push(ui0, ui1, ui2);\n            geom.i_norms.push(ni0, ni1, ni2);  //cg.i_norms.push(ni0, ni1, ni2);\n            if(cds.length == 5)\n            {\n                var v3a = cds[4].split(\"/\");\n                var vi3 = parseInt(v3a[0])-1, ui3 = parseInt(v3a[1])-1, ni3 = parseInt(v3a[2])-1;\n                if(vi3<0) vi3 = vlen + vi3+1;\n                if(ui3<0) ui3 = ulen + ui3+1;\n                if(ni3<0) ni3 = nlen + ni3+1;\n                geom.i_verts.push(vi0, vi2, vi3);  //cg.i_verts.push(vi0, vi2, vi3);\n                geom.i_uvt  .push(ui0, ui2, ui3);  //cg.i_uvt  .push(ui0, ui2, ui3);\n                geom.i_norms.push(ni0, ni2, ni3);  //cg.i_norms.push(ni0, ni2, ni3);\n            }\n        }\n    }\n    cg.to = geom.i_verts.length;\n    \n    return geom;\n}\n\n\n","\n\nfunction Timer()\n{\n    var self=this;\n    var timeStart=Date.now();\n    var timeOffset=0;\n\n    var currentTime=0;\n    var lastTime=0;\n    var paused=true;\n\n    function getTime()\n    {\n        lastTime=(Date.now()-timeStart)/1000;\n        return lastTime+timeOffset;\n\n    }\n\n    this.update=function()\n    {\n        if(paused) return;\n        currentTime=getTime();\n\n        return currentTime;\n    };\n\n    this.getTime=function()\n    {\n        return currentTime;\n    };\n\n    this.togglePlay=function()\n    {\n        if(paused)self.play();\n            else self.pause();\n    };\n\n    this.setOffset=function(val)\n    {\n        if(currentTime+val<0)\n        {\n            timeStart=Date.now();\n            timeOffset=0;\n            currentTime=0;\n        }\n        else\n        {\n            timeOffset+=val;\n            currentTime=lastTime+timeOffset;\n        }\n        \n\n    };\n\n    this.play=function()\n    {\n        timeStart=Date.now();\n        paused=false;\n    };\n\n    this.pause=function()\n    {\n        timeOffset=currentTime;\n        paused=true;\n    };\n\n}","function generateUUID()\n{\n    var d = new Date().getTime();\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c)\n    {\n        var r = (d + Math.random()*16)%16 | 0;\n        d = Math.floor(d/16);\n        return (c=='x' ? r : (r&0x3|0x8)).toString(16);\n    });\n    return uuid;\n}\n\n// ----------------------------------------------------------------\nfunction ajaxRequest(url, callback)\n{\n    var request = new XMLHttpRequest();\n    request.open(\"GET\", url, true);\n    request.responseType = \"arraybuffer\";\n    request.onload = function(e)\n    {\n        callback(e.target.response);\n    };\n    request.send();\n}\n\n\n\n","\n\n\n\nvar glShader=function()\n{\n    var program=-1;\n\n    this.getDefaultVertexShader=function()\n    {\n        return ''+\n        'attribute vec3 vPosition;\\n'+\n        'uniform mat4 projMatrix;\\n'+\n        'uniform mat4 mvMatrix;\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        '   gl_PointSize=3.0;\\n'+\n        '   gl_Position = projMatrix * mvMatrix * vec4(vPosition,  1.0);\\n'+\n        '}\\n';\n    };\n\n    this.getDefaultFragmentShader=function()\n    {\n        return ''+\n        'precision mediump float;\\n'+\n        'void main()\\n'+\n        '{\\n'+\n\n        '   gl_FragColor = vec4(0.5,0.5,0.5,1.0);\\n'+\n        '}\\n';\n    };\n\n    this.compile=function(srcVert,srcFrag)\n    {\n        program=glUtils.createProgram(srcVert,srcFrag);\n        console.log('compiled!');\n    };\n\n    var projMatrixUniform=-1;\n    var mvMatrixUniform=-1;\n    var vertexAttributeSize=-1;\n\n    this.setAttributeVertex=function(size)\n    {\n        vertexAttributeSize=size;\n    };\n\n    this.bind=function()\n    {\n        if(program==-1) this.compile(this.getDefaultVertexShader(),this.getDefaultFragmentShader());\n        if(mvMatrixUniform==-1)\n        {\n            program.vertexPosAttrib = GL.getAttribLocation(program, 'vPosition');\n            projMatrixUniform = gl.getUniformLocation(program, \"projMatrix\");\n            mvMatrixUniform = gl.getUniformLocation(program, \"mvMatrix\");\n        }\n\n        GL.useProgram(program);\n        GL.enableVertexAttribArray(program.vertexPosAttrib);\n\n        gl.uniformMatrix4fv(projMatrixUniform, false, pMatrix);\n        gl.uniformMatrix4fv(mvMatrixUniform, false, mvMatrix);\n\n        gl.vertexAttribPointer(program.vertexPosAttrib,vertexAttributeSize, gl.FLOAT, false, 0, 0);\n    };\n\n    this.getProgram=function()\n    {\n        return program;\n    };\n\n};\n\n\n\nvar glUtils={};\n\n\n\n\n\nglUtils.createShader =function(str, type)\n{\n    var shader = gl.createShader(type);\n    gl.shaderSource(shader, str);\n    gl.compileShader(shader);\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\n    {\n        console.log('compile status: ');\n\n        if(type==gl.VERTEX_SHADER)console.log('VERTEX_SHADER');\n        if(type==gl.FRAGMENT_SHADER)console.log('FRAGMENT_SHADER');\n        \n                \n        throw gl.getShaderInfoLog(shader);\n    }\n    return shader;\n};\n\nglUtils.createProgram=function(vstr, fstr)\n{\n    var program = gl.createProgram();\n    var vshader = glUtils.createShader(vstr, gl.VERTEX_SHADER);\n    var fshader = glUtils.createShader(fstr, gl.FRAGMENT_SHADER);\n    gl.attachShader(program, vshader);\n    gl.attachShader(program, fshader);\n    gl.linkProgram(program);\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n        throw gl.getProgramInfoLog(program);\n    }\n    return program;\n};\n\n\n\n\n\n\n\n\n","\nvar PORT_DIR_IN=0;\nvar PORT_DIR_OUT=1;\n\nvar OP_PORT_TYPE_VALUE =0;\nvar OP_PORT_TYPE_FUNCTION =1;\n\nvar Ops = {};\n\n\nvar Op = function()\n{\n    this.objName='';\n    this.portsOut=[];\n    this.portsIn=[];\n    this.posts=[];\n    this.uiAttribs={};\n    this.name='unknown';\n    this.id=generateUUID();\n\n    this.getName= function()\n    {\n        return this.name;\n    };\n    this.addOutPort=function(p)\n    {\n        p.direction=PORT_DIR_OUT;\n        p.parent=this;\n        this.portsOut.push(p);\n        return p;\n    };\n    this.addInPort=function(p)\n    {\n        p.direction=PORT_DIR_IN;\n        p.parent=this;\n        this.portsIn.push(p);\n        return p;\n    };\n    this.execute=function()\n    {\n        this.exec();\n    };\n    this.printInfo=function()\n    {\n        for(var i=0;i<this.portsIn.length;i++)\n            console.log('in: '+this.portsIn[i].getName());\n\n        for(var ipo in this.portsOut)\n            console.log('out: '+this.portsOut[ipo].getName());\n    };\n\n    this.removeLinks=function()\n    {\n        for(var i=0;i<this.portsIn.length;i++)\n            this.portsIn[i].removeLinks();\n        for(var ipo in this.portsOut)\n            this.portsOut[ipo].removeLinks();\n    };\n\n    this.getPort=function(name)\n    {\n        for(var ipi in this.portsIn)\n            if(this.portsIn[ipi].getName()==name)return this.portsIn[ipi];\n\n        for(var ipo in this.portsOut)\n            if(this.portsOut[ipo].getName()==name)return this.portsOut[ipo];\n    };\n\n    this.getSerialized=function()\n    {\n        var op={};\n        op.name=this.getName();\n        op.objName=this.objName;\n        op.id=this.id;\n        op.uiAttribs=this.uiAttribs;\n\n        op.portsIn=[];\n        op.portsOut=[];\n\n        for(var i=0;i<this.portsIn.length;i++)\n            op.portsIn.push( this.portsIn[i].getSerialized() );\n\n        for(var ipo in this.portsOut)\n            op.portsOut.push( this.portsOut[ipo].getSerialized() );\n\n        return op;\n    };\n\n    this.getPortByName=function(name)\n    {\n        for(var i=0;i<this.portsIn.length;i++)\n            if(this.portsIn[i].name==name)return this.portsIn[i];\n        \n        for(var ipo in this.portsOut)\n            if(this.portsOut[ipo].name==name)return this.portsOut[ipo];\n    };\n\n};\n\n// ------------------------------------------------------------------------------------\n\nvar Port=function(parent,name,type)\n{\n    var self=this;\n    this.direction=PORT_DIR_IN;\n    this.id=generateUUID();\n    this.parent=parent;\n    this.links=[];\n    this.value=null;\n    this.name=name;\n    this.type=type || OP_PORT_TYPE_VALUE;\n\n    this.__defineGetter__(\"val\", function()\n    {\n        return this.value;\n    });\n\n    this.__defineSetter__(\"val\", function(v)\n    {\n        this.setValue(v);\n    });\n\n    this.onValueChanged=function(){};\n    this.onTriggered=function(){};\n\n    this.setValue=function(v)\n    {\n        if(v!=this.value)\n        {\n            this.value=v;\n            this.onValueChanged();\n\n            for(var i in this.links)\n            {\n                this.links[i].setValue();\n            }\n        }\n    };\n\n    this.getName= function()\n    {\n        return this.name;\n    };\n\n    this.addLink=function(l)\n    {\n        this.links.push(l);\n    };\n\n    this.isLinkedTo=function(p2)\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i].portIn==p2 || this.links[i].portOut==p2)return true;\n        }\n        return false;\n    };\n\n    this.call=function()\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i].portIn !=this)this.links[i].portIn.onTriggered();\n            if(this.links[i].portOut!=this)this.links[i].portOut.onTriggered();\n        }\n    };\n\n\n    this.execute=function()\n    {\n        console.log('### execute port: '+this.getName() , this.goals.length);\n    };\n\n    this.getTypeString=function()\n    {\n        if(this.type==OP_PORT_TYPE_VALUE)return 'value';\n        if(this.type==OP_PORT_TYPE_FUNCTION)return 'function';\n    };\n\n    this.getSerialized=function()\n    {\n        var obj={};\n        obj.name=this.getName();\n        obj.value=this.value;\n\n\n        if(this.direction==PORT_DIR_IN && this.links.length>0)\n        {\n            obj.links=[];\n            for(var i in this.links)\n            {\n                obj.links.push( this.links[i].getSerialized() );\n            }\n        }\n        return obj;\n    };\n\n    this.removeLinks=function()\n    {\n        while(this.links.length>0)\n        {\n            this.links[0].remove();\n        }\n    };\n\n    this.removeLink=function(link)\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i]==link)this.links.splice( i, 1 );\n        }\n    };\n};\n\n\n\n// ---------------------------------------------------------------------------\n\nvar Link = function(scene)\n{\n    this.portIn=null;\n    this.portOut=null;\n    this.scene=scene;\n\n    this.setValue=function()\n    {\n        if(this.portIn.val!=this.portOut.val)\n            this.portIn.val=this.portOut.val;\n    };\n\n    this.remove=function()\n    {\n        this.portIn.removeLink(this);\n        this.portOut.removeLink(this);\n        this.scene.onUnLink(this.portIn,this.portOut);\n        this.portIn=null;\n        this.portOut=null;\n        this.scene=null;\n    };\n\n\n    this.link=function(p1,p2)\n    {\n        if(!Link.canLink(p1,p2))\n        {\n            console.log('cannot link ports!');\n            return false;\n        }\n        if(p1.direction==PORT_DIR_IN)\n        {\n            this.portIn=p1;\n            this.portOut=p2;\n        }\n        else\n        {\n            this.portIn=p2;\n            this.portOut=p1;\n        }\n\n        p1.addLink(this);\n        p2.addLink(this);\n        this.setValue();\n    };\n\n    this.getSerialized=function()\n    {\n        var obj={};\n\n        obj.portIn=this.portIn.getName();\n        obj.portOut=this.portOut.getName();\n        obj.objIn=this.portIn.parent.id;\n        obj.objOut=this.portOut.parent.id;\n\n        return obj;\n    };\n};\n\n\nLink.canLinkText=function(p1,p2)\n{\n    if(p1.direction==PORT_DIR_IN && p1.links.length>0)return 'input port already busy';\n    if(p2.direction==PORT_DIR_IN && p2.links.length>0)return 'input port already busy';\n    if(p1.isLinkedTo(p2))return 'ports already linked';\n    if(!p1)return 'can not link: port 1 invalid';\n    if(!p2)return 'can not link: port 2 invalid';\n    if(p1.direction==p2.direction)return 'can not link: same direction';\n    if(p1.type!=p2.type)return 'can not link: different type';\n    if(p1.parent==p2.parent)return 'can not link: same op';\n    return 'can link';\n};\n\nLink.canLink=function(p1,p2)\n{\n\n    if(p1.direction==PORT_DIR_IN && p1.links.length>0)return false;\n    if(p2.direction==PORT_DIR_IN && p2.links.length>0)return false;\n    if(p1.isLinkedTo(p2))return false;\n    if(!p1)return false;\n    if(!p2)return false;\n    if(p1.direction==p2.direction)return false;\n    if(p1.type!=p2.type)return false;\n    if(p1.parent==p2.parent)return false;\n\n    return true;\n};\n\n\n// ------------------------------------------------------------------------------------\n\n\nvar Scene = function()\n{\n    var self=this;\n    this.ops=[];\n    this.timer=new Timer();\n    this.animFrameOps=[];\n    \n\n    this.clear=function()\n    {\n        this.timer=new Timer();\n        while(this.ops.length>0)\n        {\n            this.deleteOp(this.ops[0].id);\n        }\n    };\n\n    this.addOp=function(objName,uiAttribs)\n    {\n        var op=eval('new '+objName+'();');\n        op.objName=objName;\n        op.uiAttribs=uiAttribs;\n\n        if(op.hasOwnProperty('onAnimFrame')) this.animFrameOps.push(op);\n\n        this.ops.push(op);\n        if(this.onAdd)this.onAdd(op);\n        return op;\n    };\n\n    this.deleteOp=function(opid)\n    {\n        for(var i in this.ops)\n        {\n            if(this.ops[i].id==opid)\n            {\n                this.ops[i].removeLinks();\n                this.onDelete(this.ops[i]);\n                this.ops.splice( i, 1 );\n            }\n        }\n    };\n\n    this.exec=function()\n    {\n        requestAnimationFrame(self.exec);\n        self.timer.update();\n\n        var time=self.timer.getTime();\n\n        for(var i in self.animFrameOps)\n        {\n            self.animFrameOps[i].onAnimFrame(time);\n        }\n\n    };\n\n    this.link=function(op1,port1Name,op2,port2Name)\n    {\n        var port1=op1.getPort(port1Name);\n        var port2=op2.getPort(port2Name);\n\n        if(Link.canLink(port1,port2))\n        {\n            var link=new Link(this);\n            link.link(port1,port2);\n            this.onLink(port1,port2);\n            return link;\n        }\n        else\n        {\n            console.log(Link.canLinkText(port1,port2));\n        }\n    };\n    this.onAdd=function(op){};\n    this.onDelete=function(op){};\n    this.onLink=function(p1,p2){};\n    this.onUnLink=function(p1,p2){};\n    this.serialize=function()\n    {\n        var obj={};\n\n        obj.ops=[];\n        for(var i in this.ops)\n        {\n            obj.ops.push( this.ops[i].getSerialized() );\n        }\n        \n        return JSON.stringify(obj);\n    };\n    this.getOpById=function(opid)\n    {\n        for(var i in this.ops)\n        {\n            if(this.ops[i].id==opid)return this.ops[i];\n        }\n\n    };\n    this.deSerialize=function(obj)\n    {\n        if (typeof obj === \"string\") obj=JSON.parse(obj);\n        var self=this;\n\n        function addLink(opinid,opoutid,inName,outName)\n        {\n            var found=false;\n            if(!found)\n            {\n                self.link(\n                    self.getOpById(opinid),\n                    inName,\n                    self.getOpById(opoutid),\n                    outName\n                    );\n            }\n        }\n\n        // add ops...\n        for(var iop in obj.ops)\n        {\n            var op=this.addOp(obj.ops[iop].objName,obj.ops[iop].uiAttribs);\n            op.id=obj.ops[iop].id;\n\n            for(var ipi in obj.ops[iop].portsIn)\n            {\n                var port=op.getPortByName(obj.ops[iop].portsIn[ipi].name);\n                if(port)port.val=obj.ops[iop].portsIn[ipi].value;\n            }\n\n            for(var ipo in obj.ops[iop].portsOut)\n            {\n                var port2=op.getPortByName(obj.ops[iop].portsOut[ipo].name);\n                if(port2)port2.val=obj.ops[iop].portsOut[ipo].value;\n            }\n\n\n            // op.uiAttribs=obj.ops[iop].uiAttribs;\n        }\n\n        // create links...\n        for(iop in obj.ops)\n        {\n            for(var ipi2 in obj.ops[iop].portsIn)\n            {\n\n                for(var ili in obj.ops[iop].portsIn[ipi2].links)\n                {\n                    addLink(\n                        obj.ops[iop].portsIn[ipi2].links[ili].objIn,\n                        obj.ops[iop].portsIn[ipi2].links[ili].objOut,\n                        obj.ops[iop].portsIn[ipi2].links[ili].portIn,\n                        obj.ops[iop].portsIn[ipi2].links[ili].portOut);\n                }\n            }\n\n\n            // for(var ipo in obj.ops[iop].portsOut)\n            // {\n            //     for(var ili in obj.ops[iop].portsOut[ipo].links)\n            //     {\n            //         addLink(\n            //             obj.ops[iop].portsOut[ipo].links[ili].objIn,\n            //             obj.ops[iop].portsOut[ipo].links[ili].objOut,\n            //             obj.ops[iop].portsOut[ipo].links[ili].portIn,\n            //             obj.ops[iop].portsOut[ipo].links[ili].portOut);\n\n            //     }\n            // }\n        }\n\n\n        for(var i in this.ops)\n        {\n            this.ops[i].id=generateUUID();\n        }\n\n\n\n    };\n\n    this.exec();\n\n};\n\n\n\n\n","//http://k3d.ivank.net/K3D.js\n//http://fhtr.blogspot.de/2009/12/3d-models-and-parsing-binary-data-with.html\n\nOps.Gl={};\nvar GL=null;\nvar GL=null;\n\nvar mvMatrix = mat4.create();\nvar pMatrix = mat4.create();\n\nOps.Gl.Renderer = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    var simpleShader=new glShader();\n \n\n    this.name='WebGL Renderer';\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var initTranslate=vec3.create();\n    vec3.set(initTranslate, 0,0,-2);\n\n    this.onAnimFrame=function(time)\n    {\n        currentShader=simpleShader;\n\n        GL.clearColor(0,0,0,1);\n        GL.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n        gl.viewport(0,0,640,360);\n        mat4.perspective(pMatrix,45, 800 / 480, 0.01, 1100.0);\n        mat4.identity(mvMatrix);\n        mat4.translate(mvMatrix,mvMatrix, initTranslate);\n\n        GL.enable(GL.BLEND);\n        GL.blendFunc(GL.SRC_ALPHA,GL.ONE_MINUS_SRC_ALPHA);\n\n        self.trigger.call();\n    };\n\n    this.canvas = document.getElementById(\"glcanvas\");\n    GL = this.canvas.getContext(\"experimental-webgl\");\n    gl = this.canvas.getContext(\"experimental-webgl\");\n\n};\n\nOps.Gl.Renderer.prototype = new Op();\n\n\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.ClearColor = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='ClearColor';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.r=this.addInPort(new Port(this,\"r\"));\n    this.g=this.addInPort(new Port(this,\"g\"));\n    this.b=this.addInPort(new Port(this,\"b\"));\n\n    this.render.onTriggered=function()\n    {\n        GL.clearColor(self.r.val,self.g.val,self.b.val,1);\n        GL.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n\n        self.trigger.call();\n    };\n\n};\n\nOps.Gl.ClearColor.prototype = new Op();\n\n\nvar currentShader=null;\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Meshes={};\n\n\n\nOps.Gl.Meshes.Rectangle = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='rectangle';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        currentShader.setAttributeVertex( self.squareVertexPositionBuffer.itemSize);\n        currentShader.bind();\n        gl.bindBuffer(gl.ARRAY_BUFFER, self.squareVertexPositionBuffer);\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, self.squareVertexPositionBuffer.numItems);\n\n        self.trigger.call();\n    };\n\n    this.squareVertexPositionBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.squareVertexPositionBuffer);\n    this.vertices = [\n         1.0,  1.0,  0.0,\n        -1.0,  1.0,  0.0,\n         1.0, -1.0,  0.0,\n        -1.0, -1.0,  0.0\n    ];\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(this.vertices), gl.STATIC_DRAW);\n    this.squareVertexPositionBuffer.itemSize = 3;\n    this.squareVertexPositionBuffer.numItems = 4;\n};\n\nOps.Gl.Meshes.Rectangle.prototype = new Op();\n\n\n\n\n\n\nOps.Gl.Meshes.ObjMesh = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='OBJ Mesh';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.mesh=null;\n\n    this.render.onTriggered=function()\n    {\n        if(self.mesh)\n        {\n            self.mesh.render(currentShader);\n        }\n\n        self.trigger.call();\n    };\n\n\n    ajaxRequest('assets/43_ChinUpperRaise.obj',function(response)\n    {\n        console.log(response);\n                \n        var r=parseOBJ(response);\n        console.log(r);\n        \n        self.mesh=new Mesh(r);\n        \n\n\n    });\n\n\n\n\n};\n\nOps.Gl.Meshes.ObjMesh.prototype = new Op();\n\n\n\n\n// ----------------------------------------------------------------\n\n\nOps.Gl.Meshes.Plotter = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Plotter';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.v=this.addInPort(new Port(this,\"value\"));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        currentShader.setAttributeVertex( self.buffer.itemSize);\n        currentShader.bind();\n        gl.bindBuffer(gl.ARRAY_BUFFER, self.buffer);\n        gl.drawArrays(gl.LINE_STRIP, 0, self.buffer.numItems);\n\n        self.trigger.call();\n    };\n\n    this.buffer = gl.createBuffer();\n    \n    var num=50;\n    this.vertices = [];\n    for(var i=0;i<num;i++)\n    {\n        this.vertices.push(1/num*i);\n        this.vertices.push(Math.random()-0.5);\n        this.vertices.push(0);\n    }\n\n    function bufferData()\n    {\n        gl.lineWidth(4);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, self.buffer);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(self.vertices), gl.STATIC_DRAW);\n        self.buffer.itemSize = 3;\n        self.buffer.numItems = num;\n    }\n    bufferData();\n\n    this.v.onValueChanged=function()\n    {\n        self.vertices.splice(0,3);\n        self.vertices.push(1);\n        self.vertices.push(self.v.val);\n        self.vertices.push(0);\n\n        for(var i=0;i<num*3;i+=3)\n        {\n            self.vertices[i]=1/num*i;\n        }\n\n        bufferData();\n    };\n\n\n};\n\nOps.Gl.Meshes.Plotter.prototype = new Op();\n\n\n// ----------------------------------------------------------------\n\nOps.Gl.Meshes.Triangle = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Triangle';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        currentShader.setAttributeVertex( self.squareVertexPositionBuffer.itemSize);\n        currentShader.bind();\n        gl.bindBuffer(gl.ARRAY_BUFFER, self.squareVertexPositionBuffer);\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, self.squareVertexPositionBuffer.numItems);\n\n        self.trigger.call();\n    };\n\n    this.squareVertexPositionBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.squareVertexPositionBuffer);\n    this.vertices = [\n         0.0,  1.0,  0.0,\n        -1.0,  -1.0,  0.0,\n         1.0, -1.0,  0.0\n    ];\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(this.vertices), gl.STATIC_DRAW);\n    this.squareVertexPositionBuffer.itemSize = 3;\n    this.squareVertexPositionBuffer.numItems = 3;\n\n\n};\n\nOps.Gl.Meshes.Triangle.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.Shader={};\n\nOps.Gl.Shader.BasicMaterial = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='BasicMaterial';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.doRender=function()\n    {\n        currentShader=shader;\n\n        self.trigger.call();\n    };\n\n    var srcFrag=''+\n        'precision mediump float;\\n'+\n        'uniform float r;\\n'+\n        'uniform float g;\\n'+\n        'uniform float b;\\n'+\n        'uniform float a;\\n'+\n        '\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        '   gl_FragColor = vec4(r,g,b,a);\\n'+\n        '}\\n';\n\n\n    var shader=new glShader();\n    shader.compile(shader.getDefaultVertexShader(),srcFrag);\n\n    this.doRender();\n\n    this.r=this.addInPort(new Port(this,\"r\"));\n    this.r.onValueChanged=function()\n    {\n        shader.bind();\n        if(!self.r.uniLoc) self.r.uniLoc=gl.getUniformLocation(shader.getProgram(), \"r\");\n        gl.uniform1f(self.r.uniLoc, self.r.val);\n    };\n\n    this.g=this.addInPort(new Port(this,\"g\"));\n    this.g.onValueChanged=function()\n    {\n        shader.bind();\n        if(!self.g.uniLoc) self.g.uniLoc=gl.getUniformLocation(shader.getProgram(), \"g\");\n        gl.uniform1f(self.g.uniLoc, self.g.val);\n    };\n\n    this.b=this.addInPort(new Port(this,\"b\"));\n    this.b.onValueChanged=function()\n    {\n        shader.bind();\n        if(!self.b.uniLoc) self.b.uniLoc=gl.getUniformLocation(shader.getProgram(), \"b\");\n        gl.uniform1f(self.b.uniLoc, self.b.val);\n    };\n\n    this.a=this.addInPort(new Port(this,\"a\"));\n    this.a.onValueChanged=function()\n    {\n        shader.bind();\n        if(!self.a.uniLoc) self.a.uniLoc=gl.getUniformLocation(shader.getProgram(), \"a\");\n        gl.uniform1f(self.a.uniLoc, self.a.val);\n    };\n\n    this.r.val=Math.random();\n    this.g.val=Math.random();\n    this.b.val=Math.random();\n    this.a.val=1.0;\n\n    this.render.onTriggered=this.doRender;\n};\n\nOps.Gl.Shader.BasicMaterial.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Shader.Schwurbel = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Schwurbel';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.timer=this.addInPort(new Port(this,\"time\"));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.doRender=function()\n    {\n        currentShader=shader;\n        if(!self.timer.uniLoc)\n        {\n            shader.bind();\n            self.timer.uniLoc=gl.getUniformLocation(shader.getProgram(), \"time\");\n        }\n        gl.uniform1f(self.timer.uniLoc, self.timer.val);\n\n        self.trigger.call();\n    };\n\n    var srcFrag=''+\n        'precision mediump float;\\n'+\n        'uniform float time;\\n'+\n        '\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        'float c=sqrt(sin(time*0.02)*cos((time+gl_FragCoord.y)*0.02)+sin(time+gl_FragCoord.x*0.02)*sin(time+gl_FragCoord.y*0.02));\\n'+\n        'gl_FragColor = vec4( c,c,c,1.0);\\n'+\n        '}\\n';\n\n    var shader=new glShader();\n    shader.compile(shader.getDefaultVertexShader(),srcFrag);\n\n    this.doRender();\n    this.render.onTriggered=this.doRender;\n};\n\nOps.Gl.Shader.Schwurbel.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Shader.Noise = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Noise';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var timeUniform=-1;\n    var timeStart=-1;\n\n    this.doRender=function()\n    {\n        if(timeUniform==-1)\n        {\n            timeStart=Date.now();\n            shader.bind();\n            timeUniform=gl.getUniformLocation(shader.getProgram(), \"time\");\n        }\n\n        gl.uniform1f(timeUniform, (Date.now()-timeStart)/1000);\n        currentShader=shader;\n\n        self.trigger.call();\n    };\n\n    var srcFrag=''+\n        'precision mediump float;\\n'+\n        'uniform float time;\\n'+\n        '\\n'+\n        'float random(vec2 co)\\n'+\n        '{\\n'+\n        '   return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\\n'+\n        '}\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        '   float c=random(time*gl_FragCoord.xy);'+\n        '   gl_FragColor = vec4( c,c,c,1.0);\\n'+\n        '}\\n';\n\n\n    var shader=new glShader();\n    shader.compile(shader.getDefaultVertexShader(),srcFrag);\n\n    this.doRender();\n    this.render.onTriggered=this.doRender;\n};\n\nOps.Gl.Shader.Noise.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.Cube = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Cube';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n\n\n    this.render.onTriggered=function()\n    {\n        GL.bindBuffer(gl.ARRAY_BUFFER, this.cubeVerticesBuffer);\n        GL.bindBuffer(GL.ELEMENT_ARRAY_BUFFER, self.cubeVerticesIndexBuffer);\n        // setMatrixUniforms();\n        GL.drawElements(GL.TRIANGLES, 36, GL.UNSIGNED_SHORT, 0);\n    };\n\n    this.cubeVerticesIndexBuffer=null;\n    this.cubeVerticesBuffer=null;\n    // this.cubeVerticesColorBuffer=null;\n\n    this.init=function()\n    {\n        var vertices = [\n            // Front face\n            -1.0, -1.0,  1.0,\n             1.0, -1.0,  1.0,\n             1.0,  1.0,  1.0,\n            -1.0,  1.0,  1.0,\n            \n            // Back face\n            -1.0, -1.0, -1.0,\n            -1.0,  1.0, -1.0,\n             1.0,  1.0, -1.0,\n             1.0, -1.0, -1.0,\n            \n            // Top face\n            -1.0,  1.0, -1.0,\n            -1.0,  1.0,  1.0,\n             1.0,  1.0,  1.0,\n             1.0,  1.0, -1.0,\n            \n            // Bottom face\n            -1.0, -1.0, -1.0,\n             1.0, -1.0, -1.0,\n             1.0, -1.0,  1.0,\n            -1.0, -1.0,  1.0,\n            \n            // Right face\n             1.0, -1.0, -1.0,\n             1.0,  1.0, -1.0,\n             1.0,  1.0,  1.0,\n             1.0, -1.0,  1.0,\n            \n            // Left face\n            -1.0, -1.0, -1.0,\n            -1.0, -1.0,  1.0,\n            -1.0,  1.0,  1.0,\n            -1.0,  1.0, -1.0\n          ];\n\n  this.cubeVerticesBuffer = GL.createBuffer();\n  \n  GL.bindBuffer(GL.ARRAY_BUFFER, this.cubeVerticesBuffer);\n\n  GL.bufferData(GL.ARRAY_BUFFER, new Float32Array(vertices), GL.STATIC_DRAW);\n\n        // var colors = [\n        //     [1.0,  1.0,  1.0,  1.0],    // Front face: white\n        //     [1.0,  0.0,  0.0,  1.0],    // Back face: red\n        //     [0.0,  1.0,  0.0,  1.0],    // Top face: green\n        //     [0.0,  0.0,  1.0,  1.0],    // Bottom face: blue\n        //     [1.0,  1.0,  0.0,  1.0],    // Right face: yellow\n        //     [1.0,  0.0,  1.0,  1.0]     // Left face: purple\n        //   ];\n\n        // var generatedColors = [];\n\n        // for (j=0; j<6; j++)\n        // {\n        //     var c = colors[j];\n        //     for (var i=0; i<4; i++)\n        //     {\n        //       generatedColors = generatedColors.concat(c);\n        //     }\n        // }\n\n        // cubeVerticesColorBuffer = GL.createBuffer();\n        // GL.bindBuffer(GL.ARRAY_BUFFER, cubeVerticesColorBuffer);\n        // GL.bufferData(GL.ARRAY_BUFFER, new Float32Array(generatedColors), GL.STATIC_DRAW);\n\n        this.cubeVerticesIndexBuffer = GL.createBuffer();\n\n        // console.log(this.cubeVerticesIndexBuffer);\n                \n        GL.bindBuffer(GL.ELEMENT_ARRAY_BUFFER, this.cubeVerticesIndexBuffer);\n\n        // This array defines each face as two triangles, using the\n        // indices into the vertex array to specify each triangle's\n        // position.\n\n        var cubeVertexIndices = [\n        0,  1,  2,      0,  2,  3,    // front\n        4,  5,  6,      4,  6,  7,    // back\n        8,  9,  10,     8,  10, 11,   // top\n        12, 13, 14,     12, 14, 15,   // bottom\n        16, 17, 18,     16, 18, 19,   // right\n        20, 21, 22,     20, 22, 23    // left\n        ];\n\n        // Now send the element array to GL\n\n        GL.bufferData(GL.ELEMENT_ARRAY_BUFFER, new Uint16Array(cubeVertexIndices), GL.STATIC_DRAW);\n    };\n\n    this.init();\n\n};\n\nOps.Gl.Cube.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Matrix={};\n\n\nOps.Gl.Matrix.Translate = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='translate';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.x=this.addInPort(new Port(this,\"x\"));\n    this.y=this.addInPort(new Port(this,\"y\"));\n    this.z=this.addInPort(new Port(this,\"z\"));\n    this.x.val=0.0;\n    this.y.val=0.0;\n    this.z.val=0.0;\n    \n    var vec=vec3.create();\n\n    this.render.onTriggered=function()\n    {\n        vec3.set(vec, self.x.val,self.y.val,self.z.val);\n\n        mat4.translate(mvMatrix,mvMatrix, vec);\n        self.trigger.call();\n    };\n\n};\n\nOps.Gl.Matrix.Translate.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.Matrix.Transform = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var DEG2RAD = 3.14159/180.0;\n    this.name='transform';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.posX=this.addInPort(new Port(this,\"posX\"));\n    this.posY=this.addInPort(new Port(this,\"posY\"));\n    this.posZ=this.addInPort(new Port(this,\"posZ\"));\n\n    this.scaleX=this.addInPort(new Port(this,\"scaleX\"));\n    this.scaleY=this.addInPort(new Port(this,\"scaleY\"));\n    this.scaleZ=this.addInPort(new Port(this,\"scaleZ\"));\n\n    this.rotX=this.addInPort(new Port(this,\"rotX\"));\n    this.rotY=this.addInPort(new Port(this,\"rotY\"));\n    this.rotZ=this.addInPort(new Port(this,\"rotZ\"));\n    \n    var vPos=vec3.create();\n    var vScale=vec3.create();\n    var oldMatrix = mat4.create();\n    var transMatrix = mat4.create();\n    mat4.identity(transMatrix);\n\n    var doScale=false;\n    var doTranslate=false;\n\n    this.render.onTriggered=function()\n    {\n        mat4.copy(oldMatrix, mvMatrix);\n\n        mat4.multiply(mvMatrix,mvMatrix,transMatrix);\n\n        self.trigger.call();\n\n        mat4.copy(mvMatrix,oldMatrix);\n    };\n\n    var updateMatrix=function()\n    {\n        mat4.identity(transMatrix);\n        if(doTranslate)mat4.translate(transMatrix,transMatrix, vPos);\n\n        if(self.rotX.val!==0)mat4.rotateX(transMatrix,transMatrix, self.rotX.val*DEG2RAD);\n        if(self.rotY.val!==0)mat4.rotateY(transMatrix,transMatrix, self.rotY.val*DEG2RAD);\n        if(self.rotZ.val!==0)mat4.rotateZ(transMatrix,transMatrix, self.rotZ.val*DEG2RAD);\n\n        if(doScale)mat4.scale(transMatrix,transMatrix, vScale);\n    };\n\n    this.translateChanged=function()\n    {\n        doTranslate=false;\n        if(self.posX.val!==0.0 || self.posY.val!==0.0 || self.posZ.val!==0.0)doTranslate=true;\n        vec3.set(vPos, self.posX.val,self.posY.val,self.posZ.val);\n        updateMatrix();\n    };\n\n    this.scaleChanged=function()\n    {\n        doScale=false;\n        if(self.scaleX.val!==0.0 || self.scaleY.val!==0.0 || self.scaleZ.val!==0.0)doScale=true;\n        vec3.set(vScale, self.scaleX.val,self.scaleY.val,self.scaleZ.val);\n        updateMatrix();\n    };\n\n    this.rotChanged=function()\n    {\n        updateMatrix();\n    };\n\n    this.rotX.onValueChanged=this.rotChanged;\n    this.rotY.onValueChanged=this.rotChanged;\n    this.rotZ.onValueChanged=this.rotChanged;\n\n    this.scaleX.onValueChanged=this.scaleChanged;\n    this.scaleY.onValueChanged=this.scaleChanged;\n    this.scaleZ.onValueChanged=this.scaleChanged;\n\n    this.posX.onValueChanged=this.translateChanged;\n    this.posY.onValueChanged=this.translateChanged;\n    this.posZ.onValueChanged=this.translateChanged;\n\n    this.rotX.val=0.0;\n    this.rotY.val=0.0;\n    this.rotZ.val=0.0;\n\n    this.scaleX.val=1.0;\n    this.scaleY.val=1.0;\n    this.scaleZ.val=1.0;\n\n    this.posX.val=0.0;\n    this.posY.val=0.0;\n    this.posZ.val=0.0;\n\n    updateMatrix();\n};\n\nOps.Gl.Matrix.Translate.prototype = new Op();\n\n\n\n\n\n","// https://github.com/automat/foam-gl\n// http://howlerjs.com/\n//http://learningwebgl.com/lessons/lesson01/index.html\n\n\nOps.Log = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='logger';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.input=this.addInPort(new Port(this,\"input\"));\n    this.input.val='';\n\n    this.exec=function()\n    {\n        console.log(\"[log] \" + self.input.val);\n    };\n\n    this.exe.onTriggered=this.exec;\n    this.input.onValueChanged=this.exec;\n};\nOps.Log.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\n\nOps.CallsPerSecond = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='CallsPerSecond';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.timeStart=0;\n    this.cps=0;\n\n    this.exe.onTriggered=function()\n    {\n        if(self.timeStart===0)self.timeStart=Date.now();\n        var now = Date.now();\n\n        if(now-self.timeStart>1000)\n        {\n            self.timeStart=Date.now();\n            console.log('cps: '+self.cps);\n            self.cps=0;\n        }\n\n        self.cps++;\n    };\n};\nOps.CallsPerSecond.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\nOps.Value = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Value';\n    this.v=this.addInPort(new Port(this,\"value\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.v.val;\n    };\n\n    this.v.onValueChanged=this.exec;\n};\n\nOps.Value.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\n\nOps.TimeLineTime = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='TimeLineTime';\n    this.theTime=this.addOutPort(new Port(this,\"time\"));\n\n    this.onAnimFrame=function(time)\n    {\n        this.theTime.val=time;\n    };\n\n};\nOps.TimeLineTime.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\n\n\n\nOps.Repeat = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Repeat';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.num=this.addInPort(new Port(this,\"num\"));\n    this.num.val=5;\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n    this.idx=this.addOutPort(new Port(this,\"index\"));\n\n    this.exe.onTriggered=function()\n    {\n\n        for(var i=0;i<self.num.value;i++)\n        {\n            self.idx.val=i;\n            self.trigger.call();\n        }\n\n    };\n};\nOps.Repeat.prototype = new Op();\n\n\n\n\n// ---------------------------------------------------------------------------\n\n\nOps.IfTrueThen = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='if true then';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.bool=this.addInPort(new Port(this,\"boolean\"));\n    this.bool.val=false;\n\n    this.triggerThen=this.addOutPort(new Port(this,\"then\",OP_PORT_TYPE_FUNCTION));\n    this.triggerElse=this.addOutPort(new Port(this,\"else\",OP_PORT_TYPE_FUNCTION));\n\n    this.exe.onTriggered=function()\n    {\n        if(self.bool.val===true)\n        {\n            self.triggerThen.call();\n        }\n        else\n        {\n            self.triggerElse.call();\n        }\n    };\n\n    this.bool.onValueChanged=function()\n    {\n        self.exe.onTriggered();\n    };\n\n};\nOps.IfTrueThen.prototype = new Op();\n\n\n\n\n\n// ---------------------------------------------------------------------------\n\nOps.Interval = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='Interval';\n    this.timeOutId=-1;\n    this.interval=this.addInPort(new Port(this,\"interval\"));\n    this.interval.val=1000;\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.exec=function()\n    {\n        if(this.timeOutId!=-1)return;\n        var self=this;\n\n        this.timeOutId=setTimeout(function()\n        {\n            self.timeOutId=-1;\n            self.trigger.call();\n            self.exec();\n        },\n        this.interval.val );\n    };\n\n    this.exec();\n\n};\n\nOps.Interval.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\n// --------------------------------------------------------------------------\n\nOps.Anim={};\n\nOps.Anim.SinusAnim = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='SinusAnim';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    var self=this;\n\n    this.exe.onTriggered=function()\n    {\n        self.result.val=Math.sin(Date.now()/1000.0);\n    };\n\n    this.exe.onTriggered();\n\n};\n\nOps.Anim.SinusAnim.prototype = new Op();\n\n\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Anim.RelativeTime = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='RelativeTime';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    var self=this;\n    var startTime=Date.now()/1000.0;\n\n    this.exe.onTriggered=function()\n    {\n        self.result.val=Date.now()/1000.0-startTime;\n    };\n\n    this.exe.onTriggered();\n\n};\n\nOps.Anim.RelativeTime.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\nOps.Input={};\n\nOps.Input.GamePad = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='GamePad';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.numPads=this.addOutPort(new Port(this,\"numPads\"));\n    this.axis1=this.addOutPort(new Port(this,\"axis1\"));\n    this.axis2=this.addOutPort(new Port(this,\"axis2\"));\n    this.axis3=this.addOutPort(new Port(this,\"axis3\"));\n    this.axis4=this.addOutPort(new Port(this,\"axis4\"));\n    this.button0=this.addOutPort(new Port(this,\"button0\"));\n    this.button1=this.addOutPort(new Port(this,\"button1\"));\n    this.button2=this.addOutPort(new Port(this,\"button2\"));\n    this.button3=this.addOutPort(new Port(this,\"button3\"));\n    this.button4=this.addOutPort(new Port(this,\"button4\"));\n\n    var self=this;\n    var startTime=Date.now()/1000.0;\n\n    this.exe.onTriggered=function()\n    {\n        var gamePads=navigator.getGamepads();\n        var count=0;\n\n        for(var gp in gamePads)\n        {\n            if(gamePads[gp].axes)\n            {\n                self.axis1.val=gamePads[gp].axes[0];\n                self.axis2.val=gamePads[gp].axes[1];\n                self.axis3.val=gamePads[gp].axes[2];\n                self.axis4.val=gamePads[gp].axes[3];\n\n                self.button0.val=gamePads[gp].buttons[0].pressed;\n                self.button0.val=gamePads[gp].buttons[1].pressed;\n                self.button2.val=gamePads[gp].buttons[2].pressed;\n                self.button3.val=gamePads[gp].buttons[3].pressed;\n                self.button4.val=gamePads[gp].buttons[4].pressed;\n\n                count++;\n            }\n        }\n\n        self.numPads.val=count;\n    };\n\n    this.exe.onTriggered();\n\n};\n\nOps.Input.GamePad.prototype = new Op();\n\n","Ops.Math={};\n\n\nOps.Math.Random = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='random';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.exe.onTriggered=function()\n    {\n        self.result.val=Math.random();\n    };\n\n    this.exe.onTriggered();\n};\n\nOps.Math.Random.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\n\n\nOps.Math.MapRange = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='map value range';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.v=this.addInPort(new Port(this,\"value\"));\n    this.old_min=this.addInPort(new Port(this,\"old min\"));\n    this.old_max=this.addInPort(new Port(this,\"old max\"));\n    this.new_min=this.addInPort(new Port(this,\"new min\"));\n    this.new_max=this.addInPort(new Port(this,\"new max\"));\n\n    this.exec= function()\n    {\n        if(self.v.val>self.old_max.val)\n        {\n            self.result.val=self.new_max.val;\n            return;\n        }\n        else\n        if(self.v.val<self.old_min.val)\n        {\n            self.result.val=self.new_min.val;\n            return;\n        }\n\n        var nMin=parseFloat(self.new_min.val);\n        var nMax=parseFloat(self.new_max.val);\n        var oMin=parseFloat(self.old_min.val);\n        var oMax=parseFloat(self.old_max.val);\n        var x=parseFloat(self.v.val);\n\n        var reverseInput = false;\n        var oldMin = Math.min( oMin, oMax );\n        var oldMax = Math.max( oMin, oMax );\n        if(oldMin!= oMin) reverseInput = true;\n\n        var reverseOutput = false;\n        var newMin = Math.min( nMin, nMax );\n        var newMax = Math.max( nMin, nMax );\n        if(newMin != nMin) reverseOutput = true;\n\n        var portion=0;\n\n        if(reverseInput) portion = (oldMax-x)*(newMax-newMin)/(oldMax-oldMin);\n            else portion = (x-oldMin)*(newMax-newMin)/(oldMax-oldMin);\n        \n        if(reverseOutput) self.result.val = newMax - portion;\n            else self.result.val = portion + newMin;\n\n    };\n\n    this.v.val=0;\n    this.old_min.val=-1;\n    this.old_max.val=1;\n    this.new_min.val=0;\n    this.new_max.val=1;\n\n\n    this.v.onValueChanged=this.exec;\n    this.old_min.onValueChanged=this.exec;\n    this.old_max.onValueChanged=this.exec;\n    this.new_min.onValueChanged=this.exec;\n    this.new_max.onValueChanged=this.exec;\n\n    this.exec();\n\n};\n\nOps.Math.MapRange.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Abs = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    this.name='abs';\n    this.number=this.addInPort(new Port(this,\"number\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.number.onValueChanged=function()\n    {\n        self.result.val=Math.abs(self.number.val);\n    };\n};\n\nOps.Math.Abs.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Sin = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    this.name='Sinus';\n    this.number=this.addInPort(new Port(this,\"number\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.number.onValueChanged=function()\n    {\n        self.result.val=Math.sin(self.number.val);\n    };\n};\n\nOps.Math.Sin.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Sum = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='sum';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=parseFloat(self.number1.val)+parseFloat(self.number2.val);\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Sum.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Multiply = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='multiply';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val*self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n\n};\n\nOps.Math.Multiply.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Divide = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Divide';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val/self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Divide.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\nOps.Math.Compare={};\n\n\n\n\nOps.Math.Compare.IsEven = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='isEven';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n\n    this.exec= function()\n    {\n        self.result.val=!( self.number1.val & 1 );\n    };\n\n    this.number1.onValueChanged=this.exec;\n};\n\nOps.Math.Compare.IsEven.prototype = new Op();\n\n\n\nOps.Math.Compare.Greater = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Greater';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val>self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Compare.Greater.prototype = new Op();\n\n\n\n\n\n\nOps.Math.Compare.Between = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Between';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number=this.addInPort(new Port(this,\"value\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n    this.number.val=2.0;\n    this.number1.val=1.0;\n    this.number2.val=3.0;\n\n    this.exec= function()\n    {\n        self.result.val=\n            (\n                self.number.val>Math.min(self.number1.val,self.number2.val) &&\n                self.number.val<Math.max(self.number1.val,self.number2.val)\n            );\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n    this.number.onValueChanged=this.exec;\n};\nOps.Math.Compare.Between.prototype = new Op();\n\n\n\n\nOps.Math.Compare.Lesser = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Lesser';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val<self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n\n};\n\nOps.Math.Compare.Lesser.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Math.Compare.Equals = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Equals';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val==self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Compare.Equals.prototype = new Op();\n\n"],"sourceRoot":"/source/"}