{"version":3,"sources":["timer.js","utils.js","cgl_mesh.js","cgl_shader.js","cgl_state.js","cgl_texture.js","cgl_textureeffect.js","holo.js","ops.devices.js","ops.gl.imgeffects.js","ops.gl.js","ops.gl.materials.js","ops.gl.meshes.js","ops.js","ops.json.js","ops.math.js","ops.net.js"],"names":["Timer","getTime","lastTime","Date","now","timeStart","timeOffset","self","this","currentTime","paused","update","togglePlay","play","pause","setOffset","val","generateUUID","d","uuid","replace","c","r","Math","random","floor","toString","ajaxRequest","url","callback","request","XMLHttpRequest","open","responseType","onload","e","target","response","send","CGL","DEG2RAD","Mesh","geom","bufTexCoords","bufVertexNormals","bufVertices","gl","createBuffer","bufVerticesIndizes","setGeom","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","vertices","STATIC_DRAW","itemSize","numItems","length","ELEMENT_ARRAY_BUFFER","Uint16Array","verticesIndices","vertexNormals","console","log","texCoords","render","shader","bind","GL","enableVertexAttribArray","getAttrVertexPos","getAttrVertexNormals","getAttrTexCoords","vertexAttribPointer","FLOAT","what","TRIANGLES","cgl","wireframe","LINES","points","POINTS","drawElements","UNSIGNED_SHORT","Geometry","faceVertCount","texCoordsIndices","clear","addFace","a","b","face","iv","push","parseOBJ","buff","_readline","off","s","String","fromCharCode","groups","vertexNormalIndices","cg","from","to","Uint8Array","line","cds","split","x","parseFloat","y","z","v0a","v1a","v2a","vi0","parseInt","vi1","vi2","ui0","ui1","ui2","ni0","ni1","ni2","vlen","ulen","nlen","v3a","vi3","ui3","ni3","Uniform","_shader","_type","_name","_value","loc","name","type","value","needsUpdate","addUniform","getType","getName","resetLoc","updateValueF","getUniformLocation","getProgram","uniform1f","setValueF","v","updateValueT","uniform1i","setValueT","setValue","updateValue","Shader","program","uniforms","defines","needsRecompile","define","i","removeDefine","splice","removeUniform","uni","getDefaultVertexShader","getDefaultFragmentShader","srcVert","srcFrag","setSource","projMatrixUniform","mvMatrixUniform","attrTexCoords","attrVertexNormals","attrVertexPos","hasTextureUniforms","compile","definesStr","endl","vs","fs","createProgram","getAttribLocation","useProgram","uniformMatrix4fv","pMatrix","mvMatrix","createShader","str","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","VERTEX_SHADER","FRAGMENT_SHADER","warn","getShaderInfoLog","lines","match","j","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","vstr","fstr","vshader","fshader","attachShader","State","mvMatrixStack","pMatrixStack","shaderStack","mat4","create","identity","simpleShader","currentShader","canvasWidth","canvasHeight","beginFrame","setShader","endFrame","setPreviousShader","getShader","pop","pushMvMatrix","copy","popMvMatrix","pushPMatrix","popPMatrix","Texture","tex","createTexture","width","height","flip","setSize","w","h","bindTexture","TEXTURE_2D","arr","uarr","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR","texImage2D","RGBA","UNSIGNED_BYTE","initTexture","img","pixelStorei","UNPACK_FLIP_Y_WEBGL","image","TEXTURE_MAG_FILTER","NEAREST","load","finishedCallback","texture","Image","src","fromImage","TextureEffect","mesh","textureSource","textureTarget","frameBuf","createFramebuffer","renderbuffer","createRenderbuffer","switched","startEffect","setSourceTexture","bindFramebuffer","FRAMEBUFFER","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","framebufferTexture2D","COLOR_ATTACHMENT0","framebufferRenderbuffer","DEPTH_ATTACHMENT","getCurrentTargetTexture","getCurrentSourceTexture","viewport","perspective","clearColor","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","finish","PORT_DIR_IN","PORT_DIR_OUT","OP_PORT_TYPE_VALUE","OP_PORT_TYPE_FUNCTION","OP_PORT_TYPE_OBJECT","OP_PORT_TYPE_TEXTURE","Ops","Op","objName","portsOut","portsIn","posts","uiAttribs","id","addOutPort","p","direction","parent","addInPort","execute","exec","printInfo","ipo","removeLinks","getPort","ipi","findFittingPort","otherPort","Link","canLink","getSerialized","op","getPortByName","Port","links","valueBeforeLink","__defineGetter__","__defineSetter__","isLinked","onValueChanged","onTriggered","addLink","l","removeLinkTo","p2","portIn","portOut","remove","isLinkedTo","call","goals","getTypeString","obj","removeLink","link","scene","getOtherPort","onUnLink","p1","objIn","objOut","canLinkText","Scene","ops","timer","animFrameOps","deleteOp","addOp","eval","hasOwnProperty","onAdd","opid","tryRelink","reLinkP1","reLinkP2","onDelete","requestAnimationFrame","time","onAnimFrame","op1","port1Name","op2","port2Name","port1","port2","onLink","serialize","JSON","stringify","getOpById","deSerialize","opinid","opoutid","inName","outName","found","parse","iop","port","ipi2","ili","prototype","Devices","GamePad","apply","arguments","exe","numPads","axis1","axis2","axis3","axis4","button0","button1","button2","button3","button4","gamePads","navigator","getGamepads","count","gp","axes","buttons","pressed","LeapMotion","transX","transY","transZ","finger0X","finger0Y","finger0Z","Leap","loop","frame","_translation","fingers","tipPosition","Gl","TextureEffects","texOut","trigger","ready","effect","currentTextureEffect","Invert","activeTexture","TEXTURE0","Desaturate","amount","amountUniform","RgbMultiply","g","uniformR","uniformG","uniformB","Vignette","lensRadius1","lensRadius2","uniLensRadius1","uniLensRadius2","Blur","uniDirX","uniDirY","Renderer","initTranslate","vec3","set","canvas","clientWidth","clientHeight","enable","DEPTH_TEST","translate","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","document","getElementById","getContext","ClearColor","ClearDepth","Wireframe","lineWidth","Points","pointSize","TextureEmpty","textureOut","sizeChanged","filename","TextureText","refresh","ctx","clearRect","fillStyle","font","fontSize","textAlign","align","fillText","text","restore","fontImage","createElement","style","display","body","getElementsByTagName","appendChild","Meshes","Plotter","buffer","num","drawArrays","LINE_STRIP","Schwurbel","doRender","uniLoc","Noise","timeUniform","Matrix","Translate","vec","Scale","scale","vScale","transMatrix","doScale","multiply","updateMatrix","scaleChanged","LookatCamera","centerX","centerY","centerZ","eyeX","eyeY","eyeZ","vecUpX","vecUpY","vecUpZ","vUp","vEye","vCenter","lookAt","Transform","posX","posY","posZ","scaleX","scaleY","scaleZ","rotX","rotY","rotZ","vPos","doTranslate","rotateX","rotateY","rotateZ","translateChanged","rotChanged","RandomCluster","reset","randoms","randomsRot","randomsFloats","fromValues","size","idx","rnd","Render2Texture","ShowNormalsMaterial","BasicMaterial","textureOpacity","TEXTURE1","uniform","textureUniform","textureOpacityUniform","Triangle","Rectangle","rebuild","FullscreenRectangle","Circle","calc","oldPosX","oldPosY","segments","percent","degInRad","posx","cos","radius","posy","sin","ObjMesh","unwrap","ind","crd","cpi","ncrd","Array","Cube","Log","input","CallsPerSecond","cps","Value","result","TimeLineTime","theTime","Repeat","IfTrueThen","bool","triggerThen","triggerElse","Group","triggers","Interval","timeOutId","interval","setTimeout","Anim","SinusAnim","RelativeTime","startTime","TimeDiff","cableVars","Variable","changed","varName","readValue","concat","string1","string2","Json","jsonValue","data","key","Random","Clamp","clamp","min","max","SmoothStep","smoothstep","MapRange","old_min","old_max","new_min","new_max","nMin","nMax","oMin","oMax","reverseInput","oldMin","oldMax","reverseOutput","newMin","newMax","portion","Abs","number","abs","Sin","Sum","number1","number2","Multiply","Divide","Compare","IsEven","Greater","Between","Lesser","Equals","Net","Websocket","checkConnection","connected","connect","timeout","connectedTo","connection","close","window","WebSocket","MozWebSocket","error","onerror","message","onclose","onopen","onmessage","json"],"mappings":"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","file":"cables.min.js","sourcesContent":["\n\nfunction Timer()\n{\n    var self=this;\n    var timeStart=Date.now();\n    var timeOffset=0;\n\n    var currentTime=0;\n    var lastTime=0;\n    var paused=true;\n\n    function getTime()\n    {\n        lastTime=(Date.now()-timeStart)/1000;\n        return lastTime+timeOffset;\n\n    }\n\n    this.update=function()\n    {\n        if(paused) return;\n        currentTime=getTime();\n\n        return currentTime;\n    };\n\n    this.getTime=function()\n    {\n        return currentTime;\n    };\n\n    this.togglePlay=function()\n    {\n        if(paused)self.play();\n            else self.pause();\n    };\n\n    this.setOffset=function(val)\n    {\n        if(currentTime+val<0)\n        {\n            timeStart=Date.now();\n            timeOffset=0;\n            currentTime=0;\n        }\n        else\n        {\n            timeOffset+=val;\n            currentTime=lastTime+timeOffset;\n        }\n        \n\n    };\n\n    this.play=function()\n    {\n        timeStart=Date.now();\n        paused=false;\n    };\n\n    this.pause=function()\n    {\n        timeOffset=currentTime;\n        paused=true;\n    };\n\n}","function generateUUID()\n{\n    var d = new Date().getTime();\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c)\n    {\n        var r = (d + Math.random()*16)%16 | 0;\n        d = Math.floor(d/16);\n        return (c=='x' ? r : (r&0x3|0x8)).toString(16);\n    });\n    return uuid;\n}\n\n// ----------------------------------------------------------------\nfunction ajaxRequest(url, callback)\n{\n    var request = new XMLHttpRequest();\n    request.open(\"GET\", url, true);\n    request.responseType = \"arraybuffer\";\n    request.onload = function(e)\n    {\n        callback(e.target.response);\n    };\n    request.send();\n}\n\nString.prototype.endl = function(){return this+'\\n';};\n\n\n","var CGL=CGL ||\n{\n    DEG2RAD:3.14159/180.0\n};\n\n\n\nCGL.Mesh=function(geom)\n{\n    var bufTexCoords=-1;\n    var bufVertexNormals=-1;\n    var bufVertices = gl.createBuffer();\n    var bufVerticesIndizes = gl.createBuffer();\n\n    this.setGeom=function(geom)\n    {\n        \n        gl.bindBuffer(gl.ARRAY_BUFFER, bufVertices);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(geom.vertices), gl.STATIC_DRAW);\n        bufVertices.itemSize = 3;\n        bufVertices.numItems = geom.vertices.length/3;\n\n\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufVerticesIndizes);\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(geom.verticesIndices), gl.STATIC_DRAW);\n        bufVerticesIndizes.itemSize = 1;\n        bufVerticesIndizes.numItems = geom.verticesIndices.length;\n\n\n\n\n        if(geom.vertexNormals.length>0)\n        {\n            if(bufVertexNormals==-1)bufVertexNormals = gl.createBuffer();\n\n            gl.bindBuffer(gl.ARRAY_BUFFER, bufVertexNormals);\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(geom.vertexNormals), gl.STATIC_DRAW);\n            bufVertexNormals.itemSize = 3;\n            bufVertexNormals.numItems = geom.vertexNormals.length/bufVertexNormals.itemSize;\nconsole.log('bufVertexNormals.'+bufVertexNormals.numItems);\n                    \n        }\n\n        if(geom.texCoords.length>0)\n        {\n            if(bufTexCoords==-1)bufTexCoords = gl.createBuffer();\n            gl.bindBuffer(gl.ARRAY_BUFFER, bufTexCoords);\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(geom.texCoords), gl.STATIC_DRAW);\n            bufTexCoords.itemSize = 2;\n            bufTexCoords.numItems = geom.texCoords.length/bufTexCoords.itemSize;\n        }\n\n    };\n\n    this.setGeom(geom);\n\n\n    this.render=function(shader)\n    {\n        if(!shader) return;\n        shader.bind();\n\n        GL.enableVertexAttribArray(shader.getAttrVertexPos());\n        if(bufVertexNormals!=-1) GL.enableVertexAttribArray(shader.getAttrVertexNormals());\n        if(bufTexCoords!=-1) GL.enableVertexAttribArray(shader.getAttrTexCoords());\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, bufVertices);\n        gl.vertexAttribPointer(shader.getAttrVertexPos(),bufVertices.itemSize, gl.FLOAT, false, 0, 0);\n\n        if(bufVertexNormals!=-1)\n        {\n            gl.bindBuffer(gl.ARRAY_BUFFER, bufVertexNormals);\n            gl.vertexAttribPointer(shader.getAttrVertexNormals(),bufVertexNormals.itemSize, gl.FLOAT, false, 0, 0);\n        }\n\n        if(bufTexCoords!=-1)\n        {\n            gl.bindBuffer(gl.ARRAY_BUFFER, bufTexCoords);\n            gl.vertexAttribPointer(shader.getAttrTexCoords(),bufTexCoords.itemSize, gl.FLOAT, false, 0, 0);\n        }\n\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufVerticesIndizes);\n\n        var what=gl.TRIANGLES;\n        if(cgl.wireframe)what=gl.LINES;\n        else if(cgl.points)what=gl.POINTS;\n\n        gl.drawElements(what, bufVerticesIndizes.numItems, gl.UNSIGNED_SHORT, 0);\n    };\n\n};\n\nCGL.Geometry=function()\n{\n    this.faceVertCount=3;\n    this.vertices=[];\n    this.verticesIndices=[];\n    this.texCoords=[];\n    this.texCoordsIndices=[];\n    this.vertexNormals=[];\n\n    this.clear=function()\n    {\n        this.vertices.length=0;\n        this.verticesIndices.length=0;\n        this.texCoords.length=0;\n        this.texCoordsIndices.length=0;\n    };\n\n    this.addFace=function(a,b,c)\n    {\n        var face=[-1,-1,-1];\n\n        for(var iv=0;iv<this.vertices;iv+=3)\n        {\n            if( this.vertices[iv+0]==a[0] &&\n                this.vertices[iv+1]==a[1] &&\n                this.vertices[iv+2]==a[2]) face[0]=iv/3;\n\n            if( this.vertices[iv+0]==b[0] &&\n                this.vertices[iv+1]==b[1] &&\n                this.vertices[iv+2]==b[2]) face[1]=iv/3;\n\n            if( this.vertices[iv+0]==c[0] &&\n                this.vertices[iv+1]==c[1] &&\n                this.vertices[iv+2]==c[2]) face[2]=iv/3;\n        }\n\n        if(face[0]==-1)\n        {\n            this.vertices.push(a[0],a[1],a[2]);\n            face[0]=(this.vertices.length-1)/3;\n        }\n\n        if(face[1]==-1)\n        {\n            this.vertices.push(b[0],b[1],b[2]);\n            face[1]=(this.vertices.length-1)/3;\n        }\n\n        if(face[2]==-1)\n        {\n            this.vertices.push(c[0],c[1],c[2]);\n            face[2]=(this.vertices.length-1)/3;\n        }\n\n        this.verticesIndices.push(face[0]);\n        this.verticesIndices.push(face[1]);\n        this.verticesIndices.push(face[2]);\n\n    };\n\n\n\n};\n\nparseOBJ = function(buff)\n{\n\n    _readline = function(a, off)  // Uint8Array, offset\n    {\n        var s = \"\";\n        while(a[off] != 10) s += String.fromCharCode(a[off++]);\n        return s;\n    };\n\n    var geom = new CGL.Geometry();\n    geom.groups = {};\n\n    geom.vertexNormals = [];\n    geom.vertexNormalIndices = [];\n\n    var cg = {from: 0, to:0};   // current group\n    var off = 0;\n    var a = new Uint8Array(buff);\n    \n    while(off < a.length)\n    {\n        var line = _readline(a, off);\n        off += line.length + 1;\n        line = line.replace(/ +(?= )/g,'');\n        line = line.replace(/(^\\s+|\\s+$)/g, '');\n        var cds = line.split(\" \");\n        if(cds[0] == \"g\")\n        {\n            cg.to = geom.verticesIndices.length;\n            if(geom.groups[cds[1]] == null) geom.groups[cds[1]] = {from:geom.verticesIndices.length, to:0};\n            cg = geom.groups[cds[1]];\n        }\n        if(cds[0] == \"v\")\n        {\n            var x = parseFloat(cds[1]);\n            var y = parseFloat(cds[2]);\n            var z = parseFloat(cds[3]);\n            geom.vertices.push(x,y,z);\n        }\n        if(cds[0] == \"vt\")\n        {\n            var x = parseFloat(cds[1]);\n            var y = 1-parseFloat(cds[2]);\n            geom.texCoords.push(x,y);\n        }\n        if(cds[0] == \"vn\")\n        {\n            var x = parseFloat(cds[1]);\n            var y = parseFloat(cds[2]);\n            var z = parseFloat(cds[3]);\n            geom.vertexNormals.push(x,y,z);\n        }\n        if(cds[0] == \"f\")\n        {\n            var v0a = cds[1].split(\"/\"), v1a = cds[2].split(\"/\"), v2a = cds[3].split(\"/\");\n            var vi0 = parseInt(v0a[0])-1, vi1 = parseInt(v1a[0])-1, vi2 = parseInt(v2a[0])-1;\n            var ui0 = parseInt(v0a[1])-1, ui1 = parseInt(v1a[1])-1, ui2 = parseInt(v2a[1])-1;\n            var ni0 = parseInt(v0a[2])-1, ni1 = parseInt(v1a[2])-1, ni2 = parseInt(v2a[2])-1;\n            \n            var vlen = geom.vertices.length/3, ulen = geom.texCoords.length/2, nlen = geom.vertexNormals.length/3;\n            if(vi0<0) vi0 = vlen + vi0+1; if(vi1<0) vi1 = vlen + vi1+1; if(vi2<0) vi2 = vlen + vi2+1;\n            if(ui0<0) ui0 = ulen + ui0+1; if(ui1<0) ui1 = ulen + ui1+1; if(ui2<0) ui2 = ulen + ui2+1;\n            if(ni0<0) ni0 = nlen + ni0+1; if(ni1<0) ni1 = nlen + ni1+1; if(ni2<0) ni2 = nlen + ni2+1;\n            \n            geom.verticesIndices.push(vi0, vi1, vi2);  //cg.verticesIndices.push(vi0, vi1, vi2)\n            geom.texCoordsIndices  .push(ui0, ui1, ui2);  //cg.texCoordsIndices  .push(ui0, ui1, ui2);\n            geom.vertexNormalIndices.push(ni0, ni1, ni2);  //cg.vertexNormalIndices.push(ni0, ni1, ni2);\n            if(cds.length == 5)\n            {\n                var v3a = cds[4].split(\"/\");\n                var vi3 = parseInt(v3a[0])-1, ui3 = parseInt(v3a[1])-1, ni3 = parseInt(v3a[2])-1;\n                if(vi3<0) vi3 = vlen + vi3+1;\n                if(ui3<0) ui3 = ulen + ui3+1;\n                if(ni3<0) ni3 = nlen + ni3+1;\n                geom.verticesIndices.push(vi0, vi2, vi3);  //cg.verticesIndices.push(vi0, vi2, vi3);\n                geom.texCoordsIndices  .push(ui0, ui2, ui3);  //cg.texCoordsIndices  .push(ui0, ui2, ui3);\n                geom.vertexNormalIndices.push(ni0, ni2, ni3);  //cg.vertexNormalIndices.push(ni0, ni2, ni3);\n            }\n        }\n    }\n    cg.to = geom.verticesIndices.length;\n    \n    return geom;\n};\n\n\n","var CGL=CGL || {};\n\n// ---------------------------------------------------------------------------\n\nCGL.Uniform=function(_shader,_type,_name,_value)\n{\n    var self=this;\n    var loc=-1;\n    var name=_name;\n    var type=_type;\n    var value=0;\n    var shader=_shader;\n    this.needsUpdate=true;\n\n    shader.addUniform(this);\n\n    this.getType=function() {return type;};\n    this.getName=function() {return name;};\n\n    this.resetLoc=function() { loc=-1;};\n\n    this.updateValueF=function()\n    {\n        if(loc==-1) loc=gl.getUniformLocation(shader.getProgram(), name);\n        gl.uniform1f(loc, value);\n    };\n\n    this.setValueF=function(v)\n    {\n        self.needsUpdate=true;\n        value=v;\n    };\n\n    this.updateValueT=function()\n    {\n        if(loc==-1)\n        {\n            loc=gl.getUniformLocation(shader.getProgram(), name);\n            if(loc==-1) console.log('texture loc unknown!!');\n        }\n\n        gl.uniform1i(loc, value);\n    };\n\n    this.setValueT=function(v)\n    {\n        self.needsUpdate=true;\n        value=v;\n    };\n\n    if(type=='f')\n    {\n        this.setValue=this.setValueF;\n        this.updateValue=this.updateValueF;\n    }\n\n    if(type=='t')\n    {\n        this.setValue=this.setValueT;\n        this.updateValue=this.updateValueT;\n    }\n\n    this.setValue(_value);\n};\n\n// ---------------------------------------------------------------------------\n\nCGL.Shader=function()\n{\n    var self=this;\n    var program=false;\n    var uniforms=[];\n    var defines=[];\n    var needsRecompile=true;\n\n\n\n    this.define=function(name,value)\n    {\n        if(!value)value='';\n        for(var i in defines)\n        {\n            if(defines[i][0]==name)\n            {\n                defines[i][1]=value;\n                return;\n            }\n        }\n        defines.push([name,value]);\n    };\n\n    this.removeDefine=function(name,value)\n    {\n        for(var i in defines)\n        {\n            if(defines[i][0]==name)\n            {\n                defines.splice(i,1);\n                return;\n            }\n        }\n    };\n\n\n    this.removeUniform=function(name)\n    {\n        for(var i in uniforms)\n        {\n            if(uniforms[i].getName()==name)\n            {\n                uniforms.splice(i,1);\n            }\n        }\n        needsRecompile=true;\n    };\n\n    this.addUniform=function(uni)\n    {\n        uniforms.push(uni);\n        needsRecompile=true;\n    };\n\n    this.getDefaultVertexShader=function()\n    {\n        return ''+\n        'attribute vec3 vPosition;\\n'+\n        'attribute vec2 attrTexCoord;\\n'+\n        'attribute vec3 attrVertNormal;\\n'+\n        'varying vec2 texCoord;\\n'+\n        'varying vec3 norm;\\n'+\n        'uniform mat4 projMatrix;\\n'+\n        'uniform mat4 mvMatrix;\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        '   texCoord=attrTexCoord;\\n'+\n        '   norm=attrVertNormal;\\n'+\n        // '   gl_PointSize=3.0;\\n'+\n        '   gl_Position = projMatrix * mvMatrix * vec4(vPosition,  1.0);\\n'+\n        '}\\n';\n    };\n\n    this.getDefaultFragmentShader=function()\n    {\n        return ''+\n        'precision mediump float;\\n'+\n        'varying vec3 norm;'+\n        'void main()\\n'+\n        '{\\n'+\n\n        '   gl_FragColor = vec4(0.5,0.5,0.5,1.0);\\n'+\n        // '   gl_FragColor = vec4(norm.x,norm.y,1.0,1.0);\\n'+\n        '}\\n';\n    };\n\n    this.srcVert=this.getDefaultVertexShader();\n    this.srcFrag=this.getDefaultFragmentShader();\n\n    this.setSource=function(srcVert,srcFrag)\n    {\n        this.srcVert=srcVert;\n        this.srcFrag=srcFrag;\n    };\n\n    var projMatrixUniform=-1;\n    var mvMatrixUniform=-1;\n\n    var attrTexCoords = -1;\n    var attrVertexNormals = -1;\n    var attrVertexPos = -1;\n\n    this.getAttrVertexNormals=function(){return attrVertexNormals;};\n    this.getAttrTexCoords=function(){return attrTexCoords;};\n    this.getAttrVertexPos=function(){return attrVertexPos;};\n\n    this.hasTextureUniforms=function()\n    {\n        for(var i in uniforms)\n        {\n            if(uniforms[i].getType()=='t') return true;\n        }\n        return false;\n    };\n\n    this.compile=function()\n    {\n        var definesStr='';\n\n        for(var i in defines)\n        {\n            definesStr+='#define '+defines[i][0]+' '+defines[i][1]+''.endl();\n        }\n\n        if(self.hasTextureUniforms()) definesStr+='#define HAS_TEXTURES'.endl();\n\n        console.log('shader compile...');\n        console.log('has textures: '+self.hasTextureUniforms() );\n\n        var vs=definesStr+self.srcVert;\n        var fs=definesStr+self.srcFrag;\n\n        if(!program)\n        {\n            console.log('create shaderprogram');\n                    \n            program=createProgram(vs,fs, program);\n        }\n        else\n        {\n            console.log('recompile shaders...');\n\n            // self.vshader=createShader(vs, gl.VERTEX_SHADER, self.vshader );\n            // self.fshader=createShader(fs, gl.FRAGMENT_SHADER, self.fshader );\n            // linkProgram(program);\n            program=createProgram(vs,fs, program);\n            \n            mvMatrixUniform=-1;\n\n            for(var i in uniforms)uniforms[i].resetLoc();\n        }\n\n        needsRecompile=false;\n    };\n\n    this.bind=function()\n    {\n        if(!program || needsRecompile) self.compile();\n\n       \n\n\n        if(mvMatrixUniform==-1)\n        {\n            attrVertexNormals = gl.getAttribLocation(program, 'attrVertNormal');\n            attrTexCoords = gl.getAttribLocation(program, 'attrTexCoord');\n            attrVertexPos = gl.getAttribLocation(program, 'vPosition');\n\n            projMatrixUniform = gl.getUniformLocation(program, \"projMatrix\");\n            mvMatrixUniform = gl.getUniformLocation(program, \"mvMatrix\");\n        }\n\n        GL.useProgram(program);\n\n        for(var i in uniforms)\n        {\n            if(uniforms[i].needsUpdate)uniforms[i].updateValue();\n        }\n\n        gl.uniformMatrix4fv(projMatrixUniform, false, cgl.pMatrix);\n        gl.uniformMatrix4fv(mvMatrixUniform, false, cgl.mvMatrix);\n    };\n\n    this.getProgram=function()\n    {\n        return program;\n    };\n\n\n    createShader =function(str, type,_shader)\n    {\n        var shader = _shader || gl.createShader(type);\n        gl.shaderSource(shader, str);\n        gl.compileShader(shader);\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\n        {\n            console.log('compile status: ');\n\n            if(type==gl.VERTEX_SHADER)console.log('VERTEX_SHADER');\n            if(type==gl.FRAGMENT_SHADER)console.log('FRAGMENT_SHADER');\n            \n            console.warn( gl.getShaderInfoLog(shader) );\n\n            var lines = str.match(/^.*((\\r\\n|\\n|\\r)|$)/gm);\n            for(var i in lines)\n            {\n                var j=parseInt(i,10)+1;\n                console.log(j+': ',lines[i]);\n            }\n\n            console.warn( gl.getShaderInfoLog(shader) );\n        }\n        return shader;\n    };\n\n    linkProgram=function(program)\n    {\n        gl.linkProgram(program);\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS))\n        {\n            throw gl.getProgramInfoLog(program);\n        }\n\n    };\n\n    createProgram=function(vstr, fstr)\n    {\n        var program = gl.createProgram();\n        self.vshader = createShader(vstr, gl.VERTEX_SHADER);\n        self.fshader = createShader(fstr, gl.FRAGMENT_SHADER);\n        gl.attachShader(program, self.vshader);\n        gl.attachShader(program, self.fshader);\n\n        linkProgram(program);\n        return program;\n    };\n\n\n\n};\n\n","\nvar CGL=CGL || {};\n\nCGL.State=function()\n{\n    var self=this;\n    var mvMatrixStack=[];\n    var pMatrixStack=[];\n    var shaderStack=[];\n\n    this.pMatrix=mat4.create();\n    this.mvMatrix=mat4.create();\n\n    mat4.identity(self.mvMatrix);\n\n    var simpleShader=new CGL.Shader();\n    var currentShader=simpleShader;\n\n\n    this.canvasWidth=640;\n    this.canvasHeight=360;\n\n    this.wireframe=false;\n    this.points=false;\n\n\n    this.beginFrame=function()\n    {\n        self.setShader(simpleShader);\n    };\n\n    this.endFrame=function()\n    {\n        self.setPreviousShader();\n        if(mvMatrixStack.length>0) console.warn('mvmatrix stack length !=0 at end of rendering...');\n        if(pMatrixStack.length>0) console.warn('pmatrix stack length !=0 at end of rendering...');\n        if(shaderStack.length>0) console.warn('shaderStack length !=0 at end of rendering...');\n    };\n\n    // shader stack\n\n    this.getShader=function()\n    {\n        return currentShader;\n    };\n\n    this.setShader=function(shader)\n    {\n        shaderStack.push(shader);\n        currentShader=shader;\n    };\n\n    this.setPreviousShader=function()\n    {\n        if(shaderStack.length===0) throw \"Invalid movelview popMatrix!\";\n        shaderStack.pop();\n        currentShader = shaderStack[shaderStack.length-1];\n    };\n\n    // modelview matrix stack\n\n    this.pushMvMatrix=function()\n    {\n        var copy = mat4.create();\n        mat4.copy(copy,self.mvMatrix);\n        mvMatrixStack.push(copy);\n    };\n\n    this.popMvMatrix=function()\n    {\n        if(mvMatrixStack.length===0) throw \"Invalid movelview popMatrix!\";\n        self.mvMatrix = mvMatrixStack.pop();\n    };\n\n    // projection matrix stack\n\n    this.pushPMatrix=function()\n    {\n        var copy = mat4.create();\n        mat4.copy(copy,self.pMatrix);\n        pMatrixStack.push(copy);\n    };\n\n    this.popPMatrix=function()\n    {\n        if(pMatrixStack.length===0) throw \"Invalid projection popMatrix!\";\n        self.pMatrix = pMatrixStack.pop();\n    };\n\n\n};\n\ncgl=new CGL.State();\n\n","var CGL=CGL || {};\n\nCGL.Texture=function()\n{\n    var self=this;\n    this.tex = gl.createTexture();\n    this.width=0;\n    this.height=0;\n    this.flip=false;\n\n    // gl.bindTexture(gl.TEXTURE_2D, this.tex);\n    // gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([111, 111, 111, 255]));\n    // gl.bindTexture(gl.TEXTURE_2D, null);\n\n    // this.bind=function(slot)\n    // {\n    //     gl.activeTexture(gl.TEXTURE0+slot);\n    //     gl.bindTexture(gl.TEXTURE_2D, self.tex);\n    // };\n\n    this.setSize=function(w,h)\n    {\n        self.width=w;\n        self.height=h;\n\n        gl.bindTexture(gl.TEXTURE_2D, self.tex);\n        \n        var arr=[];\n        arr.length=w*h*4;\n        // for(var x=0;x<w;x++)\n        // {\n        //     for(var y=0;y<h;y++)\n        //     {\n        //         // var index=x+y*w;\n        //         arr.push( parseInt( (x/w)*255,10) );\n        //         arr.push(0);\n        //         arr.push( parseInt((y/w)*255,10));\n        //         arr.push(255);\n        //     }\n        // }\n        var uarr=new Uint8Array(arr);\n\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, w, h, 0, gl.RGBA, gl.UNSIGNED_BYTE, uarr);\n\n        gl.bindTexture(gl.TEXTURE_2D, null);\n    };\n\n    this.initTexture=function(img)\n    {\n        self.width=img.width;\n        self.height=img.height;\n\n\n        gl.bindTexture(gl.TEXTURE_2D, self.tex);\n        if(this.flip) gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, self.image);\n\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\n        // non power of two:\n        // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n\n        gl.bindTexture(gl.TEXTURE_2D, null);\n    };\n\n    this.setSize(8,8);\n};\n\nCGL.Texture.load=function(url,finishedCallback)\n{\n    var texture=new CGL.Texture();\n    texture.image = new Image();\n    texture.image.onload = function ()\n    {\n        console.log(texture.image);\n        texture.initTexture(texture.image);\n        finishedCallback();\n    };\n    texture.image.src = url;\n    return texture;\n};\n\n\nCGL.Texture.fromImage=function(img)\n{\n    var texture=new CGL.Texture();\n    texture.flip=true;\n    texture.image = img;\n    texture.initTexture(img);\n    return texture;\n};\n\n\n// ---------------------------------------------------------------------------\n","var CGL=CGL || {};\n\nCGL.TextureEffect=function()\n{\n    var self=this;\n    var geom=new CGL.Geometry();\n\n    geom.vertices = [\n         1.0,  1.0,  0.0,\n        -1.0,  1.0,  0.0,\n         1.0, -1.0,  0.0,\n        -1.0, -1.0,  0.0\n    ];\n\n    geom.texCoords = [\n         1.0, 1.0,\n         0.0, 1.0,\n         1.0, 0.0,\n         0.0, 0.0\n    ];\n\n    geom.verticesIndices = [\n        0, 1, 2,\n        3, 1, 2\n    ];\n\n    var mesh=new CGL.Mesh(geom);\n\n    var textureSource=null;\n    var textureTarget=new CGL.Texture();\n\n    var frameBuf = GL.createFramebuffer();\n    var renderbuffer = GL.createRenderbuffer();\n\n    var switched=false;\n\n    this.startEffect=function()\n    {\n        switched=false;\n    };\n\n    this.setSourceTexture=function(tex)\n    {\n        if(tex===null)\n        {\n            textureSource=new CGL.Texture();\n            textureSource.setSize(16,16);\n        }\n        else\n        {\n            textureSource=tex;\n        }\n        console.log(textureSource.width,textureSource.height);\n        \n        textureTarget.setSize(textureSource.width,textureSource.height);\n\n        GL.bindFramebuffer(GL.FRAMEBUFFER, frameBuf);\n\n        GL.bindRenderbuffer(GL.RENDERBUFFER, renderbuffer);\n        GL.renderbufferStorage(GL.RENDERBUFFER, GL.DEPTH_COMPONENT16, textureSource.width,textureSource.height);\n        GL.framebufferTexture2D(GL.FRAMEBUFFER, GL.COLOR_ATTACHMENT0, GL.TEXTURE_2D, textureTarget.tex, 0);\n        GL.framebufferRenderbuffer(GL.FRAMEBUFFER, GL.DEPTH_ATTACHMENT, GL.RENDERBUFFER, renderbuffer);\n        GL.bindTexture(GL.TEXTURE_2D, null);\n        GL.bindRenderbuffer(GL.RENDERBUFFER, null);\n        GL.bindFramebuffer(GL.FRAMEBUFFER, null);\n\n        console.log(\n            self.getCurrentTargetTexture().height,\n            self.getCurrentSourceTexture().height\n            );\n    };\n\n\n    this.getCurrentTargetTexture=function()\n    {\n        if(switched)return textureSource;\n            else return textureTarget;\n    };\n\n    this.getCurrentSourceTexture=function()\n    {\n        if(switched)return textureTarget;\n            else return textureSource;\n    };\n\n    this.bind=function()\n    {\n        if(textureSource===null) throw 'no base texture set!';\n\n        // GL.bindFramebuffer(GL.FRAMEBUFFER, frameBuf);\n\n        cgl.pushMvMatrix();\n\n        // cgl.currentTextureEffect=effect;\n\n\n\n        GL.bindFramebuffer(GL.FRAMEBUFFER, frameBuf);\n        GL.framebufferTexture2D(GL.FRAMEBUFFER, GL.COLOR_ATTACHMENT0, GL.TEXTURE_2D, self.getCurrentTargetTexture().tex, 0);\n\n        cgl.pushPMatrix();\n        gl.viewport(0, 0, self.getCurrentTargetTexture().width,self.getCurrentTargetTexture().height);\n        mat4.perspective(cgl.pMatrix,45, self.getCurrentTargetTexture().width/self.getCurrentTargetTexture().height, 0.01, 1100.0);\n\n\n        cgl.pushPMatrix();\n        mat4.identity(cgl.pMatrix);\n\n        cgl.pushMvMatrix();\n        mat4.identity(cgl.mvMatrix);\n\n\n        GL.clearColor(0,1,0,1);\n        GL.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n    };\n\n    this.finish=function()\n    {\n        mesh.render(cgl.getShader());\n\n        cgl.popPMatrix();\n        cgl.popMvMatrix();\n\n        cgl.popPMatrix();\n\n        GL.bindFramebuffer(GL.FRAMEBUFFER, null);\n\n        cgl.popMvMatrix();\n        gl.viewport(0, 0, cgl.canvasWidth,cgl.canvasHeight);\n\n        switched=!switched;\n\n    };\n\n};","\nvar PORT_DIR_IN=0;\nvar PORT_DIR_OUT=1;\n\nvar OP_PORT_TYPE_VALUE =0;\nvar OP_PORT_TYPE_FUNCTION =1;\nvar OP_PORT_TYPE_OBJECT =2;\nvar OP_PORT_TYPE_TEXTURE =2;\n\nvar Ops = {};\n\n\nvar Op = function()\n{\n    this.objName='';\n    this.portsOut=[];\n    this.portsIn=[];\n    this.posts=[];\n    this.uiAttribs={};\n    this.name='unknown';\n    this.id=generateUUID();\n\n    this.getName= function()\n    {\n        return this.name;\n    };\n    this.addOutPort=function(p)\n    {\n        p.direction=PORT_DIR_OUT;\n        p.parent=this;\n        this.portsOut.push(p);\n        return p;\n    };\n    this.addInPort=function(p)\n    {\n        p.direction=PORT_DIR_IN;\n        p.parent=this;\n        this.portsIn.push(p);\n        return p;\n    };\n    this.execute=function()\n    {\n        this.exec();\n    };\n    this.printInfo=function()\n    {\n        for(var i=0;i<this.portsIn.length;i++)\n            console.log('in: '+this.portsIn[i].getName());\n\n        for(var ipo in this.portsOut)\n            console.log('out: '+this.portsOut[ipo].getName());\n    };\n\n    this.removeLinks=function()\n    {\n        for(var i=0;i<this.portsIn.length;i++)\n            this.portsIn[i].removeLinks();\n        for(var ipo in this.portsOut)\n            this.portsOut[ipo].removeLinks();\n    };\n\n    this.getPort=function(name)\n    {\n        for(var ipi in this.portsIn)\n            if(this.portsIn[ipi].getName()==name)return this.portsIn[ipi];\n\n        for(var ipo in this.portsOut)\n            if(this.portsOut[ipo].getName()==name)return this.portsOut[ipo];\n    };\n\n    this.findFittingPort=function(otherPort)\n    {\n        for(var ipo in this.portsOut)\n        {\n            console.log('.');\n            if(Link.canLink(otherPort,this.portsOut[ipo]))return this.portsOut[ipo];\n        }\n    \n        for(var ipi in this.portsIn)\n        {\n            console.log('.');\n            if(Link.canLink(otherPort,this.portsIn[ipi]))return this.portsIn[ipi];\n        }\n\n    };\n\n\n    this.getSerialized=function()\n    {\n        var op={};\n        op.name=this.getName();\n        op.objName=this.objName;\n        op.id=this.id;\n        op.uiAttribs=this.uiAttribs;\n\n        op.portsIn=[];\n        op.portsOut=[];\n\n        for(var i=0;i<this.portsIn.length;i++)\n            op.portsIn.push( this.portsIn[i].getSerialized() );\n\n        for(var ipo in this.portsOut)\n            op.portsOut.push( this.portsOut[ipo].getSerialized() );\n\n        return op;\n    };\n\n    this.getPortByName=function(name)\n    {\n        for(var i=0;i<this.portsIn.length;i++)\n            if(this.portsIn[i].name==name)return this.portsIn[i];\n        \n        for(var ipo in this.portsOut)\n            if(this.portsOut[ipo].name==name)return this.portsOut[ipo];\n    };\n\n};\n\n// ------------------------------------------------------------------------------------\n\nvar Port=function(parent,name,type)\n{\n    var self=this;\n    this.direction=PORT_DIR_IN;\n    this.id=generateUUID();\n    this.parent=parent;\n    this.links=[];\n    this.value=null;\n    this.name=name;\n    this.type=type || OP_PORT_TYPE_VALUE;\n    var valueBeforeLink=null;\n\n    this.__defineGetter__(\"val\", function()\n    {\n        return this.value;\n    });\n\n    this.__defineSetter__(\"val\", function(v)\n    {\n        this.setValue(v);\n    });\n\n    this.getType=function(){ return this.type; };\n    this.isLinked=function(){ return this.links.length>0; };\n    this.onValueChanged=function(){};\n    this.onTriggered=function(){};\n\n    this.setValue=function(v)\n    {\n        if(v!=this.value || this.type==OP_PORT_TYPE_TEXTURE)\n        {\n            this.value=v;\n            this.onValueChanged();\n\n            for(var i in this.links)\n            {\n                this.links[i].setValue();\n            }\n        }\n    };\n\n    this.getName= function()\n    {\n        return this.name;\n    };\n\n    this.addLink=function(l)\n    {\n        valueBeforeLink=self.value;\n        this.links.push(l);\n    };\n\n    this.removeLinkTo=function(p2)\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i].portIn==p2 || this.links[i].portOut==p2)\n            {\n                this.links[i].remove();\n            }\n        }\n\n    };\n\n    this.isLinkedTo=function(p2)\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i].portIn==p2 || this.links[i].portOut==p2)return true;\n        }\n        return false;\n    };\n\n    this.call=function()\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i].portIn !=this)this.links[i].portIn.onTriggered();\n            if(this.links[i].portOut!=this)this.links[i].portOut.onTriggered();\n        }\n    };\n\n\n    this.execute=function()\n    {\n        console.log('### execute port: '+this.getName() , this.goals.length);\n    };\n\n    this.getTypeString=function()\n    {\n        if(this.type==OP_PORT_TYPE_VALUE)return 'value';\n        if(this.type==OP_PORT_TYPE_FUNCTION)return 'function';\n        if(this.type==OP_PORT_TYPE_TEXTURE)return 'texture';\n    };\n\n    this.getSerialized=function()\n    {\n        var obj={};\n        obj.name=this.getName();\n        obj.value=this.value;\n\n        if(this.direction==PORT_DIR_IN && this.links.length>0)\n        {\n            obj.links=[];\n            for(var i in this.links)\n            {\n                obj.links.push( this.links[i].getSerialized() );\n            }\n        }\n        return obj;\n    };\n\n    this.removeLinks=function()\n    {\n        while(this.links.length>0)\n        {\n            this.links[0].remove();\n        }\n    };\n\n    this.removeLink=function(link)\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i]==link)this.links.splice( i, 1 );\n        }\n        self.setValue(valueBeforeLink);\n    };\n};\n\n\n\n// ---------------------------------------------------------------------------\n\nvar Link = function(scene)\n{\n    this.portIn=null;\n    this.portOut=null;\n    this.scene=scene;\n\n    this.setValue=function()\n    {\n        if(this.portIn.val!=this.portOut.val)\n            this.portIn.val=this.portOut.val;\n    };\n\n    this.getOtherPort=function(p)\n    {\n        if(p==this.portIn)return this.portOut;\n        return this.portIn;\n    };\n\n    this.remove=function()\n    {\n        this.portIn.removeLink(this);\n        this.portOut.removeLink(this);\n        this.scene.onUnLink(this.portIn,this.portOut);\n        this.portIn=null;\n        this.portOut=null;\n        this.scene=null;\n    };\n\n\n    this.link=function(p1,p2)\n    {\n        if(!Link.canLink(p1,p2))\n        {\n            console.log('cannot link ports!');\n            return false;\n        }\n        if(p1.direction==PORT_DIR_IN)\n        {\n            this.portIn=p1;\n            this.portOut=p2;\n        }\n        else\n        {\n            this.portIn=p2;\n            this.portOut=p1;\n        }\n\n        p1.addLink(this);\n        p2.addLink(this);\n        this.setValue();\n    };\n\n    this.getSerialized=function()\n    {\n        var obj={};\n\n        obj.portIn=this.portIn.getName();\n        obj.portOut=this.portOut.getName();\n        obj.objIn=this.portIn.parent.id;\n        obj.objOut=this.portOut.parent.id;\n\n        return obj;\n    };\n};\n\n\nLink.canLinkText=function(p1,p2)\n{\n    if(!p1)return 'can not link: port 1 invalid';\n    if(!p2)return 'can not link: port 2 invalid';\n    if(p1.direction==PORT_DIR_IN && p1.links.length>0)return 'input port already busy';\n    if(p2.direction==PORT_DIR_IN && p2.links.length>0)return 'input port already busy';\n    if(p1.isLinkedTo(p2))return 'ports already linked';\n    if(p1.direction==p2.direction)return 'can not link: same direction';\n    if(p1.type!=p2.type)return 'can not link: different type';\n    if(p1.parent==p2.parent)return 'can not link: same op';\n    return 'can link';\n};\n\nLink.canLink=function(p1,p2)\n{\n    if(!p1)return false;\n    if(!p2)return false;\n    if(p1.direction==PORT_DIR_IN && p1.links.length>0)return false;\n    if(p2.direction==PORT_DIR_IN && p2.links.length>0)return false;\n    if(p1.isLinkedTo(p2))return false;\n    if(p1.direction==p2.direction)return false;\n    if(p1.type!=p2.type)return false;\n    if(p1.parent==p2.parent)return false;\n\n    return true;\n};\n\n\n// ------------------------------------------------------------------------------------\n\n\nvar Scene = function()\n{\n    var self=this;\n    this.ops=[];\n    this.timer=new Timer();\n    this.animFrameOps=[];\n    \n\n    this.clear=function()\n    {\n        this.timer=new Timer();\n        while(this.ops.length>0)\n        {\n            this.deleteOp(this.ops[0].id);\n        }\n    };\n\n    this.addOp=function(objName,uiAttribs)\n    {\n        var op=eval('new '+objName+'();');\n        op.objName=objName;\n        op.uiAttribs=uiAttribs;\n\n        if(op.hasOwnProperty('onAnimFrame')) this.animFrameOps.push(op);\n\n        this.ops.push(op);\n        if(this.onAdd)this.onAdd(op);\n        return op;\n    };\n\n    this.deleteOp=function(opid,tryRelink)\n    {\n\n        for(var i in this.ops)\n        {\n            if(this.ops[i].id==opid)\n            {\n                var op=this.ops[i];\n                var reLinkP1=null;\n                var reLinkP2=null;\n\n                if(op)\n                {\n                    if(tryRelink)\n                    {\n                        if(this.ops[i].portsIn[0].isLinked() && this.ops[i].portsOut[0].isLinked())\n                        {\n                            if(this.ops[i].portsIn[0].getType()==this.ops[i].portsOut[0].getType())\n                            {\n                                reLinkP1=this.ops[i].portsIn[0].links[0].getOtherPort(this.ops[i].portsIn[0]);\n                                reLinkP2=this.ops[i].portsOut[0].links[0].getOtherPort(this.ops[i].portsOut[0]);\n                            }\n                        }\n                    }\n\n                    this.ops[i].removeLinks();\n                    this.onDelete(this.ops[i]);\n                    this.ops.splice( i, 1 );\n\n                    if(reLinkP1!==null && reLinkP2!==null)\n                    {\n                        self.link(\n                            reLinkP1.parent,\n                            reLinkP1.getName(),\n                            reLinkP2.parent,\n                            reLinkP2.getName()\n                            );\n                    }\n                }\n            }\n\n        }\n\n\n    };\n\n    this.exec=function()\n    {\n        requestAnimationFrame(self.exec);\n        self.timer.update();\n\n        var time=self.timer.getTime();\n\n        for(var i in self.animFrameOps)\n        {\n            self.animFrameOps[i].onAnimFrame(time);\n        }\n\n    };\n\n    this.link=function(op1,port1Name,op2,port2Name)\n    {\n        var port1=op1.getPort(port1Name);\n        var port2=op2.getPort(port2Name);\n\n        if(Link.canLink(port1,port2))\n        {\n            var link=new Link(this);\n            link.link(port1,port2);\n            this.onLink(port1,port2);\n            return link;\n        }\n        else\n        {\n            console.log(Link.canLinkText(port1,port2));\n        }\n    };\n    this.onAdd=function(op){};\n    this.onDelete=function(op){};\n    this.onLink=function(p1,p2){};\n    this.onUnLink=function(p1,p2){};\n    this.serialize=function()\n    {\n        var obj={};\n\n        obj.ops=[];\n        for(var i in this.ops)\n        {\n            obj.ops.push( this.ops[i].getSerialized() );\n        }\n        \n        return JSON.stringify(obj);\n    };\n    this.getOpById=function(opid)\n    {\n        for(var i in this.ops)\n        {\n            if(this.ops[i].id==opid)return this.ops[i];\n        }\n\n    };\n    this.deSerialize=function(obj)\n    {\n        if (typeof obj === \"string\") obj=JSON.parse(obj);\n        var self=this;\n\n        function addLink(opinid,opoutid,inName,outName)\n        {\n            var found=false;\n            if(!found)\n            {\n                self.link(\n                    self.getOpById(opinid),\n                    inName,\n                    self.getOpById(opoutid),\n                    outName\n                    );\n            }\n        }\n\n        // add ops...\n        for(var iop in obj.ops)\n        {\n            var op=this.addOp(obj.ops[iop].objName,obj.ops[iop].uiAttribs);\n            op.id=obj.ops[iop].id;\n\n            for(var ipi in obj.ops[iop].portsIn)\n            {\n                var port=op.getPortByName(obj.ops[iop].portsIn[ipi].name);\n                if(port && port.type!=OP_PORT_TYPE_TEXTURE)port.val=obj.ops[iop].portsIn[ipi].value;\n            }\n\n            for(var ipo in obj.ops[iop].portsOut)\n            {\n                var port2=op.getPortByName(obj.ops[iop].portsOut[ipo].name);\n                if(port2&& port2.type!=OP_PORT_TYPE_TEXTURE)port2.val=obj.ops[iop].portsOut[ipo].value;\n            }\n\n\n            // op.uiAttribs=obj.ops[iop].uiAttribs;\n        }\n\n        // create links...\n        for(iop in obj.ops)\n        {\n            for(var ipi2 in obj.ops[iop].portsIn)\n            {\n\n                for(var ili in obj.ops[iop].portsIn[ipi2].links)\n                {\n                    addLink(\n                        obj.ops[iop].portsIn[ipi2].links[ili].objIn,\n                        obj.ops[iop].portsIn[ipi2].links[ili].objOut,\n                        obj.ops[iop].portsIn[ipi2].links[ili].portIn,\n                        obj.ops[iop].portsIn[ipi2].links[ili].portOut);\n                }\n            }\n\n\n            // for(var ipo in obj.ops[iop].portsOut)\n            // {\n            //     for(var ili in obj.ops[iop].portsOut[ipo].links)\n            //     {\n            //         addLink(\n            //             obj.ops[iop].portsOut[ipo].links[ili].objIn,\n            //             obj.ops[iop].portsOut[ipo].links[ili].objOut,\n            //             obj.ops[iop].portsOut[ipo].links[ili].portIn,\n            //             obj.ops[iop].portsOut[ipo].links[ili].portOut);\n\n            //     }\n            // }\n        }\n\n\n        for(var i in this.ops)\n        {\n            this.ops[i].id=generateUUID();\n        }\n\n\n\n    };\n\n    this.exec();\n\n};\n\n\n\n\n","\n\nOps.Devices= Ops.Devices || {};\n\nOps.Devices.GamePad = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='GamePad';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.numPads=this.addOutPort(new Port(this,\"numPads\"));\n    this.axis1=this.addOutPort(new Port(this,\"axis1\"));\n    this.axis2=this.addOutPort(new Port(this,\"axis2\"));\n    this.axis3=this.addOutPort(new Port(this,\"axis3\"));\n    this.axis4=this.addOutPort(new Port(this,\"axis4\"));\n    this.button0=this.addOutPort(new Port(this,\"button0\"));\n    this.button1=this.addOutPort(new Port(this,\"button1\"));\n    this.button2=this.addOutPort(new Port(this,\"button2\"));\n    this.button3=this.addOutPort(new Port(this,\"button3\"));\n    this.button4=this.addOutPort(new Port(this,\"button4\"));\n\n    var self=this;\n    var startTime=Date.now()/1000.0;\n\n    this.exe.onTriggered=function()\n    {\n        var gamePads=navigator.getGamepads();\n        var count=0;\n\n        for(var gp in gamePads)\n        {\n            if(gamePads[gp].axes)\n            {\n                self.axis1.val=gamePads[gp].axes[0];\n                self.axis2.val=gamePads[gp].axes[1];\n                self.axis3.val=gamePads[gp].axes[2];\n                self.axis4.val=gamePads[gp].axes[3];\n\n                self.button0.val=gamePads[gp].buttons[0].pressed;\n                self.button0.val=gamePads[gp].buttons[1].pressed;\n                self.button2.val=gamePads[gp].buttons[2].pressed;\n                self.button3.val=gamePads[gp].buttons[3].pressed;\n                self.button4.val=gamePads[gp].buttons[4].pressed;\n\n                count++;\n            }\n        }\n\n        self.numPads.val=count;\n    };\n\n    this.exe.onTriggered();\n\n};\n\nOps.Devices.GamePad.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Devices.LeapMotion = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='LeapMotion';\n\n    this.transX=this.addOutPort(new Port(this,\"translationX\"));\n    this.transY=this.addOutPort(new Port(this,\"translationY\"));\n    this.transZ=this.addOutPort(new Port(this,\"translationZ\"));\n\n    this.finger0X=this.addOutPort(new Port(this,\"finger0X\"));\n    this.finger0Y=this.addOutPort(new Port(this,\"finger0Y\"));\n    this.finger0Z=this.addOutPort(new Port(this,\"finger0Z\"));\n\n    Leap.loop(function (frame)\n    {\n        self.transX.val=frame._translation[0];\n        self.transY.val=frame._translation[1];\n        self.transZ.val=frame._translation[2];\n\n        if(frame.fingers.length>0)\n        {\n            self.finger0X.val=frame.fingers[0].tipPosition[0];\n            self.finger0Y.val=frame.fingers[0].tipPosition[1];\n            self.finger0Z.val=frame.fingers[0].tipPosition[2];\n        }\n    });\n};\n\nOps.Devices.LeapMotion.prototype = new Op();\n\n// --------------------------------------------------------------------------\n","\nOps.Gl=Ops.Gl || {};\nOps.Gl.TextureEffects=Ops.Gl.TextureEffects || {};\n\n// ---------------------------------------------------------------------------------------------\n\nOps.Gl.TextureEffects.TextureEffect = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='texture effect';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.texOut=this.addOutPort(new Port(this,\"texture_out\",OP_PORT_TYPE_TEXTURE));\n\n    this.tex=this.addInPort(new Port(this,\"texture_in\",OP_PORT_TYPE_TEXTURE));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var ready=false;\n    var effect=new CGL.TextureEffect();\n\n    cgl.currentTextureEffect=effect;\n\n    this.tex.onValueChanged=function()\n    {\n        effect.setSourceTexture(self.tex.val);\n        self.texOut.val=cgl.currentTextureEffect.getCurrentSourceTexture();\n        ready=true;\n    };\n\n    this.render.onTriggered=function()\n    {\n        if(!ready)return;\n        if(!self.tex.val) return;\n        cgl.currentTextureEffect=effect;\n\n        effect.startEffect();\n        self.trigger.call();\n        self.texOut.val=cgl.currentTextureEffect.getCurrentSourceTexture();\n    };\n};\n\nOps.Gl.TextureEffects.TextureEffect.prototype = new Op();\n\n// ---------------------------------------------------------------------------------------------\n\nOps.Gl.TextureEffects.Invert = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Invert';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var shader=new CGL.Shader();\n\n    var srcFrag=''\n        .endl()+'precision highp float;'\n        .endl()+'#ifdef HAS_TEXTURES'\n        .endl()+'  varying vec2 texCoord;'\n        .endl()+'  uniform sampler2D tex;'\n        .endl()+'#endif'\n        .endl()+''\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   vec4 col=vec4(1.0,0.0,0.0,1.0);'\n        .endl()+'   #ifdef HAS_TEXTURES'\n        .endl()+'       col=texture2D(tex,texCoord);'\n        .endl()+'       col.rgb=1.0-col.rgb;'\n        .endl()+'   #endif'\n        .endl()+'   gl_FragColor = col;'\n        .endl()+'}\\n';\n\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n    var textureUniform=new CGL.Uniform(shader,'t','tex',0);\n\n\n    this.render.onTriggered=function()\n    {\n        if(!cgl.currentTextureEffect)return;\n        \n        cgl.setShader(shader);\n        cgl.currentTextureEffect.bind();\n\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, cgl.currentTextureEffect.getCurrentSourceTexture().tex );\n\n        cgl.currentTextureEffect.finish();\n        cgl.setPreviousShader();\n\n        self.trigger.call();\n    };\n};\n\nOps.Gl.TextureEffects.Invert.prototype = new Op();\n\n// ---------------------------------------------------------------------------------------------\n\nOps.Gl.TextureEffects.Desaturate = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Desaturate';\n\n    this.amount=this.addInPort(new Port(this,\"amount\"));\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var shader=new CGL.Shader();\n\n    var srcFrag=''\n        .endl()+'precision highp float;'\n        .endl()+'#ifdef HAS_TEXTURES'\n        .endl()+'  varying vec2 texCoord;'\n        .endl()+'  uniform sampler2D tex;'\n        .endl()+'#endif'\n        .endl()+'uniform float amount;'\n        .endl()+''\n        .endl()+''\n        .endl()+'vec3 desaturate(vec3 color, float amount)'\n        .endl()+'{'\n        .endl()+'   vec3 gray = vec3(dot(vec3(0.2126,0.7152,0.0722), color));'\n        .endl()+'   return vec3(mix(color, gray, amount));'\n        .endl()+'}'\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   vec4 col=vec4(1.0,0.0,0.0,1.0);'\n        .endl()+'   #ifdef HAS_TEXTURES'\n        .endl()+'       col=texture2D(tex,texCoord);'\n        .endl()+'       col.rgb=desaturate(col.rgb,amount);'\n        .endl()+'   #endif'\n        .endl()+'   gl_FragColor = col;'\n        .endl()+'}';\n\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n    var textureUniform=new CGL.Uniform(shader,'t','tex',0);\n    var amountUniform=new CGL.Uniform(shader,'f','amount',1.0);\n\n    this.amount.onValueChanged=function()\n    {\n        amountUniform.setValue(self.amount.val);\n    };\n\n    this.render.onTriggered=function()\n    {\n        if(!cgl.currentTextureEffect)return;\n        \n        cgl.setShader(shader);\n        cgl.currentTextureEffect.bind();\n\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, cgl.currentTextureEffect.getCurrentSourceTexture().tex );\n\n        cgl.currentTextureEffect.finish();\n        cgl.setPreviousShader();\n\n        self.trigger.call();\n    };\n};\n\nOps.Gl.TextureEffects.Desaturate.prototype = new Op();\n\n// ---------------------------------------------------------------------------------------------\n\nOps.Gl.TextureEffects.RgbMultiply = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='RgbMultiply';\n\n    this.r=this.addInPort(new Port(this,\"r\"));\n    this.g=this.addInPort(new Port(this,\"g\"));\n    this.b=this.addInPort(new Port(this,\"b\"));\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var shader=new CGL.Shader();\n\n    var srcFrag=''\n        .endl()+'precision highp float;'\n        .endl()+'#ifdef HAS_TEXTURES'\n        .endl()+'  varying vec2 texCoord;'\n        .endl()+'  uniform sampler2D tex;'\n        .endl()+'#endif'\n        .endl()+'uniform float r;'\n        .endl()+'uniform float g;'\n        .endl()+'uniform float b;'\n        .endl()+''\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   vec4 col=vec4(1.0,0.0,0.0,1.0);'\n        .endl()+'   #ifdef HAS_TEXTURES'\n        .endl()+'       col=texture2D(tex,texCoord);'\n        .endl()+'       col.r*=r;'\n        .endl()+'       col.g*=g;'\n        .endl()+'       col.b*=b;'\n        .endl()+'   #endif'\n        .endl()+'   gl_FragColor = col;'\n        .endl()+'}';\n\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n    var textureUniform=new CGL.Uniform(shader,'t','tex',0);\n    var uniformR=new CGL.Uniform(shader,'f','r',1.0);\n    var uniformG=new CGL.Uniform(shader,'f','g',1.0);\n    var uniformB=new CGL.Uniform(shader,'f','b',1.0);\n\n\n    this.r.onValueChanged=function()\n    {\n        uniformR.setValue(self.r.val);\n    };\n\n    this.g.onValueChanged=function()\n    {\n        uniformG.setValue(self.g.val);\n    };\n\n    this.b.onValueChanged=function()\n    {\n        uniformB.setValue(self.b.val);\n    };\n\n    this.render.onTriggered=function()\n    {\n        if(!cgl.currentTextureEffect)return;\n        \n        cgl.setShader(shader);\n        cgl.currentTextureEffect.bind();\n\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, cgl.currentTextureEffect.getCurrentSourceTexture().tex );\n\n        cgl.currentTextureEffect.finish();\n        cgl.setPreviousShader();\n\n        self.trigger.call();\n    };\n};\n\nOps.Gl.TextureEffects.RgbMultiply.prototype = new Op();\n\n// ---------------------------------------------------------------------------------------------\n\nOps.Gl.TextureEffects.Vignette = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Vignette';\n\n    this.lensRadius1=this.addInPort(new Port(this,\"lensRadius1\"));\n    this.lensRadius2=this.addInPort(new Port(this,\"lensRadius2\"));\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var shader=new CGL.Shader();\n\n    var srcFrag=''\n        .endl()+'precision highp float;'\n        .endl()+'#ifdef HAS_TEXTURES'\n        .endl()+'  varying vec2 texCoord;'\n        .endl()+'  uniform sampler2D tex;'\n        .endl()+'#endif'\n        .endl()+'uniform float lensRadius1;'\n        .endl()+'uniform float lensRadius2;'\n        .endl()+''\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   vec4 col=vec4(1.0,0.0,0.0,1.0);'\n        .endl()+'   #ifdef HAS_TEXTURES'\n        .endl()+'       col=texture2D(tex,texCoord);'\n        .endl()+'       float dist = distance(texCoord, vec2(0.5,0.5));'\n        .endl()+'       col.rgb *= smoothstep(lensRadius1, lensRadius2, dist);'\n        .endl()+'   #endif'\n        .endl()+'   gl_FragColor = col;'\n        .endl()+'}';\n\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n    var textureUniform=new CGL.Uniform(shader,'t','tex',0);\n    var uniLensRadius1=new CGL.Uniform(shader,'f','lensRadius1',0.4);\n    var uniLensRadius2=new CGL.Uniform(shader,'f','lensRadius2',0.3);\n\n    this.lensRadius1.onValueChanged=function()\n    {\n        uniLensRadius1.setValue(self.lensRadius1.val);\n    };\n\n    this.lensRadius2.onValueChanged=function()\n    {\n        uniLensRadius2.setValue(self.lensRadius2.val);\n    };\n\n    this.lensRadius1.val=0.8;\n    this.lensRadius2.val=0.4;\n\n    this.render.onTriggered=function()\n    {\n        if(!cgl.currentTextureEffect)return;\n        \n        cgl.setShader(shader);\n        cgl.currentTextureEffect.bind();\n\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, cgl.currentTextureEffect.getCurrentSourceTexture().tex );\n\n        cgl.currentTextureEffect.finish();\n        cgl.setPreviousShader();\n\n        self.trigger.call();\n    };\n};\n\nOps.Gl.TextureEffects.Vignette.prototype = new Op();\n\n// ---------------------------------------------------------------------------------------------\n\nOps.Gl.TextureEffects.Blur = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Blur';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var shader=new CGL.Shader();\n\n    var srcFrag=''\n        .endl()+'precision highp float;'\n        .endl()+'#ifdef HAS_TEXTURES'\n        .endl()+'  varying vec2 texCoord;'\n        .endl()+'  uniform sampler2D tex;'\n        .endl()+'  uniform float dirX;'\n        .endl()+'  uniform float dirY;'\n        .endl()+'#endif'\n        .endl()+''\n        .endl()+'vec4 blur9(sampler2D texture, vec2 uv, vec2 red, vec2 dir)'\n        .endl()+'{'\n        .endl()+'   vec4 color = vec4(0.0);'\n        .endl()+'   vec2 offset1 = vec2(1.3846153846) * dir;'\n        .endl()+'   vec2 offset2 = vec2(3.2307692308) * dir;'\n        .endl()+'   color += texture2D(texture, uv) * 0.2270270270;'\n        .endl()+'   color += texture2D(texture, uv + (offset1 / red)) * 0.3162162162;'\n        .endl()+'   color += texture2D(texture, uv - (offset1 / red)) * 0.3162162162;'\n        .endl()+'   color += texture2D(texture, uv + (offset2 / red)) * 0.0702702703;'\n        .endl()+'   color += texture2D(texture, uv - (offset2 / red)) * 0.0702702703;'\n        .endl()+'   return color;'\n        .endl()+'}'\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   vec4 col=vec4(1.0,0.0,0.0,1.0);'\n        .endl()+'   #ifdef HAS_TEXTURES'\n        .endl()+'       col=blur9(tex,texCoord,vec2(512.0,512.0),vec2(dirX,dirY));'\n        // .endl()+ '       col=blur9(tex,texCoord,vec2(512.0,512.0),vec2(dirX*1.4,dirY*1.4));'\n        .endl()+'   #endif'\n        .endl()+'   gl_FragColor = col;'\n        .endl()+'}\\n';\n\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n    var textureUniform=new CGL.Uniform(shader,'t','tex',0);\n    var uniDirX=new CGL.Uniform(shader,'f','dirX',0);\n    var uniDirY=new CGL.Uniform(shader,'f','dirY',0);\n\n    this.render.onTriggered=function()\n    {\n        if(!cgl.currentTextureEffect)return;\n        cgl.setShader(shader);\n\n        // first pass\n\n        cgl.currentTextureEffect.bind();\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, cgl.currentTextureEffect.getCurrentSourceTexture().tex );\n\n        uniDirX.setValue(0.0);\n        uniDirY.setValue(1.0);\n\n        cgl.currentTextureEffect.finish();\n\n        // second pass\n\n        cgl.currentTextureEffect.bind();\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, cgl.currentTextureEffect.getCurrentSourceTexture().tex );\n\n        uniDirX.setValue(1.0);\n        uniDirY.setValue(0.0);\n\n        cgl.currentTextureEffect.finish();\n        \n        cgl.setPreviousShader();\n\n        self.trigger.call();\n    };\n};\n\nOps.Gl.TextureEffects.Blur.prototype = new Op();\n\n\n","\n//http://k3d.ivank.net/K3D.js\n//http://fhtr.blogspot.de/2009/12/3d-models-and-parsing-binary-data-with.html\n//https://github.com/gpjt/webgl-lessons/blob/master/lesson05/index.html\n\nOps.Gl=Ops.Gl || {};\n\n\nvar GL=null;\n\nOps.Gl.Renderer = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='render';\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var initTranslate=vec3.create();\n    vec3.set(initTranslate, 0,0,-2);\n\n    this.onAnimFrame=function(time)\n    {\n        cgl.canvasWidth=self.canvas.clientWidth;\n        cgl.canvasHeight=self.canvas.clientHeight;\n\n        gl.enable(gl.DEPTH_TEST);\n        GL.clearColor(0,0,0,1);\n        GL.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n        gl.viewport(0,0,self.canvas.clientWidth,self.canvas.clientHeight);\n        mat4.perspective(cgl.pMatrix,45, cgl.canvasWidth/cgl.canvasHeight, 0.01, 1100.0);\n\n        cgl.pushPMatrix();\n        cgl.pushMvMatrix();\n\n        mat4.identity(cgl.mvMatrix);\n        mat4.translate(cgl.mvMatrix,cgl.mvMatrix, initTranslate);\n\n        GL.enable(GL.BLEND);\n        GL.blendFunc(GL.SRC_ALPHA,GL.ONE_MINUS_SRC_ALPHA);\n\n        cgl.beginFrame();\n\n        self.trigger.call();\n\n        cgl.popMvMatrix();\n        cgl.popPMatrix();\n        cgl.endFrame();\n    };\n\n    this.canvas = document.getElementById(\"glcanvas\");\n    GL = this.canvas.getContext(\"experimental-webgl\");\n    gl = this.canvas.getContext(\"experimental-webgl\");\n\n};\n\nOps.Gl.Renderer.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.ClearColor = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='ClearColor';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.r=this.addInPort(new Port(this,\"r\"));\n    this.g=this.addInPort(new Port(this,\"g\"));\n    this.b=this.addInPort(new Port(this,\"b\"));\n\n    this.r.val=0.3;\n    this.g.val=0.3;\n    this.b.val=0.3;\n    this.render.onTriggered=function()\n    {\n        GL.clearColor(self.r.val,self.g.val,self.b.val,1);\n        GL.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n\n        self.trigger.call();\n    };\n};\n\nOps.Gl.ClearColor.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.ClearDepth = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='ClearDepth';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        GL.clear(GL.DEPTH_BUFFER_BIT);\n        self.trigger.call();\n    };\n};\n\nOps.Gl.ClearDepth.prototype = new Op();\n\n\n\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Wireframe = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Wireframe';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n    this.lineWidth=this.addInPort(new Port(this,\"lineWidth\"));\n\n    this.render.onTriggered=function()\n    {\n        cgl.wireframe=true;\n        gl.lineWidth(self.lineWidth.val);\n        self.trigger.call();\n        cgl.wireframe=false;\n\n    };\n\n    this.lineWidth.val=2;\n};\n\nOps.Gl.Wireframe.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Points = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Points';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n    this.pointSize=this.addInPort(new Port(this,\"pointSize\"));\n\n    this.render.onTriggered=function()\n    {\n        cgl.points=true;\n        // gl.pointSize(self.pointSize.val);\n        self.trigger.call();\n        cgl.points=false;\n\n    };\n\n    this.pointSize.val=5;\n};\n\nOps.Gl.Points.prototype = new Op();\n\n\n\n// --------------------------------------------------------------------------\n\n    \nOps.Gl.TextureEmpty = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='texture empty';\n    this.width=this.addInPort(new Port(this,\"width\",OP_PORT_TYPE_VALUE));\n    this.height=this.addInPort(new Port(this,\"height\",OP_PORT_TYPE_VALUE));\n\n    this.textureOut=this.addOutPort(new Port(this,\"texture\",OP_PORT_TYPE_TEXTURE));\n    this.tex=new CGL.Texture();\n    \n    var sizeChanged=function()\n    {\n        self.tex.setSize(self.width.val,self.height.val);\n        self.textureOut.val=self.tex;\n    };\n\n    this.width.onValueChanged=sizeChanged;\n    this.height.onValueChanged=sizeChanged;\n\n    this.width.val=8;\n    this.height.val=8;\n};\n\nOps.Gl.TextureEmpty.prototype = new Op();\n\n// --------------------------------------------------------------------------\n    \nOps.Gl.Texture = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='texture';\n    this.filename=this.addInPort(new Port(this,\"file\",OP_PORT_TYPE_VALUE));\n    this.textureOut=this.addOutPort(new Port(this,\"texture\",OP_PORT_TYPE_TEXTURE));\n    \n    this.filename.onValueChanged=function()\n    {\n        console.log('load texture...');\n        self.tex=CGL.Texture.load(self.filename.val,function()\n            {\n                console.log('tex load FINISHED!!!');\n\n                self.textureOut.val=self.tex;\n            });\n        self.textureOut.val=self.tex;\n\n    };\n\n    this.filename.val='assets/skull.png';\n};\n\nOps.Gl.Texture.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.TextureText = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='TextureText';\n    this.text=this.addInPort(new Port(this,\"text\"));\n    this.fontSize=this.addInPort(new Port(this,\"fontSize\"));\n    this.align=this.addInPort(new Port(this,\"align\"));\n    this.font=this.addInPort(new Port(this,\"font\"));\n    this.textureOut=this.addOutPort(new Port(this,\"texture\",OP_PORT_TYPE_TEXTURE));\n    \n    this.fontSize.val=30;\n    this.font.val='Arial';\n    this.align.val='center';\n\n    var canvas = document.createElement('canvas');\n    canvas.id     = \"hiddenCanvas\";\n    canvas.width  = 512;\n    canvas.height = 512;\n    canvas.style.display   = \"none\";\n    var body = document.getElementsByTagName(\"body\")[0];\n    body.appendChild(canvas);\n\n    var fontImage = document.getElementById('hiddenCanvas');\n    var ctx = fontImage.getContext('2d');\n\n    function refresh()\n    {\n        ctx.clearRect(0,0,canvas.width,canvas.height);\n        ctx.fillStyle = 'white';\n        ctx.font = self.fontSize.val+\"px \"+self.font.val;\n        ctx.textAlign = self.align.val;\n        if(self.align.val=='center') ctx.fillText(self.text.val, ctx.canvas.width / 2, ctx.canvas.height / 2);\n        if(self.align.val=='left') ctx.fillText(self.text.val, 0, ctx.canvas.height / 2);\n        if(self.align.val=='right') ctx.fillText(self.text.val, ctx.canvas.width, ctx.canvas.height / 2);\n        ctx.restore();\n\n        if(self.textureOut.val) self.textureOut.val.initTexture(fontImage);\n            else self.textureOut.val=new CGL.Texture.fromImage(fontImage);\n    }\n\n\n    this.align.onValueChanged=refresh;\n    this.text.onValueChanged=refresh;\n    this.fontSize.onValueChanged=refresh;\n    this.font.onValueChanged=refresh;\n    this.text.val='cables';\n};\n\nOps.Gl.TextureText.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Meshes=Ops.Gl.Meshes || {};\nOps.Gl.Meshes.Plotter = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Plotter';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.v=this.addInPort(new Port(this,\"value\"));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        gl.vertexAttribPointer(cgl.getShader().getAttrVertexPos(),self.buffer.itemSize, gl.FLOAT, false, 0, 0);\n        cgl.getShader().bind();\n        gl.bindBuffer(gl.ARRAY_BUFFER, self.buffer);\n        gl.drawArrays(gl.LINE_STRIP, 0, self.buffer.numItems);\n\n        self.trigger.call();\n    };\n\n    this.buffer = gl.createBuffer();\n    \n    var num=50;\n    this.vertices = [];\n    for(var i=0;i<num;i++)\n    {\n        this.vertices.push(1/num*i);\n        this.vertices.push(Math.random()-0.5);\n        this.vertices.push(0);\n    }\n\n    function bufferData()\n    {\n        gl.lineWidth(4);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, self.buffer);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(self.vertices), gl.STATIC_DRAW);\n        self.buffer.itemSize = 3;\n        self.buffer.numItems = num;\n    }\n    bufferData();\n\n    this.v.onValueChanged=function()\n    {\n        self.vertices.splice(0,3);\n        self.vertices.push(1);\n        self.vertices.push(self.v.val);\n        self.vertices.push(0);\n\n        for(var i=0;i<num*3;i+=3)\n        {\n            self.vertices[i]=1/num*i;\n        }\n\n        bufferData();\n    };\n};\n\nOps.Gl.Meshes.Plotter.prototype = new Op();\n\n// ----------------------------------------------------------------\n\n\nOps.Gl.Shader= Ops.Gl.Shader || {};\n\nOps.Gl.Shader.Schwurbel = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Schwurbel';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.timer=this.addInPort(new Port(this,\"time\"));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.doRender=function()\n    {\n        cgl.setShader(shader);\n\n        if(!self.timer.uniLoc)\n        {\n            shader.bind();\n            self.timer.uniLoc=gl.getUniformLocation(shader.getProgram(), \"time\");\n        }\n        gl.uniform1f(self.timer.uniLoc, self.timer.val);\n\n        cgl.setPreviousShader(shader);\n\n        self.trigger.call();\n    };\n\n    var srcFrag=''+\n        'precision mediump float;\\n'+\n        'uniform float time;\\n'+\n        '\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        'float c=sqrt(sin(time*0.02)*cos((time+gl_FragCoord.y)*0.02)+sin(time+gl_FragCoord.x*0.02)*sin(time+gl_FragCoord.y*0.02));\\n'+\n        'gl_FragColor = vec4( c,c,c,1.0);\\n'+\n        '}\\n';\n\n    var shader=new CGL.Shader();\n    shader.compile(shader.getDefaultVertexShader(),srcFrag);\n\n    this.doRender();\n    this.render.onTriggered=this.doRender;\n};\n\nOps.Gl.Shader.Schwurbel.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Shader.Noise = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Noise';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var timeUniform=-1;\n    var timeStart=-1;\n\n    this.doRender=function()\n    {\n        cgl.setShader(shader);\n        if(timeUniform==-1)\n        {\n            timeStart=Date.now();\n            shader.bind();\n            timeUniform=gl.getUniformLocation(shader.getProgram(), \"time\");\n        }\n\n        gl.uniform1f(timeUniform, (Date.now()-timeStart)/1000);\n        cgl.setPreviousShader();\n\n        self.trigger.call();\n    };\n\n    var srcFrag=''+\n        'precision mediump float;\\n'+\n        'uniform float time;\\n'+\n        '\\n'+\n        'float random(vec2 co)\\n'+\n        '{\\n'+\n        '   return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\\n'+\n        '}\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        '   float c=random(time*gl_FragCoord.xy);'+\n        '   gl_FragColor = vec4( c,c,c,1.0);\\n'+\n        '}\\n';\n\n\n    var shader=new CGL.Shader();\n    shader.compile(shader.getDefaultVertexShader(),srcFrag);\n\n    this.doRender();\n    this.render.onTriggered=this.doRender;\n};\n\nOps.Gl.Shader.Noise.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Matrix={};\n\nOps.Gl.Matrix.Translate = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='translate';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.x=this.addInPort(new Port(this,\"x\"));\n    this.y=this.addInPort(new Port(this,\"y\"));\n    this.z=this.addInPort(new Port(this,\"z\"));\n    this.x.val=0.0;\n    this.y.val=0.0;\n    this.z.val=0.0;\n    \n    var vec=vec3.create();\n\n    this.render.onTriggered=function()\n    {\n        vec3.set(vec, self.x.val,self.y.val,self.z.val);\n        cgl.pushMvMatrix();\n        mat4.translate(cgl.mvMatrix,cgl.mvMatrix, vec);\n        self.trigger.call();\n        cgl.popMvMatrix();\n    };\n};\n\nOps.Gl.Matrix.Translate.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Matrix.Scale = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='scale';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.scale=this.addInPort(new Port(this,\"scale\"));\n    \n    var vScale=vec3.create();\n    var transMatrix = mat4.create();\n    mat4.identity(transMatrix);\n\n    var doScale=false;\n\n    this.render.onTriggered=function()\n    {\n        cgl.pushMvMatrix();\n        mat4.multiply(cgl.mvMatrix,cgl.mvMatrix,transMatrix);\n        self.trigger.call();\n        cgl.popMvMatrix();\n    };\n\n    var updateMatrix=function()\n    {\n        mat4.identity(transMatrix);\n        mat4.scale(transMatrix,transMatrix, vScale);\n    };\n\n    this.scaleChanged=function()\n    {\n        doScale=false;\n        vec3.set(vScale, self.scale.val,self.scale.val,self.scale.val);\n        updateMatrix();\n    };\n\n    this.scale.onValueChanged=this.scaleChanged;\n    this.scale.val=1.0;\n    updateMatrix();\n};\n\nOps.Gl.Matrix.Scale.prototype = new Op();\n\n\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Matrix.LookatCamera = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='LookatCamera';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.centerX=this.addInPort(new Port(this,\"centerX\"));\n    this.centerY=this.addInPort(new Port(this,\"centerY\"));\n    this.centerZ=this.addInPort(new Port(this,\"centerZ\"));\n\n    this.eyeX=this.addInPort(new Port(this,\"eyeX\"));\n    this.eyeY=this.addInPort(new Port(this,\"eyeY\"));\n    this.eyeZ=this.addInPort(new Port(this,\"eyeZ\"));\n\n    this.vecUpX=this.addInPort(new Port(this,\"upX\"));\n    this.vecUpY=this.addInPort(new Port(this,\"upY\"));\n    this.vecUpZ=this.addInPort(new Port(this,\"upZ\"));\n\n    this.centerX.val=0;\n    this.centerY.val=0;\n    this.centerZ.val=0;\n\n    this.eyeX.val=5;\n    this.eyeY.val=5;\n    this.eyeZ.val=5;\n\n    this.vecUpX.val=0;\n    this.vecUpY.val=1;\n    this.vecUpZ.val=0;\n\n    \n    var vUp=vec3.create();\n    var vEye=vec3.create();\n    var vCenter=vec3.create();\n    var transMatrix = mat4.create();\n    mat4.identity(transMatrix);\n\n    this.render.onTriggered=function()\n    {\n        cgl.pushMvMatrix();\n\n        vec3.set(vUp, self.vecUpX.val,self.vecUpY.val,self.vecUpZ.val);\n        vec3.set(vEye, self.eyeX.val,self.eyeY.val,self.eyeZ.val);\n        vec3.set(vCenter, self.centerX.val,self.centerY.val,self.centerZ.val);\n\n        mat4.lookAt(cgl.mvMatrix, vEye, vCenter, vUp);\n        self.trigger.call();\n        cgl.popMvMatrix();\n    };\n\n};\n\nOps.Gl.Matrix.LookatCamera.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Matrix.Transform = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    this.name='transform';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.posX=this.addInPort(new Port(this,\"posX\"));\n    this.posY=this.addInPort(new Port(this,\"posY\"));\n    this.posZ=this.addInPort(new Port(this,\"posZ\"));\n\n    this.scaleX=this.addInPort(new Port(this,\"scaleX\"));\n    this.scaleY=this.addInPort(new Port(this,\"scaleY\"));\n    this.scaleZ=this.addInPort(new Port(this,\"scaleZ\"));\n\n    this.rotX=this.addInPort(new Port(this,\"rotX\"));\n    this.rotY=this.addInPort(new Port(this,\"rotY\"));\n    this.rotZ=this.addInPort(new Port(this,\"rotZ\"));\n    \n    var vPos=vec3.create();\n    var vScale=vec3.create();\n    var transMatrix = mat4.create();\n    mat4.identity(transMatrix);\n\n    var doScale=false;\n    var doTranslate=false;\n\n    this.render.onTriggered=function()\n    {\n        cgl.pushMvMatrix();\n        mat4.multiply(cgl.mvMatrix,cgl.mvMatrix,transMatrix);\n        self.trigger.call();\n        cgl.popMvMatrix();\n    };\n\n    var updateMatrix=function()\n    {\n        mat4.identity(transMatrix);\n        if(doTranslate)mat4.translate(transMatrix,transMatrix, vPos);\n\n        if(self.rotX.val!==0)mat4.rotateX(transMatrix,transMatrix, self.rotX.val*CGL.DEG2RAD);\n        if(self.rotY.val!==0)mat4.rotateY(transMatrix,transMatrix, self.rotY.val*CGL.DEG2RAD);\n        if(self.rotZ.val!==0)mat4.rotateZ(transMatrix,transMatrix, self.rotZ.val*CGL.DEG2RAD);\n\n        if(doScale)mat4.scale(transMatrix,transMatrix, vScale);\n    };\n\n    this.translateChanged=function()\n    {\n        doTranslate=false;\n        if(self.posX.val!==0.0 || self.posY.val!==0.0 || self.posZ.val!==0.0)doTranslate=true;\n        vec3.set(vPos, self.posX.val,self.posY.val,self.posZ.val);\n        updateMatrix();\n    };\n\n    this.scaleChanged=function()\n    {\n        doScale=false;\n        if(self.scaleX.val!==0.0 || self.scaleY.val!==0.0 || self.scaleZ.val!==0.0)doScale=true;\n        vec3.set(vScale, self.scaleX.val,self.scaleY.val,self.scaleZ.val);\n        updateMatrix();\n    };\n\n    this.rotChanged=function()\n    {\n        updateMatrix();\n    };\n\n    this.rotX.onValueChanged=this.rotChanged;\n    this.rotY.onValueChanged=this.rotChanged;\n    this.rotZ.onValueChanged=this.rotChanged;\n\n    this.scaleX.onValueChanged=this.scaleChanged;\n    this.scaleY.onValueChanged=this.scaleChanged;\n    this.scaleZ.onValueChanged=this.scaleChanged;\n\n    this.posX.onValueChanged=this.translateChanged;\n    this.posY.onValueChanged=this.translateChanged;\n    this.posZ.onValueChanged=this.translateChanged;\n\n    this.rotX.val=0.0;\n    this.rotY.val=0.0;\n    this.rotZ.val=0.0;\n\n    this.scaleX.val=1.0;\n    this.scaleY.val=1.0;\n    this.scaleZ.val=1.0;\n\n    this.posX.val=0.0;\n    this.posY.val=0.0;\n    this.posZ.val=0.0;\n\n    updateMatrix();\n};\n\nOps.Gl.Matrix.Transform.prototype = new Op();\n\n// ----------------------------------------------------\n\nOps.RandomCluster = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='random cluster';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.num=this.addInPort(new Port(this,\"num\"));\n    this.size=this.addInPort(new Port(this,\"size\"));\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION)) ;\n    this.idx=this.addOutPort(new Port(this,\"index\")) ;\n    this.rnd=this.addOutPort(new Port(this,\"rnd\")) ;\n    this.randoms=[];\n    this.randomsRot=[];\n    this.randomsFloats=[];\n\n    var transVec=vec3.create();\n\n    this.exe.onTriggered=function()\n    {\n        for(var i=0;i<self.randoms.length;i++)\n        {\n            cgl.pushMvMatrix();\n\n            mat4.translate(cgl.mvMatrix,cgl.mvMatrix, self.randoms[i]);\n\n            mat4.rotateX(cgl.mvMatrix,cgl.mvMatrix, self.randomsRot[i][0]);\n            mat4.rotateY(cgl.mvMatrix,cgl.mvMatrix, self.randomsRot[i][1]);\n            mat4.rotateZ(cgl.mvMatrix,cgl.mvMatrix, self.randomsRot[i][2]);\n\n            self.idx.val=i;\n            self.rnd.val=self.randomsFloats[i];\n\n            self.trigger.call();\n\n            cgl.popMvMatrix();\n        }\n    };\n\n    function reset()\n    {\n        self.randoms=[];\n        self.randomsRot=[];\n        self.randomsFloats=[];\n\n        for(var i=0;i<self.num.val;i++)\n        {\n            self.randomsFloats.push(Math.random());\n            self.randoms.push(vec3.fromValues(\n                (Math.random()-0.5)*self.size.val,\n                (Math.random()-0.5)*self.size.val,\n                (Math.random()-0.5)*self.size.val\n                ));\n            self.randomsRot.push(vec3.fromValues(\n                Math.random()*360*CGL.DEG2RAD,\n                Math.random()*360*CGL.DEG2RAD,\n                Math.random()*360*CGL.DEG2RAD\n                ));\n        }\n    }\n\n    this.num.onValueChanged=reset;\n    this.size.onValueChanged=reset;\n\n    this.num.val=100;\n};\n\nOps.RandomCluster.prototype = new Op();\n\n\n\n\n\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Render2Texture = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='render to texture';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var frameBuf;\n    var texture=new CGL.Texture();\n\n    this.width=this.addInPort(new Port(this,\"texture width\"));\n    this.height=this.addInPort(new Port(this,\"texture height\"));\n    this.tex=this.addOutPort(new Port(this,\"texture\",OP_PORT_TYPE_TEXTURE));\n\n    this.width.val=1024;\n    this.height.val=1024;\n\n    texture.setSize(this.width.val,this.height.val);\n\n    frameBuf = GL.createFramebuffer();\n    GL.bindFramebuffer(GL.FRAMEBUFFER, frameBuf);\n\n    var renderbuffer = GL.createRenderbuffer();\n    GL.bindRenderbuffer(GL.RENDERBUFFER, renderbuffer);\n    GL.renderbufferStorage(GL.RENDERBUFFER, GL.DEPTH_COMPONENT16, this.width.val,this.height.val);\n    GL.framebufferTexture2D(GL.FRAMEBUFFER, GL.COLOR_ATTACHMENT0, GL.TEXTURE_2D, texture.tex, 0);\n    GL.framebufferRenderbuffer(GL.FRAMEBUFFER, GL.DEPTH_ATTACHMENT, GL.RENDERBUFFER, renderbuffer);\n    GL.bindTexture(GL.TEXTURE_2D, null);\n    GL.bindRenderbuffer(GL.RENDERBUFFER, null);\n    GL.bindFramebuffer(GL.FRAMEBUFFER, null);\n\n    self.tex.val=texture;\n\n    this.render.onTriggered=function()\n    {\n        cgl.pushMvMatrix();\n\n        GL.bindFramebuffer(GL.FRAMEBUFFER, frameBuf);\n        \n        cgl.pushPMatrix();\n        gl.viewport(0, 0, 1920,1080);\n        mat4.perspective(cgl.pMatrix,45, self.width.val/self.height.val, 0.01, 1100.0);\n\n        self.trigger.call();\n\n        cgl.popPMatrix();\n        \n        GL.bindFramebuffer(GL.FRAMEBUFFER, null);\n        \n        cgl.popMvMatrix();\n        gl.viewport(0, 0, cgl.canvasWidth,cgl.canvasHeight);\n    };\n\n\n};\n\nOps.Gl.Render2Texture.prototype = new Op();\n\n","\nOps.Gl.Shader= Ops.Gl.Shader || {};\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.Shader.ShowNormalsMaterial = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='ShowNormalsMaterial';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.doRender=function()\n    {\n        cgl.setShader(shader);\n        self.trigger.call();\n        cgl.setPreviousShader();\n    };\n\n    var srcFrag=''\n        .endl()+'precision highp float;'\n        .endl()+'varying vec3 norm;'\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   vec4 col=vec4(norm.x,norm.y,norm.z,1.0);'\n        .endl()+'   gl_FragColor = col;'\n        .endl()+'}';\n\n\n    var shader=new CGL.Shader();\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n\n    this.render.onTriggered=this.doRender;\n    this.doRender();\n};\n\nOps.Gl.Shader.ShowNormalsMaterial.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\n\n\nOps.Gl.Shader.BasicMaterial = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='BasicMaterial';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.doRender=function()\n    {\n        cgl.setShader(shader);\n\n        if(self.texture.val)\n        {\n            gl.activeTexture(gl.TEXTURE0);\n            gl.bindTexture(gl.TEXTURE_2D, self.texture.val.tex);\n        }\n\n        if(self.textureOpacity.val)\n        {\n            gl.activeTexture(gl.TEXTURE1);\n            gl.bindTexture(gl.TEXTURE_2D, self.textureOpacity.val.tex);\n        }\n\n        self.trigger.call();\n\n\n        cgl.setPreviousShader();\n    };\n\n    var srcFrag=''\n        .endl()+'precision highp float;'\n        .endl()+'#ifdef HAS_TEXTURES'\n        .endl()+'   varying vec2 texCoord;'\n        .endl()+'   #ifdef HAS_TEXTURE_DIFFUSE'\n        .endl()+'       uniform sampler2D tex;'\n        .endl()+'   #endif'\n        .endl()+'   #ifdef HAS_TEXTURE_OPACITY'\n        .endl()+'       uniform sampler2D texOpacity;'\n        .endl()+'   #endif'\n        .endl()+'#endif'\n        .endl()+'uniform float r;'\n        .endl()+'uniform float g;'\n        .endl()+'uniform float b;'\n        .endl()+'uniform float a;'\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   vec4 col=vec4(r,g,b,a);'\n        .endl()+'   #ifdef HAS_TEXTURES'\n        .endl()+'      #ifdef HAS_TEXTURE_DIFFUSE'\n        .endl()+'           col=texture2D(tex,texCoord);'\n        .endl()+'       #endif'\n        .endl()+'      #ifdef HAS_TEXTURE_OPACITY'\n        .endl()+'           col.a*=texture2D(texOpacity,texCoord).g;'\n        .endl()+'       #endif'\n        .endl()+'       col.a*=a;'\n        .endl()+'   #endif'\n        .endl()+'gl_FragColor = col;'\n        .endl()+'}';\n\n\n    var shader=new CGL.Shader();\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n\n    this.r=this.addInPort(new Port(this,\"r\"));\n    this.r.onValueChanged=function()\n    {\n        if(!self.r.uniform) self.r.uniform=new CGL.Uniform(shader,'f','r',self.r.val);\n        else self.r.uniform.setValue(self.r.val);\n    };\n\n    this.g=this.addInPort(new Port(this,\"g\"));\n    this.g.onValueChanged=function()\n    {\n        if(!self.g.uniform) self.g.uniform=new CGL.Uniform(shader,'f','g',self.g.val);\n        else self.g.uniform.setValue(self.g.val);\n    };\n\n    this.b=this.addInPort(new Port(this,\"b\"));\n    this.b.onValueChanged=function()\n    {\n        if(!self.b.uniform) self.b.uniform=new CGL.Uniform(shader,'f','b',self.b.val);\n        else self.b.uniform.setValue(self.b.val);\n    };\n\n    this.a=this.addInPort(new Port(this,\"a\"));\n    this.a.onValueChanged=function()\n    {\n        if(!self.a.uniform) self.a.uniform=new CGL.Uniform(shader,'f','a',self.a.val);\n        else self.a.uniform.setValue(self.a.val);\n    };\n\n    this.r.val=Math.random();\n    this.g.val=Math.random();\n    this.b.val=Math.random();\n    this.a.val=1.0;\n\n\n    this.render.onTriggered=this.doRender;\n    this.texture=this.addInPort(new Port(this,\"texture\",OP_PORT_TYPE_TEXTURE));\n    this.textureUniform=null;\n\n    this.texture.onValueChanged=function()\n    {\n        if(self.texture.val)\n        {\n            if(self.textureUniform!==null)return;\n            console.log('TEXTURE ADDED');\n            shader.removeUniform('tex');\n            shader.define('HAS_TEXTURE_DIFFUSE');\n            self.textureUniform=new CGL.Uniform(shader,'t','tex',0);\n        }\n        else\n        {\n            console.log('TEXTURE REMOVED');\n            shader.removeUniform('tex');\n            shader.removeDefine('HAS_TEXTURE_DIFFUSE');\n            self.textureUniform=null;\n        }\n    };\n\n\n\n    this.textureOpacity=this.addInPort(new Port(this,\"textureOpacity\",OP_PORT_TYPE_TEXTURE));\n    this.textureOpacityUniform=null;\n\n    this.textureOpacity.onValueChanged=function()\n    {\n        if(self.textureOpacity.val)\n        {\n            if(self.textureOpacityUniform!==null)return;\n            console.log('TEXTURE OPACITY ADDED');\n            shader.removeUniform('texOpacity');\n            shader.define('HAS_TEXTURE_OPACITY');\n            self.textureOpacityUniform=new CGL.Uniform(shader,'t','texOpacity',1);\n        }\n        else\n        {\n            console.log('TEXTURE OPACITY REMOVED');\n            shader.removeUniform('texOpacity');\n            shader.removeDefine('HAS_TEXTURE_OPACITY');\n            self.textureOpacityUniform=null;\n        }\n    };\n\n\n\n    this.doRender();\n};\n\nOps.Gl.Shader.BasicMaterial.prototype = new Op();\n\n\n\n\n\n// --------------------------------------------------------------------------\n\n","\nOps.Gl.Meshes=Ops.Gl.Meshes || {};\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Meshes.Triangle = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Triangle';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        self.mesh.render(cgl.getShader());\n        self.trigger.call();\n    };\n\n    var geom=new CGL.Geometry();\n    geom.vertices = [\n         0.0,  1.0,  0.0,\n        -1.0,  -1.0,  0.0,\n         1.0, -1.0,  0.0\n    ];\n\n    geom.verticesIndices = [\n        0, 1, 2\n    ];\n    this.mesh=new CGL.Mesh(geom);\n};\n\nOps.Gl.Meshes.Triangle.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Meshes.Rectangle = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='rectangle';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n    this.width=this.addInPort(new Port(this,\"width\"));\n    this.height=this.addInPort(new Port(this,\"height\"));\n    this.width.val=1.0;\n    this.height.val=1.0;\n\n    this.render.onTriggered=function()\n    {\n        self.mesh.render(cgl.getShader());\n        self.trigger.call();\n    };\n\n    var geom=new CGL.Geometry();\n    this.mesh=null;\n\n    function rebuild()\n    {\n        geom.vertices = [\n             self.width.val/2,  self.height.val/2,  0.0,\n            -self.width.val/2,  self.height.val/2,  0.0,\n             self.width.val/2, -self.height.val/2,  0.0,\n            -self.width.val/2, -self.height.val/2,  0.0\n        ];\n\n        geom.texCoords = [\n             1.0, 1.0,\n             0.0, 1.0,\n             1.0, 0.0,\n             0.0, 0.0\n        ];\n\n        geom.verticesIndices = [\n            0, 1, 2,\n            3, 1, 2\n        ];\n        if(!self.mesh) self.mesh=new CGL.Mesh(geom);\n        self.mesh.setGeom(geom);\n    }\n    rebuild();\n\n    this.width.onValueChanged=rebuild;\n    this.height.onValueChanged=rebuild;\n};\n\nOps.Gl.Meshes.Rectangle.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Meshes.FullscreenRectangle = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='fullscreen rectangle';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        cgl.pushPMatrix();\n        mat4.identity(cgl.pMatrix);\n\n        cgl.pushMvMatrix();\n        mat4.identity(cgl.mvMatrix);\n\n        self.mesh.render(cgl.getShader());\n        self.trigger.call();\n\n        cgl.popPMatrix();\n        cgl.popMvMatrix();\n\n    };\n\n    var geom=new CGL.Geometry();\n    geom.vertices = [\n         1.0,  1.0,  0.0,\n        -1.0,  1.0,  0.0,\n         1.0, -1.0,  0.0,\n        -1.0, -1.0,  0.0\n    ];\n\n    geom.texCoords = [\n         1.0, 1.0,\n         0.0, 1.0,\n         1.0, 0.0,\n         0.0, 0.0\n    ];\n\n    geom.verticesIndices = [\n        0, 1, 2,\n        3, 1, 2\n    ];\n    this.mesh=new CGL.Mesh(geom);\n};\n\nOps.Gl.Meshes.FullscreenRectangle.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Meshes.Circle = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Circle';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n\n    this.segments=this.addInPort(new Port(this,\"segments\"));\n    this.radius=this.addInPort(new Port(this,\"radius\"));\n    this.percent=this.addInPort(new Port(this,\"percent\"));\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        mesh.render(cgl.getShader());\n        self.trigger.call();\n    };\n\n    this.segments.val=20;\n    this.radius.val=1;\n    this.percent.val=1;\n\n    var geom=new CGL.Geometry();\n    var mesh=new CGL.Mesh(geom);\n\n    function calc()\n    {\n        geom.clear();\n        var oldPosX=0;\n        var oldPosY=0;\n\n        for (var i=0; i <= self.segments.val*self.percent.val; i++)\n        {\n            var degInRad = (360/self.segments.val)*i*CGL.DEG2RAD;\n            var posx=Math.cos(degInRad)*self.radius.val;\n            var posy=Math.sin(degInRad)*self.radius.val;\n\n            geom.addFace(\n                        [posx,posy,0],\n                        [oldPosX,oldPosY,0],\n                        [0,0,0]\n                        );\n\n            geom.texCoords.push(0,0,0,0,0,0);\n\n            oldPosX=posx;\n            oldPosY=posy;\n        }\n\n        mesh.setGeom(geom);\n    }\n\n    this.segments.onValueChanged=calc;\n    this.radius.onValueChanged=calc;\n    this.percent.onValueChanged=calc;\n    calc();\n};\n\nOps.Gl.Meshes.Circle.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Meshes.ObjMesh = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='OBJ Mesh';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.mesh=null;\n\n    this.render.onTriggered=function()\n    {\n        if(self.mesh) self.mesh.render(cgl.getShader());\n\n        self.trigger.call();\n    };\n\n    ajaxRequest('assets/skull.obj',function(response)\n    {\n        console.log(response);\n                \n        var r=parseOBJ(response);\n\n        unwrap = function(ind, crd, cpi)\n        {\n            var ncrd = new Array(Math.floor(ind.length/3)*cpi);\n            for(var i=0; i<ind.length; i++)\n            {\n                for(var j=0; j<cpi; j++)\n                {\n                    ncrd[i*cpi+j] = crd[ind[i]*cpi+j];\n                }\n            }\n            return ncrd;\n        };\n\n        var l=r.verticesIndices.length;\n            r.vertices = unwrap(r.verticesIndices, r.vertices, 3);\n            r.texCoords = unwrap(r.texCoordsIndices  , r.texCoords  , 2);\n            r.vertexNormals = unwrap(r.vertexNormalIndices  , r.vertexNormals  , 3);\n            r.verticesIndices = [];\n            for(var i=0; i<l; i++) r.verticesIndices.push(i);\n        \n        self.mesh=new CGL.Mesh(r);\n    });\n};\n\nOps.Gl.Meshes.ObjMesh.prototype = new Op();\n\n// ----------------------------------------------------------------\n\nOps.Gl.Meshes.Cube = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Cube';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.mesh=null;\n\n    this.render.onTriggered=function()\n    {\n        if(self.mesh!==null) self.mesh.render(cgl.getShader());\n        self.trigger.call();\n    };\n\n    var geom=new CGL.Geometry();\n\n        geom.vertices = [\n          // Front face\n          -1.0, -1.0,  1.0,\n           1.0, -1.0,  1.0,\n           1.0,  1.0,  1.0,\n          -1.0,  1.0,  1.0,\n          // Back face\n          -1.0, -1.0, -1.0,\n          -1.0,  1.0, -1.0,\n           1.0,  1.0, -1.0,\n           1.0, -1.0, -1.0,\n          // Top face\n          -1.0,  1.0, -1.0,\n          -1.0,  1.0,  1.0,\n           1.0,  1.0,  1.0,\n           1.0,  1.0, -1.0,\n          // Bottom face\n          -1.0, -1.0, -1.0,\n           1.0, -1.0, -1.0,\n           1.0, -1.0,  1.0,\n          -1.0, -1.0,  1.0,\n          // Right face\n           1.0, -1.0, -1.0,\n           1.0,  1.0, -1.0,\n           1.0,  1.0,  1.0,\n           1.0, -1.0,  1.0,\n          // Left face\n          -1.0, -1.0, -1.0,\n          -1.0, -1.0,  1.0,\n          -1.0,  1.0,  1.0,\n          -1.0,  1.0, -1.0,\n        ];\n\n        geom.texCoords = [\n          // Front face\n          0.0, 0.0,\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n          // Back face\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n          0.0, 0.0,\n          // Top face\n          0.0, 1.0,\n          0.0, 0.0,\n          1.0, 0.0,\n          1.0, 1.0,\n          // Bottom face\n          1.0, 1.0,\n          0.0, 1.0,\n          0.0, 0.0,\n          1.0, 0.0,\n          // Right face\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n          0.0, 0.0,\n          // Left face\n          0.0, 0.0,\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n        ];\n\n        geom.vertexNormals = [\n            // Front face\n             0.0,  0.0,  1.0,\n             0.0,  0.0,  1.0,\n             0.0,  0.0,  1.0,\n             0.0,  0.0,  1.0,\n\n            // Back face\n             0.0,  0.0, -1.0,\n             0.0,  0.0, -1.0,\n             0.0,  0.0, -1.0,\n             0.0,  0.0, -1.0,\n\n            // Top face\n             0.0,  1.0,  0.0,\n             0.0,  1.0,  0.0,\n             0.0,  1.0,  0.0,\n             0.0,  1.0,  0.0,\n\n            // Bottom face\n             0.0, -1.0,  0.0,\n             0.0, -1.0,  0.0,\n             0.0, -1.0,  0.0,\n             0.0, -1.0,  0.0,\n\n            // Right face\n             1.0,  0.0,  0.0,\n             1.0,  0.0,  0.0,\n             1.0,  0.0,  0.0,\n             1.0,  0.0,  0.0,\n\n            // Left face\n            -1.0,  0.0,  0.0,\n            -1.0,  0.0,  0.0,\n            -1.0,  0.0,  0.0,\n            -1.0,  0.0,  0.0\n        ];\n\n\n        geom.verticesIndices = [\n            0, 1, 2,      0, 2, 3,    // Front face\n            4, 5, 6,      4, 6, 7,    // Back face\n            8, 9, 10,     8, 10, 11,  // Top face\n            12, 13, 14,   12, 14, 15, // Bottom face\n            16, 17, 18,   16, 18, 19, // Right face\n            20, 21, 22,   20, 22, 23  // Left face\n        ];\n\n    this.mesh=new CGL.Mesh(geom);\n};\n\nOps.Gl.Meshes.Cube.prototype = new Op();\n\n// ----------------------------------------------------------------\n\n","// https://github.com/automat/foam-gl\n// http://howlerjs.com/\n//http://learningwebgl.com/lessons/lesson01/index.html\n\n\nOps.Log = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='logger';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.input=this.addInPort(new Port(this,\"input\"));\n    this.input.val='';\n\n    this.exec=function()\n    {\n        console.log(\"[log] \" + self.input.val);\n    };\n\n    this.exe.onTriggered=this.exec;\n    this.input.onValueChanged=this.exec;\n};\nOps.Log.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\n\nOps.CallsPerSecond = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='CallsPerSecond';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.timeStart=0;\n    this.cps=0;\n\n    this.exe.onTriggered=function()\n    {\n        if(self.timeStart===0)self.timeStart=Date.now();\n        var now = Date.now();\n\n        if(now-self.timeStart>1000)\n        {\n            self.timeStart=Date.now();\n            console.log('cps: '+self.cps);\n            self.cps=0;\n        }\n\n        self.cps++;\n    };\n};\nOps.CallsPerSecond.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\nOps.Value = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Value';\n    this.v=this.addInPort(new Port(this,\"value\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.v.val;\n    };\n\n    this.v.onValueChanged=this.exec;\n};\n\nOps.Value.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\n\nOps.TimeLineTime = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='TimeLineTime';\n    this.theTime=this.addOutPort(new Port(this,\"time\"));\n\n    this.onAnimFrame=function(time)\n    {\n        this.theTime.val=time;\n    };\n\n};\nOps.TimeLineTime.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\n\n\n\nOps.Repeat = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Repeat';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.num=this.addInPort(new Port(this,\"num\"));\n    this.num.val=5;\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n    this.idx=this.addOutPort(new Port(this,\"index\"));\n\n    this.exe.onTriggered=function()\n    {\n\n        for(var i=0;i<self.num.value;i++)\n        {\n            self.idx.val=i;\n            self.trigger.call();\n        }\n\n    };\n};\nOps.Repeat.prototype = new Op();\n\n\n\n\n// ---------------------------------------------------------------------------\n\n\nOps.IfTrueThen = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='if true then';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.bool=this.addInPort(new Port(this,\"boolean\"));\n    this.bool.val=false;\n\n    this.triggerThen=this.addOutPort(new Port(this,\"then\",OP_PORT_TYPE_FUNCTION));\n    this.triggerElse=this.addOutPort(new Port(this,\"else\",OP_PORT_TYPE_FUNCTION));\n\n    this.exe.onTriggered=function()\n    {\n        if(self.bool.val===true)\n        {\n            self.triggerThen.call();\n        }\n        else\n        {\n            self.triggerElse.call();\n        }\n    };\n\n    this.bool.onValueChanged=function()\n    {\n        self.exe.onTriggered();\n    };\n\n};\nOps.IfTrueThen.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------\n\n\nOps.Group = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='group';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.triggers=[];\n\n    for(var i=0;i<10;i++)\n    {\n        this.triggers.push( this.addOutPort(new Port(this,\"trigger \"+i,OP_PORT_TYPE_FUNCTION)) );\n    }\n\n    this.exe.onTriggered=function()\n    {\n        for(var i in self.triggers)\n        {\n            self.triggers[i].call();\n        }\n\n    };\n\n\n};\nOps.Group.prototype = new Op();\n\n\n\n\n// ---------------------------------------------------------------------------\n\nOps.Interval = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='Interval';\n    this.timeOutId=-1;\n    this.interval=this.addInPort(new Port(this,\"interval\"));\n    this.interval.val=1000;\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.exec=function()\n    {\n        if(this.timeOutId!=-1)return;\n        var self=this;\n\n        this.timeOutId=setTimeout(function()\n        {\n            self.timeOutId=-1;\n            self.trigger.call();\n            self.exec();\n        },\n        this.interval.val );\n    };\n\n    this.exec();\n\n};\n\nOps.Interval.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\n// --------------------------------------------------------------------------\n\nOps.Anim={};\n\nOps.Anim.SinusAnim = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='SinusAnim';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    var self=this;\n\n    this.exe.onTriggered=function()\n    {\n        self.result.val=Math.sin(Date.now()/1000.0);\n    };\n\n    this.exe.onTriggered();\n\n};\n\nOps.Anim.SinusAnim.prototype = new Op();\n\n\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Anim.RelativeTime = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='RelativeTime';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    var self=this;\n    var startTime=Date.now()/1000.0;\n\n    this.exe.onTriggered=function()\n    {\n        self.result.val=Date.now()/1000.0-startTime;\n    };\n\n    this.exe.onTriggered();\n\n};\n\nOps.Anim.RelativeTime.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Anim.TimeDiff = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='TimeDiff';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    var self=this;\n    var lastTime=Date.now();\n\n    this.exe.onTriggered=function()\n    {\n        self.result.val=(Date.now()-lastTime);\n        lastTime=Date.now();\n        self.trigger.call();\n    };\n\n    this.exe.onTriggered();\n\n};\n\nOps.Anim.TimeDiff.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------\n\nvar cableVars={};\n\nOps.Anim.Variable = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='Variable';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.varName=this.addInPort(new Port(this,\"name\"));\n    this.val=this.addInPort(new Port(this,\"value\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    function changed()\n    {\n        cableVars[self.varName.val]=self.val.val;\n        self.result.val=self.val.val;\n    }\n\n    function readValue()\n    {\n        self.val.val=cableVars[self.varName.val];\n    }\n\n    this.val.onValueChanged=changed;\n    this.varName.onValueChanged=changed;\n    this.exe.onTriggered=readValue;\n\n};\n\nOps.Anim.Variable.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\nOps.String=Ops.String || {};\n\nOps.String.concat = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='concat';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.string1=this.addInPort(new Port(this,\"string1\"));\n    this.string2=this.addInPort(new Port(this,\"string2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.string1.val+self.string2.val;\n    };\n\n    this.string1.onValueChanged=this.exec;\n    this.string2.onValueChanged=this.exec;\n\n    this.string1.val='wurst';\n    this.string2.val='tuete';\n};\n\nOps.String.concat.prototype = new Op();\n\n\n\n\n\n","\nOps.Json=Ops.Json || {};\n\n\nOps.Json.jsonValue = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='jsonValue';\n\n    this.data=this.addInPort(new Port(this,\"data\",OP_PORT_TYPE_TEXTURE ));\n    this.key=this.addInPort(new Port(this,\"key\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.data.onValueChanged=function()\n    {\n        if(self.data.val && self.data.val.hasOwnProperty(self.key.val))\n        {\n            self.result.val=self.data.val[self.key.val];\n        }\n    };\n\n};\n\nOps.Json.jsonValue.prototype = new Op();\n\n// -------------------------------------------------------------\n\n","\n// TODO: CLAMP!\n\nOps.Math=Ops.Math || {};\n\n\nOps.Math.Random = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='random';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.exe.onTriggered=function()\n    {\n        self.result.val=Math.random();\n    };\n\n    this.exe.onTriggered();\n};\n\nOps.Math.Random.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Clamp = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='Clamp';\n    this.val=this.addInPort(new Port(this,\"val\"));\n    this.min=this.addInPort(new Port(this,\"min\"));\n    this.max=this.addInPort(new Port(this,\"max\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    function clamp()\n    {\n        self.result.val= Math.min(Math.max(self.val.val, self.min.val), self.max.val);\n    }\n\n    this.min.val=0;\n    this.max.val=1;\n\n    this.val.onValueChanged=clamp;\n    this.min.onValueChanged=clamp;\n    this.max.onValueChanged=clamp;\n\n    this.val.val=0.5;\n};\n\nOps.Math.Clamp.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\nOps.Math.SmoothStep = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='SmoothStep';\n    this.val=this.addInPort(new Port(this,\"val\"));\n    this.min=this.addInPort(new Port(this,\"min\"));\n    this.max=this.addInPort(new Port(this,\"max\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    function smoothstep ()\n    {\n        var x = Math.max(0,Math.min(1,(self.val.val-self.min.val)/(self.max.val-self.min.val)));\n        self.result.val=x*x*(3-2*x);\n    }\n\n    this.min.val=0;\n    this.max.val=1;\n    \n    this.val.onValueChanged=smoothstep;\n    this.min.onValueChanged=smoothstep;\n    this.max.onValueChanged=smoothstep;\n\n    this.val.val=0.5;\n};\n\nOps.Math.SmoothStep.prototype = new Op();\n\n// ----------------------------------------------------------------------------\n\n\nOps.Math.MapRange = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='map value range';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.v=this.addInPort(new Port(this,\"value\"));\n    this.old_min=this.addInPort(new Port(this,\"old min\"));\n    this.old_max=this.addInPort(new Port(this,\"old max\"));\n    this.new_min=this.addInPort(new Port(this,\"new min\"));\n    this.new_max=this.addInPort(new Port(this,\"new max\"));\n\n    this.exec= function()\n    {\n        if(self.v.val>self.old_max.val)\n        {\n            self.result.val=self.new_max.val;\n            return;\n        }\n        else\n        if(self.v.val<self.old_min.val)\n        {\n            self.result.val=self.new_min.val;\n            return;\n        }\n\n        var nMin=parseFloat(self.new_min.val);\n        var nMax=parseFloat(self.new_max.val);\n        var oMin=parseFloat(self.old_min.val);\n        var oMax=parseFloat(self.old_max.val);\n        var x=parseFloat(self.v.val);\n\n        var reverseInput = false;\n        var oldMin = Math.min( oMin, oMax );\n        var oldMax = Math.max( oMin, oMax );\n        if(oldMin!= oMin) reverseInput = true;\n\n        var reverseOutput = false;\n        var newMin = Math.min( nMin, nMax );\n        var newMax = Math.max( nMin, nMax );\n        if(newMin != nMin) reverseOutput = true;\n\n        var portion=0;\n\n        if(reverseInput) portion = (oldMax-x)*(newMax-newMin)/(oldMax-oldMin);\n            else portion = (x-oldMin)*(newMax-newMin)/(oldMax-oldMin);\n        \n        if(reverseOutput) self.result.val = newMax - portion;\n            else self.result.val = portion + newMin;\n\n    };\n\n    this.v.val=0;\n    this.old_min.val=-1;\n    this.old_max.val=1;\n    this.new_min.val=0;\n    this.new_max.val=1;\n\n\n    this.v.onValueChanged=this.exec;\n    this.old_min.onValueChanged=this.exec;\n    this.old_max.onValueChanged=this.exec;\n    this.new_min.onValueChanged=this.exec;\n    this.new_max.onValueChanged=this.exec;\n\n    this.exec();\n\n};\n\nOps.Math.MapRange.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Abs = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    this.name='abs';\n    this.number=this.addInPort(new Port(this,\"number\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.number.onValueChanged=function()\n    {\n        self.result.val=Math.abs(self.number.val);\n    };\n};\n\nOps.Math.Abs.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Sin = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    this.name='Sinus';\n    this.number=this.addInPort(new Port(this,\"number\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.number.onValueChanged=function()\n    {\n        self.result.val=Math.sin(self.number.val);\n    };\n};\n\nOps.Math.Sin.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Sum = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='sum';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=parseFloat(self.number1.val)+parseFloat(self.number2.val);\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n\n    this.number1.val=1;\n    this.number2.val=1;\n};\n\nOps.Math.Sum.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Multiply = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='multiply';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val*self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n\n    this.number1.val=1;\n    this.number2.val=2;\n\n};\n\nOps.Math.Multiply.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Divide = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Divide';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val/self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Divide.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\nOps.Math.Compare={};\n\n\n\n\nOps.Math.Compare.IsEven = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='isEven';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n\n    this.exec= function()\n    {\n        self.result.val=!( self.number1.val & 1 );\n    };\n\n    this.number1.onValueChanged=this.exec;\n};\n\nOps.Math.Compare.IsEven.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Math.Compare.Greater = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Greater';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val>self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Compare.Greater.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Math.Compare.Between = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Between';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number=this.addInPort(new Port(this,\"value\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n    this.number.val=2.0;\n    this.number1.val=1.0;\n    this.number2.val=3.0;\n\n    this.exec= function()\n    {\n        self.result.val=\n            (\n                self.number.val>Math.min(self.number1.val,self.number2.val) &&\n                self.number.val<Math.max(self.number1.val,self.number2.val)\n            );\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n    this.number.onValueChanged=this.exec;\n};\nOps.Math.Compare.Between.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Math.Compare.Lesser = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Lesser';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val<self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n\n};\n\nOps.Math.Compare.Lesser.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Math.Compare.Equals = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Equals';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val==self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Compare.Equals.prototype = new Op();\n\n","\nOps.Net=Ops.Net || {};\n\nOps.Net.Websocket = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='Websocket';\n    this.url=this.addInPort(new Port(this,\"url\"));\n    this.result=this.addOutPort(new Port(this,\"result\", OP_PORT_TYPE_OBJECT));\n    this.connected=this.addOutPort(new Port(this,\"connected\"));\n\n    var connection=null;\n    var timeout=null;\n    var connectedTo='';\n\n    function checkConnection()\n    {\n        if(self.connected.val===false)\n        {\n            connect();\n        }\n        timeout=setTimeout(checkConnection,1000);\n    }\n\n    function connect()\n    {\n        if(self.connected.val===true && connectedTo==self.url.val) return;\n\n        if(self.connected.val===true)connection.close();\n\n        window.WebSocket = window.WebSocket || window.MozWebSocket;\n     \n         if (!window.WebSocket)\n            console.error('Sorry, but your browser doesn\\'t support WebSockets.');\n\n\n        try\n        {\n            if(connection!=null)connection.close();\n            connection = new WebSocket(self.url.val);\n        }catch (e)\n        {\n            console.log('could not connect to',self.url.val);\n        }\n\n        \n        connection.onerror = function (message)\n        {\n            self.connected.val=false;\n        };\n\n        connection.onclose = function (message)\n        {\n            self.connected.val=false;\n        };\n\n        connection.onopen = function (message)\n        {\n            self.connected.val=true;\n            connectedTo=self.url.val;\n        };\n\n        connection.onmessage = function (message)\n        {\n            try\n            {\n                var json = JSON.parse(message.data);\n                self.result.val=json;\n                        \n            } catch (e) {\n                console.log('This doesn\\'t look like a valid JSON: ', message.data);\n                return;\n            }\n        };\n\n        \n        \n    }\n\n    this.url.onValueChanged=connect;\n    timeout=setTimeout(checkConnection,1000);\n\n    this.url.val='ws://127.0.0.1:1337';\n};\n\nOps.Net.Websocket.prototype = new Op();\n\n// -------------------------------------------------------------\n"],"sourceRoot":"/source/"}