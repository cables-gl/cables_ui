{"version":3,"sources":["geometry.js","timer.js","utils.js","glutils.js","holo.js","ops.gl.js","ops.js","ops.math.js"],"names":["Mesh","geom","bufTexCoords","bufTexCoordsIndizes","bufVertices","gl","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","vertices","STATIC_DRAW","itemSize","numItems","length","bufVerticesIndizes","ELEMENT_ARRAY_BUFFER","Uint16Array","verticesIndices","texCoords","console","log","this","render","shader","bind","vertexAttribPointer","getAttrVertexPos","FLOAT","getAttrTexCoords","drawElements","TRIANGLES","UNSIGNED_SHORT","Geometry","faceVertCount","texCoordsIndices","Timer","getTime","lastTime","Date","now","timeStart","timeOffset","self","currentTime","paused","update","togglePlay","play","pause","setOffset","val","generateUUID","d","uuid","replace","c","r","Math","random","floor","toString","ajaxRequest","url","callback","request","XMLHttpRequest","open","responseType","onload","e","target","response","send","parseOBJ","buff","_readline","a","off","s","String","fromCharCode","groups","c_norms","i_norms","cg","from","to","Uint8Array","line","cds","split","x","parseFloat","y","z","push","v0a","v1a","v2a","vi0","parseInt","vi1","vi2","ui0","ui1","ui2","ni0","ni1","ni2","vlen","ulen","nlen","v3a","vi3","ui3","ni3","Uniform","_shader","_type","_name","_value","loc","name","type","value","needsUpdate","addUniform","updateValueF","getUniformLocation","getProgram","uniform1f","setValueF","v","updateValueT","uniform1i","setValueT","setValue","updateValue","Texture","tex","createTexture","loaded","initTexture","img","bindTexture","TEXTURE_2D","pixelStorei","UNPACK_FLIP_Y_WEBGL","texImage2D","RGBA","UNSIGNED_BYTE","texParameteri","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","load","texture","image","Image","src","glShader","program","uniforms","uni","getDefaultVertexShader","getDefaultFragmentShader","srcVert","srcFrag","setSource","projMatrixUniform","mvMatrixUniform","attrTexCoords","attrVertexPos","glUtils","createProgram","GL","getAttribLocation","useProgram","i","enableVertexAttribArray","vertexPosAttrib","uniformMatrix4fv","pMatrix","mvMatrix","createShader","str","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","VERTEX_SHADER","FRAGMENT_SHADER","getShaderInfoLog","vstr","fstr","vshader","fshader","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","PORT_DIR_IN","PORT_DIR_OUT","OP_PORT_TYPE_VALUE","OP_PORT_TYPE_FUNCTION","Ops","Op","objName","portsOut","portsIn","posts","uiAttribs","id","getName","addOutPort","p","direction","parent","addInPort","execute","exec","printInfo","ipo","removeLinks","getPort","ipi","getSerialized","op","getPortByName","Port","links","__defineGetter__","__defineSetter__","onValueChanged","onTriggered","addLink","l","isLinkedTo","p2","portIn","portOut","call","goals","getTypeString","obj","remove","removeLink","link","splice","Link","scene","onUnLink","p1","canLink","objIn","objOut","canLinkText","Scene","ops","timer","animFrameOps","clear","deleteOp","addOp","eval","hasOwnProperty","onAdd","opid","onDelete","requestAnimationFrame","time","onAnimFrame","op1","port1Name","op2","port2Name","port1","port2","onLink","serialize","JSON","stringify","getOpById","deSerialize","opinid","opoutid","inName","outName","found","parse","iop","port","ipi2","ili","Gl","mat4","create","Renderer","apply","arguments","simpleShader","trigger","initTranslate","vec3","set","currentShader","clearColor","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","viewport","perspective","identity","translate","enable","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","canvas","document","getElementById","getContext","prototype","ClearColor","g","b","Meshes","Rectangle","squareVertexPositionBuffer","drawArrays","TRIANGLE_STRIP","ObjMesh","mesh","Plotter","lineWidth","buffer","num","LINE_STRIP","Triangle","Shader","BasicMaterial","doRender","activeTexture","TEXTURE0","textureUniform","uniform","Schwurbel","uniLoc","compile","Noise","timeUniform","Cube","cubeVerticesBuffer","cubeVerticesIndexBuffer","init","cubeVertexIndices","Matrix","Translate","vec","Transform","DEG2RAD","posX","posY","posZ","scaleX","scaleY","scaleZ","rotX","rotY","rotZ","vPos","vScale","oldMatrix","transMatrix","doScale","doTranslate","copy","multiply","updateMatrix","rotateX","rotateY","rotateZ","scale","translateChanged","scaleChanged","rotChanged","Log","exe","input","CallsPerSecond","cps","Value","result","TimeLineTime","theTime","Repeat","idx","IfTrueThen","bool","triggerThen","triggerElse","Interval","timeOutId","interval","setTimeout","Anim","SinusAnim","sin","RelativeTime","startTime","Input","GamePad","numPads","axis1","axis2","axis3","axis4","button0","button1","button2","button3","button4","gamePads","navigator","getGamepads","count","gp","axes","buttons","pressed","Random","MapRange","old_min","old_max","new_min","new_max","nMin","nMax","oMin","oMax","reverseInput","oldMin","min","oldMax","max","reverseOutput","newMin","newMax","portion","Abs","number","abs","Sin","Sum","number1","number2","Multiply","Divide","Compare","IsEven","Greater","Between","Lesser","Equals"],"mappings":"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","file":"cables.min.js","sourcesContent":["\n\nfunction Mesh(geom)\n{\n    var bufTexCoords=-1;\n    var bufTexCoordsIndizes=-1;\n\n    var bufVertices = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, bufVertices);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(geom.vertices), gl.STATIC_DRAW);\n    bufVertices.itemSize = 3;\n    bufVertices.numItems = geom.vertices.length/3;\n\n\n    var bufVerticesIndizes = gl.createBuffer();\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufVerticesIndizes);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(geom.verticesIndices), gl.STATIC_DRAW);\n    bufVerticesIndizes.itemSize = 1;\n    bufVerticesIndizes.numItems = geom.verticesIndices.length;\n\n    if(geom.texCoords.length>0)\n    {\n        console.log('found texcoords!');\n                \n        bufTexCoords = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, bufTexCoords);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(geom.texCoords), gl.STATIC_DRAW);\n        bufTexCoords.itemSize = 2;\n        bufTexCoords.numItems = geom.texCoords.length/bufTexCoords.itemSize;\n\n        // bufTexCoordsIndizes = gl.createBuffer();\n        // gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufTexCoordsIndizes);\n\n        // gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(bufTexCoordsIndizes), gl.STATIC_DRAW);\n        // bufTexCoordsIndizes.itemSize = 1;\n        // bufTexCoordsIndizes.numItems = geom.texCoordsIndices.length;\n    }\n\n    console.log('geom.vertices.length '+geom.vertices.length);\n    console.log('bufTexCoordsIndizes.numItems '+bufTexCoordsIndizes.numItems);\n    console.log('bufTexCoords.numItems '+bufTexCoords.numItems);\n\n    console.log('bufVertices.numItems '+bufVertices.numItems);\n    console.log('bufVerticesIndizes.numItems '+bufVerticesIndizes.numItems);\n\n\n\n    this.render=function(shader)\n    {\n        // shader.setAttributeVertex( bufVertices.itemSize);\n        // shader.setAttributeTexCoord( bufTexCoordsIndizes.itemSize);\n        shader.bind();\n\n\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, bufVertices);\n        gl.vertexAttribPointer(shader.getAttrVertexPos(),bufVertices.itemSize, gl.FLOAT, false, 0, 0);\n\n        // gl.vertexAttribPointer(shaderProgram.textureCoordAttribute, cubeVertexTextureCoordBuffer.itemSize, gl.FLOAT, false, 0, 0);\n\n        if(bufTexCoordsIndizes.itemSize!=-1)\n        {\n            gl.bindBuffer(gl.ARRAY_BUFFER, bufTexCoords);\n            gl.vertexAttribPointer(shader.getAttrTexCoords(),bufTexCoords.itemSize, gl.FLOAT, false, 0, 0);\n        }\n\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufVerticesIndizes);\n        gl.drawElements(gl.TRIANGLES, bufVerticesIndizes.numItems, gl.UNSIGNED_SHORT, 0);\n\n        // gl.drawArrays(gl.POINTS, 0, bufVertices.numItems);\n\n    };\n\n}\n\nfunction Geometry()\n{\n    this.faceVertCount=3;\n    this.vertices=[];\n    this.verticesIndices=[];\n    this.texCoords=[];\n    this.texCoordsIndices=[];\n}\n\nparseOBJ = function(buff)\n{\n\n    _readline = function(a, off)  // Uint8Array, offset\n    {\n        var s = \"\";\n        while(a[off] != 10) s += String.fromCharCode(a[off++]);\n        return s;\n    };\n\n    var geom = new Geometry();\n    geom.groups = {};\n    \n    // geom.texCoords   = [];\n    geom.c_norms = [];\n    \n    // geom.texCoordsIndices   = [];\n    geom.i_norms = [];\n    \n    var cg = {from: 0, to:0};   // current group\n    var off = 0;\n    var a = new Uint8Array(buff);\n    \n    while(off < a.length)\n    {\n        var line = _readline(a, off);\n        off += line.length + 1;\n        line = line.replace(/ +(?= )/g,'');\n        line = line.replace(/(^\\s+|\\s+$)/g, '');\n        var cds = line.split(\" \");\n        if(cds[0] == \"g\")\n        {\n            cg.to = geom.verticesIndices.length;\n            if(geom.groups[cds[1]] == null) geom.groups[cds[1]] = {from:geom.verticesIndices.length, to:0};\n            cg = geom.groups[cds[1]];\n        }\n        if(cds[0] == \"v\")\n        {\n            var x = parseFloat(cds[1]);\n            var y = parseFloat(cds[2]);\n            var z = parseFloat(cds[3]);\n            geom.vertices.push(x,y,z);\n        }\n        if(cds[0] == \"vt\")\n        {\n            var x = parseFloat(cds[1]);\n            var y = 1-parseFloat(cds[2]);\n            geom.texCoords.push(x,y);\n        }\n        if(cds[0] == \"vn\")\n        {\n            var x = parseFloat(cds[1]);\n            var y = parseFloat(cds[2]);\n            var z = parseFloat(cds[3]);\n            geom.c_norms.push(x,y,z);\n        }\n        if(cds[0] == \"f\")\n        {\n            var v0a = cds[1].split(\"/\"), v1a = cds[2].split(\"/\"), v2a = cds[3].split(\"/\");\n            var vi0 = parseInt(v0a[0])-1, vi1 = parseInt(v1a[0])-1, vi2 = parseInt(v2a[0])-1;\n            var ui0 = parseInt(v0a[1])-1, ui1 = parseInt(v1a[1])-1, ui2 = parseInt(v2a[1])-1;\n            var ni0 = parseInt(v0a[2])-1, ni1 = parseInt(v1a[2])-1, ni2 = parseInt(v2a[2])-1;\n            \n            var vlen = geom.vertices.length/3, ulen = geom.texCoords.length/2, nlen = geom.c_norms.length/3;\n            if(vi0<0) vi0 = vlen + vi0+1; if(vi1<0) vi1 = vlen + vi1+1; if(vi2<0) vi2 = vlen + vi2+1;\n            if(ui0<0) ui0 = ulen + ui0+1; if(ui1<0) ui1 = ulen + ui1+1; if(ui2<0) ui2 = ulen + ui2+1;\n            if(ni0<0) ni0 = nlen + ni0+1; if(ni1<0) ni1 = nlen + ni1+1; if(ni2<0) ni2 = nlen + ni2+1;\n            \n            geom.verticesIndices.push(vi0, vi1, vi2);  //cg.verticesIndices.push(vi0, vi1, vi2)\n            geom.texCoordsIndices  .push(ui0, ui1, ui2);  //cg.texCoordsIndices  .push(ui0, ui1, ui2);\n            geom.i_norms.push(ni0, ni1, ni2);  //cg.i_norms.push(ni0, ni1, ni2);\n            if(cds.length == 5)\n            {\n                var v3a = cds[4].split(\"/\");\n                var vi3 = parseInt(v3a[0])-1, ui3 = parseInt(v3a[1])-1, ni3 = parseInt(v3a[2])-1;\n                if(vi3<0) vi3 = vlen + vi3+1;\n                if(ui3<0) ui3 = ulen + ui3+1;\n                if(ni3<0) ni3 = nlen + ni3+1;\n                geom.verticesIndices.push(vi0, vi2, vi3);  //cg.verticesIndices.push(vi0, vi2, vi3);\n                geom.texCoordsIndices  .push(ui0, ui2, ui3);  //cg.texCoordsIndices  .push(ui0, ui2, ui3);\n                geom.i_norms.push(ni0, ni2, ni3);  //cg.i_norms.push(ni0, ni2, ni3);\n            }\n        }\n    }\n    cg.to = geom.verticesIndices.length;\n    \n    return geom;\n}\n\n\n","\n\nfunction Timer()\n{\n    var self=this;\n    var timeStart=Date.now();\n    var timeOffset=0;\n\n    var currentTime=0;\n    var lastTime=0;\n    var paused=true;\n\n    function getTime()\n    {\n        lastTime=(Date.now()-timeStart)/1000;\n        return lastTime+timeOffset;\n\n    }\n\n    this.update=function()\n    {\n        if(paused) return;\n        currentTime=getTime();\n\n        return currentTime;\n    };\n\n    this.getTime=function()\n    {\n        return currentTime;\n    };\n\n    this.togglePlay=function()\n    {\n        if(paused)self.play();\n            else self.pause();\n    };\n\n    this.setOffset=function(val)\n    {\n        if(currentTime+val<0)\n        {\n            timeStart=Date.now();\n            timeOffset=0;\n            currentTime=0;\n        }\n        else\n        {\n            timeOffset+=val;\n            currentTime=lastTime+timeOffset;\n        }\n        \n\n    };\n\n    this.play=function()\n    {\n        timeStart=Date.now();\n        paused=false;\n    };\n\n    this.pause=function()\n    {\n        timeOffset=currentTime;\n        paused=true;\n    };\n\n}","function generateUUID()\n{\n    var d = new Date().getTime();\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c)\n    {\n        var r = (d + Math.random()*16)%16 | 0;\n        d = Math.floor(d/16);\n        return (c=='x' ? r : (r&0x3|0x8)).toString(16);\n    });\n    return uuid;\n}\n\n// ----------------------------------------------------------------\nfunction ajaxRequest(url, callback)\n{\n    var request = new XMLHttpRequest();\n    request.open(\"GET\", url, true);\n    request.responseType = \"arraybuffer\";\n    request.onload = function(e)\n    {\n        callback(e.target.response);\n    };\n    request.send();\n}\n\n\n\n","\n\nvar Uniform=function(_shader,_type,_name,_value)\n{\n    var self=this;\n    var loc=-1;\n    var name=_name;\n    var type=_type;\n    var value=0;\n    var shader=_shader;\n    this.needsUpdate=true;\n\n    shader.addUniform(this);\n\n    this.updateValueF=function()\n    {\n        if(loc==-1) loc=gl.getUniformLocation(shader.getProgram(), name);\n        gl.uniform1f(loc, value);\n    };\n\n    this.setValueF=function(v)\n    {\n        self.needsUpdate=true;\n        value=v;\n    };\n\n    this.updateValueT=function()\n    {\n        if(loc==-1)\n        {\n            loc=gl.getUniformLocation(shader.getProgram(), name);\n            if(loc==-1)         console.log('texture loc unknown!!');\n                    \n        }\n\n        gl.uniform1i(loc, value);\n    };\n\n    this.setValueT=function(v)\n    {\n        self.needsUpdate=true;\n        value=v;\n    };\n\n\n\n    if(type=='f')\n    {\n        this.setValue=this.setValueF;\n        this.updateValue=this.updateValueF;\n    }\n\n    if(type=='t')\n    {\n        this.setValue=this.setValueT;\n        this.updateValue=this.updateValueT;\n    }\n\n    this.setValue(_value);\n\n};\n\n// ---------------------------------------------------------------------------\n\nvar Texture=function()\n{\n    var self=this;\n    this.tex = gl.createTexture();\n    this.loaded=false;\n\n    this.initTexture=function(img)\n    {\n        gl.bindTexture(gl.TEXTURE_2D, self.tex);\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        self.loaded=true;\n    };\n\n};\n\nTexture.load=function(url)\n{\n    var texture=new Texture();\n    var image = new Image();\n    image.onload = function ()\n    {\n        texture.initTexture(image);\n    };\n    image.src = url;\n    return texture;\n};\n\n\n// ---------------------------------------------------------------------------\n\nvar glShader=function()\n{\n    var self=this;\n    var program=-1;\n    var uniforms=[];\n\n    this.addUniform=function(uni)\n    {\n        uniforms.push(uni);\n    };\n\n    this.getDefaultVertexShader=function()\n    {\n        return ''+\n        'attribute vec3 vPosition;\\n'+\n        'attribute vec2 attrTexCoord;\\n'+\n        'varying vec2 texCoord;\\n'+\n        'uniform mat4 projMatrix;\\n'+\n        'uniform mat4 mvMatrix;\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        '   texCoord=attrTexCoord;\\n'+\n        '   gl_PointSize=3.0;\\n'+\n        '   gl_Position = projMatrix * mvMatrix * vec4(vPosition,  1.0);\\n'+\n        '}\\n';\n    };\n\n    this.getDefaultFragmentShader=function()\n    {\n        return ''+\n        'precision mediump float;\\n'+\n        'void main()\\n'+\n        '{\\n'+\n\n        '   gl_FragColor = vec4(0.5,0.5,0.5,1.0);\\n'+\n        '}\\n';\n    };\n\n    this.srcVert=this.getDefaultVertexShader();\n    this.srcFrag=this.getDefaultFragmentShader();\n\n    this.setSource=function(srcVert,srcFrag)\n    {\n        this.srcVert=srcVert;\n        this.srcFrag=srcFrag;\n        // console.log('compiled!');\n    };\n\n    var projMatrixUniform=-1;\n    var mvMatrixUniform=-1;\n    // var attribSizeVertex=-1;\n    // var attribSizeTexCoords=-1;\n\n    var attrTexCoords = -1;\n    var attrVertexPos = -1;\n\n    this.getAttrTexCoords=function(){return attrTexCoords;};\n    this.getAttrVertexPos=function(){return attrVertexPos;};\n\n    // this.setAttributeTexCoord=function(size)\n    // {\n    //     attribSizeTexCoords=size;\n    // };\n\n    // this.setAttributeVertex=function(size)\n    // {\n    //     attribSizeVertex=size;\n    // };\n\n    this.bind=function()\n    {\n        // if(attribSizeVertex==-1)return;\n\n        if(program==-1) program=glUtils.createProgram(self.srcVert,self.srcFrag);\n\n        if(mvMatrixUniform==-1)\n        {\n            attrTexCoords = GL.getAttribLocation(program, 'attrTexCoord');\n            attrVertexPos = GL.getAttribLocation(program, 'vPosition');\n\n            projMatrixUniform = gl.getUniformLocation(program, \"projMatrix\");\n            mvMatrixUniform = gl.getUniformLocation(program, \"mvMatrix\");\n        }\n\n\n        GL.useProgram(program);\n\n        for(var i in uniforms)\n        {\n            if(uniforms[i].needsUpdate)uniforms[i].updateValue();\n        }\n\n\n\n        GL.enableVertexAttribArray(program.vertexPosAttrib);\n\n        gl.uniformMatrix4fv(projMatrixUniform, false, pMatrix);\n        gl.uniformMatrix4fv(mvMatrixUniform, false, mvMatrix);\n\n\n    };\n\n    this.getProgram=function()\n    {\n        return program;\n    };\n\n};\n\nvar glUtils={};\n\nglUtils.createShader =function(str, type)\n{\n    var shader = gl.createShader(type);\n    gl.shaderSource(shader, str);\n    gl.compileShader(shader);\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\n    {\n        console.log('compile status: ');\n\n        if(type==gl.VERTEX_SHADER)console.log('VERTEX_SHADER');\n        if(type==gl.FRAGMENT_SHADER)console.log('FRAGMENT_SHADER');\n        \n        throw gl.getShaderInfoLog(shader);\n    }\n    return shader;\n};\n\nglUtils.createProgram=function(vstr, fstr)\n{\n    var program = gl.createProgram();\n    var vshader = glUtils.createShader(vstr, gl.VERTEX_SHADER);\n    var fshader = glUtils.createShader(fstr, gl.FRAGMENT_SHADER);\n    gl.attachShader(program, vshader);\n    gl.attachShader(program, fshader);\n    gl.linkProgram(program);\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS))\n    {\n        throw gl.getProgramInfoLog(program);\n    }\n    return program;\n};\n\n\n\n\n\n\n\n\n","\nvar PORT_DIR_IN=0;\nvar PORT_DIR_OUT=1;\n\nvar OP_PORT_TYPE_VALUE =0;\nvar OP_PORT_TYPE_FUNCTION =1;\n\nvar Ops = {};\n\n\nvar Op = function()\n{\n    this.objName='';\n    this.portsOut=[];\n    this.portsIn=[];\n    this.posts=[];\n    this.uiAttribs={};\n    this.name='unknown';\n    this.id=generateUUID();\n\n    this.getName= function()\n    {\n        return this.name;\n    };\n    this.addOutPort=function(p)\n    {\n        p.direction=PORT_DIR_OUT;\n        p.parent=this;\n        this.portsOut.push(p);\n        return p;\n    };\n    this.addInPort=function(p)\n    {\n        p.direction=PORT_DIR_IN;\n        p.parent=this;\n        this.portsIn.push(p);\n        return p;\n    };\n    this.execute=function()\n    {\n        this.exec();\n    };\n    this.printInfo=function()\n    {\n        for(var i=0;i<this.portsIn.length;i++)\n            console.log('in: '+this.portsIn[i].getName());\n\n        for(var ipo in this.portsOut)\n            console.log('out: '+this.portsOut[ipo].getName());\n    };\n\n    this.removeLinks=function()\n    {\n        for(var i=0;i<this.portsIn.length;i++)\n            this.portsIn[i].removeLinks();\n        for(var ipo in this.portsOut)\n            this.portsOut[ipo].removeLinks();\n    };\n\n    this.getPort=function(name)\n    {\n        for(var ipi in this.portsIn)\n            if(this.portsIn[ipi].getName()==name)return this.portsIn[ipi];\n\n        for(var ipo in this.portsOut)\n            if(this.portsOut[ipo].getName()==name)return this.portsOut[ipo];\n    };\n\n    this.getSerialized=function()\n    {\n        var op={};\n        op.name=this.getName();\n        op.objName=this.objName;\n        op.id=this.id;\n        op.uiAttribs=this.uiAttribs;\n\n        op.portsIn=[];\n        op.portsOut=[];\n\n        for(var i=0;i<this.portsIn.length;i++)\n            op.portsIn.push( this.portsIn[i].getSerialized() );\n\n        for(var ipo in this.portsOut)\n            op.portsOut.push( this.portsOut[ipo].getSerialized() );\n\n        return op;\n    };\n\n    this.getPortByName=function(name)\n    {\n        for(var i=0;i<this.portsIn.length;i++)\n            if(this.portsIn[i].name==name)return this.portsIn[i];\n        \n        for(var ipo in this.portsOut)\n            if(this.portsOut[ipo].name==name)return this.portsOut[ipo];\n    };\n\n};\n\n// ------------------------------------------------------------------------------------\n\nvar Port=function(parent,name,type)\n{\n    var self=this;\n    this.direction=PORT_DIR_IN;\n    this.id=generateUUID();\n    this.parent=parent;\n    this.links=[];\n    this.value=null;\n    this.name=name;\n    this.type=type || OP_PORT_TYPE_VALUE;\n\n    this.__defineGetter__(\"val\", function()\n    {\n        return this.value;\n    });\n\n    this.__defineSetter__(\"val\", function(v)\n    {\n        this.setValue(v);\n    });\n\n    this.onValueChanged=function(){};\n    this.onTriggered=function(){};\n\n    this.setValue=function(v)\n    {\n        if(v!=this.value)\n        {\n            this.value=v;\n            this.onValueChanged();\n\n            for(var i in this.links)\n            {\n                this.links[i].setValue();\n            }\n        }\n    };\n\n    this.getName= function()\n    {\n        return this.name;\n    };\n\n    this.addLink=function(l)\n    {\n        this.links.push(l);\n    };\n\n    this.isLinkedTo=function(p2)\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i].portIn==p2 || this.links[i].portOut==p2)return true;\n        }\n        return false;\n    };\n\n    this.call=function()\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i].portIn !=this)this.links[i].portIn.onTriggered();\n            if(this.links[i].portOut!=this)this.links[i].portOut.onTriggered();\n        }\n    };\n\n\n    this.execute=function()\n    {\n        console.log('### execute port: '+this.getName() , this.goals.length);\n    };\n\n    this.getTypeString=function()\n    {\n        if(this.type==OP_PORT_TYPE_VALUE)return 'value';\n        if(this.type==OP_PORT_TYPE_FUNCTION)return 'function';\n    };\n\n    this.getSerialized=function()\n    {\n        var obj={};\n        obj.name=this.getName();\n        obj.value=this.value;\n\n\n        if(this.direction==PORT_DIR_IN && this.links.length>0)\n        {\n            obj.links=[];\n            for(var i in this.links)\n            {\n                obj.links.push( this.links[i].getSerialized() );\n            }\n        }\n        return obj;\n    };\n\n    this.removeLinks=function()\n    {\n        while(this.links.length>0)\n        {\n            this.links[0].remove();\n        }\n    };\n\n    this.removeLink=function(link)\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i]==link)this.links.splice( i, 1 );\n        }\n    };\n};\n\n\n\n// ---------------------------------------------------------------------------\n\nvar Link = function(scene)\n{\n    this.portIn=null;\n    this.portOut=null;\n    this.scene=scene;\n\n    this.setValue=function()\n    {\n        if(this.portIn.val!=this.portOut.val)\n            this.portIn.val=this.portOut.val;\n    };\n\n    this.remove=function()\n    {\n        this.portIn.removeLink(this);\n        this.portOut.removeLink(this);\n        this.scene.onUnLink(this.portIn,this.portOut);\n        this.portIn=null;\n        this.portOut=null;\n        this.scene=null;\n    };\n\n\n    this.link=function(p1,p2)\n    {\n        if(!Link.canLink(p1,p2))\n        {\n            console.log('cannot link ports!');\n            return false;\n        }\n        if(p1.direction==PORT_DIR_IN)\n        {\n            this.portIn=p1;\n            this.portOut=p2;\n        }\n        else\n        {\n            this.portIn=p2;\n            this.portOut=p1;\n        }\n\n        p1.addLink(this);\n        p2.addLink(this);\n        this.setValue();\n    };\n\n    this.getSerialized=function()\n    {\n        var obj={};\n\n        obj.portIn=this.portIn.getName();\n        obj.portOut=this.portOut.getName();\n        obj.objIn=this.portIn.parent.id;\n        obj.objOut=this.portOut.parent.id;\n\n        return obj;\n    };\n};\n\n\nLink.canLinkText=function(p1,p2)\n{\n    if(p1.direction==PORT_DIR_IN && p1.links.length>0)return 'input port already busy';\n    if(p2.direction==PORT_DIR_IN && p2.links.length>0)return 'input port already busy';\n    if(p1.isLinkedTo(p2))return 'ports already linked';\n    if(!p1)return 'can not link: port 1 invalid';\n    if(!p2)return 'can not link: port 2 invalid';\n    if(p1.direction==p2.direction)return 'can not link: same direction';\n    if(p1.type!=p2.type)return 'can not link: different type';\n    if(p1.parent==p2.parent)return 'can not link: same op';\n    return 'can link';\n};\n\nLink.canLink=function(p1,p2)\n{\n\n    if(p1.direction==PORT_DIR_IN && p1.links.length>0)return false;\n    if(p2.direction==PORT_DIR_IN && p2.links.length>0)return false;\n    if(p1.isLinkedTo(p2))return false;\n    if(!p1)return false;\n    if(!p2)return false;\n    if(p1.direction==p2.direction)return false;\n    if(p1.type!=p2.type)return false;\n    if(p1.parent==p2.parent)return false;\n\n    return true;\n};\n\n\n// ------------------------------------------------------------------------------------\n\n\nvar Scene = function()\n{\n    var self=this;\n    this.ops=[];\n    this.timer=new Timer();\n    this.animFrameOps=[];\n    \n\n    this.clear=function()\n    {\n        this.timer=new Timer();\n        while(this.ops.length>0)\n        {\n            this.deleteOp(this.ops[0].id);\n        }\n    };\n\n    this.addOp=function(objName,uiAttribs)\n    {\n        var op=eval('new '+objName+'();');\n        op.objName=objName;\n        op.uiAttribs=uiAttribs;\n\n        if(op.hasOwnProperty('onAnimFrame')) this.animFrameOps.push(op);\n\n        this.ops.push(op);\n        if(this.onAdd)this.onAdd(op);\n        return op;\n    };\n\n    this.deleteOp=function(opid)\n    {\n        for(var i in this.ops)\n        {\n            if(this.ops[i].id==opid)\n            {\n                this.ops[i].removeLinks();\n                this.onDelete(this.ops[i]);\n                this.ops.splice( i, 1 );\n            }\n        }\n    };\n\n    this.exec=function()\n    {\n        requestAnimationFrame(self.exec);\n        self.timer.update();\n\n        var time=self.timer.getTime();\n\n        for(var i in self.animFrameOps)\n        {\n            self.animFrameOps[i].onAnimFrame(time);\n        }\n\n    };\n\n    this.link=function(op1,port1Name,op2,port2Name)\n    {\n        var port1=op1.getPort(port1Name);\n        var port2=op2.getPort(port2Name);\n\n        if(Link.canLink(port1,port2))\n        {\n            var link=new Link(this);\n            link.link(port1,port2);\n            this.onLink(port1,port2);\n            return link;\n        }\n        else\n        {\n            console.log(Link.canLinkText(port1,port2));\n        }\n    };\n    this.onAdd=function(op){};\n    this.onDelete=function(op){};\n    this.onLink=function(p1,p2){};\n    this.onUnLink=function(p1,p2){};\n    this.serialize=function()\n    {\n        var obj={};\n\n        obj.ops=[];\n        for(var i in this.ops)\n        {\n            obj.ops.push( this.ops[i].getSerialized() );\n        }\n        \n        return JSON.stringify(obj);\n    };\n    this.getOpById=function(opid)\n    {\n        for(var i in this.ops)\n        {\n            if(this.ops[i].id==opid)return this.ops[i];\n        }\n\n    };\n    this.deSerialize=function(obj)\n    {\n        if (typeof obj === \"string\") obj=JSON.parse(obj);\n        var self=this;\n\n        function addLink(opinid,opoutid,inName,outName)\n        {\n            var found=false;\n            if(!found)\n            {\n                self.link(\n                    self.getOpById(opinid),\n                    inName,\n                    self.getOpById(opoutid),\n                    outName\n                    );\n            }\n        }\n\n        // add ops...\n        for(var iop in obj.ops)\n        {\n            var op=this.addOp(obj.ops[iop].objName,obj.ops[iop].uiAttribs);\n            op.id=obj.ops[iop].id;\n\n            for(var ipi in obj.ops[iop].portsIn)\n            {\n                var port=op.getPortByName(obj.ops[iop].portsIn[ipi].name);\n                if(port)port.val=obj.ops[iop].portsIn[ipi].value;\n            }\n\n            for(var ipo in obj.ops[iop].portsOut)\n            {\n                var port2=op.getPortByName(obj.ops[iop].portsOut[ipo].name);\n                if(port2)port2.val=obj.ops[iop].portsOut[ipo].value;\n            }\n\n\n            // op.uiAttribs=obj.ops[iop].uiAttribs;\n        }\n\n        // create links...\n        for(iop in obj.ops)\n        {\n            for(var ipi2 in obj.ops[iop].portsIn)\n            {\n\n                for(var ili in obj.ops[iop].portsIn[ipi2].links)\n                {\n                    addLink(\n                        obj.ops[iop].portsIn[ipi2].links[ili].objIn,\n                        obj.ops[iop].portsIn[ipi2].links[ili].objOut,\n                        obj.ops[iop].portsIn[ipi2].links[ili].portIn,\n                        obj.ops[iop].portsIn[ipi2].links[ili].portOut);\n                }\n            }\n\n\n            // for(var ipo in obj.ops[iop].portsOut)\n            // {\n            //     for(var ili in obj.ops[iop].portsOut[ipo].links)\n            //     {\n            //         addLink(\n            //             obj.ops[iop].portsOut[ipo].links[ili].objIn,\n            //             obj.ops[iop].portsOut[ipo].links[ili].objOut,\n            //             obj.ops[iop].portsOut[ipo].links[ili].portIn,\n            //             obj.ops[iop].portsOut[ipo].links[ili].portOut);\n\n            //     }\n            // }\n        }\n\n\n        for(var i in this.ops)\n        {\n            this.ops[i].id=generateUUID();\n        }\n\n\n\n    };\n\n    this.exec();\n\n};\n\n\n\n\n","//http://k3d.ivank.net/K3D.js\n//http://fhtr.blogspot.de/2009/12/3d-models-and-parsing-binary-data-with.html\n//https://github.com/gpjt/webgl-lessons/blob/master/lesson05/index.html\n\nOps.Gl={};\nvar GL=null;\nvar GL=null;\n\nvar mvMatrix = mat4.create();\nvar pMatrix = mat4.create();\n\nOps.Gl.Renderer = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    var simpleShader=new glShader();\n \n\n    this.name='WebGL Renderer';\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var initTranslate=vec3.create();\n    vec3.set(initTranslate, 0,0,-2);\n\n    this.onAnimFrame=function(time)\n    {\n        currentShader=simpleShader;\n\n        GL.clearColor(0,0,0,1);\n        GL.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n        gl.viewport(0,0,640,360);\n        mat4.perspective(pMatrix,45, 800 / 480, 0.01, 1100.0);\n        mat4.identity(mvMatrix);\n        mat4.translate(mvMatrix,mvMatrix, initTranslate);\n\n        GL.enable(GL.BLEND);\n        GL.blendFunc(GL.SRC_ALPHA,GL.ONE_MINUS_SRC_ALPHA);\n\n        self.trigger.call();\n    };\n\n    this.canvas = document.getElementById(\"glcanvas\");\n    GL = this.canvas.getContext(\"experimental-webgl\");\n    gl = this.canvas.getContext(\"experimental-webgl\");\n\n};\n\nOps.Gl.Renderer.prototype = new Op();\n\n\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.ClearColor = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='ClearColor';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.r=this.addInPort(new Port(this,\"r\"));\n    this.g=this.addInPort(new Port(this,\"g\"));\n    this.b=this.addInPort(new Port(this,\"b\"));\n\n    this.render.onTriggered=function()\n    {\n        GL.clearColor(self.r.val,self.g.val,self.b.val,1);\n        GL.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n\n        self.trigger.call();\n    };\n\n};\n\nOps.Gl.ClearColor.prototype = new Op();\n\n\nvar currentShader=null;\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Meshes={};\n\n\n\nOps.Gl.Meshes.Rectangle = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='rectangle';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        // currentShader.setAttributeVertex( self.squareVertexPositionBuffer.itemSize);\n        gl.vertexAttribPointer(currentShader.getAttrVertexPos(),self.squareVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);\n\n        currentShader.bind();\n        gl.bindBuffer(gl.ARRAY_BUFFER, self.squareVertexPositionBuffer);\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, self.squareVertexPositionBuffer.numItems);\n\n        self.trigger.call();\n    };\n\n    this.squareVertexPositionBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.squareVertexPositionBuffer);\n    this.vertices = [\n         1.0,  1.0,  0.0,\n        -1.0,  1.0,  0.0,\n         1.0, -1.0,  0.0,\n        -1.0, -1.0,  0.0\n    ];\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(this.vertices), gl.STATIC_DRAW);\n    this.squareVertexPositionBuffer.itemSize = 3;\n    this.squareVertexPositionBuffer.numItems = 4;\n};\n\nOps.Gl.Meshes.Rectangle.prototype = new Op();\n\n\n\n\n\n\nOps.Gl.Meshes.ObjMesh = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='OBJ Mesh';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.mesh=null;\n\n    this.render.onTriggered=function()\n    {\n        if(self.mesh)\n        {\n            self.mesh.render(currentShader);\n        }\n\n        self.trigger.call();\n    };\n\n\n    ajaxRequest('assets/43_ChinUpperRaise.obj',function(response)\n    {\n        console.log(response);\n                \n        var r=parseOBJ(response);\n        console.log(r);\n        \n        self.mesh=new Mesh(r);\n    });\n\n\n\n};\n\nOps.Gl.Meshes.ObjMesh.prototype = new Op();\n\n\n\n\n// ----------------------------------------------------------------\n\n\nOps.Gl.Meshes.Plotter = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Plotter';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.v=this.addInPort(new Port(this,\"value\"));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        // currentShader.setAttributeVertex( self.buffer.itemSize);\n        gl.vertexAttribPointer(currentShader.getAttrVertexPos(),self.buffer.itemSize, gl.FLOAT, false, 0, 0);\n        currentShader.bind();\n        gl.bindBuffer(gl.ARRAY_BUFFER, self.buffer);\n        gl.drawArrays(gl.LINE_STRIP, 0, self.buffer.numItems);\n\n        self.trigger.call();\n    };\n\n    this.buffer = gl.createBuffer();\n    \n    var num=50;\n    this.vertices = [];\n    for(var i=0;i<num;i++)\n    {\n        this.vertices.push(1/num*i);\n        this.vertices.push(Math.random()-0.5);\n        this.vertices.push(0);\n    }\n\n    function bufferData()\n    {\n        gl.lineWidth(4);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, self.buffer);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(self.vertices), gl.STATIC_DRAW);\n        self.buffer.itemSize = 3;\n        self.buffer.numItems = num;\n    }\n    bufferData();\n\n    this.v.onValueChanged=function()\n    {\n        self.vertices.splice(0,3);\n        self.vertices.push(1);\n        self.vertices.push(self.v.val);\n        self.vertices.push(0);\n\n        for(var i=0;i<num*3;i+=3)\n        {\n            self.vertices[i]=1/num*i;\n        }\n\n        bufferData();\n    };\n\n\n};\n\nOps.Gl.Meshes.Plotter.prototype = new Op();\n\n\n// ----------------------------------------------------------------\n\nOps.Gl.Meshes.Triangle = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Triangle';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        // currentShader.setAttributeVertex( self.squareVertexPositionBuffer.itemSize);\n        // gl.vertexAttribPointer(shader.getAttrVertexPos(),self.squareVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);\n        gl.vertexAttribPointer(currentShader.getAttrVertexPos(),self.squareVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);\n\n\n        currentShader.bind();\n        gl.bindBuffer(gl.ARRAY_BUFFER, self.squareVertexPositionBuffer);\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, self.squareVertexPositionBuffer.numItems);\n\n        self.trigger.call();\n    };\n\n    this.squareVertexPositionBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.squareVertexPositionBuffer);\n    this.vertices = [\n         0.0,  1.0,  0.0,\n        -1.0,  -1.0,  0.0,\n         1.0, -1.0,  0.0\n    ];\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(this.vertices), gl.STATIC_DRAW);\n    this.squareVertexPositionBuffer.itemSize = 3;\n    this.squareVertexPositionBuffer.numItems = 3;\n\n\n};\n\nOps.Gl.Meshes.Triangle.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.Shader={};\n\nOps.Gl.Shader.BasicMaterial = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='BasicMaterial';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n\n    this.texture=Texture.load('assets/remo_diffuse.jpg');\n\n\n    this.doRender=function()\n    {\n        currentShader=shader;\n\n        gl.activeTexture(gl.TEXTURE0);\n\n        if(self.texture.loaded===true)\n        {\n            gl.bindTexture(gl.TEXTURE_2D, self.texture.tex);\n\n            \n        }\n\n\n        self.trigger.call();\n    };\n\n    var srcFrag=''+\n        'precision mediump float;\\n'+\n        'varying vec2 texCoord;\\n'+\n        'uniform sampler2D texture;\\n'+\n        'uniform float r;\\n'+\n        'uniform float g;\\n'+\n        'uniform float b;\\n'+\n        'uniform float a;\\n'+\n        '\\n'+\n        'void main()\\n'+\n        '{\\n'+\n\n        '   float rr=texture2D(texture,texCoord).r;\\n'+\n\n        '   gl_FragColor = vec4(r,g,b,a);\\n'+\n        '}\\n';\n\n\n    var shader=new glShader();\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n\n    this.textureUniform=new Uniform(shader,'t','texture',this.texture);\n\n\n    this.doRender();\n\n    this.r=this.addInPort(new Port(this,\"r\"));\n    this.r.onValueChanged=function()\n    {\n        if(!self.r.uniform) self.r.uniform=new Uniform(shader,'f','r',self.r.val);\n        else self.r.uniform.setValue(self.r.val);\n\n        // shader.bind();\n        // if(!self.r.uniLoc) self.r.uniLoc=gl.getUniformLocation(shader.getProgram(), \"r\");\n        // gl.uniform1f(self.r.uniLoc, self.r.val);\n    };\n\n    this.g=this.addInPort(new Port(this,\"g\"));\n    this.g.onValueChanged=function()\n    {\n        if(!self.g.uniform) self.g.uniform=new Uniform(shader,'f','g',self.g.val);\n        else self.g.uniform.setValue(self.g.val);\n\n        // shader.bind();\n        // if(!self.g.uniLoc) self.g.uniLoc=gl.getUniformLocation(shader.getProgram(), \"g\");\n        // gl.uniform1f(self.g.uniLoc, self.g.val);\n    };\n\n    this.b=this.addInPort(new Port(this,\"b\"));\n    this.b.onValueChanged=function()\n    {\n        if(!self.b.uniform) self.b.uniform=new Uniform(shader,'f','b',self.b.val);\n        else self.b.uniform.setValue(self.b.val);\n\n        // shader.bind();\n        // if(!self.b.uniLoc) self.b.uniLoc=gl.getUniformLocation(shader.getProgram(), \"b\");\n        // gl.uniform1f(self.b.uniLoc, self.b.val);\n    };\n\n    this.a=this.addInPort(new Port(this,\"a\"));\n    this.a.onValueChanged=function()\n    {\n        if(!self.a.uniform) self.a.uniform=new Uniform(shader,'f','a',self.a.val);\n        else self.a.uniform.setValue(self.a.val);\n\n        // shader.bind();\n        // if(!self.a.uniLoc) self.a.uniLoc=gl.getUniformLocation(shader.getProgram(), \"a\");\n        // gl.uniform1f(self.a.uniLoc, self.a.val);\n    };\n\n    this.r.val=Math.random();\n    this.g.val=Math.random();\n    this.b.val=Math.random();\n    this.a.val=1.0;\n\n    this.render.onTriggered=this.doRender;\n};\n\nOps.Gl.Shader.BasicMaterial.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Shader.Schwurbel = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Schwurbel';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.timer=this.addInPort(new Port(this,\"time\"));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.doRender=function()\n    {\n        currentShader=shader;\n        if(!self.timer.uniLoc)\n        {\n            shader.bind();\n            self.timer.uniLoc=gl.getUniformLocation(shader.getProgram(), \"time\");\n        }\n        gl.uniform1f(self.timer.uniLoc, self.timer.val);\n\n        self.trigger.call();\n    };\n\n    var srcFrag=''+\n        'precision mediump float;\\n'+\n        'uniform float time;\\n'+\n        '\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        'float c=sqrt(sin(time*0.02)*cos((time+gl_FragCoord.y)*0.02)+sin(time+gl_FragCoord.x*0.02)*sin(time+gl_FragCoord.y*0.02));\\n'+\n        'gl_FragColor = vec4( c,c,c,1.0);\\n'+\n        '}\\n';\n\n    var shader=new glShader();\n    shader.compile(shader.getDefaultVertexShader(),srcFrag);\n\n    this.doRender();\n    this.render.onTriggered=this.doRender;\n};\n\nOps.Gl.Shader.Schwurbel.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Shader.Noise = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Noise';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var timeUniform=-1;\n    var timeStart=-1;\n\n    this.doRender=function()\n    {\n        if(timeUniform==-1)\n        {\n            timeStart=Date.now();\n            shader.bind();\n            timeUniform=gl.getUniformLocation(shader.getProgram(), \"time\");\n        }\n\n        gl.uniform1f(timeUniform, (Date.now()-timeStart)/1000);\n        currentShader=shader;\n\n        self.trigger.call();\n    };\n\n    var srcFrag=''+\n        'precision mediump float;\\n'+\n        'uniform float time;\\n'+\n        '\\n'+\n        'float random(vec2 co)\\n'+\n        '{\\n'+\n        '   return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\\n'+\n        '}\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        '   float c=random(time*gl_FragCoord.xy);'+\n        '   gl_FragColor = vec4( c,c,c,1.0);\\n'+\n        '}\\n';\n\n\n    var shader=new glShader();\n    shader.compile(shader.getDefaultVertexShader(),srcFrag);\n\n    this.doRender();\n    this.render.onTriggered=this.doRender;\n};\n\nOps.Gl.Shader.Noise.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.Cube = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Cube';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n\n\n    this.render.onTriggered=function()\n    {\n        GL.bindBuffer(gl.ARRAY_BUFFER, this.cubeVerticesBuffer);\n        GL.bindBuffer(GL.ELEMENT_ARRAY_BUFFER, self.cubeVerticesIndexBuffer);\n        // setMatrixUniforms();\n        GL.drawElements(GL.TRIANGLES, 36, GL.UNSIGNED_SHORT, 0);\n    };\n\n    this.cubeVerticesIndexBuffer=null;\n    this.cubeVerticesBuffer=null;\n    // this.cubeVerticesColorBuffer=null;\n\n    this.init=function()\n    {\n        var vertices = [\n            // Front face\n            -1.0, -1.0,  1.0,\n             1.0, -1.0,  1.0,\n             1.0,  1.0,  1.0,\n            -1.0,  1.0,  1.0,\n            \n            // Back face\n            -1.0, -1.0, -1.0,\n            -1.0,  1.0, -1.0,\n             1.0,  1.0, -1.0,\n             1.0, -1.0, -1.0,\n            \n            // Top face\n            -1.0,  1.0, -1.0,\n            -1.0,  1.0,  1.0,\n             1.0,  1.0,  1.0,\n             1.0,  1.0, -1.0,\n            \n            // Bottom face\n            -1.0, -1.0, -1.0,\n             1.0, -1.0, -1.0,\n             1.0, -1.0,  1.0,\n            -1.0, -1.0,  1.0,\n            \n            // Right face\n             1.0, -1.0, -1.0,\n             1.0,  1.0, -1.0,\n             1.0,  1.0,  1.0,\n             1.0, -1.0,  1.0,\n            \n            // Left face\n            -1.0, -1.0, -1.0,\n            -1.0, -1.0,  1.0,\n            -1.0,  1.0,  1.0,\n            -1.0,  1.0, -1.0\n          ];\n\n  this.cubeVerticesBuffer = GL.createBuffer();\n  \n  GL.bindBuffer(GL.ARRAY_BUFFER, this.cubeVerticesBuffer);\n\n  GL.bufferData(GL.ARRAY_BUFFER, new Float32Array(vertices), GL.STATIC_DRAW);\n\n        // var colors = [\n        //     [1.0,  1.0,  1.0,  1.0],    // Front face: white\n        //     [1.0,  0.0,  0.0,  1.0],    // Back face: red\n        //     [0.0,  1.0,  0.0,  1.0],    // Top face: green\n        //     [0.0,  0.0,  1.0,  1.0],    // Bottom face: blue\n        //     [1.0,  1.0,  0.0,  1.0],    // Right face: yellow\n        //     [1.0,  0.0,  1.0,  1.0]     // Left face: purple\n        //   ];\n\n        // var generatedColors = [];\n\n        // for (j=0; j<6; j++)\n        // {\n        //     var c = colors[j];\n        //     for (var i=0; i<4; i++)\n        //     {\n        //       generatedColors = generatedColors.concat(c);\n        //     }\n        // }\n\n        // cubeVerticesColorBuffer = GL.createBuffer();\n        // GL.bindBuffer(GL.ARRAY_BUFFER, cubeVerticesColorBuffer);\n        // GL.bufferData(GL.ARRAY_BUFFER, new Float32Array(generatedColors), GL.STATIC_DRAW);\n\n        this.cubeVerticesIndexBuffer = GL.createBuffer();\n\n        // console.log(this.cubeVerticesIndexBuffer);\n                \n        GL.bindBuffer(GL.ELEMENT_ARRAY_BUFFER, this.cubeVerticesIndexBuffer);\n\n        // This array defines each face as two triangles, using the\n        // indices into the vertex array to specify each triangle's\n        // position.\n\n        var cubeVertexIndices = [\n        0,  1,  2,      0,  2,  3,    // front\n        4,  5,  6,      4,  6,  7,    // back\n        8,  9,  10,     8,  10, 11,   // top\n        12, 13, 14,     12, 14, 15,   // bottom\n        16, 17, 18,     16, 18, 19,   // right\n        20, 21, 22,     20, 22, 23    // left\n        ];\n\n        // Now send the element array to GL\n\n        GL.bufferData(GL.ELEMENT_ARRAY_BUFFER, new Uint16Array(cubeVertexIndices), GL.STATIC_DRAW);\n    };\n\n    this.init();\n\n};\n\nOps.Gl.Cube.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Matrix={};\n\n\nOps.Gl.Matrix.Translate = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='translate';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.x=this.addInPort(new Port(this,\"x\"));\n    this.y=this.addInPort(new Port(this,\"y\"));\n    this.z=this.addInPort(new Port(this,\"z\"));\n    this.x.val=0.0;\n    this.y.val=0.0;\n    this.z.val=0.0;\n    \n    var vec=vec3.create();\n\n    this.render.onTriggered=function()\n    {\n        vec3.set(vec, self.x.val,self.y.val,self.z.val);\n\n        mat4.translate(mvMatrix,mvMatrix, vec);\n        self.trigger.call();\n    };\n\n};\n\nOps.Gl.Matrix.Translate.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.Matrix.Transform = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var DEG2RAD = 3.14159/180.0;\n    this.name='transform';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.posX=this.addInPort(new Port(this,\"posX\"));\n    this.posY=this.addInPort(new Port(this,\"posY\"));\n    this.posZ=this.addInPort(new Port(this,\"posZ\"));\n\n    this.scaleX=this.addInPort(new Port(this,\"scaleX\"));\n    this.scaleY=this.addInPort(new Port(this,\"scaleY\"));\n    this.scaleZ=this.addInPort(new Port(this,\"scaleZ\"));\n\n    this.rotX=this.addInPort(new Port(this,\"rotX\"));\n    this.rotY=this.addInPort(new Port(this,\"rotY\"));\n    this.rotZ=this.addInPort(new Port(this,\"rotZ\"));\n    \n    var vPos=vec3.create();\n    var vScale=vec3.create();\n    var oldMatrix = mat4.create();\n    var transMatrix = mat4.create();\n    mat4.identity(transMatrix);\n\n    var doScale=false;\n    var doTranslate=false;\n\n    this.render.onTriggered=function()\n    {\n        mat4.copy(oldMatrix, mvMatrix);\n\n        mat4.multiply(mvMatrix,mvMatrix,transMatrix);\n\n        self.trigger.call();\n\n        mat4.copy(mvMatrix,oldMatrix);\n    };\n\n    var updateMatrix=function()\n    {\n        mat4.identity(transMatrix);\n        if(doTranslate)mat4.translate(transMatrix,transMatrix, vPos);\n\n        if(self.rotX.val!==0)mat4.rotateX(transMatrix,transMatrix, self.rotX.val*DEG2RAD);\n        if(self.rotY.val!==0)mat4.rotateY(transMatrix,transMatrix, self.rotY.val*DEG2RAD);\n        if(self.rotZ.val!==0)mat4.rotateZ(transMatrix,transMatrix, self.rotZ.val*DEG2RAD);\n\n        if(doScale)mat4.scale(transMatrix,transMatrix, vScale);\n    };\n\n    this.translateChanged=function()\n    {\n        doTranslate=false;\n        if(self.posX.val!==0.0 || self.posY.val!==0.0 || self.posZ.val!==0.0)doTranslate=true;\n        vec3.set(vPos, self.posX.val,self.posY.val,self.posZ.val);\n        updateMatrix();\n    };\n\n    this.scaleChanged=function()\n    {\n        doScale=false;\n        if(self.scaleX.val!==0.0 || self.scaleY.val!==0.0 || self.scaleZ.val!==0.0)doScale=true;\n        vec3.set(vScale, self.scaleX.val,self.scaleY.val,self.scaleZ.val);\n        updateMatrix();\n    };\n\n    this.rotChanged=function()\n    {\n        updateMatrix();\n    };\n\n    this.rotX.onValueChanged=this.rotChanged;\n    this.rotY.onValueChanged=this.rotChanged;\n    this.rotZ.onValueChanged=this.rotChanged;\n\n    this.scaleX.onValueChanged=this.scaleChanged;\n    this.scaleY.onValueChanged=this.scaleChanged;\n    this.scaleZ.onValueChanged=this.scaleChanged;\n\n    this.posX.onValueChanged=this.translateChanged;\n    this.posY.onValueChanged=this.translateChanged;\n    this.posZ.onValueChanged=this.translateChanged;\n\n    this.rotX.val=0.0;\n    this.rotY.val=0.0;\n    this.rotZ.val=0.0;\n\n    this.scaleX.val=1.0;\n    this.scaleY.val=1.0;\n    this.scaleZ.val=1.0;\n\n    this.posX.val=0.0;\n    this.posY.val=0.0;\n    this.posZ.val=0.0;\n\n    updateMatrix();\n};\n\nOps.Gl.Matrix.Translate.prototype = new Op();\n\n\n\n\n\n","// https://github.com/automat/foam-gl\n// http://howlerjs.com/\n//http://learningwebgl.com/lessons/lesson01/index.html\n\n\nOps.Log = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='logger';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.input=this.addInPort(new Port(this,\"input\"));\n    this.input.val='';\n\n    this.exec=function()\n    {\n        console.log(\"[log] \" + self.input.val);\n    };\n\n    this.exe.onTriggered=this.exec;\n    this.input.onValueChanged=this.exec;\n};\nOps.Log.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\n\nOps.CallsPerSecond = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='CallsPerSecond';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.timeStart=0;\n    this.cps=0;\n\n    this.exe.onTriggered=function()\n    {\n        if(self.timeStart===0)self.timeStart=Date.now();\n        var now = Date.now();\n\n        if(now-self.timeStart>1000)\n        {\n            self.timeStart=Date.now();\n            console.log('cps: '+self.cps);\n            self.cps=0;\n        }\n\n        self.cps++;\n    };\n};\nOps.CallsPerSecond.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\nOps.Value = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Value';\n    this.v=this.addInPort(new Port(this,\"value\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.v.val;\n    };\n\n    this.v.onValueChanged=this.exec;\n};\n\nOps.Value.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\n\nOps.TimeLineTime = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='TimeLineTime';\n    this.theTime=this.addOutPort(new Port(this,\"time\"));\n\n    this.onAnimFrame=function(time)\n    {\n        this.theTime.val=time;\n    };\n\n};\nOps.TimeLineTime.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\n\n\n\nOps.Repeat = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Repeat';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.num=this.addInPort(new Port(this,\"num\"));\n    this.num.val=5;\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n    this.idx=this.addOutPort(new Port(this,\"index\"));\n\n    this.exe.onTriggered=function()\n    {\n\n        for(var i=0;i<self.num.value;i++)\n        {\n            self.idx.val=i;\n            self.trigger.call();\n        }\n\n    };\n};\nOps.Repeat.prototype = new Op();\n\n\n\n\n// ---------------------------------------------------------------------------\n\n\nOps.IfTrueThen = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='if true then';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.bool=this.addInPort(new Port(this,\"boolean\"));\n    this.bool.val=false;\n\n    this.triggerThen=this.addOutPort(new Port(this,\"then\",OP_PORT_TYPE_FUNCTION));\n    this.triggerElse=this.addOutPort(new Port(this,\"else\",OP_PORT_TYPE_FUNCTION));\n\n    this.exe.onTriggered=function()\n    {\n        if(self.bool.val===true)\n        {\n            self.triggerThen.call();\n        }\n        else\n        {\n            self.triggerElse.call();\n        }\n    };\n\n    this.bool.onValueChanged=function()\n    {\n        self.exe.onTriggered();\n    };\n\n};\nOps.IfTrueThen.prototype = new Op();\n\n\n\n\n\n// ---------------------------------------------------------------------------\n\nOps.Interval = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='Interval';\n    this.timeOutId=-1;\n    this.interval=this.addInPort(new Port(this,\"interval\"));\n    this.interval.val=1000;\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.exec=function()\n    {\n        if(this.timeOutId!=-1)return;\n        var self=this;\n\n        this.timeOutId=setTimeout(function()\n        {\n            self.timeOutId=-1;\n            self.trigger.call();\n            self.exec();\n        },\n        this.interval.val );\n    };\n\n    this.exec();\n\n};\n\nOps.Interval.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\n// --------------------------------------------------------------------------\n\nOps.Anim={};\n\nOps.Anim.SinusAnim = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='SinusAnim';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    var self=this;\n\n    this.exe.onTriggered=function()\n    {\n        self.result.val=Math.sin(Date.now()/1000.0);\n    };\n\n    this.exe.onTriggered();\n\n};\n\nOps.Anim.SinusAnim.prototype = new Op();\n\n\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Anim.RelativeTime = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='RelativeTime';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    var self=this;\n    var startTime=Date.now()/1000.0;\n\n    this.exe.onTriggered=function()\n    {\n        self.result.val=Date.now()/1000.0-startTime;\n    };\n\n    this.exe.onTriggered();\n\n};\n\nOps.Anim.RelativeTime.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\nOps.Input={};\n\nOps.Input.GamePad = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='GamePad';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.numPads=this.addOutPort(new Port(this,\"numPads\"));\n    this.axis1=this.addOutPort(new Port(this,\"axis1\"));\n    this.axis2=this.addOutPort(new Port(this,\"axis2\"));\n    this.axis3=this.addOutPort(new Port(this,\"axis3\"));\n    this.axis4=this.addOutPort(new Port(this,\"axis4\"));\n    this.button0=this.addOutPort(new Port(this,\"button0\"));\n    this.button1=this.addOutPort(new Port(this,\"button1\"));\n    this.button2=this.addOutPort(new Port(this,\"button2\"));\n    this.button3=this.addOutPort(new Port(this,\"button3\"));\n    this.button4=this.addOutPort(new Port(this,\"button4\"));\n\n    var self=this;\n    var startTime=Date.now()/1000.0;\n\n    this.exe.onTriggered=function()\n    {\n        var gamePads=navigator.getGamepads();\n        var count=0;\n\n        for(var gp in gamePads)\n        {\n            if(gamePads[gp].axes)\n            {\n                self.axis1.val=gamePads[gp].axes[0];\n                self.axis2.val=gamePads[gp].axes[1];\n                self.axis3.val=gamePads[gp].axes[2];\n                self.axis4.val=gamePads[gp].axes[3];\n\n                self.button0.val=gamePads[gp].buttons[0].pressed;\n                self.button0.val=gamePads[gp].buttons[1].pressed;\n                self.button2.val=gamePads[gp].buttons[2].pressed;\n                self.button3.val=gamePads[gp].buttons[3].pressed;\n                self.button4.val=gamePads[gp].buttons[4].pressed;\n\n                count++;\n            }\n        }\n\n        self.numPads.val=count;\n    };\n\n    this.exe.onTriggered();\n\n};\n\nOps.Input.GamePad.prototype = new Op();\n\n","Ops.Math={};\n\n\nOps.Math.Random = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='random';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.exe.onTriggered=function()\n    {\n        self.result.val=Math.random();\n    };\n\n    this.exe.onTriggered();\n};\n\nOps.Math.Random.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\n\n\nOps.Math.MapRange = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='map value range';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.v=this.addInPort(new Port(this,\"value\"));\n    this.old_min=this.addInPort(new Port(this,\"old min\"));\n    this.old_max=this.addInPort(new Port(this,\"old max\"));\n    this.new_min=this.addInPort(new Port(this,\"new min\"));\n    this.new_max=this.addInPort(new Port(this,\"new max\"));\n\n    this.exec= function()\n    {\n        if(self.v.val>self.old_max.val)\n        {\n            self.result.val=self.new_max.val;\n            return;\n        }\n        else\n        if(self.v.val<self.old_min.val)\n        {\n            self.result.val=self.new_min.val;\n            return;\n        }\n\n        var nMin=parseFloat(self.new_min.val);\n        var nMax=parseFloat(self.new_max.val);\n        var oMin=parseFloat(self.old_min.val);\n        var oMax=parseFloat(self.old_max.val);\n        var x=parseFloat(self.v.val);\n\n        var reverseInput = false;\n        var oldMin = Math.min( oMin, oMax );\n        var oldMax = Math.max( oMin, oMax );\n        if(oldMin!= oMin) reverseInput = true;\n\n        var reverseOutput = false;\n        var newMin = Math.min( nMin, nMax );\n        var newMax = Math.max( nMin, nMax );\n        if(newMin != nMin) reverseOutput = true;\n\n        var portion=0;\n\n        if(reverseInput) portion = (oldMax-x)*(newMax-newMin)/(oldMax-oldMin);\n            else portion = (x-oldMin)*(newMax-newMin)/(oldMax-oldMin);\n        \n        if(reverseOutput) self.result.val = newMax - portion;\n            else self.result.val = portion + newMin;\n\n    };\n\n    this.v.val=0;\n    this.old_min.val=-1;\n    this.old_max.val=1;\n    this.new_min.val=0;\n    this.new_max.val=1;\n\n\n    this.v.onValueChanged=this.exec;\n    this.old_min.onValueChanged=this.exec;\n    this.old_max.onValueChanged=this.exec;\n    this.new_min.onValueChanged=this.exec;\n    this.new_max.onValueChanged=this.exec;\n\n    this.exec();\n\n};\n\nOps.Math.MapRange.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Abs = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    this.name='abs';\n    this.number=this.addInPort(new Port(this,\"number\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.number.onValueChanged=function()\n    {\n        self.result.val=Math.abs(self.number.val);\n    };\n};\n\nOps.Math.Abs.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Sin = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    this.name='Sinus';\n    this.number=this.addInPort(new Port(this,\"number\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.number.onValueChanged=function()\n    {\n        self.result.val=Math.sin(self.number.val);\n    };\n};\n\nOps.Math.Sin.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Sum = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='sum';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=parseFloat(self.number1.val)+parseFloat(self.number2.val);\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Sum.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Multiply = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='multiply';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val*self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n\n};\n\nOps.Math.Multiply.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Divide = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Divide';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val/self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Divide.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\nOps.Math.Compare={};\n\n\n\n\nOps.Math.Compare.IsEven = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='isEven';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n\n    this.exec= function()\n    {\n        self.result.val=!( self.number1.val & 1 );\n    };\n\n    this.number1.onValueChanged=this.exec;\n};\n\nOps.Math.Compare.IsEven.prototype = new Op();\n\n\n\nOps.Math.Compare.Greater = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Greater';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val>self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Compare.Greater.prototype = new Op();\n\n\n\n\n\n\nOps.Math.Compare.Between = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Between';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number=this.addInPort(new Port(this,\"value\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n    this.number.val=2.0;\n    this.number1.val=1.0;\n    this.number2.val=3.0;\n\n    this.exec= function()\n    {\n        self.result.val=\n            (\n                self.number.val>Math.min(self.number1.val,self.number2.val) &&\n                self.number.val<Math.max(self.number1.val,self.number2.val)\n            );\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n    this.number.onValueChanged=this.exec;\n};\nOps.Math.Compare.Between.prototype = new Op();\n\n\n\n\nOps.Math.Compare.Lesser = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Lesser';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val<self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n\n};\n\nOps.Math.Compare.Lesser.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Math.Compare.Equals = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Equals';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val==self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Compare.Equals.prototype = new Op();\n\n"],"sourceRoot":"/source/"}