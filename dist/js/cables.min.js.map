{"version":3,"sources":["timer.js","utils.js","cgl_mesh.js","cgl_shader.js","cgl_state.js","cgl_texture.js","cgl_textureeffect.js","holo.js","ops.devices.js","ops.gl.imgeffects.js","ops.gl.js","ops.gl.meshes.js","ops.js","ops.json.js","ops.math.js","ops.net.js"],"names":["Timer","getTime","lastTime","Date","now","timeStart","timeOffset","self","this","currentTime","paused","update","togglePlay","play","pause","setOffset","val","generateUUID","d","uuid","replace","c","r","Math","random","floor","toString","ajaxRequest","url","callback","request","XMLHttpRequest","open","responseType","onload","e","target","response","send","CGL","DEG2RAD","Mesh","geom","bufTexCoords","bufVertices","gl","createBuffer","bufVerticesIndizes","setGeom","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","vertices","STATIC_DRAW","itemSize","numItems","length","ELEMENT_ARRAY_BUFFER","Uint16Array","verticesIndices","texCoords","render","shader","bind","GL","enableVertexAttribArray","getAttrVertexPos","getAttrTexCoords","vertexAttribPointer","FLOAT","drawElements","TRIANGLES","UNSIGNED_SHORT","Geometry","faceVertCount","texCoordsIndices","clear","addFace","a","b","face","iv","push","parseOBJ","buff","_readline","off","s","String","fromCharCode","groups","c_norms","i_norms","cg","from","to","Uint8Array","line","cds","split","x","parseFloat","y","z","v0a","v1a","v2a","vi0","parseInt","vi1","vi2","ui0","ui1","ui2","ni0","ni1","ni2","vlen","ulen","nlen","v3a","vi3","ui3","ni3","Uniform","_shader","_type","_name","_value","loc","name","type","value","needsUpdate","addUniform","getType","getName","resetLoc","updateValueF","getUniformLocation","getProgram","uniform1f","setValueF","v","updateValueT","console","log","uniform1i","setValueT","setValue","updateValue","Shader","program","uniforms","needsRecompile","removeUniform","i","splice","uni","getDefaultVertexShader","getDefaultFragmentShader","srcVert","srcFrag","setSource","projMatrixUniform","mvMatrixUniform","attrTexCoords","attrVertexPos","hasTextureUniforms","compile","defines","endl","vs","fs","createProgram","getAttribLocation","useProgram","uniformMatrix4fv","cgl","pMatrix","mvMatrix","createShader","str","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","VERTEX_SHADER","FRAGMENT_SHADER","warn","getShaderInfoLog","lines","match","j","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","vstr","fstr","vshader","fshader","attachShader","State","mvMatrixStack","pMatrixStack","shaderStack","mat4","create","identity","simpleShader","currentShader","canvasWidth","canvasHeight","beginFrame","setShader","endFrame","setPreviousShader","getShader","pop","pushMvMatrix","copy","popMvMatrix","pushPMatrix","popPMatrix","Texture","tex","createTexture","width","height","slot","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","setSize","w","h","arr","uarr","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR","texImage2D","RGBA","UNSIGNED_BYTE","initTexture","img","image","TEXTURE_MAG_FILTER","NEAREST","load","finishedCallback","texture","Image","src","TextureEffect","mesh","textureSource","textureTarget","frameBuf","createFramebuffer","renderbuffer","createRenderbuffer","switched","startEffect","setSourceTexture","bindFramebuffer","FRAMEBUFFER","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","framebufferTexture2D","COLOR_ATTACHMENT0","framebufferRenderbuffer","DEPTH_ATTACHMENT","getCurrentTargetTexture","getCurrentSourceTexture","viewport","perspective","clearColor","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","finish","PORT_DIR_IN","PORT_DIR_OUT","OP_PORT_TYPE_VALUE","OP_PORT_TYPE_FUNCTION","OP_PORT_TYPE_OBJECT","OP_PORT_TYPE_TEXTURE","Ops","Op","objName","portsOut","portsIn","posts","uiAttribs","id","addOutPort","p","direction","parent","addInPort","execute","exec","printInfo","ipo","removeLinks","getPort","ipi","findFittingPort","otherPort","Link","canLink","getSerialized","op","getPortByName","Port","links","valueBeforeLink","__defineGetter__","__defineSetter__","isLinked","onValueChanged","onTriggered","addLink","l","removeLinkTo","p2","portIn","portOut","remove","isLinkedTo","call","goals","getTypeString","obj","removeLink","link","scene","getOtherPort","onUnLink","p1","objIn","objOut","canLinkText","Scene","ops","timer","animFrameOps","deleteOp","addOp","eval","hasOwnProperty","onAdd","opid","tryRelink","reLinkP1","reLinkP2","onDelete","requestAnimationFrame","time","onAnimFrame","op1","port1Name","op2","port2Name","port1","port2","onLink","serialize","JSON","stringify","getOpById","deSerialize","opinid","opoutid","inName","outName","found","parse","iop","port","ipi2","ili","prototype","Devices","GamePad","apply","arguments","exe","numPads","axis1","axis2","axis3","axis4","button0","button1","button2","button3","button4","gamePads","navigator","getGamepads","count","gp","axes","buttons","pressed","LeapMotion","transX","transY","transZ","finger0X","finger0Y","finger0Z","Leap","loop","frame","_translation","fingers","tipPosition","Gl","TextureEffects","texOut","trigger","ready","effect","currentTextureEffect","Invert","Desaturate","amount","amountUniform","RgbMultiply","g","uniformR","uniformG","uniformB","Vignette","lensRadius1","lensRadius2","uniLensRadius1","uniLensRadius2","Blur","uniDirX","uniDirY","Renderer","initTranslate","vec3","set","canvas","clientWidth","clientHeight","enable","DEPTH_TEST","translate","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","document","getElementById","getContext","ClearColor","ClearDepth","TextureEmpty","textureOut","sizeChanged","filename","Meshes","Plotter","lineWidth","buffer","num","drawArrays","LINE_STRIP","BasicMaterial","doRender","uniform","textureUniform","Schwurbel","uniLoc","Noise","timeUniform","Matrix","Translate","vec","Scale","scale","vScale","transMatrix","doScale","multiply","updateMatrix","scaleChanged","Transform","posX","posY","posZ","scaleX","scaleY","scaleZ","rotX","rotY","rotZ","vPos","doTranslate","rotateX","rotateY","rotateZ","translateChanged","rotChanged","RandomCluster","reset","randoms","randomsRot","randomsFloats","fromValues","size","idx","rnd","Render2Texture","Triangle","Rectangle","rebuild","FullscreenRectangle","Circle","calc","oldPosX","oldPosY","segments","percent","degInRad","posx","cos","radius","posy","sin","ObjMesh","unwrap","ind","crd","cpi","ncrd","Array","Cube","Log","input","CallsPerSecond","cps","Value","result","TimeLineTime","theTime","Repeat","IfTrueThen","bool","triggerThen","triggerElse","Group","triggers","Interval","timeOutId","interval","setTimeout","Anim","SinusAnim","RelativeTime","startTime","Json","jsonValue","data","key","Random","Clamp","clamp","min","max","SmoothStep","smoothstep","MapRange","old_min","old_max","new_min","new_max","nMin","nMax","oMin","oMax","reverseInput","oldMin","oldMax","reverseOutput","newMin","newMax","portion","Abs","number","abs","Sin","Sum","number1","number2","Multiply","Divide","Compare","IsEven","Greater","Between","Lesser","Equals","Net","Websocket","checkConnection","connected","connect","connectedTo","connection","close","window","WebSocket","MozWebSocket","error","onerror","message","timeout","onclose","onopen","onmessage","json","clearTimeout"],"mappings":"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","file":"cables.min.js","sourcesContent":["\n\nfunction Timer()\n{\n    var self=this;\n    var timeStart=Date.now();\n    var timeOffset=0;\n\n    var currentTime=0;\n    var lastTime=0;\n    var paused=true;\n\n    function getTime()\n    {\n        lastTime=(Date.now()-timeStart)/1000;\n        return lastTime+timeOffset;\n\n    }\n\n    this.update=function()\n    {\n        if(paused) return;\n        currentTime=getTime();\n\n        return currentTime;\n    };\n\n    this.getTime=function()\n    {\n        return currentTime;\n    };\n\n    this.togglePlay=function()\n    {\n        if(paused)self.play();\n            else self.pause();\n    };\n\n    this.setOffset=function(val)\n    {\n        if(currentTime+val<0)\n        {\n            timeStart=Date.now();\n            timeOffset=0;\n            currentTime=0;\n        }\n        else\n        {\n            timeOffset+=val;\n            currentTime=lastTime+timeOffset;\n        }\n        \n\n    };\n\n    this.play=function()\n    {\n        timeStart=Date.now();\n        paused=false;\n    };\n\n    this.pause=function()\n    {\n        timeOffset=currentTime;\n        paused=true;\n    };\n\n}","function generateUUID()\n{\n    var d = new Date().getTime();\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c)\n    {\n        var r = (d + Math.random()*16)%16 | 0;\n        d = Math.floor(d/16);\n        return (c=='x' ? r : (r&0x3|0x8)).toString(16);\n    });\n    return uuid;\n}\n\n// ----------------------------------------------------------------\nfunction ajaxRequest(url, callback)\n{\n    var request = new XMLHttpRequest();\n    request.open(\"GET\", url, true);\n    request.responseType = \"arraybuffer\";\n    request.onload = function(e)\n    {\n        callback(e.target.response);\n    };\n    request.send();\n}\n\nString.prototype.endl = function(){return this+'\\n';};\n\n\n","var CGL=CGL ||\n{\n    DEG2RAD:3.14159/180.0\n};\n\n\n\nCGL.Mesh=function(geom)\n{\n    var bufTexCoords=-1;\n    var bufVertices = gl.createBuffer();\n    var bufVerticesIndizes = gl.createBuffer();\n\n    this.setGeom=function(geom)\n    {\n        \n        gl.bindBuffer(gl.ARRAY_BUFFER, bufVertices);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(geom.vertices), gl.STATIC_DRAW);\n        bufVertices.itemSize = 3;\n        bufVertices.numItems = geom.vertices.length/3;\n\n\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufVerticesIndizes);\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(geom.verticesIndices), gl.STATIC_DRAW);\n        bufVerticesIndizes.itemSize = 1;\n        bufVerticesIndizes.numItems = geom.verticesIndices.length;\n\n        if(geom.texCoords.length>0)\n        {\n            if(bufTexCoords==-1)bufTexCoords = gl.createBuffer();\n            gl.bindBuffer(gl.ARRAY_BUFFER, bufTexCoords);\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(geom.texCoords), gl.STATIC_DRAW);\n            bufTexCoords.itemSize = 2;\n            bufTexCoords.numItems = geom.texCoords.length/bufTexCoords.itemSize;\n        }\n\n    };\n\n    this.setGeom(geom);\n\n\n    this.render=function(shader)\n    {\n        shader.bind();\n\n        GL.enableVertexAttribArray(shader.getAttrVertexPos());\n        if(bufTexCoords!=-1) GL.enableVertexAttribArray(shader.getAttrTexCoords());\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, bufVertices);\n        gl.vertexAttribPointer(shader.getAttrVertexPos(),bufVertices.itemSize, gl.FLOAT, false, 0, 0);\n\n        if(bufTexCoords!=-1)\n        {\n            gl.bindBuffer(gl.ARRAY_BUFFER, bufTexCoords);\n            gl.vertexAttribPointer(shader.getAttrTexCoords(),bufTexCoords.itemSize, gl.FLOAT, false, 0, 0);\n        }\n\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufVerticesIndizes);\n        gl.drawElements(gl.TRIANGLES, bufVerticesIndizes.numItems, gl.UNSIGNED_SHORT, 0);\n    };\n\n};\n\nCGL.Geometry=function()\n{\n    this.faceVertCount=3;\n    this.vertices=[];\n    this.verticesIndices=[];\n    this.texCoords=[];\n    this.texCoordsIndices=[];\n\n    this.clear=function()\n    {\n        this.vertices.length=0;\n        this.verticesIndices.length=0;\n        this.texCoords.length=0;\n        this.texCoordsIndices.length=0;\n    };\n\n    this.addFace=function(a,b,c)\n    {\n        var face=[-1,-1,-1];\n\n        for(var iv=0;iv<this.vertices;iv+=3)\n        {\n            if( this.vertices[iv+0]==a[0] &&\n                this.vertices[iv+1]==a[1] &&\n                this.vertices[iv+2]==a[2]) face[0]=iv/3;\n\n            if( this.vertices[iv+0]==b[0] &&\n                this.vertices[iv+1]==b[1] &&\n                this.vertices[iv+2]==b[2]) face[1]=iv/3;\n\n            if( this.vertices[iv+0]==c[0] &&\n                this.vertices[iv+1]==c[1] &&\n                this.vertices[iv+2]==c[2]) face[2]=iv/3;\n        }\n\n        if(face[0]==-1)\n        {\n            this.vertices.push(a[0],a[1],a[2]);\n            face[0]=(this.vertices.length-1)/3;\n        }\n\n        if(face[1]==-1)\n        {\n            this.vertices.push(b[0],b[1],b[2]);\n            face[1]=(this.vertices.length-1)/3;\n        }\n\n        if(face[2]==-1)\n        {\n            this.vertices.push(c[0],c[1],c[2]);\n            face[2]=(this.vertices.length-1)/3;\n        }\n\n        this.verticesIndices.push(face[0]);\n        this.verticesIndices.push(face[1]);\n        this.verticesIndices.push(face[2]);\n\n    };\n\n\n\n};\n\nparseOBJ = function(buff)\n{\n\n    _readline = function(a, off)  // Uint8Array, offset\n    {\n        var s = \"\";\n        while(a[off] != 10) s += String.fromCharCode(a[off++]);\n        return s;\n    };\n\n    var geom = new CGL.Geometry();\n    geom.groups = {};\n    \n    // geom.texCoords   = [];\n    geom.c_norms = [];\n    \n    // geom.texCoordsIndices   = [];\n    geom.i_norms = [];\n    \n    var cg = {from: 0, to:0};   // current group\n    var off = 0;\n    var a = new Uint8Array(buff);\n    \n    while(off < a.length)\n    {\n        var line = _readline(a, off);\n        off += line.length + 1;\n        line = line.replace(/ +(?= )/g,'');\n        line = line.replace(/(^\\s+|\\s+$)/g, '');\n        var cds = line.split(\" \");\n        if(cds[0] == \"g\")\n        {\n            cg.to = geom.verticesIndices.length;\n            if(geom.groups[cds[1]] == null) geom.groups[cds[1]] = {from:geom.verticesIndices.length, to:0};\n            cg = geom.groups[cds[1]];\n        }\n        if(cds[0] == \"v\")\n        {\n            var x = parseFloat(cds[1]);\n            var y = parseFloat(cds[2]);\n            var z = parseFloat(cds[3]);\n            geom.vertices.push(x,y,z);\n        }\n        if(cds[0] == \"vt\")\n        {\n            var x = parseFloat(cds[1]);\n            var y = 1-parseFloat(cds[2]);\n            geom.texCoords.push(x,y);\n        }\n        if(cds[0] == \"vn\")\n        {\n            var x = parseFloat(cds[1]);\n            var y = parseFloat(cds[2]);\n            var z = parseFloat(cds[3]);\n            geom.c_norms.push(x,y,z);\n        }\n        if(cds[0] == \"f\")\n        {\n            var v0a = cds[1].split(\"/\"), v1a = cds[2].split(\"/\"), v2a = cds[3].split(\"/\");\n            var vi0 = parseInt(v0a[0])-1, vi1 = parseInt(v1a[0])-1, vi2 = parseInt(v2a[0])-1;\n            var ui0 = parseInt(v0a[1])-1, ui1 = parseInt(v1a[1])-1, ui2 = parseInt(v2a[1])-1;\n            var ni0 = parseInt(v0a[2])-1, ni1 = parseInt(v1a[2])-1, ni2 = parseInt(v2a[2])-1;\n            \n            var vlen = geom.vertices.length/3, ulen = geom.texCoords.length/2, nlen = geom.c_norms.length/3;\n            if(vi0<0) vi0 = vlen + vi0+1; if(vi1<0) vi1 = vlen + vi1+1; if(vi2<0) vi2 = vlen + vi2+1;\n            if(ui0<0) ui0 = ulen + ui0+1; if(ui1<0) ui1 = ulen + ui1+1; if(ui2<0) ui2 = ulen + ui2+1;\n            if(ni0<0) ni0 = nlen + ni0+1; if(ni1<0) ni1 = nlen + ni1+1; if(ni2<0) ni2 = nlen + ni2+1;\n            \n            geom.verticesIndices.push(vi0, vi1, vi2);  //cg.verticesIndices.push(vi0, vi1, vi2)\n            geom.texCoordsIndices  .push(ui0, ui1, ui2);  //cg.texCoordsIndices  .push(ui0, ui1, ui2);\n            geom.i_norms.push(ni0, ni1, ni2);  //cg.i_norms.push(ni0, ni1, ni2);\n            if(cds.length == 5)\n            {\n                var v3a = cds[4].split(\"/\");\n                var vi3 = parseInt(v3a[0])-1, ui3 = parseInt(v3a[1])-1, ni3 = parseInt(v3a[2])-1;\n                if(vi3<0) vi3 = vlen + vi3+1;\n                if(ui3<0) ui3 = ulen + ui3+1;\n                if(ni3<0) ni3 = nlen + ni3+1;\n                geom.verticesIndices.push(vi0, vi2, vi3);  //cg.verticesIndices.push(vi0, vi2, vi3);\n                geom.texCoordsIndices  .push(ui0, ui2, ui3);  //cg.texCoordsIndices  .push(ui0, ui2, ui3);\n                geom.i_norms.push(ni0, ni2, ni3);  //cg.i_norms.push(ni0, ni2, ni3);\n            }\n        }\n    }\n    cg.to = geom.verticesIndices.length;\n    \n    return geom;\n};\n\n\n","var CGL=CGL || {};\n\n// ---------------------------------------------------------------------------\n\nCGL.Uniform=function(_shader,_type,_name,_value)\n{\n    var self=this;\n    var loc=-1;\n    var name=_name;\n    var type=_type;\n    var value=0;\n    var shader=_shader;\n    this.needsUpdate=true;\n\n    shader.addUniform(this);\n\n    this.getType=function() {return type;};\n    this.getName=function() {return name;};\n\n    this.resetLoc=function() { loc=-1;};\n\n    this.updateValueF=function()\n    {\n        if(loc==-1) loc=gl.getUniformLocation(shader.getProgram(), name);\n        gl.uniform1f(loc, value);\n    };\n\n    this.setValueF=function(v)\n    {\n        self.needsUpdate=true;\n        value=v;\n    };\n\n    this.updateValueT=function()\n    {\n        if(loc==-1)\n        {\n            loc=gl.getUniformLocation(shader.getProgram(), name);\n            if(loc==-1) console.log('texture loc unknown!!');\n        }\n\n        gl.uniform1i(loc, 0);\n    };\n\n    this.setValueT=function(v)\n    {\n        self.needsUpdate=true;\n        value=v;\n    };\n\n    if(type=='f')\n    {\n        this.setValue=this.setValueF;\n        this.updateValue=this.updateValueF;\n    }\n\n    if(type=='t')\n    {\n        this.setValue=this.setValueT;\n        this.updateValue=this.updateValueT;\n    }\n\n    this.setValue(_value);\n};\n\n// ---------------------------------------------------------------------------\n\nCGL.Shader=function()\n{\n    var self=this;\n    var program=false;\n    var uniforms=[];\n    var needsRecompile=true;\n\n    this.removeUniform=function(name)\n    {\n        for(var i in uniforms)\n        {\n            if(uniforms[i].getName()==name)\n            {\n                uniforms.splice(i,1);\n            }\n        }\n        needsRecompile=true;\n    };\n\n    this.addUniform=function(uni)\n    {\n        uniforms.push(uni);\n        needsRecompile=true;\n    };\n\n    this.getDefaultVertexShader=function()\n    {\n        return ''+\n        'attribute vec3 vPosition;\\n'+\n        'attribute vec2 attrTexCoord;\\n'+\n        'varying vec2 texCoord;\\n'+\n        'uniform mat4 projMatrix;\\n'+\n        'uniform mat4 mvMatrix;\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        '   texCoord=attrTexCoord;\\n'+\n        // '   gl_PointSize=3.0;\\n'+\n        '   gl_Position = projMatrix * mvMatrix * vec4(vPosition,  1.0);\\n'+\n        '}\\n';\n    };\n\n    this.getDefaultFragmentShader=function()\n    {\n        return ''+\n        'precision mediump float;\\n'+\n        'void main()\\n'+\n        '{\\n'+\n\n        '   gl_FragColor = vec4(0.5,0.5,0.5,1.0);\\n'+\n        '}\\n';\n    };\n\n    this.srcVert=this.getDefaultVertexShader();\n    this.srcFrag=this.getDefaultFragmentShader();\n\n    this.setSource=function(srcVert,srcFrag)\n    {\n        this.srcVert=srcVert;\n        this.srcFrag=srcFrag;\n    };\n\n    var projMatrixUniform=-1;\n    var mvMatrixUniform=-1;\n\n    var attrTexCoords = -1;\n    var attrVertexPos = -1;\n\n    this.getAttrTexCoords=function(){return attrTexCoords;};\n    this.getAttrVertexPos=function(){return attrVertexPos;};\n\n    this.hasTextureUniforms=function()\n    {\n        for(var i in uniforms)\n        {\n            if(uniforms[i].getType()=='t') return true;\n        }\n        return false;\n    };\n\n    this.compile=function()\n    {\n        var defines='';\n        if(self.hasTextureUniforms()) defines+='#define HAS_TEXTURES'.endl();\n\n        console.log('shader compile...');\n        console.log('has textures: '+self.hasTextureUniforms() );\n\n        var vs=defines+self.srcVert;\n        var fs=defines+self.srcFrag;\n\n        if(!program)\n        {\n            console.log('create shaderprogram');\n                    \n            program=createProgram(vs,fs, program);\n        }\n        else\n        {\n            console.log('recompile shaders...');\n\n            // self.vshader=createShader(vs, gl.VERTEX_SHADER, self.vshader );\n            // self.fshader=createShader(fs, gl.FRAGMENT_SHADER, self.fshader );\n            // linkProgram(program);\n            program=createProgram(vs,fs, program);\n            \n            mvMatrixUniform=-1;\n\n            for(var i in uniforms)uniforms[i].resetLoc();\n        }\n\n        needsRecompile=false;\n    };\n\n    this.bind=function()\n    {\n        if(!program || needsRecompile) self.compile();\n\n        if(mvMatrixUniform==-1)\n        {\n            attrTexCoords = gl.getAttribLocation(program, 'attrTexCoord');\n            attrVertexPos = gl.getAttribLocation(program, 'vPosition');\n\n            projMatrixUniform = gl.getUniformLocation(program, \"projMatrix\");\n            mvMatrixUniform = gl.getUniformLocation(program, \"mvMatrix\");\n        }\n\n        GL.useProgram(program);\n\n        for(var i in uniforms)\n        {\n            if(uniforms[i].needsUpdate)uniforms[i].updateValue();\n        }\n\n        gl.uniformMatrix4fv(projMatrixUniform, false, cgl.pMatrix);\n        gl.uniformMatrix4fv(mvMatrixUniform, false, cgl.mvMatrix);\n    };\n\n    this.getProgram=function()\n    {\n        return program;\n    };\n\n\n    createShader =function(str, type,_shader)\n    {\n        var shader = _shader || gl.createShader(type);\n        gl.shaderSource(shader, str);\n        gl.compileShader(shader);\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\n        {\n            console.log('compile status: ');\n\n            if(type==gl.VERTEX_SHADER)console.log('VERTEX_SHADER');\n            if(type==gl.FRAGMENT_SHADER)console.log('FRAGMENT_SHADER');\n            \n            console.warn( gl.getShaderInfoLog(shader) );\n\n            var lines = str.match(/^.*((\\r\\n|\\n|\\r)|$)/gm);\n            for(var i in lines)\n            {\n                var j=parseInt(i,10)+1;\n                console.log(j+': ',lines[i]);\n            }\n\n            console.warn( gl.getShaderInfoLog(shader) );\n        }\n        return shader;\n    };\n\n    linkProgram=function(program)\n    {\n        gl.linkProgram(program);\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS))\n        {\n            throw gl.getProgramInfoLog(program);\n        }\n\n    };\n\n    createProgram=function(vstr, fstr)\n    {\n        var program = gl.createProgram();\n        self.vshader = createShader(vstr, gl.VERTEX_SHADER);\n        self.fshader = createShader(fstr, gl.FRAGMENT_SHADER);\n        gl.attachShader(program, self.vshader);\n        gl.attachShader(program, self.fshader);\n\n        linkProgram(program);\n        return program;\n    };\n\n\n\n};\n\n","\nvar CGL=CGL || {};\n\nCGL.State=function()\n{\n    var self=this;\n    var mvMatrixStack=[];\n    var pMatrixStack=[];\n    var shaderStack=[];\n\n    this.pMatrix=mat4.create();\n    this.mvMatrix=mat4.create();\n\n    mat4.identity(self.mvMatrix);\n\n    var simpleShader=new CGL.Shader();\n    var currentShader=simpleShader;\n\n\n    this.canvasWidth=640;\n    this.canvasHeight=360;\n\n\n\n    this.beginFrame=function()\n    {\n        self.setShader(simpleShader);\n    };\n\n    this.endFrame=function()\n    {\n        self.setPreviousShader();\n        if(mvMatrixStack.length>0) console.warn('mvmatrix stack length !=0 at end of rendering...');\n        if(pMatrixStack.length>0) console.warn('pmatrix stack length !=0 at end of rendering...');\n        if(shaderStack.length>0) console.warn('shaderStack length !=0 at end of rendering...');\n    };\n\n    // shader stack\n\n    this.getShader=function()\n    {\n        return currentShader;\n    };\n\n    this.setShader=function(shader)\n    {\n        shaderStack.push(shader);\n        currentShader=shader;\n    };\n\n    this.setPreviousShader=function()\n    {\n        if(shaderStack.length===0) throw \"Invalid movelview popMatrix!\";\n        shaderStack.pop();\n        currentShader = shaderStack[shaderStack.length-1];\n    };\n\n    // modelview matrix stack\n\n    this.pushMvMatrix=function()\n    {\n        var copy = mat4.create();\n        mat4.copy(copy,self.mvMatrix);\n        mvMatrixStack.push(copy);\n    };\n\n    this.popMvMatrix=function()\n    {\n        if(mvMatrixStack.length===0) throw \"Invalid movelview popMatrix!\";\n        self.mvMatrix = mvMatrixStack.pop();\n    };\n\n    // projection matrix stack\n\n    this.pushPMatrix=function()\n    {\n        var copy = mat4.create();\n        mat4.copy(copy,self.pMatrix);\n        pMatrixStack.push(copy);\n    };\n\n    this.popPMatrix=function()\n    {\n        if(pMatrixStack.length===0) throw \"Invalid projection popMatrix!\";\n        self.pMatrix = pMatrixStack.pop();\n    };\n\n\n};\n\ncgl=new CGL.State();\n\n","var CGL=CGL || {};\n\nCGL.Texture=function()\n{\n    var self=this;\n    this.tex = gl.createTexture();\n    this.width=0;\n    this.height=0;\n\n    // gl.bindTexture(gl.TEXTURE_2D, this.tex);\n    // gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([111, 111, 111, 255]));\n    // gl.bindTexture(gl.TEXTURE_2D, null);\n\n    this.bind=function(slot)\n    {\n        gl.activeTexture(gl.TEXTURE0+slot);\n        gl.bindTexture(gl.TEXTURE_2D, self.tex);\n    };\n\n    this.setSize=function(w,h)\n    {\n        self.width=w;\n        self.height=h;\n\n        gl.bindTexture(gl.TEXTURE_2D, self.tex);\n        \n        var arr=[];\n        arr.length=w*h*4;\n        // for(var x=0;x<w;x++)\n        // {\n        //     for(var y=0;y<h;y++)\n        //     {\n        //         // var index=x+y*w;\n        //         arr.push( parseInt( (x/w)*255,10) );\n        //         arr.push(0);\n        //         arr.push( parseInt((y/w)*255,10));\n        //         arr.push(255);\n        //     }\n        // }\n        var uarr=new Uint8Array(arr);\n\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, w, h, 0, gl.RGBA, gl.UNSIGNED_BYTE, uarr);\n\n        gl.bindTexture(gl.TEXTURE_2D, null);\n    };\n\n    this.initTexture=function(img)\n    {\n        self.width=img.width;\n        self.height=img.height;\n\n\n        gl.bindTexture(gl.TEXTURE_2D, self.tex);\n        // gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, self.image);\n\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\n        // non power of two:\n        // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n\n        gl.bindTexture(gl.TEXTURE_2D, null);\n    };\n\n    this.setSize(8,8);\n};\n\nCGL.Texture.load=function(url,finishedCallback)\n{\n    var texture=new CGL.Texture();\n    texture.image = new Image();\n    texture.image.onload = function ()\n    {\n        console.log(texture.image);\n        texture.initTexture(texture.image);\n        finishedCallback();\n    };\n    texture.image.src = url;\n    return texture;\n};\n\n// ---------------------------------------------------------------------------\n","var CGL=CGL || {};\n\nCGL.TextureEffect=function()\n{\n    var self=this;\n    var geom=new CGL.Geometry();\n\n    geom.vertices = [\n         1.0,  1.0,  0.0,\n        -1.0,  1.0,  0.0,\n         1.0, -1.0,  0.0,\n        -1.0, -1.0,  0.0\n    ];\n\n    geom.texCoords = [\n         1.0, 1.0,\n         0.0, 1.0,\n         1.0, 0.0,\n         0.0, 0.0\n    ];\n\n    geom.verticesIndices = [\n        0, 1, 2,\n        3, 1, 2\n    ];\n\n    var mesh=new CGL.Mesh(geom);\n\n    var textureSource=null;\n    var textureTarget=new CGL.Texture();\n\n    var frameBuf = GL.createFramebuffer();\n    var renderbuffer = GL.createRenderbuffer();\n\n    var switched=false;\n\n    this.startEffect=function()\n    {\n        switched=false;\n    };\n\n    this.setSourceTexture=function(tex)\n    {\n        if(tex===null)\n        {\n            textureSource=new CGL.Texture();\n            textureSource.setSize(16,16);\n        }\n        else\n        {\n            textureSource=tex;\n        }\n        console.log(textureSource.width,textureSource.height);\n        \n        textureTarget.setSize(textureSource.width,textureSource.height);\n\n        GL.bindFramebuffer(GL.FRAMEBUFFER, frameBuf);\n\n        GL.bindRenderbuffer(GL.RENDERBUFFER, renderbuffer);\n        GL.renderbufferStorage(GL.RENDERBUFFER, GL.DEPTH_COMPONENT16, textureSource.width,textureSource.height);\n        GL.framebufferTexture2D(GL.FRAMEBUFFER, GL.COLOR_ATTACHMENT0, GL.TEXTURE_2D, textureTarget.tex, 0);\n        GL.framebufferRenderbuffer(GL.FRAMEBUFFER, GL.DEPTH_ATTACHMENT, GL.RENDERBUFFER, renderbuffer);\n        GL.bindTexture(GL.TEXTURE_2D, null);\n        GL.bindRenderbuffer(GL.RENDERBUFFER, null);\n        GL.bindFramebuffer(GL.FRAMEBUFFER, null);\n\n        console.log(\n            self.getCurrentTargetTexture().height,\n            self.getCurrentSourceTexture().height\n            );\n    };\n\n\n    this.getCurrentTargetTexture=function()\n    {\n        if(switched)return textureSource;\n            else return textureTarget;\n    };\n\n    this.getCurrentSourceTexture=function()\n    {\n        if(switched)return textureTarget;\n            else return textureSource;\n    };\n\n    this.bind=function()\n    {\n        if(textureSource===null) throw 'no base texture set!';\n\n        // GL.bindFramebuffer(GL.FRAMEBUFFER, frameBuf);\n\n        cgl.pushMvMatrix();\n\n        // cgl.currentTextureEffect=effect;\n\n\n\n        GL.bindFramebuffer(GL.FRAMEBUFFER, frameBuf);\n        GL.framebufferTexture2D(GL.FRAMEBUFFER, GL.COLOR_ATTACHMENT0, GL.TEXTURE_2D, self.getCurrentTargetTexture().tex, 0);\n\n        cgl.pushPMatrix();\n        gl.viewport(0, 0, self.getCurrentTargetTexture().width,self.getCurrentTargetTexture().height);\n        mat4.perspective(cgl.pMatrix,45, self.getCurrentTargetTexture().width/self.getCurrentTargetTexture().height, 0.01, 1100.0);\n\n\n        cgl.pushPMatrix();\n        mat4.identity(cgl.pMatrix);\n\n        cgl.pushMvMatrix();\n        mat4.identity(cgl.mvMatrix);\n\n\n        GL.clearColor(0,1,0,1);\n        GL.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n    };\n\n    this.finish=function()\n    {\n        mesh.render(cgl.getShader());\n\n        cgl.popPMatrix();\n        cgl.popMvMatrix();\n\n        cgl.popPMatrix();\n\n        GL.bindFramebuffer(GL.FRAMEBUFFER, null);\n\n        cgl.popMvMatrix();\n        gl.viewport(0, 0, cgl.canvasWidth,cgl.canvasHeight);\n\n        switched=!switched;\n\n    };\n\n};","\nvar PORT_DIR_IN=0;\nvar PORT_DIR_OUT=1;\n\nvar OP_PORT_TYPE_VALUE =0;\nvar OP_PORT_TYPE_FUNCTION =1;\nvar OP_PORT_TYPE_OBJECT =2;\nvar OP_PORT_TYPE_TEXTURE =2;\n\nvar Ops = {};\n\n\nvar Op = function()\n{\n    this.objName='';\n    this.portsOut=[];\n    this.portsIn=[];\n    this.posts=[];\n    this.uiAttribs={};\n    this.name='unknown';\n    this.id=generateUUID();\n\n    this.getName= function()\n    {\n        return this.name;\n    };\n    this.addOutPort=function(p)\n    {\n        p.direction=PORT_DIR_OUT;\n        p.parent=this;\n        this.portsOut.push(p);\n        return p;\n    };\n    this.addInPort=function(p)\n    {\n        p.direction=PORT_DIR_IN;\n        p.parent=this;\n        this.portsIn.push(p);\n        return p;\n    };\n    this.execute=function()\n    {\n        this.exec();\n    };\n    this.printInfo=function()\n    {\n        for(var i=0;i<this.portsIn.length;i++)\n            console.log('in: '+this.portsIn[i].getName());\n\n        for(var ipo in this.portsOut)\n            console.log('out: '+this.portsOut[ipo].getName());\n    };\n\n    this.removeLinks=function()\n    {\n        for(var i=0;i<this.portsIn.length;i++)\n            this.portsIn[i].removeLinks();\n        for(var ipo in this.portsOut)\n            this.portsOut[ipo].removeLinks();\n    };\n\n    this.getPort=function(name)\n    {\n        for(var ipi in this.portsIn)\n            if(this.portsIn[ipi].getName()==name)return this.portsIn[ipi];\n\n        for(var ipo in this.portsOut)\n            if(this.portsOut[ipo].getName()==name)return this.portsOut[ipo];\n    };\n\n    this.findFittingPort=function(otherPort)\n    {\n        for(var ipo in this.portsOut)\n        {\n            console.log('.');\n            if(Link.canLink(otherPort,this.portsOut[ipo]))return this.portsOut[ipo];\n        }\n    \n        for(var ipi in this.portsIn)\n        {\n            console.log('.');\n            if(Link.canLink(otherPort,this.portsIn[ipi]))return this.portsIn[ipi];\n        }\n\n    };\n\n\n    this.getSerialized=function()\n    {\n        var op={};\n        op.name=this.getName();\n        op.objName=this.objName;\n        op.id=this.id;\n        op.uiAttribs=this.uiAttribs;\n\n        op.portsIn=[];\n        op.portsOut=[];\n\n        for(var i=0;i<this.portsIn.length;i++)\n            op.portsIn.push( this.portsIn[i].getSerialized() );\n\n        for(var ipo in this.portsOut)\n            op.portsOut.push( this.portsOut[ipo].getSerialized() );\n\n        return op;\n    };\n\n    this.getPortByName=function(name)\n    {\n        for(var i=0;i<this.portsIn.length;i++)\n            if(this.portsIn[i].name==name)return this.portsIn[i];\n        \n        for(var ipo in this.portsOut)\n            if(this.portsOut[ipo].name==name)return this.portsOut[ipo];\n    };\n\n};\n\n// ------------------------------------------------------------------------------------\n\nvar Port=function(parent,name,type)\n{\n    var self=this;\n    this.direction=PORT_DIR_IN;\n    this.id=generateUUID();\n    this.parent=parent;\n    this.links=[];\n    this.value=null;\n    this.name=name;\n    this.type=type || OP_PORT_TYPE_VALUE;\n    var valueBeforeLink=null;\n\n    this.__defineGetter__(\"val\", function()\n    {\n        return this.value;\n    });\n\n    this.__defineSetter__(\"val\", function(v)\n    {\n        this.setValue(v);\n    });\n\n    this.getType=function(){ return this.type; };\n    this.isLinked=function(){ return this.links.length>0; };\n    this.onValueChanged=function(){};\n    this.onTriggered=function(){};\n\n    this.setValue=function(v)\n    {\n        if(v!=this.value || this.type==OP_PORT_TYPE_TEXTURE)\n        {\n            this.value=v;\n            this.onValueChanged();\n\n            for(var i in this.links)\n            {\n                this.links[i].setValue();\n            }\n        }\n    };\n\n    this.getName= function()\n    {\n        return this.name;\n    };\n\n    this.addLink=function(l)\n    {\n        valueBeforeLink=self.value;\n        this.links.push(l);\n    };\n\n    this.removeLinkTo=function(p2)\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i].portIn==p2 || this.links[i].portOut==p2)\n            {\n                this.links[i].remove();\n            }\n        }\n\n    };\n\n    this.isLinkedTo=function(p2)\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i].portIn==p2 || this.links[i].portOut==p2)return true;\n        }\n        return false;\n    };\n\n    this.call=function()\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i].portIn !=this)this.links[i].portIn.onTriggered();\n            if(this.links[i].portOut!=this)this.links[i].portOut.onTriggered();\n        }\n    };\n\n\n    this.execute=function()\n    {\n        console.log('### execute port: '+this.getName() , this.goals.length);\n    };\n\n    this.getTypeString=function()\n    {\n        if(this.type==OP_PORT_TYPE_VALUE)return 'value';\n        if(this.type==OP_PORT_TYPE_FUNCTION)return 'function';\n        if(this.type==OP_PORT_TYPE_TEXTURE)return 'texture';\n    };\n\n    this.getSerialized=function()\n    {\n        var obj={};\n        obj.name=this.getName();\n        obj.value=this.value;\n\n        if(this.direction==PORT_DIR_IN && this.links.length>0)\n        {\n            obj.links=[];\n            for(var i in this.links)\n            {\n                obj.links.push( this.links[i].getSerialized() );\n            }\n        }\n        return obj;\n    };\n\n    this.removeLinks=function()\n    {\n        while(this.links.length>0)\n        {\n            this.links[0].remove();\n        }\n    };\n\n    this.removeLink=function(link)\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i]==link)this.links.splice( i, 1 );\n        }\n        self.setValue(valueBeforeLink);\n    };\n};\n\n\n\n// ---------------------------------------------------------------------------\n\nvar Link = function(scene)\n{\n    this.portIn=null;\n    this.portOut=null;\n    this.scene=scene;\n\n    this.setValue=function()\n    {\n        if(this.portIn.val!=this.portOut.val)\n            this.portIn.val=this.portOut.val;\n    };\n\n    this.getOtherPort=function(p)\n    {\n        if(p==this.portIn)return this.portOut;\n        return this.portIn;\n    };\n\n    this.remove=function()\n    {\n        this.portIn.removeLink(this);\n        this.portOut.removeLink(this);\n        this.scene.onUnLink(this.portIn,this.portOut);\n        this.portIn=null;\n        this.portOut=null;\n        this.scene=null;\n    };\n\n\n    this.link=function(p1,p2)\n    {\n        if(!Link.canLink(p1,p2))\n        {\n            console.log('cannot link ports!');\n            return false;\n        }\n        if(p1.direction==PORT_DIR_IN)\n        {\n            this.portIn=p1;\n            this.portOut=p2;\n        }\n        else\n        {\n            this.portIn=p2;\n            this.portOut=p1;\n        }\n\n        p1.addLink(this);\n        p2.addLink(this);\n        this.setValue();\n    };\n\n    this.getSerialized=function()\n    {\n        var obj={};\n\n        obj.portIn=this.portIn.getName();\n        obj.portOut=this.portOut.getName();\n        obj.objIn=this.portIn.parent.id;\n        obj.objOut=this.portOut.parent.id;\n\n        return obj;\n    };\n};\n\n\nLink.canLinkText=function(p1,p2)\n{\n    if(!p1)return 'can not link: port 1 invalid';\n    if(!p2)return 'can not link: port 2 invalid';\n    if(p1.direction==PORT_DIR_IN && p1.links.length>0)return 'input port already busy';\n    if(p2.direction==PORT_DIR_IN && p2.links.length>0)return 'input port already busy';\n    if(p1.isLinkedTo(p2))return 'ports already linked';\n    if(p1.direction==p2.direction)return 'can not link: same direction';\n    if(p1.type!=p2.type)return 'can not link: different type';\n    if(p1.parent==p2.parent)return 'can not link: same op';\n    return 'can link';\n};\n\nLink.canLink=function(p1,p2)\n{\n    if(!p1)return false;\n    if(!p2)return false;\n    if(p1.direction==PORT_DIR_IN && p1.links.length>0)return false;\n    if(p2.direction==PORT_DIR_IN && p2.links.length>0)return false;\n    if(p1.isLinkedTo(p2))return false;\n    if(p1.direction==p2.direction)return false;\n    if(p1.type!=p2.type)return false;\n    if(p1.parent==p2.parent)return false;\n\n    return true;\n};\n\n\n// ------------------------------------------------------------------------------------\n\n\nvar Scene = function()\n{\n    var self=this;\n    this.ops=[];\n    this.timer=new Timer();\n    this.animFrameOps=[];\n    \n\n    this.clear=function()\n    {\n        this.timer=new Timer();\n        while(this.ops.length>0)\n        {\n            this.deleteOp(this.ops[0].id);\n        }\n    };\n\n    this.addOp=function(objName,uiAttribs)\n    {\n        var op=eval('new '+objName+'();');\n        op.objName=objName;\n        op.uiAttribs=uiAttribs;\n\n        if(op.hasOwnProperty('onAnimFrame')) this.animFrameOps.push(op);\n\n        this.ops.push(op);\n        if(this.onAdd)this.onAdd(op);\n        return op;\n    };\n\n    this.deleteOp=function(opid,tryRelink)\n    {\n\n        for(var i in this.ops)\n        {\n            if(this.ops[i].id==opid)\n            {\n                var op=this.ops[i];\n                var reLinkP1=null;\n                var reLinkP2=null;\n\n                if(op)\n                {\n                    if(tryRelink)\n                    {\n                        if(this.ops[i].portsIn[0].isLinked() && this.ops[i].portsOut[0].isLinked())\n                        {\n                            if(this.ops[i].portsIn[0].getType()==this.ops[i].portsOut[0].getType())\n                            {\n                                reLinkP1=this.ops[i].portsIn[0].links[0].getOtherPort(this.ops[i].portsIn[0]);\n                                reLinkP2=this.ops[i].portsOut[0].links[0].getOtherPort(this.ops[i].portsOut[0]);\n                            }\n                        }\n                    }\n\n                    this.ops[i].removeLinks();\n                    this.onDelete(this.ops[i]);\n                    this.ops.splice( i, 1 );\n\n                    if(reLinkP1!==null && reLinkP2!==null)\n                    {\n                        self.link(\n                            reLinkP1.parent,\n                            reLinkP1.getName(),\n                            reLinkP2.parent,\n                            reLinkP2.getName()\n                            );\n                    }\n                }\n            }\n\n        }\n\n\n    };\n\n    this.exec=function()\n    {\n        requestAnimationFrame(self.exec);\n        self.timer.update();\n\n        var time=self.timer.getTime();\n\n        for(var i in self.animFrameOps)\n        {\n            self.animFrameOps[i].onAnimFrame(time);\n        }\n\n    };\n\n    this.link=function(op1,port1Name,op2,port2Name)\n    {\n        var port1=op1.getPort(port1Name);\n        var port2=op2.getPort(port2Name);\n\n        if(Link.canLink(port1,port2))\n        {\n            var link=new Link(this);\n            link.link(port1,port2);\n            this.onLink(port1,port2);\n            return link;\n        }\n        else\n        {\n            console.log(Link.canLinkText(port1,port2));\n        }\n    };\n    this.onAdd=function(op){};\n    this.onDelete=function(op){};\n    this.onLink=function(p1,p2){};\n    this.onUnLink=function(p1,p2){};\n    this.serialize=function()\n    {\n        var obj={};\n\n        obj.ops=[];\n        for(var i in this.ops)\n        {\n            obj.ops.push( this.ops[i].getSerialized() );\n        }\n        \n        return JSON.stringify(obj);\n    };\n    this.getOpById=function(opid)\n    {\n        for(var i in this.ops)\n        {\n            if(this.ops[i].id==opid)return this.ops[i];\n        }\n\n    };\n    this.deSerialize=function(obj)\n    {\n        if (typeof obj === \"string\") obj=JSON.parse(obj);\n        var self=this;\n\n        function addLink(opinid,opoutid,inName,outName)\n        {\n            var found=false;\n            if(!found)\n            {\n                self.link(\n                    self.getOpById(opinid),\n                    inName,\n                    self.getOpById(opoutid),\n                    outName\n                    );\n            }\n        }\n\n        // add ops...\n        for(var iop in obj.ops)\n        {\n            var op=this.addOp(obj.ops[iop].objName,obj.ops[iop].uiAttribs);\n            op.id=obj.ops[iop].id;\n\n            for(var ipi in obj.ops[iop].portsIn)\n            {\n                var port=op.getPortByName(obj.ops[iop].portsIn[ipi].name);\n                if(port && port.type!=OP_PORT_TYPE_TEXTURE)port.val=obj.ops[iop].portsIn[ipi].value;\n            }\n\n            for(var ipo in obj.ops[iop].portsOut)\n            {\n                var port2=op.getPortByName(obj.ops[iop].portsOut[ipo].name);\n                if(port2&& port2.type!=OP_PORT_TYPE_TEXTURE)port2.val=obj.ops[iop].portsOut[ipo].value;\n            }\n\n\n            // op.uiAttribs=obj.ops[iop].uiAttribs;\n        }\n\n        // create links...\n        for(iop in obj.ops)\n        {\n            for(var ipi2 in obj.ops[iop].portsIn)\n            {\n\n                for(var ili in obj.ops[iop].portsIn[ipi2].links)\n                {\n                    addLink(\n                        obj.ops[iop].portsIn[ipi2].links[ili].objIn,\n                        obj.ops[iop].portsIn[ipi2].links[ili].objOut,\n                        obj.ops[iop].portsIn[ipi2].links[ili].portIn,\n                        obj.ops[iop].portsIn[ipi2].links[ili].portOut);\n                }\n            }\n\n\n            // for(var ipo in obj.ops[iop].portsOut)\n            // {\n            //     for(var ili in obj.ops[iop].portsOut[ipo].links)\n            //     {\n            //         addLink(\n            //             obj.ops[iop].portsOut[ipo].links[ili].objIn,\n            //             obj.ops[iop].portsOut[ipo].links[ili].objOut,\n            //             obj.ops[iop].portsOut[ipo].links[ili].portIn,\n            //             obj.ops[iop].portsOut[ipo].links[ili].portOut);\n\n            //     }\n            // }\n        }\n\n\n        for(var i in this.ops)\n        {\n            this.ops[i].id=generateUUID();\n        }\n\n\n\n    };\n\n    this.exec();\n\n};\n\n\n\n\n","\n\nOps.Devices= Ops.Devices || {};\n\nOps.Devices.GamePad = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='GamePad';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.numPads=this.addOutPort(new Port(this,\"numPads\"));\n    this.axis1=this.addOutPort(new Port(this,\"axis1\"));\n    this.axis2=this.addOutPort(new Port(this,\"axis2\"));\n    this.axis3=this.addOutPort(new Port(this,\"axis3\"));\n    this.axis4=this.addOutPort(new Port(this,\"axis4\"));\n    this.button0=this.addOutPort(new Port(this,\"button0\"));\n    this.button1=this.addOutPort(new Port(this,\"button1\"));\n    this.button2=this.addOutPort(new Port(this,\"button2\"));\n    this.button3=this.addOutPort(new Port(this,\"button3\"));\n    this.button4=this.addOutPort(new Port(this,\"button4\"));\n\n    var self=this;\n    var startTime=Date.now()/1000.0;\n\n    this.exe.onTriggered=function()\n    {\n        var gamePads=navigator.getGamepads();\n        var count=0;\n\n        for(var gp in gamePads)\n        {\n            if(gamePads[gp].axes)\n            {\n                self.axis1.val=gamePads[gp].axes[0];\n                self.axis2.val=gamePads[gp].axes[1];\n                self.axis3.val=gamePads[gp].axes[2];\n                self.axis4.val=gamePads[gp].axes[3];\n\n                self.button0.val=gamePads[gp].buttons[0].pressed;\n                self.button0.val=gamePads[gp].buttons[1].pressed;\n                self.button2.val=gamePads[gp].buttons[2].pressed;\n                self.button3.val=gamePads[gp].buttons[3].pressed;\n                self.button4.val=gamePads[gp].buttons[4].pressed;\n\n                count++;\n            }\n        }\n\n        self.numPads.val=count;\n    };\n\n    this.exe.onTriggered();\n\n};\n\nOps.Devices.GamePad.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Devices.LeapMotion = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='LeapMotion';\n\n    this.transX=this.addOutPort(new Port(this,\"translationX\"));\n    this.transY=this.addOutPort(new Port(this,\"translationY\"));\n    this.transZ=this.addOutPort(new Port(this,\"translationZ\"));\n\n    this.finger0X=this.addOutPort(new Port(this,\"finger0X\"));\n    this.finger0Y=this.addOutPort(new Port(this,\"finger0Y\"));\n    this.finger0Z=this.addOutPort(new Port(this,\"finger0Z\"));\n\n    Leap.loop(function (frame)\n    {\n        self.transX.val=frame._translation[0];\n        self.transY.val=frame._translation[1];\n        self.transZ.val=frame._translation[2];\n\n        if(frame.fingers.length>0)\n        {\n            self.finger0X.val=frame.fingers[0].tipPosition[0];\n            self.finger0Y.val=frame.fingers[0].tipPosition[1];\n            self.finger0Z.val=frame.fingers[0].tipPosition[2];\n        }\n    });\n};\n\nOps.Devices.LeapMotion.prototype = new Op();\n\n// --------------------------------------------------------------------------\n","\nOps.Gl=Ops.Gl || {};\nOps.Gl.TextureEffects=Ops.Gl.TextureEffects || {};\n\n// ---------------------------------------------------------------------------------------------\n\nOps.Gl.TextureEffects.TextureEffect = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='texture effect';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.texOut=this.addOutPort(new Port(this,\"texture_out\",OP_PORT_TYPE_TEXTURE));\n\n    this.tex=this.addInPort(new Port(this,\"texture_in\",OP_PORT_TYPE_TEXTURE));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var ready=false;\n    var effect=new CGL.TextureEffect();\n\n    cgl.currentTextureEffect=effect;\n\n    this.tex.onValueChanged=function()\n    {\n        effect.setSourceTexture(self.tex.val);\n        self.texOut.val=cgl.currentTextureEffect.getCurrentSourceTexture();\n        ready=true;\n    };\n\n    this.render.onTriggered=function()\n    {\n        if(!ready)return;\n        if(!self.tex.val) return;\n        cgl.currentTextureEffect=effect;\n\n        effect.startEffect();\n        self.trigger.call();\n        self.texOut.val=cgl.currentTextureEffect.getCurrentSourceTexture();\n    };\n};\n\nOps.Gl.TextureEffects.TextureEffect.prototype = new Op();\n\n// ---------------------------------------------------------------------------------------------\n\nOps.Gl.TextureEffects.Invert = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Invert';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var shader=new CGL.Shader();\n\n    var srcFrag=''\n        .endl()+'precision highp float;'\n        .endl()+'#ifdef HAS_TEXTURES'\n        .endl()+'  varying vec2 texCoord;'\n        .endl()+'  uniform sampler2D tex;'\n        .endl()+'#endif'\n        .endl()+''\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   vec4 col=vec4(1.0,0.0,0.0,1.0);'\n        .endl()+'   #ifdef HAS_TEXTURES'\n        .endl()+'       col=texture2D(tex,texCoord);'\n        .endl()+'       col.rgb=1.0-col.rgb;'\n        .endl()+'   #endif'\n        .endl()+'   gl_FragColor = col;'\n        .endl()+'}\\n';\n\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n    var textureUniform=new CGL.Uniform(shader,'t','tex',0);\n\n\n    this.render.onTriggered=function()\n    {\n        if(!cgl.currentTextureEffect)return;\n        \n        cgl.setShader(shader);\n        cgl.currentTextureEffect.bind();\n\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, cgl.currentTextureEffect.getCurrentSourceTexture().tex );\n\n        cgl.currentTextureEffect.finish();\n        cgl.setPreviousShader();\n\n        self.trigger.call();\n    };\n};\n\nOps.Gl.TextureEffects.Invert.prototype = new Op();\n\n// ---------------------------------------------------------------------------------------------\n\nOps.Gl.TextureEffects.Desaturate = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Desaturate';\n\n    this.amount=this.addInPort(new Port(this,\"amount\"));\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var shader=new CGL.Shader();\n\n    var srcFrag=''\n        .endl()+'precision highp float;'\n        .endl()+'#ifdef HAS_TEXTURES'\n        .endl()+'  varying vec2 texCoord;'\n        .endl()+'  uniform sampler2D tex;'\n        .endl()+'#endif'\n        .endl()+'uniform float amount;'\n        .endl()+''\n        .endl()+''\n        .endl()+'vec3 desaturate(vec3 color, float amount)'\n        .endl()+'{'\n        .endl()+'   vec3 gray = vec3(dot(vec3(0.2126,0.7152,0.0722), color));'\n        .endl()+'   return vec3(mix(color, gray, amount));'\n        .endl()+'}'\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   vec4 col=vec4(1.0,0.0,0.0,1.0);'\n        .endl()+'   #ifdef HAS_TEXTURES'\n        .endl()+'       col=texture2D(tex,texCoord);'\n        .endl()+'       col.rgb=desaturate(col.rgb,amount);'\n        .endl()+'   #endif'\n        .endl()+'   gl_FragColor = col;'\n        .endl()+'}';\n\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n    var textureUniform=new CGL.Uniform(shader,'t','tex',0);\n    var amountUniform=new CGL.Uniform(shader,'f','amount',1.0);\n\n    this.amount.onValueChanged=function()\n    {\n        amountUniform.setValue(self.amount.val);\n    };\n\n    this.render.onTriggered=function()\n    {\n        if(!cgl.currentTextureEffect)return;\n        \n        cgl.setShader(shader);\n        cgl.currentTextureEffect.bind();\n\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, cgl.currentTextureEffect.getCurrentSourceTexture().tex );\n\n        cgl.currentTextureEffect.finish();\n        cgl.setPreviousShader();\n\n        self.trigger.call();\n    };\n};\n\nOps.Gl.TextureEffects.Desaturate.prototype = new Op();\n\n// ---------------------------------------------------------------------------------------------\n\nOps.Gl.TextureEffects.RgbMultiply = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='RgbMultiply';\n\n    this.r=this.addInPort(new Port(this,\"r\"));\n    this.g=this.addInPort(new Port(this,\"g\"));\n    this.b=this.addInPort(new Port(this,\"b\"));\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var shader=new CGL.Shader();\n\n    var srcFrag=''\n        .endl()+'precision highp float;'\n        .endl()+'#ifdef HAS_TEXTURES'\n        .endl()+'  varying vec2 texCoord;'\n        .endl()+'  uniform sampler2D tex;'\n        .endl()+'#endif'\n        .endl()+'uniform float r;'\n        .endl()+'uniform float g;'\n        .endl()+'uniform float b;'\n        .endl()+''\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   vec4 col=vec4(1.0,0.0,0.0,1.0);'\n        .endl()+'   #ifdef HAS_TEXTURES'\n        .endl()+'       col=texture2D(tex,texCoord);'\n        .endl()+'       col.r*=r;'\n        .endl()+'       col.g*=g;'\n        .endl()+'       col.b*=b;'\n        .endl()+'   #endif'\n        .endl()+'   gl_FragColor = col;'\n        .endl()+'}';\n\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n    var textureUniform=new CGL.Uniform(shader,'t','tex',0);\n    var uniformR=new CGL.Uniform(shader,'f','r',1.0);\n    var uniformG=new CGL.Uniform(shader,'f','g',1.0);\n    var uniformB=new CGL.Uniform(shader,'f','b',1.0);\n\n\n    this.r.onValueChanged=function()\n    {\n        uniformR.setValue(self.r.val);\n    };\n\n    this.g.onValueChanged=function()\n    {\n        uniformG.setValue(self.g.val);\n    };\n\n    this.b.onValueChanged=function()\n    {\n        uniformB.setValue(self.b.val);\n    };\n\n    this.render.onTriggered=function()\n    {\n        if(!cgl.currentTextureEffect)return;\n        \n        cgl.setShader(shader);\n        cgl.currentTextureEffect.bind();\n\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, cgl.currentTextureEffect.getCurrentSourceTexture().tex );\n\n        cgl.currentTextureEffect.finish();\n        cgl.setPreviousShader();\n\n        self.trigger.call();\n    };\n};\n\nOps.Gl.TextureEffects.RgbMultiply.prototype = new Op();\n\n// ---------------------------------------------------------------------------------------------\n\nOps.Gl.TextureEffects.Vignette = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Vignette';\n\n    this.lensRadius1=this.addInPort(new Port(this,\"lensRadius1\"));\n    this.lensRadius2=this.addInPort(new Port(this,\"lensRadius2\"));\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var shader=new CGL.Shader();\n\n    var srcFrag=''\n        .endl()+'precision highp float;'\n        .endl()+'#ifdef HAS_TEXTURES'\n        .endl()+'  varying vec2 texCoord;'\n        .endl()+'  uniform sampler2D tex;'\n        .endl()+'#endif'\n        .endl()+'uniform float lensRadius1;'\n        .endl()+'uniform float lensRadius2;'\n        .endl()+''\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   vec4 col=vec4(1.0,0.0,0.0,1.0);'\n        .endl()+'   #ifdef HAS_TEXTURES'\n        .endl()+'       col=texture2D(tex,texCoord);'\n        .endl()+'       float dist = distance(texCoord, vec2(0.5,0.5));'\n        .endl()+'       col.rgb *= smoothstep(lensRadius1, lensRadius2, dist);'\n        .endl()+'   #endif'\n        .endl()+'   gl_FragColor = col;'\n        .endl()+'}';\n\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n    var textureUniform=new CGL.Uniform(shader,'t','tex',0);\n    var uniLensRadius1=new CGL.Uniform(shader,'f','lensRadius1',0.4);\n    var uniLensRadius2=new CGL.Uniform(shader,'f','lensRadius2',0.3);\n\n    this.lensRadius1.onValueChanged=function()\n    {\n        uniLensRadius1.setValue(self.lensRadius1.val);\n    };\n\n    this.lensRadius2.onValueChanged=function()\n    {\n        uniLensRadius2.setValue(self.lensRadius2.val);\n    };\n\n    this.lensRadius1.val=0.8;\n    this.lensRadius2.val=0.4;\n\n    this.render.onTriggered=function()\n    {\n        if(!cgl.currentTextureEffect)return;\n        \n        cgl.setShader(shader);\n        cgl.currentTextureEffect.bind();\n\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, cgl.currentTextureEffect.getCurrentSourceTexture().tex );\n\n        cgl.currentTextureEffect.finish();\n        cgl.setPreviousShader();\n\n        self.trigger.call();\n    };\n};\n\nOps.Gl.TextureEffects.Vignette.prototype = new Op();\n\n// ---------------------------------------------------------------------------------------------\n\nOps.Gl.TextureEffects.Blur = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Blur';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var shader=new CGL.Shader();\n\n    var srcFrag=''\n        .endl()+'precision highp float;'\n        .endl()+'#ifdef HAS_TEXTURES'\n        .endl()+'  varying vec2 texCoord;'\n        .endl()+'  uniform sampler2D tex;'\n        .endl()+'  uniform float dirX;'\n        .endl()+'  uniform float dirY;'\n        .endl()+'#endif'\n        .endl()+''\n        .endl()+'vec4 blur9(sampler2D texture, vec2 uv, vec2 red, vec2 dir)'\n        .endl()+'{'\n        .endl()+'   vec4 color = vec4(0.0);'\n        .endl()+'   vec2 offset1 = vec2(1.3846153846) * dir;'\n        .endl()+'   vec2 offset2 = vec2(3.2307692308) * dir;'\n        .endl()+'   color += texture2D(texture, uv) * 0.2270270270;'\n        .endl()+'   color += texture2D(texture, uv + (offset1 / red)) * 0.3162162162;'\n        .endl()+'   color += texture2D(texture, uv - (offset1 / red)) * 0.3162162162;'\n        .endl()+'   color += texture2D(texture, uv + (offset2 / red)) * 0.0702702703;'\n        .endl()+'   color += texture2D(texture, uv - (offset2 / red)) * 0.0702702703;'\n        .endl()+'   return color;'\n        .endl()+'}'\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   vec4 col=vec4(1.0,0.0,0.0,1.0);'\n        .endl()+'   #ifdef HAS_TEXTURES'\n        .endl()+'       col=blur9(tex,texCoord,vec2(512.0,512.0),vec2(dirX,dirY));'\n        // .endl()+ '       col=blur9(tex,texCoord,vec2(512.0,512.0),vec2(dirX*1.4,dirY*1.4));'\n        .endl()+'   #endif'\n        .endl()+'   gl_FragColor = col;'\n        .endl()+'}\\n';\n\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n    var textureUniform=new CGL.Uniform(shader,'t','tex',0);\n    var uniDirX=new CGL.Uniform(shader,'f','dirX',0);\n    var uniDirY=new CGL.Uniform(shader,'f','dirY',0);\n\n    this.render.onTriggered=function()\n    {\n        if(!cgl.currentTextureEffect)return;\n        cgl.setShader(shader);\n\n        // first pass\n\n        cgl.currentTextureEffect.bind();\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, cgl.currentTextureEffect.getCurrentSourceTexture().tex );\n\n        uniDirX.setValue(0.0);\n        uniDirY.setValue(1.0);\n\n        cgl.currentTextureEffect.finish();\n\n        // second pass\n\n        cgl.currentTextureEffect.bind();\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, cgl.currentTextureEffect.getCurrentSourceTexture().tex );\n\n        uniDirX.setValue(1.0);\n        uniDirY.setValue(0.0);\n\n        cgl.currentTextureEffect.finish();\n        \n        cgl.setPreviousShader();\n\n        self.trigger.call();\n    };\n};\n\nOps.Gl.TextureEffects.Blur.prototype = new Op();\n\n\n","\n//http://k3d.ivank.net/K3D.js\n//http://fhtr.blogspot.de/2009/12/3d-models-and-parsing-binary-data-with.html\n//https://github.com/gpjt/webgl-lessons/blob/master/lesson05/index.html\n\nOps.Gl=Ops.Gl || {};\n\n\nvar GL=null;\n\nOps.Gl.Renderer = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='render';\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var initTranslate=vec3.create();\n    vec3.set(initTranslate, 0,0,-2);\n\n    this.onAnimFrame=function(time)\n    {\n        cgl.canvasWidth=self.canvas.clientWidth;\n        cgl.canvasHeight=self.canvas.clientHeight;\n\n        gl.enable(gl.DEPTH_TEST);\n        GL.clearColor(0,0,0,1);\n        GL.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n        gl.viewport(0,0,self.canvas.clientWidth,self.canvas.clientHeight);\n        mat4.perspective(cgl.pMatrix,45, cgl.canvasWidth/cgl.canvasHeight, 0.01, 1100.0);\n\n        cgl.pushPMatrix();\n        cgl.pushMvMatrix();\n\n        mat4.identity(cgl.mvMatrix);\n        mat4.translate(cgl.mvMatrix,cgl.mvMatrix, initTranslate);\n\n        GL.enable(GL.BLEND);\n        GL.blendFunc(GL.SRC_ALPHA,GL.ONE_MINUS_SRC_ALPHA);\n\n        cgl.beginFrame();\n\n        self.trigger.call();\n\n        cgl.popMvMatrix();\n        cgl.popPMatrix();\n        cgl.endFrame();\n    };\n\n    this.canvas = document.getElementById(\"glcanvas\");\n    GL = this.canvas.getContext(\"experimental-webgl\");\n    gl = this.canvas.getContext(\"experimental-webgl\");\n\n};\n\nOps.Gl.Renderer.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.ClearColor = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='ClearColor';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.r=this.addInPort(new Port(this,\"r\"));\n    this.g=this.addInPort(new Port(this,\"g\"));\n    this.b=this.addInPort(new Port(this,\"b\"));\n\n    this.r.val=0.3;\n    this.g.val=0.3;\n    this.b.val=0.3;\n    this.render.onTriggered=function()\n    {\n        GL.clearColor(self.r.val,self.g.val,self.b.val,1);\n        GL.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n\n        self.trigger.call();\n    };\n};\n\nOps.Gl.ClearColor.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.ClearDepth = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='ClearDepth';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        GL.clear(GL.DEPTH_BUFFER_BIT);\n        self.trigger.call();\n    };\n};\n\nOps.Gl.ClearDepth.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n    \nOps.Gl.TextureEmpty = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='texture empty';\n    this.width=this.addInPort(new Port(this,\"width\",OP_PORT_TYPE_VALUE));\n    this.height=this.addInPort(new Port(this,\"height\",OP_PORT_TYPE_VALUE));\n\n    this.textureOut=this.addOutPort(new Port(this,\"texture\",OP_PORT_TYPE_TEXTURE));\n    this.tex=new CGL.Texture();\n    \n    var sizeChanged=function()\n    {\n        self.tex.setSize(self.width.val,self.height.val);\n        self.textureOut.val=self.tex;\n    };\n\n    this.width.onValueChanged=sizeChanged;\n    this.height.onValueChanged=sizeChanged;\n\n    this.width.val=8;\n    this.height.val=8;\n};\n\nOps.Gl.TextureEmpty.prototype = new Op();\n\n// --------------------------------------------------------------------------\n    \nOps.Gl.Texture = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='texture';\n    this.filename=this.addInPort(new Port(this,\"file\",OP_PORT_TYPE_VALUE));\n    this.textureOut=this.addOutPort(new Port(this,\"texture\",OP_PORT_TYPE_TEXTURE));\n    \n    this.filename.onValueChanged=function()\n    {\n        console.log('load texture...');\n        self.tex=CGL.Texture.load(self.filename.val,function()\n            {\n                console.log('tex load FINISHED!!!');\n\n                self.textureOut.val=self.tex;\n            });\n        self.textureOut.val=self.tex;\n\n    };\n\n    this.filename.val='assets/skull.png';\n};\n\nOps.Gl.Texture.prototype = new Op();\n\n// --------------------------------------------------------------------------\nOps.Gl.Meshes=Ops.Gl.Meshes || {};\nOps.Gl.Meshes.Plotter = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Plotter';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.v=this.addInPort(new Port(this,\"value\"));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        gl.vertexAttribPointer(cgl.getShader().getAttrVertexPos(),self.buffer.itemSize, gl.FLOAT, false, 0, 0);\n        cgl.getShader().bind();\n        gl.bindBuffer(gl.ARRAY_BUFFER, self.buffer);\n        gl.drawArrays(gl.LINE_STRIP, 0, self.buffer.numItems);\n\n        self.trigger.call();\n    };\n\n    this.buffer = gl.createBuffer();\n    \n    var num=50;\n    this.vertices = [];\n    for(var i=0;i<num;i++)\n    {\n        this.vertices.push(1/num*i);\n        this.vertices.push(Math.random()-0.5);\n        this.vertices.push(0);\n    }\n\n    function bufferData()\n    {\n        gl.lineWidth(4);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, self.buffer);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(self.vertices), gl.STATIC_DRAW);\n        self.buffer.itemSize = 3;\n        self.buffer.numItems = num;\n    }\n    bufferData();\n\n    this.v.onValueChanged=function()\n    {\n        self.vertices.splice(0,3);\n        self.vertices.push(1);\n        self.vertices.push(self.v.val);\n        self.vertices.push(0);\n\n        for(var i=0;i<num*3;i+=3)\n        {\n            self.vertices[i]=1/num*i;\n        }\n\n        bufferData();\n    };\n};\n\nOps.Gl.Meshes.Plotter.prototype = new Op();\n\n// ----------------------------------------------------------------\n\n\nOps.Gl.Shader={};\n\nOps.Gl.Shader.BasicMaterial = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='BasicMaterial';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.doRender=function()\n    {\n        cgl.setShader(shader);\n\n        if(self.texture.val)\n        {\n            gl.activeTexture(gl.TEXTURE0);\n            gl.bindTexture(gl.TEXTURE_2D, self.texture.val.tex);\n        }\n\n        self.trigger.call();\n\n        cgl.setPreviousShader();\n    };\n\n    var srcFrag=''+\n        'precision highp float;\\n'+\n        '#ifdef HAS_TEXTURES\\n'+\n        '  varying vec2 texCoord;\\n'+\n        '  uniform sampler2D tex;\\n'+\n        '#endif\\n'+\n        'uniform float r;\\n'+\n        'uniform float g;\\n'+\n        'uniform float b;\\n'+\n        'uniform float a;\\n'+\n        '\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        'vec4 col=vec4(r,g,b,a);\\n'+\n        '#ifdef HAS_TEXTURES\\n'+\n        '   col=texture2D(tex,texCoord);\\n'+\n        'col.a*=a;'.endl()+\n        '#endif\\n'+\n        'gl_FragColor = col;\\n'+\n        '}\\n';\n\n\n    var shader=new CGL.Shader();\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n\n    this.r=this.addInPort(new Port(this,\"r\"));\n    this.r.onValueChanged=function()\n    {\n        if(!self.r.uniform) self.r.uniform=new CGL.Uniform(shader,'f','r',self.r.val);\n        else self.r.uniform.setValue(self.r.val);\n    };\n\n    this.g=this.addInPort(new Port(this,\"g\"));\n    this.g.onValueChanged=function()\n    {\n        if(!self.g.uniform) self.g.uniform=new CGL.Uniform(shader,'f','g',self.g.val);\n        else self.g.uniform.setValue(self.g.val);\n    };\n\n    this.b=this.addInPort(new Port(this,\"b\"));\n    this.b.onValueChanged=function()\n    {\n        if(!self.b.uniform) self.b.uniform=new CGL.Uniform(shader,'f','b',self.b.val);\n        else self.b.uniform.setValue(self.b.val);\n    };\n\n    this.a=this.addInPort(new Port(this,\"a\"));\n    this.a.onValueChanged=function()\n    {\n        if(!self.a.uniform) self.a.uniform=new CGL.Uniform(shader,'f','a',self.a.val);\n        else self.a.uniform.setValue(self.a.val);\n    };\n\n    this.r.val=Math.random();\n    this.g.val=Math.random();\n    this.b.val=Math.random();\n    this.a.val=1.0;\n\n\n    this.render.onTriggered=this.doRender;\n    this.texture=this.addInPort(new Port(this,\"texture\",OP_PORT_TYPE_TEXTURE));\n    this.textureUniform=null;\n\n    this.texture.onValueChanged=function()\n    {\n        if(self.texture.val)\n        {\n            if(self.textureUniform!==null)return;\n            console.log('TEXTURE ADDED');\n            shader.removeUniform('tex');\n            self.textureUniform=new CGL.Uniform(shader,'t','tex',0);\n        }\n        else\n        {\n            console.log('TEXTURE REMOVED');\n            shader.removeUniform('tex');\n            self.textureUniform=null;\n        }\n    };\n\n    this.doRender();\n};\n\nOps.Gl.Shader.BasicMaterial.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Shader.Schwurbel = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Schwurbel';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.timer=this.addInPort(new Port(this,\"time\"));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.doRender=function()\n    {\n        cgl.setShader(shader);\n\n        if(!self.timer.uniLoc)\n        {\n            shader.bind();\n            self.timer.uniLoc=gl.getUniformLocation(shader.getProgram(), \"time\");\n        }\n        gl.uniform1f(self.timer.uniLoc, self.timer.val);\n\n        cgl.setPreviousShader(shader);\n\n        self.trigger.call();\n    };\n\n    var srcFrag=''+\n        'precision mediump float;\\n'+\n        'uniform float time;\\n'+\n        '\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        'float c=sqrt(sin(time*0.02)*cos((time+gl_FragCoord.y)*0.02)+sin(time+gl_FragCoord.x*0.02)*sin(time+gl_FragCoord.y*0.02));\\n'+\n        'gl_FragColor = vec4( c,c,c,1.0);\\n'+\n        '}\\n';\n\n    var shader=new CGL.Shader();\n    shader.compile(shader.getDefaultVertexShader(),srcFrag);\n\n    this.doRender();\n    this.render.onTriggered=this.doRender;\n};\n\nOps.Gl.Shader.Schwurbel.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Shader.Noise = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Noise';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var timeUniform=-1;\n    var timeStart=-1;\n\n    this.doRender=function()\n    {\n        cgl.setShader(shader);\n        if(timeUniform==-1)\n        {\n            timeStart=Date.now();\n            shader.bind();\n            timeUniform=gl.getUniformLocation(shader.getProgram(), \"time\");\n        }\n\n        gl.uniform1f(timeUniform, (Date.now()-timeStart)/1000);\n        cgl.setPreviousShader();\n\n        self.trigger.call();\n    };\n\n    var srcFrag=''+\n        'precision mediump float;\\n'+\n        'uniform float time;\\n'+\n        '\\n'+\n        'float random(vec2 co)\\n'+\n        '{\\n'+\n        '   return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\\n'+\n        '}\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        '   float c=random(time*gl_FragCoord.xy);'+\n        '   gl_FragColor = vec4( c,c,c,1.0);\\n'+\n        '}\\n';\n\n\n    var shader=new CGL.Shader();\n    shader.compile(shader.getDefaultVertexShader(),srcFrag);\n\n    this.doRender();\n    this.render.onTriggered=this.doRender;\n};\n\nOps.Gl.Shader.Noise.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Matrix={};\n\nOps.Gl.Matrix.Translate = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='translate';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.x=this.addInPort(new Port(this,\"x\"));\n    this.y=this.addInPort(new Port(this,\"y\"));\n    this.z=this.addInPort(new Port(this,\"z\"));\n    this.x.val=0.0;\n    this.y.val=0.0;\n    this.z.val=0.0;\n    \n    var vec=vec3.create();\n\n    this.render.onTriggered=function()\n    {\n        vec3.set(vec, self.x.val,self.y.val,self.z.val);\n        cgl.pushMvMatrix();\n        mat4.translate(cgl.mvMatrix,cgl.mvMatrix, vec);\n        self.trigger.call();\n        cgl.popMvMatrix();\n    };\n};\n\nOps.Gl.Matrix.Translate.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Matrix.Scale = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='scale';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.scale=this.addInPort(new Port(this,\"scale\"));\n    \n    var vScale=vec3.create();\n    var transMatrix = mat4.create();\n    mat4.identity(transMatrix);\n\n    var doScale=false;\n\n    this.render.onTriggered=function()\n    {\n        cgl.pushMvMatrix();\n        mat4.multiply(mvMatrix,mvMatrix,transMatrix);\n        self.trigger.call();\n        cgl.popMvMatrix();\n    };\n\n    var updateMatrix=function()\n    {\n        mat4.identity(transMatrix);\n        mat4.scale(transMatrix,transMatrix, vScale);\n    };\n\n    this.scaleChanged=function()\n    {\n        doScale=false;\n        vec3.set(vScale, self.scale.val,self.scale.val,self.scale.val);\n        updateMatrix();\n    };\n\n    this.scale.onValueChanged=this.scaleChanged;\n    this.scale.val=1.0;\n    updateMatrix();\n};\n\nOps.Gl.Matrix.Scale.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Matrix.Transform = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    this.name='transform';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.posX=this.addInPort(new Port(this,\"posX\"));\n    this.posY=this.addInPort(new Port(this,\"posY\"));\n    this.posZ=this.addInPort(new Port(this,\"posZ\"));\n\n    this.scaleX=this.addInPort(new Port(this,\"scaleX\"));\n    this.scaleY=this.addInPort(new Port(this,\"scaleY\"));\n    this.scaleZ=this.addInPort(new Port(this,\"scaleZ\"));\n\n    this.rotX=this.addInPort(new Port(this,\"rotX\"));\n    this.rotY=this.addInPort(new Port(this,\"rotY\"));\n    this.rotZ=this.addInPort(new Port(this,\"rotZ\"));\n    \n    var vPos=vec3.create();\n    var vScale=vec3.create();\n    var transMatrix = mat4.create();\n    mat4.identity(transMatrix);\n\n    var doScale=false;\n    var doTranslate=false;\n\n    this.render.onTriggered=function()\n    {\n        cgl.pushMvMatrix();\n        mat4.multiply(cgl.mvMatrix,cgl.mvMatrix,transMatrix);\n        self.trigger.call();\n        cgl.popMvMatrix();\n    };\n\n    var updateMatrix=function()\n    {\n        mat4.identity(transMatrix);\n        if(doTranslate)mat4.translate(transMatrix,transMatrix, vPos);\n\n        if(self.rotX.val!==0)mat4.rotateX(transMatrix,transMatrix, self.rotX.val*CGL.DEG2RAD);\n        if(self.rotY.val!==0)mat4.rotateY(transMatrix,transMatrix, self.rotY.val*CGL.DEG2RAD);\n        if(self.rotZ.val!==0)mat4.rotateZ(transMatrix,transMatrix, self.rotZ.val*CGL.DEG2RAD);\n\n        if(doScale)mat4.scale(transMatrix,transMatrix, vScale);\n    };\n\n    this.translateChanged=function()\n    {\n        doTranslate=false;\n        if(self.posX.val!==0.0 || self.posY.val!==0.0 || self.posZ.val!==0.0)doTranslate=true;\n        vec3.set(vPos, self.posX.val,self.posY.val,self.posZ.val);\n        updateMatrix();\n    };\n\n    this.scaleChanged=function()\n    {\n        doScale=false;\n        if(self.scaleX.val!==0.0 || self.scaleY.val!==0.0 || self.scaleZ.val!==0.0)doScale=true;\n        vec3.set(vScale, self.scaleX.val,self.scaleY.val,self.scaleZ.val);\n        updateMatrix();\n    };\n\n    this.rotChanged=function()\n    {\n        updateMatrix();\n    };\n\n    this.rotX.onValueChanged=this.rotChanged;\n    this.rotY.onValueChanged=this.rotChanged;\n    this.rotZ.onValueChanged=this.rotChanged;\n\n    this.scaleX.onValueChanged=this.scaleChanged;\n    this.scaleY.onValueChanged=this.scaleChanged;\n    this.scaleZ.onValueChanged=this.scaleChanged;\n\n    this.posX.onValueChanged=this.translateChanged;\n    this.posY.onValueChanged=this.translateChanged;\n    this.posZ.onValueChanged=this.translateChanged;\n\n    this.rotX.val=0.0;\n    this.rotY.val=0.0;\n    this.rotZ.val=0.0;\n\n    this.scaleX.val=1.0;\n    this.scaleY.val=1.0;\n    this.scaleZ.val=1.0;\n\n    this.posX.val=0.0;\n    this.posY.val=0.0;\n    this.posZ.val=0.0;\n\n    updateMatrix();\n};\n\nOps.Gl.Matrix.Transform.prototype = new Op();\n\n// ----------------------------------------------------\n\nOps.RandomCluster = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='random cluster';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.num=this.addInPort(new Port(this,\"num\"));\n    this.size=this.addInPort(new Port(this,\"size\"));\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION)) ;\n    this.idx=this.addOutPort(new Port(this,\"index\")) ;\n    this.rnd=this.addOutPort(new Port(this,\"rnd\")) ;\n    this.randoms=[];\n    this.randomsRot=[];\n    this.randomsFloats=[];\n\n    var transVec=vec3.create();\n\n    this.exe.onTriggered=function()\n    {\n        for(var i=0;i<self.randoms.length;i++)\n        {\n            cgl.pushMvMatrix();\n\n            mat4.translate(cgl.mvMatrix,cgl.mvMatrix, self.randoms[i]);\n\n            mat4.rotateX(cgl.mvMatrix,cgl.mvMatrix, self.randomsRot[i][0]);\n            mat4.rotateY(cgl.mvMatrix,cgl.mvMatrix, self.randomsRot[i][1]);\n            mat4.rotateZ(cgl.mvMatrix,cgl.mvMatrix, self.randomsRot[i][2]);\n\n            self.idx.val=i;\n            self.rnd.val=self.randomsFloats[i];\n\n            self.trigger.call();\n\n            cgl.popMvMatrix();\n        }\n    };\n\n    function reset()\n    {\n        self.randoms=[];\n        self.randomsRot=[];\n        self.randomsFloats=[];\n\n        for(var i=0;i<self.num.val;i++)\n        {\n            self.randomsFloats.push(Math.random());\n            self.randoms.push(vec3.fromValues(\n                (Math.random()-0.5)*self.size.val,\n                (Math.random()-0.5)*self.size.val,\n                (Math.random()-0.5)*self.size.val\n                ));\n            self.randomsRot.push(vec3.fromValues(\n                Math.random()*360*CGL.DEG2RAD,\n                Math.random()*360*CGL.DEG2RAD,\n                Math.random()*360*CGL.DEG2RAD\n                ));\n        }\n    }\n\n    this.num.onValueChanged=reset;\n    this.size.onValueChanged=reset;\n\n    this.num.val=100;\n};\n\nOps.RandomCluster.prototype = new Op();\n\n\n\n\n\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Render2Texture = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='render to texture';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var frameBuf;\n    var texture=new CGL.Texture();\n\n    this.width=this.addInPort(new Port(this,\"texture width\"));\n    this.height=this.addInPort(new Port(this,\"texture height\"));\n    this.tex=this.addOutPort(new Port(this,\"texture\",OP_PORT_TYPE_TEXTURE));\n\n    this.width.val=1024;\n    this.height.val=1024;\n\n    texture.setSize(this.width.val,this.height.val);\n\n    frameBuf = GL.createFramebuffer();\n    GL.bindFramebuffer(GL.FRAMEBUFFER, frameBuf);\n\n    var renderbuffer = GL.createRenderbuffer();\n    GL.bindRenderbuffer(GL.RENDERBUFFER, renderbuffer);\n    GL.renderbufferStorage(GL.RENDERBUFFER, GL.DEPTH_COMPONENT16, this.width.val,this.height.val);\n    GL.framebufferTexture2D(GL.FRAMEBUFFER, GL.COLOR_ATTACHMENT0, GL.TEXTURE_2D, texture.tex, 0);\n    GL.framebufferRenderbuffer(GL.FRAMEBUFFER, GL.DEPTH_ATTACHMENT, GL.RENDERBUFFER, renderbuffer);\n    GL.bindTexture(GL.TEXTURE_2D, null);\n    GL.bindRenderbuffer(GL.RENDERBUFFER, null);\n    GL.bindFramebuffer(GL.FRAMEBUFFER, null);\n\n    self.tex.val=texture;\n\n    this.render.onTriggered=function()\n    {\n        cgl.pushMvMatrix();\n\n        GL.bindFramebuffer(GL.FRAMEBUFFER, frameBuf);\n        \n        cgl.pushPMatrix();\n        gl.viewport(0, 0, 1920,1080);\n        mat4.perspective(cgl.pMatrix,45, self.width.val/self.height.val, 0.01, 1100.0);\n\n        self.trigger.call();\n\n        cgl.popPMatrix();\n        \n        GL.bindFramebuffer(GL.FRAMEBUFFER, null);\n        \n        cgl.popMvMatrix();\n        gl.viewport(0, 0, cgl.canvasWidth,cgl.canvasHeight);\n    };\n\n\n};\n\nOps.Gl.Render2Texture.prototype = new Op();\n\n","\nOps.Gl.Meshes=Ops.Gl.Meshes || {};\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Meshes.Triangle = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Triangle';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        self.mesh.render(cgl.getShader());\n        self.trigger.call();\n    };\n\n    var geom=new CGL.Geometry();\n    geom.vertices = [\n         0.0,  1.0,  0.0,\n        -1.0,  -1.0,  0.0,\n         1.0, -1.0,  0.0\n    ];\n\n    geom.verticesIndices = [\n        0, 1, 2\n    ];\n    this.mesh=new CGL.Mesh(geom);\n};\n\nOps.Gl.Meshes.Triangle.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Meshes.Rectangle = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='rectangle';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n    this.width=this.addInPort(new Port(this,\"width\"));\n    this.height=this.addInPort(new Port(this,\"height\"));\n    this.width.val=1.0;\n    this.height.val=1.0;\n\n    this.render.onTriggered=function()\n    {\n        self.mesh.render(cgl.getShader());\n        self.trigger.call();\n    };\n\n    var geom=new CGL.Geometry();\n    this.mesh=null;\n\n    function rebuild()\n    {\n        geom.vertices = [\n             self.width.val/2,  self.height.val/2,  0.0,\n            -self.width.val/2,  self.height.val/2,  0.0,\n             self.width.val/2, -self.height.val/2,  0.0,\n            -self.width.val/2, -self.height.val/2,  0.0\n        ];\n\n        geom.texCoords = [\n             1.0, 1.0,\n             0.0, 1.0,\n             1.0, 0.0,\n             0.0, 0.0\n        ];\n\n        geom.verticesIndices = [\n            0, 1, 2,\n            3, 1, 2\n        ];\n        if(!self.mesh) self.mesh=new CGL.Mesh(geom);\n        self.mesh.setGeom(geom);\n        console.log('builkd geo');\n        \n    }\n    rebuild();\n\n    this.width.onValueChanged=rebuild;\n    this.height.onValueChanged=rebuild;\n};\n\nOps.Gl.Meshes.Rectangle.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Meshes.FullscreenRectangle = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='fullscreen rectangle';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        cgl.pushPMatrix();\n        mat4.identity(cgl.pMatrix);\n\n        cgl.pushMvMatrix();\n        mat4.identity(cgl.mvMatrix);\n\n        self.mesh.render(cgl.getShader());\n        self.trigger.call();\n\n        cgl.popPMatrix();\n        cgl.popMvMatrix();\n\n    };\n\n    var geom=new CGL.Geometry();\n    geom.vertices = [\n         1.0,  1.0,  0.0,\n        -1.0,  1.0,  0.0,\n         1.0, -1.0,  0.0,\n        -1.0, -1.0,  0.0\n    ];\n\n    geom.texCoords = [\n         1.0, 1.0,\n         0.0, 1.0,\n         1.0, 0.0,\n         0.0, 0.0\n    ];\n\n    geom.verticesIndices = [\n        0, 1, 2,\n        3, 1, 2\n    ];\n    this.mesh=new CGL.Mesh(geom);\n};\n\nOps.Gl.Meshes.FullscreenRectangle.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Meshes.Circle = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Circle';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n\n    this.segments=this.addInPort(new Port(this,\"segments\"));\n    this.radius=this.addInPort(new Port(this,\"radius\"));\n    this.percent=this.addInPort(new Port(this,\"percent\"));\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        mesh.render(cgl.getShader());\n        self.trigger.call();\n    };\n\n    this.segments.val=20;\n    this.radius.val=1;\n    this.percent.val=1;\n\n    var geom=new CGL.Geometry();\n    var mesh=new CGL.Mesh(geom);\n\n    function calc()\n    {\n        geom.clear();\n        var oldPosX=0;\n        var oldPosY=0;\n\n        for (var i=0; i <= self.segments.val*self.percent.val; i++)\n        {\n            var degInRad = (360/self.segments.val)*i*CGL.DEG2RAD;\n            var posx=Math.cos(degInRad)*self.radius.val;\n            var posy=Math.sin(degInRad)*self.radius.val;\n\n            geom.addFace(\n                        [posx,posy,0],\n                        [oldPosX,oldPosY,0],\n                        [0,0,0]\n                        );\n\n            geom.texCoords.push(0,0,0,0,0,0);\n\n            oldPosX=posx;\n            oldPosY=posy;\n        }\n\n        mesh.setGeom(geom);\n    }\n\n    this.segments.onValueChanged=calc;\n    this.radius.onValueChanged=calc;\n    this.percent.onValueChanged=calc;\n    calc();\n};\n\nOps.Gl.Meshes.Circle.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Meshes.ObjMesh = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='OBJ Mesh';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.mesh=null;\n\n    this.render.onTriggered=function()\n    {\n        if(self.mesh) self.mesh.render(cgl.getShader());\n\n        self.trigger.call();\n    };\n\n    ajaxRequest('assets/skull.obj',function(response)\n    {\n        console.log(response);\n                \n        var r=parseOBJ(response);\n\n    unwrap = function(ind, crd, cpi)\n    {\n        var ncrd = new Array(Math.floor(ind.length/3)*cpi);\n        for(var i=0; i<ind.length; i++)\n        {\n            for(var j=0; j<cpi; j++)\n            {\n                ncrd[i*cpi+j] = crd[ind[i]*cpi+j];\n            }\n        }\n        return ncrd;\n    };\n\n    var l=r.verticesIndices.length;\n        r.vertices = unwrap(r.verticesIndices, r.vertices, 3);\n        r.texCoords = unwrap(r.texCoordsIndices  , r.texCoords  , 2);\n        r.verticesIndices = [];\n        for(var i=0; i<l; i++) r.verticesIndices.push(i);\n        \n        self.mesh=new CGL.Mesh(r);\n    });\n};\n\nOps.Gl.Meshes.ObjMesh.prototype = new Op();\n\n// ----------------------------------------------------------------\n\nOps.Gl.Meshes.Cube = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Cube';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.mesh=null;\n\n    this.render.onTriggered=function()\n    {\n        if(self.mesh!==null) self.mesh.render(cgl.getShader());\n        self.trigger.call();\n    };\n\n    var geom=new CGL.Geometry();\n\n            geom.vertices = [\n            // Front face\n            -1.0, -1.0,  1.0,\n             1.0, -1.0,  1.0,\n             1.0,  1.0,  1.0,\n            -1.0,  1.0,  1.0,\n            // Back face\n            -1.0, -1.0, -1.0,\n            -1.0,  1.0, -1.0,\n             1.0,  1.0, -1.0,\n             1.0, -1.0, -1.0,\n            // Top face\n            -1.0,  1.0, -1.0,\n            -1.0,  1.0,  1.0,\n             1.0,  1.0,  1.0,\n             1.0,  1.0, -1.0,\n            // Bottom face\n            -1.0, -1.0, -1.0,\n             1.0, -1.0, -1.0,\n             1.0, -1.0,  1.0,\n            -1.0, -1.0,  1.0,\n            // Right face\n             1.0, -1.0, -1.0,\n             1.0,  1.0, -1.0,\n             1.0,  1.0,  1.0,\n             1.0, -1.0,  1.0,\n            // Left face\n            -1.0, -1.0, -1.0,\n            -1.0, -1.0,  1.0,\n            -1.0,  1.0,  1.0,\n            -1.0,  1.0, -1.0,\n        ];\n\n        geom.texCoords = [\n          // Front face\n          0.0, 0.0,\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n          // Back face\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n          0.0, 0.0,\n          // Top face\n          0.0, 1.0,\n          0.0, 0.0,\n          1.0, 0.0,\n          1.0, 1.0,\n          // Bottom face\n          1.0, 1.0,\n          0.0, 1.0,\n          0.0, 0.0,\n          1.0, 0.0,\n          // Right face\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n          0.0, 0.0,\n          // Left face\n          0.0, 0.0,\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n        ];\n\n        geom.verticesIndices = [\n            0, 1, 2,      0, 2, 3,    // Front face\n            4, 5, 6,      4, 6, 7,    // Back face\n            8, 9, 10,     8, 10, 11,  // Top face\n            12, 13, 14,   12, 14, 15, // Bottom face\n            16, 17, 18,   16, 18, 19, // Right face\n            20, 21, 22,   20, 22, 23  // Left face\n        ];\n\n    this.mesh=new CGL.Mesh(geom);\n};\n\nOps.Gl.Meshes.Cube.prototype = new Op();\n\n// ----------------------------------------------------------------\n\n","// https://github.com/automat/foam-gl\n// http://howlerjs.com/\n//http://learningwebgl.com/lessons/lesson01/index.html\n\n\nOps.Log = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='logger';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.input=this.addInPort(new Port(this,\"input\"));\n    this.input.val='';\n\n    this.exec=function()\n    {\n        console.log(\"[log] \" + self.input.val);\n    };\n\n    this.exe.onTriggered=this.exec;\n    this.input.onValueChanged=this.exec;\n};\nOps.Log.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\n\nOps.CallsPerSecond = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='CallsPerSecond';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.timeStart=0;\n    this.cps=0;\n\n    this.exe.onTriggered=function()\n    {\n        if(self.timeStart===0)self.timeStart=Date.now();\n        var now = Date.now();\n\n        if(now-self.timeStart>1000)\n        {\n            self.timeStart=Date.now();\n            console.log('cps: '+self.cps);\n            self.cps=0;\n        }\n\n        self.cps++;\n    };\n};\nOps.CallsPerSecond.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\nOps.Value = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Value';\n    this.v=this.addInPort(new Port(this,\"value\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.v.val;\n    };\n\n    this.v.onValueChanged=this.exec;\n};\n\nOps.Value.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\n\nOps.TimeLineTime = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='TimeLineTime';\n    this.theTime=this.addOutPort(new Port(this,\"time\"));\n\n    this.onAnimFrame=function(time)\n    {\n        this.theTime.val=time;\n    };\n\n};\nOps.TimeLineTime.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\n\n\n\nOps.Repeat = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Repeat';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.num=this.addInPort(new Port(this,\"num\"));\n    this.num.val=5;\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n    this.idx=this.addOutPort(new Port(this,\"index\"));\n\n    this.exe.onTriggered=function()\n    {\n\n        for(var i=0;i<self.num.value;i++)\n        {\n            self.idx.val=i;\n            self.trigger.call();\n        }\n\n    };\n};\nOps.Repeat.prototype = new Op();\n\n\n\n\n// ---------------------------------------------------------------------------\n\n\nOps.IfTrueThen = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='if true then';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.bool=this.addInPort(new Port(this,\"boolean\"));\n    this.bool.val=false;\n\n    this.triggerThen=this.addOutPort(new Port(this,\"then\",OP_PORT_TYPE_FUNCTION));\n    this.triggerElse=this.addOutPort(new Port(this,\"else\",OP_PORT_TYPE_FUNCTION));\n\n    this.exe.onTriggered=function()\n    {\n        if(self.bool.val===true)\n        {\n            self.triggerThen.call();\n        }\n        else\n        {\n            self.triggerElse.call();\n        }\n    };\n\n    this.bool.onValueChanged=function()\n    {\n        self.exe.onTriggered();\n    };\n\n};\nOps.IfTrueThen.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------\n\n\nOps.Group = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='group';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.triggers=[];\n\n    for(var i=0;i<10;i++)\n    {\n        this.triggers.push( this.addOutPort(new Port(this,\"trigger \"+i,OP_PORT_TYPE_FUNCTION)) );\n    }\n\n    this.exe.onTriggered=function()\n    {\n        for(var i in self.triggers)\n        {\n            self.triggers[i].call();\n        }\n\n    };\n\n\n};\nOps.Group.prototype = new Op();\n\n\n\n\n// ---------------------------------------------------------------------------\n\nOps.Interval = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='Interval';\n    this.timeOutId=-1;\n    this.interval=this.addInPort(new Port(this,\"interval\"));\n    this.interval.val=1000;\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.exec=function()\n    {\n        if(this.timeOutId!=-1)return;\n        var self=this;\n\n        this.timeOutId=setTimeout(function()\n        {\n            self.timeOutId=-1;\n            self.trigger.call();\n            self.exec();\n        },\n        this.interval.val );\n    };\n\n    this.exec();\n\n};\n\nOps.Interval.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\n// --------------------------------------------------------------------------\n\nOps.Anim={};\n\nOps.Anim.SinusAnim = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='SinusAnim';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    var self=this;\n\n    this.exe.onTriggered=function()\n    {\n        self.result.val=Math.sin(Date.now()/1000.0);\n    };\n\n    this.exe.onTriggered();\n\n};\n\nOps.Anim.SinusAnim.prototype = new Op();\n\n\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Anim.RelativeTime = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='RelativeTime';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    var self=this;\n    var startTime=Date.now()/1000.0;\n\n    this.exe.onTriggered=function()\n    {\n        self.result.val=Date.now()/1000.0-startTime;\n    };\n\n    this.exe.onTriggered();\n\n};\n\nOps.Anim.RelativeTime.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\n\n","\nOps.Json=Ops.Json || {};\n\n\nOps.Json.jsonValue = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='jsonValue';\n    this.data=this.addInPort(new Port(this,\"data\"),OP_PORT_TYPE_OBJECT);\n    this.key=this.addInPort(new Port(this,\"key\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.data.onValueChanged=function()\n    {\n        self.result.val=self.data.val[self.key.val];\n    };\n\n};\n\nOps.Json.jsonValue.prototype = new Op();\n\n// -------------------------------------------------------------\n","\n// TODO: CLAMP!\n\nOps.Math=Ops.Math || {};\n\n\nOps.Math.Random = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='random';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.exe.onTriggered=function()\n    {\n        self.result.val=Math.random();\n    };\n\n    this.exe.onTriggered();\n};\n\nOps.Math.Random.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Clamp = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='Clamp';\n    this.val=this.addInPort(new Port(this,\"val\"));\n    this.min=this.addInPort(new Port(this,\"min\"));\n    this.max=this.addInPort(new Port(this,\"max\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    function clamp()\n    {\n        self.result.val= Math.min(Math.max(self.val.val, self.min.val), self.max.val);\n    }\n\n    this.min.val=0;\n    this.max.val=1;\n\n    this.val.onValueChanged=clamp;\n    this.min.onValueChanged=clamp;\n    this.max.onValueChanged=clamp;\n\n    this.val.val=0.5;\n};\n\nOps.Math.Clamp.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\nOps.Math.SmoothStep = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='SmoothStep';\n    this.val=this.addInPort(new Port(this,\"val\"));\n    this.min=this.addInPort(new Port(this,\"min\"));\n    this.max=this.addInPort(new Port(this,\"max\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    function smoothstep ()\n    {\n        var x = Math.max(0,Math.min(1,(self.val.val-self.min.val)/(self.max.val-self.min.val)));\n        self.result.val=x*x*(3-2*x);\n    }\n\n    this.min.val=0;\n    this.max.val=1;\n    \n    this.val.onValueChanged=smoothstep;\n    this.min.onValueChanged=smoothstep;\n    this.max.onValueChanged=smoothstep;\n\n    this.val.val=0.5;\n};\n\nOps.Math.SmoothStep.prototype = new Op();\n\n// ----------------------------------------------------------------------------\n\n\nOps.Math.MapRange = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='map value range';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.v=this.addInPort(new Port(this,\"value\"));\n    this.old_min=this.addInPort(new Port(this,\"old min\"));\n    this.old_max=this.addInPort(new Port(this,\"old max\"));\n    this.new_min=this.addInPort(new Port(this,\"new min\"));\n    this.new_max=this.addInPort(new Port(this,\"new max\"));\n\n    this.exec= function()\n    {\n        if(self.v.val>self.old_max.val)\n        {\n            self.result.val=self.new_max.val;\n            return;\n        }\n        else\n        if(self.v.val<self.old_min.val)\n        {\n            self.result.val=self.new_min.val;\n            return;\n        }\n\n        var nMin=parseFloat(self.new_min.val);\n        var nMax=parseFloat(self.new_max.val);\n        var oMin=parseFloat(self.old_min.val);\n        var oMax=parseFloat(self.old_max.val);\n        var x=parseFloat(self.v.val);\n\n        var reverseInput = false;\n        var oldMin = Math.min( oMin, oMax );\n        var oldMax = Math.max( oMin, oMax );\n        if(oldMin!= oMin) reverseInput = true;\n\n        var reverseOutput = false;\n        var newMin = Math.min( nMin, nMax );\n        var newMax = Math.max( nMin, nMax );\n        if(newMin != nMin) reverseOutput = true;\n\n        var portion=0;\n\n        if(reverseInput) portion = (oldMax-x)*(newMax-newMin)/(oldMax-oldMin);\n            else portion = (x-oldMin)*(newMax-newMin)/(oldMax-oldMin);\n        \n        if(reverseOutput) self.result.val = newMax - portion;\n            else self.result.val = portion + newMin;\n\n    };\n\n    this.v.val=0;\n    this.old_min.val=-1;\n    this.old_max.val=1;\n    this.new_min.val=0;\n    this.new_max.val=1;\n\n\n    this.v.onValueChanged=this.exec;\n    this.old_min.onValueChanged=this.exec;\n    this.old_max.onValueChanged=this.exec;\n    this.new_min.onValueChanged=this.exec;\n    this.new_max.onValueChanged=this.exec;\n\n    this.exec();\n\n};\n\nOps.Math.MapRange.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Abs = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    this.name='abs';\n    this.number=this.addInPort(new Port(this,\"number\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.number.onValueChanged=function()\n    {\n        self.result.val=Math.abs(self.number.val);\n    };\n};\n\nOps.Math.Abs.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Sin = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    this.name='Sinus';\n    this.number=this.addInPort(new Port(this,\"number\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.number.onValueChanged=function()\n    {\n        self.result.val=Math.sin(self.number.val);\n    };\n};\n\nOps.Math.Sin.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Sum = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='sum';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=parseFloat(self.number1.val)+parseFloat(self.number2.val);\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n\n    this.number1.val=1;\n    this.number2.val=1;\n};\n\nOps.Math.Sum.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Multiply = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='multiply';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val*self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n\n    this.number1.val=1;\n    this.number2.val=2;\n\n};\n\nOps.Math.Multiply.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Divide = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Divide';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val/self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Divide.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\nOps.Math.Compare={};\n\n\n\n\nOps.Math.Compare.IsEven = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='isEven';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n\n    this.exec= function()\n    {\n        self.result.val=!( self.number1.val & 1 );\n    };\n\n    this.number1.onValueChanged=this.exec;\n};\n\nOps.Math.Compare.IsEven.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Math.Compare.Greater = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Greater';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val>self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Compare.Greater.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Math.Compare.Between = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Between';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number=this.addInPort(new Port(this,\"value\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n    this.number.val=2.0;\n    this.number1.val=1.0;\n    this.number2.val=3.0;\n\n    this.exec= function()\n    {\n        self.result.val=\n            (\n                self.number.val>Math.min(self.number1.val,self.number2.val) &&\n                self.number.val<Math.max(self.number1.val,self.number2.val)\n            );\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n    this.number.onValueChanged=this.exec;\n};\nOps.Math.Compare.Between.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Math.Compare.Lesser = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Lesser';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val<self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n\n};\n\nOps.Math.Compare.Lesser.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Math.Compare.Equals = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Equals';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val==self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Compare.Equals.prototype = new Op();\n\n","\nOps.Net=Ops.Net || {};\n\nOps.Net.Websocket = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='Websocket';\n    this.url=this.addInPort(new Port(this,\"url\"));\n    this.result=this.addOutPort(new Port(this,\"result\"), OP_PORT_TYPE_OBJECT);\n    this.connected=this.addOutPort(new Port(this,\"connected\"));\n\n    var connection;\n    var timeout=null;\n    var connectedTo='';\n\n    function checkConnection()\n    {\n        if(self.connected.val===false)\n        {\n            connect();\n        }\n    }\n\n    function connect()\n    {\n        if(self.connected.val===true && connectedTo==self.url.val) return;\n\n        if(self.connected.val===true)connection.close();\n\n        window.WebSocket = window.WebSocket || window.MozWebSocket;\n     \n         if (!window.WebSocket)\n            console.error('Sorry, but your browser doesn\\'t support WebSockets.');\n\n\n        try\n        {\n            connection = new WebSocket(self.url.val);\n        }catch (e)\n        {\n            console.log('could not connect to',self.url.val);\n        }\n\n        \n        connection.onerror = function (message)\n        {\n            self.connected.val=false;\n            timeout=setTimeout(checkConnection,1000);\n        };\n\n        connection.onclose = function (message)\n        {\n            self.connected.val=false;\n            timeout=setTimeout(checkConnection,1000);\n        };\n\n        connection.onopen = function (message)\n        {\n            self.connected.val=true;\n            connectedTo=self.url.val;\n        };\n\n        connection.onmessage = function (message)\n        {\n            try\n            {\n                var json = JSON.parse(message.data);\n                self.result.val=json;\n                        \n            } catch (e) {\n                console.log('This doesn\\'t look like a valid JSON: ', message.data);\n                return;\n            }\n        };\n\n        clearTimeout(timeout);\n        timeout=setTimeout(checkConnection,1000);\n    }\n\n    this.url.onValueChanged=connect;\n    \n\n    this.url.val='ws://127.0.0.1:1337';\n};\n\nOps.Net.Websocket.prototype = new Op();\n\n// -------------------------------------------------------------\n\nOps.Json=Ops.Json || {};\n\n\nOps.Json.jsonValue = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='jsonValue';\n    this.data=this.addInPort(new Port(this,\"data\"),OP_PORT_TYPE_OBJECT);\n    this.key=this.addInPort(new Port(this,\"key\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.data.onValueChanged=function()\n    {\n        self.result.val=self.data.val[self.key.val];\n    };\n\n};\n\nOps.Json.jsonValue.prototype = new Op();\n\n"],"sourceRoot":"/source/"}