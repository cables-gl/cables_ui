{"version":3,"sources":["_utils.js","timer.js","cgl_mesh.js","cgl_shader.js","cgl_state.js","cgl_texture.js","cgl_textureeffect.js","holo.js","keyframing.js","session.js"],"names":["generateUUID","d","Date","getTime","uuid","replace","c","r","Math","random","floor","toString","isNumeric","n","isNaN","parseFloat","isFinite","ajaxRequest","url","callback","request","XMLHttpRequest","open","responseType","onload","e","target","response","send","Timer","lastTime","now","timeStart","timeOffset","eventPlayPause","eventsPaused","i","cbPlayPause","eventTimeChange","cbTimeChange","self","this","currentTime","paused","delay","overwriteTime","setDelay","isPlaying","update","togglePlay","play","pause","setTime","t","setOffset","val","pauseEvents","onoff","onPlayPause","cb","push","onTimeChange","CABLES","ajax","method","post","contenttype","requestTimeout","xhr","onreadystatechange","readyState","clearTimeout","status","Error","responseText","toUpperCase","setRequestHeader","String","prototype","endl","arrayContains","arr","obj","length","CGL","DEG2RAD","numMaxLoadingAssets","numLoadingAssets","onLoadingAssetsFinished","finishedLoading","incrementLoadingAssets","max","decrementLoadingAssets","setTimeout","getLoadingStatus","stat","Mesh","_cgl","geom","addAttribute","name","array","itemSize","buffer","cgl","gl","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","attr","loc","numItems","attributes","bind","shader","enableVertexAttribArray","getAttrVertexPos","bufVertices","vertexAttribPointer","FLOAT","getAttribLocation","getProgram","ELEMENT_ARRAY_BUFFER","bufVerticesIndizes","getAttributes","setGeom","meshChanged","unBind","vertices","Uint16Array","verticesIndices","vertexNormals","texCoords","morphTargets","lastMesh","lastMeshShader","disableVertexAttribArray","render","what","TRIANGLES","wireframe","LINES","points","POINTS","drawElements","UNSIGNED_SHORT","Geometry","calcNormal","triangle","u","v","normal","vec3","subtract","normalize","faceVertCount","texCoordsIndices","getVertexVec","which","vec","calcNormals","calcVertexNormals","console","log","faceNormals","k","clear","addFace","a","b","face","iv","parseInt","parseOBJ","buff","_readline","off","s","fromCharCode","groups","vertexNormalIndices","cg","from","to","Uint8Array","x","y","z","line","cds","split","v0a","v1a","v2a","vi0","vi1","vi2","ui0","ui1","ui2","ni0","ni1","ni2","vlen","ulen","nlen","v3a","vi3","ui3","ni3","profileUniformCount","Uniform","_shader","_type","_name","_value","type","value","needsUpdate","addUniform","getType","getName","getValue","resetLoc","updateValueF","getCgl","getUniformLocation","uniform1f","bindTextures","setValueF","updateValue4F","uniform4f","setValue4F","updateValueT","uniform1i","setValueT","setValue","updateValue","Shader","program","uniforms","defines","needsRecompile","projMatrixUniform","mvMatrixUniform","normalMatrixUniform","attrVertexPos","define","removeDefine","splice","removeUniform","uni","getDefaultVertexShader","getDefaultFragmentShader","getErrorFragmentShader","srcVert","srcFrag","setSource","hasTextureUniforms","compile","definesStr","vs","fs","srcHeadVert","srcHeadFrag","moduleNames","j","modules","srcBodyVert","srcBodyFrag","prefix","createProgram","currentProgram","useProgram","uniformMatrix4fv","pMatrix","mvMatrix","normalMatrix","mat4","create","invert","transpose","createShader","str","getBadLines","infoLog","basLines","lines","divide","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","VERTEX_SHADER","FRAGMENT_SHADER","warn","getShaderInfoLog","badLines","htmlWarning","match","isBadLine","bj","UI","MODAL","showError","linkProgram","getProgramParameter","LINK_STATUS","vstr","fstr","vshader","fshader","attachShader","moduleNumId","removeModule","mod","id","addModule","numId","setModules","names","State","mvMatrixStack","pMatrixStack","shaderStack","viewPort","frameStore","canvas","identity","simpleShader","currentShader","setCanvas","document","getElementById","getContext","preserveDrawingBuffer","antialias","canvasWidth","clientWidth","canvasHeight","clientHeight","doScreenshot","screenShotDataURL","getViewPort","resetViewPort","viewport","setViewPort","w","h","beginFrame","setShader","endFrame","setPreviousShader","toDataURL","getShader","pop","pushMvMatrix","copy","popMvMatrix","pushPMatrix","popPMatrix","Texture","options","_isPowerOfTwo","setFilter","width","height","filter","FILTER_NEAREST","texParameteri","TEXTURE_2D","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","FILTER_LINEAR","LINEAR","FILTER_MIPMAP","NEAREST_MIPMAP_LINEAR","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","tex","createTexture","flip","isDepthTexture","isPowerOfTwo","setSize","bindTexture","uarr","texImage2D","DEPTH_COMPONENT","RGBA","UNSIGNED_BYTE","initTexture","img","pixelStorei","UNPACK_FLIP_Y_WEBGL","image","generateMipmap","preview","previewTexture","load","finishedCallback","settings","texture","Image","hasOwnProperty","src","fromImage","texturePreviewer","texturePreview","size","mesh","timeUni","startTime","clearColor","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","activeTexture","TEXTURE0","TextureEffect","textureSource","textureTarget","frameBuf","createFramebuffer","renderbuffer","createRenderbuffer","switched","startEffect","setSourceTexture","bindFramebuffer","FRAMEBUFFER","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","framebufferTexture2D","COLOR_ATTACHMENT0","framebufferRenderbuffer","DEPTH_ATTACHMENT","getCurrentTargetTexture","getCurrentSourceTexture","perspective","finish","PORT_DIR_IN","PORT_DIR_OUT","OP_PORT_TYPE_VALUE","OP_PORT_TYPE_FUNCTION","OP_PORT_TYPE_OBJECT","OP_PORT_TYPE_TEXTURE","OP_PORT_TYPE_ARRAY","OP_PORT_TYPE_DYNAMIC","Ops","Op","_patch","objName","portsOut","portsIn","posts","uiAttribs","enabled","patch","onAddPort","onCreate","onResize","onLoaded","onDelete","onUiAttrChange","uiAttr","newAttribs","p","addOutPort","direction","parent","hasPort","addInPort","printInfo","ipo","removeLinks","findFittingPort","otherPort","Link","canLink","ipi","getSerialized","op","getPortByName","getPort","updateAnims","updateAnim","Port","links","valueBeforeLink","anim","animated","oldAnimVal","onLink","showPreview","uiActiveState","ignoreValueSerialize","onLinkChanged","doShowPreview","onOff","onPreviewChanged","shouldLink","get","set","__defineGetter__","__defineSetter__","isLinked","onValueChanged","onTriggered","_onTriggered","timer","isAnimated","getUiActiveState","setUiActiveState","onUiActiveStateChange","onAnimToggle","_onAnimToggle","setAnimated","TL","Anim","toggleAnim","addLink","l","removeLinkTo","p2","portIn","portOut","remove","isLinkedTo","trigger","call","execute","goals","getTypeString","removeLink","link","scene","getOtherPort","onUnLink","p1","objIn","objOut","canLinkText","txt","Scene","cfg","ops","animFrameOps","gui","onLoadStart","onLoadEnd","config","glCanvasId","prefixAssetPath","getFilePath","filename","deleteOp","addOp","parts","window","onAdd","removeOnAnimFrame","opid","tryRelink","reLinkP1","reLinkP2","exec","requestAnimationFrame","time","onAnimFrame","op1","port1Name","op2","port2Name","port1","port2","serialize","asObj","JSON","stringify","getOpById","getSubPatchOp","patchId","subPatch","deSerialize","opinid","opoutid","inName","outName","found","parse","iop","objPort","port","loop","ani","keys","Key","ipi2","ili","EASING_LINEAR","EASING_ABSOLUTE","EASING_SMOOTHSTEP","EASING_SMOOTHERSTEP","EASING_BEZIER","EASING_CUBIC_IN","EASING_CUBIC_OUT","EASING_CUBIC_INOUT","EASING_EXPO_IN","EASING_EXPO_OUT","EASING_EXPO_INOUT","EASING_SIN_IN","EASING_SIN_OUT","EASING_SIN_INOUT","linear","perc","key1","key2","ui","onChange","easing","bezTime","bezValue","bezTimeIn","bezValueIn","bezierAnim","updateBezier","setBezierControlOut","setBezierControlIn","setEasing","easeLinear","easeAbsolute","easeExpoIn","pow","easeExpoOut","easeExpoInOut","easeSinIn","cos","PI","easeSinOut","sin","easeSinInOut","easeCubicIn","easeCubicOut","easeCubicInOut","easeSmoothStep","min","easeSmootherStep","BezierB1","BezierB2","BezierB3","BezierB4","Bezier","percent","nextKey","val1x","val1y","c1x","c1y","val2x","val2y","c2x","c2y","easeBezier","timeSpan","steps","is","getEasing","ease","stayInTimeline","defaultEasing","sortKeys","sort","getKeyIndex","theKey","getKey","index","index2","addKey","undefined","Variable","changedCallbacks","onChanged","f","emitChanged"],"mappings":"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","file":"cables.min.js","sourcesContent":["function generateUUID()\n{\n    var d = new Date().getTime();\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c)\n    {\n        var r = (d + Math.random()*16)%16 | 0;\n        d = Math.floor(d/16);\n        return (c=='x' ? r : (r&0x3|0x8)).toString(16);\n    });\n    return uuid;\n}\n\n// ----------------------------------------------------------------\n\nfunction isNumeric(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n}\n\n\n// ----------------------------------------------------------------\n\nfunction ajaxRequest(url, callback)\n{\n    var request = new XMLHttpRequest();\n    request.open(\"GET\", url, true);\n    request.responseType = \"arraybuffer\";\n    request.onload = function(e)\n    {\n        callback(e.target.response);\n    };\n    request.send();\n}\n\n// ----------------------------------------------------------------\n\nCABLES=CABLES || {};\n\nCABLES.ajax=function(url,cb,method,post,contenttype)\n{\n    var requestTimeout,xhr;\n    try{ xhr = new XMLHttpRequest(); }catch(e){}\n\n    // requestTimeout = setTimeout(function() {xhr.abort(); cb(new Error(\"tinyxhr: aborted by a timeout\"), \"\",xhr); }, 30000);\n    xhr.onreadystatechange = function()\n    {\n        if (xhr.readyState != 4) return;\n        clearTimeout(requestTimeout);\n\n\n        cb(xhr.status != 200?new Error(url+\"server response status is \"+xhr.status):false, xhr.responseText,xhr);\n    };\n    xhr.open(method?method.toUpperCase():\"GET\", url, true);\n\n    if(!post) xhr.send();\n    else\n    {\n        xhr.setRequestHeader('Content-type', contenttype?contenttype:'application/x-www-form-urlencoded');\n        xhr.send(post);\n    }\n};\n\n// ----------------------------------------------------------------\n\n\nString.prototype.endl = function(){return this+'\\n';};\n\n// ----------------------------------------------------------------\n\nvar arrayContains = function(arr,obj)\n{\n    var i = arr.length;\n    while (i--)\n    {\n        if (arr[i] === obj)\n        {\n            return true;\n        }\n    }\n    return false;\n};\n\n// ----------------------------------------------------------------\n\nCGL=CGL || {};\nCGL.DEG2RAD=3.14159/180.0;\nCGL.numMaxLoadingAssets=0;\nCGL.numLoadingAssets=0;\n\nCGL.onLoadingAssetsFinished=null;\n\nCGL.finishedLoading=function()\n{\n    return CGL.numLoadingAssets!==0;\n};\n\nCGL.incrementLoadingAssets=function()\n{\n    CGL.numLoadingAssets++;\n    CGL.numMaxLoadingAssets=Math.max(CGL.numLoadingAssets,CGL.numMaxLoadingAssets);\n};\n\nCGL.decrementLoadingAssets=function()\n{\n    CGL.numLoadingAssets--;\n    setTimeout(CGL.getLoadingStatus,100);\n};\n\nCGL.getLoadingStatus=function()\n{\n    if(CGL.numMaxLoadingAssets===0)return 0;\n\n    var stat=(CGL.numMaxLoadingAssets-CGL.numLoadingAssets)/CGL.numMaxLoadingAssets;\n    if(stat==1 && CGL.onLoadingAssetsFinished)\n    {\n        CGL.onLoadingAssetsFinished();\n    }\n    return stat;\n};\n\n\n\n\n\n\n\n","\nfunction Timer()\n{\n    var self=this;\n    var timeStart=Date.now();\n    var timeOffset=0;\n\n    var currentTime=0;\n    var lastTime=0;\n    var paused=true;\n    var delay=0;\n    var eventsPaused=false;\n    this.overwriteTime=-1;\n\n    function getTime()\n    {\n        lastTime=(Date.now()-timeStart)/1000;\n        return lastTime+timeOffset;\n    }\n\n    this.setDelay=function(d)\n    {\n        delay=d;\n        eventTimeChange();\n    };\n\n    this.isPlaying=function()\n    {\n        return !paused;\n    };\n\n    this.update=function()\n    {\n        if(paused) return;\n        currentTime=getTime();\n\n        return currentTime;\n    };\n\n    this.getTime=function()\n    {\n        if(this.overwriteTime>=0)return this.overwriteTime-delay;\n        return currentTime-delay;\n    };\n\n    this.togglePlay=function()\n    {\n        if(paused) self.play();\n            else self.pause();\n    };\n\n    this.setTime=function(t)\n    {\n        if(t<0)t=0;\n        timeStart=Date.now();\n        timeOffset=t;\n        currentTime=t;\n        eventTimeChange();\n    };\n\n    this.setOffset=function(val)\n    {\n        if(currentTime+val<0)\n        {\n            timeStart=Date.now();\n            timeOffset=0;\n            currentTime=0;\n        }\n        else\n        {\n            timeOffset+=val;\n            currentTime=lastTime+timeOffset;\n        }\n        eventTimeChange();\n    };\n\n    this.play=function()\n    {\n        timeStart=Date.now();\n        paused=false;\n        eventPlayPause();\n    };\n\n    this.pause=function()\n    {\n        timeOffset=currentTime;\n        paused=true;\n        eventPlayPause();\n    };\n\n    // ----------------\n\n    var cbPlayPause=[];\n    var cbTimeChange=[];\n    function eventPlayPause()\n    {\n        if(eventsPaused)return;\n        for(var i in cbPlayPause) cbPlayPause[i]();\n    }\n\n    function eventTimeChange()\n    {\n        if(eventsPaused)return;\n        for(var i in cbTimeChange) cbTimeChange[i]();\n    }\n\n    this.pauseEvents=function(onoff)\n    {\n        eventsPaused=onoff;\n    };\n\n    this.onPlayPause=function(cb)\n    {\n        if(cb && typeof cb == \"function\")\n            cbPlayPause.push(cb);\n    };\n\n    this.onTimeChange=function(cb)\n    {\n        if(cb && typeof cb == \"function\")\n            cbTimeChange.push(cb);\n    };\n\n}","var CGL=CGL || {};\n\n\nCGL.Mesh=function(_cgl,geom)\n{\n    var cgl=_cgl;\n    var bufVertices = cgl.gl.createBuffer();\n    var bufVerticesIndizes = cgl.gl.createBuffer();\n    var attributes=[];\n\n    var _geom=null;\n\n    function addAttribute(name,array,itemSize)\n    {\n        var buffer= cgl.gl.createBuffer();\n\n        cgl.gl.bindBuffer(cgl.gl.ARRAY_BUFFER, buffer);\n        cgl.gl.bufferData(cgl.gl.ARRAY_BUFFER, new Float32Array(array), cgl.gl.STATIC_DRAW);\n\n        var attr=\n            {\n                loc:-1,\n                buffer:buffer,\n                name:name,\n                itemSize:itemSize,\n                numItems: array.length/itemSize\n            };\n\n        attributes.push(attr);\n\n        for(i=0;i<attributes.length;i++)\n        {\n            attributes[i].loc=-1;\n        }\n\n\n    }\n\n    this.getAttributes=function()\n    {\n        return attributes;\n    };\n\n    this.setGeom=function(geom)\n    {\n        if(!this.meshChanged() )this.unBind();\n\n\n        attributes.length=0;\n        cgl.gl.bindBuffer(cgl.gl.ARRAY_BUFFER, bufVertices);\n        cgl.gl.bufferData(cgl.gl.ARRAY_BUFFER, new Float32Array(geom.vertices), cgl.gl.STATIC_DRAW);\n        bufVertices.itemSize = 3;\n        bufVertices.numItems = geom.vertices.length/3;\n\n        cgl.gl.bindBuffer(cgl.gl.ELEMENT_ARRAY_BUFFER, bufVerticesIndizes);\n        cgl.gl.bufferData(cgl.gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(geom.verticesIndices), cgl.gl.STATIC_DRAW);\n        bufVerticesIndizes.itemSize = 1;\n        bufVerticesIndizes.numItems = geom.verticesIndices.length;\n\n        if(geom.vertexNormals.length>0) addAttribute('attrVertNormal',geom.vertexNormals,3);\n        if(geom.texCoords.length>0) addAttribute('attrTexCoord',geom.texCoords,2);\n\n        for(var i=0;i<geom.morphTargets.length;i++) addAttribute('attrMorphTargetA',geom.morphTargets[i],3);\n    };\n\n\n    function bind(shader)\n    {\n        cgl.gl.enableVertexAttribArray(shader.getAttrVertexPos());\n        cgl.gl.bindBuffer(cgl.gl.ARRAY_BUFFER, bufVertices);\n        cgl.gl.vertexAttribPointer(shader.getAttrVertexPos(),bufVertices.itemSize, cgl.gl.FLOAT, false, 0, 0);\n\n        for(i=0;i<attributes.length;i++)\n        {\n            if(attributes[i].loc==-1)\n                attributes[i].loc = cgl.gl.getAttribLocation(shader.getProgram(), attributes[i].name);\n        \n            if(attributes[i].loc!=-1)\n            {\n                cgl.gl.enableVertexAttribArray(attributes[i].loc);\n                cgl.gl.bindBuffer(cgl.gl.ARRAY_BUFFER, attributes[i].buffer);\n                cgl.gl.vertexAttribPointer(attributes[i].loc,attributes[i].itemSize, cgl.gl.FLOAT, false, 0, 0);\n            }\n        }\n\n        cgl.gl.bindBuffer(cgl.gl.ELEMENT_ARRAY_BUFFER, bufVerticesIndizes);\n\n    }\n\n    this.unBind=function()\n    {\n        cgl.lastMesh=null;\n        cgl.lastMeshShader=null;\n\n        for(i=0;i<attributes.length;i++)\n            if(attributes[i].loc!=-1)\n                cgl.gl.disableVertexAttribArray(attributes[i].loc);\n\n    };\n\n    this.meshChanged=function()\n    {\n        return (cgl.lastMesh && ( cgl.lastMesh!=this ));\n    };\n\n\n    this.render=function(shader)\n    {\n        // todo: enable/disablevertex only if the mesh has changed... think drawing 10000x the same mesh\n\n        if(!shader) return;\n        var i=0;\n\n        // var meshChanged=this.meshChanged();\n        \n        // if(meshChanged)\n            // cgl.lastMesh.unBind();\n\n        shader.bind();\n\n        // if(meshChanged)\n            bind(shader);\n\n        // if(geom.morphTargets.length>0) shader.define('HAS_MORPH_TARGETS');\n\n\n        var what=cgl.gl.TRIANGLES;\n        if(cgl.wireframe)what=cgl.gl.LINES;\n        else if(cgl.points)what=cgl.gl.POINTS;\n\n        cgl.gl.drawElements(what, bufVerticesIndizes.numItems, cgl.gl.UNSIGNED_SHORT, 0);\n        \n        this.unBind();\n\n        // cgl.lastMesh=this;\n        // cgl.lastMeshShader=shader;\n\n    };\n\n\n    this.setGeom(geom);\n};\n\nCGL.Geometry=function()\n{\n    this.faceVertCount=3;\n    this.vertices=[];\n    this.verticesIndices=[];\n    this.texCoords=[];\n    this.texCoordsIndices=[];\n    this.vertexNormals=[];\n\n    this.morphTargets=[];\n\n    function calcNormal(triangle)\n    {\n        // Begin Function CalculateSurfaceNormal (Input Triangle) Returns Vector\n \n        var u=[0,0,0],v=[0,0,0],normal=[0,0,0];\n            // console.log('triangle',triangle);\n\n        // Set Vector U to (Triangle.p2 minus Triangle.p1)\n        // Set Vector V to (Triangle.p3 minus Triangle.p1)\n\n        vec3.subtract(u,triangle[0],triangle[1]);\n        vec3.subtract(v,triangle[0],triangle[2]);\n\n        normal[0] = u[1]*v[2] - u[2]*v[1];\n        normal[1] = u[2]*v[0] - u[0]*v[2];\n        normal[2] = u[0]*v[1] - u[1]*v[0];\n\n        vec3.normalize(normal,normal);\n\n        return normal;\n     \n        // Set Normal.x to (multiply U.y by V.z) minus (multiply U.z by V.y)\n        // Set Normal.y to (multiply U.z by V.x) minus (multiply U.x by V.z)\n        // Set Normal.z to (multiply U.x by V.y) minus (multiply U.y by V.x)\n     \n        // Returning Normal\n    }\n\n    this.getVertexVec=function(which)\n    {\n        var vec=[0,0,0];\n        vec[0]=this.vertices[which*3+0];\n        vec[1]=this.vertices[which*3+1];\n        vec[2]=this.vertices[which*3+2];\n        return vec;\n    };\n\n    this.calcNormals=function(calcVertexNormals)\n    {\n        var i=0;\n\n        console.log('calcNormals');\n                \n        this.vertexNormals.length=this.vertices.length;\n        for(i=0;i<this.vertices.length;i++)\n        {\n            this.vertexNormals[i]=0;\n        }\n        var faceNormals=[];\n\n        faceNormals.length=this.verticesIndices.length/3;\n\n        for(i=0;i<this.verticesIndices.length;i+=3)\n        {\n            var triangle=[\n                this.getVertexVec(this.verticesIndices[i+0]),\n                this.getVertexVec(this.verticesIndices[i+1]),\n                this.getVertexVec(this.verticesIndices[i+2])\n                ];\n\n            faceNormals[i/3]=calcNormal(triangle);\n\n            if(!calcVertexNormals)\n            {\n                this.vertexNormals[this.verticesIndices[i+0]*3+0]=faceNormals[i/3][0];\n                this.vertexNormals[this.verticesIndices[i+0]*3+1]=faceNormals[i/3][1];\n                this.vertexNormals[this.verticesIndices[i+0]*3+2]=faceNormals[i/3][2];\n\n                this.vertexNormals[this.verticesIndices[i+1]*3+0]=faceNormals[i/3][0];\n                this.vertexNormals[this.verticesIndices[i+1]*3+1]=faceNormals[i/3][1];\n                this.vertexNormals[this.verticesIndices[i+1]*3+2]=faceNormals[i/3][2];\n\n                this.vertexNormals[this.verticesIndices[i+2]*3+0]=faceNormals[i/3][0];\n                this.vertexNormals[this.verticesIndices[i+2]*3+1]=faceNormals[i/3][1];\n                this.vertexNormals[this.verticesIndices[i+2]*3+2]=faceNormals[i/3][2];\n            }\n        }\n\n        console.log('this.vertices',this.vertices.length);\n        console.log('this.vertexNormals',this.vertexNormals.length);\n        \n        if(calcVertexNormals)\n        {\n            console.log('calc vertexnormals');\n                    \n            for(i=0;i<this.verticesIndices.length;i+=3) //faces\n            {\n                for(var k=0;k<3;k++) //triangles\n                {\n                    var v=[\n                        this.vertexNormals[this.verticesIndices[i+k]*3+0]+faceNormals[i/3][0],\n                        this.vertexNormals[this.verticesIndices[i+k]*3+1]+faceNormals[i/3][1],\n                        this.vertexNormals[this.verticesIndices[i+k]*3+2]+faceNormals[i/3][2]\n                        ];\n                    vec3.normalize(v,v);\n                    this.vertexNormals[this.verticesIndices[i+k]*3+0]=v[0];\n                    this.vertexNormals[this.verticesIndices[i+k]*3+1]=v[1];\n                    this.vertexNormals[this.verticesIndices[i+k]*3+2]=v[2];\n\n                }\n\n\n\n                // this.vertexNormals[this.verticesIndices[i+1]*3+0]+faceNormals[i][0];\n                // this.vertexNormals[this.verticesIndices[i+1]*3+1]+faceNormals[i][1];\n                // this.vertexNormals[this.verticesIndices[i+1]*3+2]+faceNormals[i][2];\n\n                // this.vertexNormals[this.verticesIndices[i+2]*3+0]+faceNormals[i][0];\n                // this.vertexNormals[this.verticesIndices[i+2]*3+1]+faceNormals[i][1];\n                // this.vertexNormals[this.verticesIndices[i+2]*3+2]+faceNormals[i][2];\n            }\n\n            // for(i=0;i<this.verticesIndices.length;i+=3)\n            // {\n            //     for(var k=0;k<3;k++)\n            //     {\n            //         var v=[\n            //             this.vertexNormals[this.verticesIndices[i+k]*3+0],\n            //             this.vertexNormals[this.verticesIndices[i+k]*3+1],\n            //             this.vertexNormals[this.verticesIndices[i+k]*3+2]\n            //             ];\n            //         vec3.normalize(v,v);\n            //         this.vertexNormals[this.verticesIndices[i+k]*3+0]=v[0];\n            //         this.vertexNormals[this.verticesIndices[i+k]*3+1]=v[1];\n            //         this.vertexNormals[this.verticesIndices[i+k]*3+2]=v[2];\n            //     }\n            // }\n\n        }\n  \n\n    };\n\n//https://www.opengl.org/wiki/Calculating_a_Surface_Normal\n\n    this.clear=function()\n    {\n        this.vertices.length=0;\n        this.verticesIndices.length=0;\n        this.texCoords.length=0;\n        this.texCoordsIndices.length=0;\n        this.vertexNormals.length=0;\n    };\n\n    this.addFace=function(a,b,c)\n    {\n        var face=[-1,-1,-1];\n\n        for(var iv=0;iv<this.vertices;iv+=3)\n        {\n            if( this.vertices[iv+0]==a[0] &&\n                this.vertices[iv+1]==a[1] &&\n                this.vertices[iv+2]==a[2]) face[0]=iv/3;\n\n            if( this.vertices[iv+0]==b[0] &&\n                this.vertices[iv+1]==b[1] &&\n                this.vertices[iv+2]==b[2]) face[1]=iv/3;\n\n            if( this.vertices[iv+0]==c[0] &&\n                this.vertices[iv+1]==c[1] &&\n                this.vertices[iv+2]==c[2]) face[2]=iv/3;\n        }\n\n        if(face[0]==-1)\n        {\n            this.vertices.push(a[0],a[1],a[2]);\n            face[0]=(this.vertices.length-1)/3;\n        }\n\n        if(face[1]==-1)\n        {\n            this.vertices.push(b[0],b[1],b[2]);\n            face[1]=(this.vertices.length-1)/3;\n        }\n\n        if(face[2]==-1)\n        {\n            this.vertices.push(c[0],c[1],c[2]);\n            face[2]=(this.vertices.length-1)/3;\n        }\n\n        this.verticesIndices.push( parseInt( face[0],10 ) );\n        this.verticesIndices.push( parseInt( face[1],10 ) );\n        this.verticesIndices.push( parseInt( face[2],10 ) );\n\n        this.faceVertCount=this.verticesIndices.length;\n\n    };\n\n\n\n};\n\nparseOBJ = function(buff)\n{\n\n    _readline = function(a, off)  // Uint8Array, offset\n    {\n        var s = \"\";\n        while(a[off] != 10) s += String.fromCharCode(a[off++]);\n        return s;\n    };\n\n    var geom = new CGL.Geometry();\n    geom.groups = {};\n\n    geom.vertexNormals = [];\n    geom.vertexNormalIndices = [];\n\n    var cg = {from: 0, to:0};   // current group\n    var off = 0;\n    var a = new Uint8Array(buff);\n    var x=0,y=0,z=0;\n    while(off < a.length)\n    {\n        var line = _readline(a, off);\n        off += line.length + 1;\n        line = line.replace(/ +(?= )/g,'');\n        line = line.replace(/(^\\s+|\\s+$)/g, '');\n        var cds = line.split(\" \");\n        if(cds[0] == \"g\")\n        {\n            cg.to = geom.verticesIndices.length;\n            if(!geom.groups[cds[1]]) geom.groups[cds[1]] = {from:geom.verticesIndices.length, to:0};\n            cg = geom.groups[cds[1]];\n        }\n        if(cds[0] == \"v\")\n        {\n            x = parseFloat(cds[1]);\n            y = parseFloat(cds[2]);\n            z = parseFloat(cds[3]);\n            geom.vertices.push(x,y,z);\n        }\n        if(cds[0] == \"vt\")\n        {\n            x = parseFloat(cds[1]);\n            y = 1-parseFloat(cds[2]);\n            geom.texCoords.push(x,y);\n        }\n        if(cds[0] == \"vn\")\n        {\n            x = parseFloat(cds[1]);\n            y = parseFloat(cds[2]);\n            z = parseFloat(cds[3]);\n            geom.vertexNormals.push(x,y,z);\n        }\n        if(cds[0] == \"f\")\n        {\n            var v0a = cds[1].split(\"/\"), v1a = cds[2].split(\"/\"), v2a = cds[3].split(\"/\");\n            var vi0 = parseInt(v0a[0])-1, vi1 = parseInt(v1a[0])-1, vi2 = parseInt(v2a[0])-1;\n            var ui0 = parseInt(v0a[1])-1, ui1 = parseInt(v1a[1])-1, ui2 = parseInt(v2a[1])-1;\n            var ni0 = parseInt(v0a[2])-1, ni1 = parseInt(v1a[2])-1, ni2 = parseInt(v2a[2])-1;\n            \n            var vlen = geom.vertices.length/3, ulen = geom.texCoords.length/2, nlen = geom.vertexNormals.length/3;\n            if(vi0<0) vi0 = vlen + vi0+1; if(vi1<0) vi1 = vlen + vi1+1; if(vi2<0) vi2 = vlen + vi2+1;\n            if(ui0<0) ui0 = ulen + ui0+1; if(ui1<0) ui1 = ulen + ui1+1; if(ui2<0) ui2 = ulen + ui2+1;\n            if(ni0<0) ni0 = nlen + ni0+1; if(ni1<0) ni1 = nlen + ni1+1; if(ni2<0) ni2 = nlen + ni2+1;\n            \n            geom.verticesIndices.push(vi0, vi1, vi2);  //cg.verticesIndices.push(vi0, vi1, vi2)\n            geom.texCoordsIndices  .push(ui0, ui1, ui2);  //cg.texCoordsIndices  .push(ui0, ui1, ui2);\n            geom.vertexNormalIndices.push(ni0, ni1, ni2);  //cg.vertexNormalIndices.push(ni0, ni1, ni2);\n            if(cds.length == 5)\n            {\n                var v3a = cds[4].split(\"/\");\n                var vi3 = parseInt(v3a[0])-1, ui3 = parseInt(v3a[1])-1, ni3 = parseInt(v3a[2])-1;\n                if(vi3<0) vi3 = vlen + vi3+1;\n                if(ui3<0) ui3 = ulen + ui3+1;\n                if(ni3<0) ni3 = nlen + ni3+1;\n                geom.verticesIndices.push(vi0, vi2, vi3);  //cg.verticesIndices.push(vi0, vi2, vi3);\n                geom.texCoordsIndices  .push(ui0, ui2, ui3);  //cg.texCoordsIndices  .push(ui0, ui2, ui3);\n                geom.vertexNormalIndices.push(ni0, ni2, ni3);  //cg.vertexNormalIndices.push(ni0, ni2, ni3);\n            }\n        }\n    }\n    cg.to = geom.verticesIndices.length;\n    \n    return geom;\n};\n\n\n","var CGL=CGL || {};\n\n// ---------------------------------------------------------------------------\n\nCGL.profileUniformCount=0;\n\n\nCGL.Uniform=function(_shader,_type,_name,_value)\n{\n    var self=this;\n    var loc=-1;\n    var name=_name;\n    var type=_type;\n    var value=0.00001;\n    var shader=_shader;\n    this.needsUpdate=true;\n\n    shader.addUniform(this);\n\n    this.getType=function() {return type;};\n    this.getName=function() {return name;};\n    this.getValue=function() {return value;};\n    this.resetLoc=function() { loc=-1;self.needsUpdate=true; };\n\n    this.updateValueF=function()\n    {\n        if(loc==-1) loc=shader.getCgl().gl.getUniformLocation(shader.getProgram(), name);\n        else self.needsUpdate=false;\n        shader.getCgl().gl.uniform1f(loc, value);\n        CGL.profileUniformCount++;\n    };\n\n    this.bindTextures=function()\n    {\n\n    };\n\n    this.setValueF=function(v)\n    {\n        if(v!=value)\n        {\n            self.needsUpdate=true;\n            value=v;\n            // self.updateValueF();\n        }\n    };\n\n\n    this.updateValue4F=function()\n    {\n        if(loc==-1) loc=shader.getCgl().gl.getUniformLocation(shader.getProgram(), name);\n        shader.getCgl().gl.uniform4f(loc, value[0],value[1],value[2],value[3]);\n        CGL.profileUniformCount++;\n        // self.needsUpdate=false;\n    };\n\n    this.setValue4F=function(v)\n    {\n        self.needsUpdate=true;\n        value=v;\n    };\n\n\n    this.updateValueT=function()\n    {\n        if(loc==-1)\n        {\n            loc=shader.getCgl().gl.getUniformLocation(shader.getProgram(), name);\n            if(loc==-1) console.log('texture loc unknown!!');\n        }\n        CGL.profileUniformCount++;\n        shader.getCgl().gl.uniform1i(loc, value);\n        self.needsUpdate=false;\n    };\n\n    this.setValueT=function(v)\n    {\n        self.needsUpdate=true;\n        value=v;\n    };\n\n    if(type=='f')\n    {\n        this.setValue=this.setValueF;\n        this.updateValue=this.updateValueF;\n    }\n\n    if(type=='4f')\n    {\n        this.setValue=this.setValue4F;\n        this.updateValue=this.updateValue4F;\n    }\n\n    if(type=='t')\n    {\n        this.setValue=this.setValueT;\n        this.updateValue=this.updateValueT;\n    }\n\n    this.setValue(_value);\n    self.needsUpdate=true;\n};\n\n// ---------------------------------------------------------------------------\n\nCGL.Shader=function(_cgl)\n{\n    if(!_cgl) throw \"shader constructed without cgl\";\n    var self=this;\n    var program=null;\n    var uniforms=[];\n    var defines=[];\n    var needsRecompile=true;\n    var infoLog='';\n    var cgl=_cgl;\n    var projMatrixUniform=null;\n    var mvMatrixUniform=null;\n    var normalMatrixUniform=null;\n    var attrVertexPos = -1;\n\n    this.getCgl=function()\n    {\n        return cgl;\n    };\n\n    this.define=function(name,value)\n    {\n        if(!value)value='';\n        // for(var i in defines)\n        for(var i=0;i<defines.length;i++)\n        {\n            if(defines[i][0]==name)\n            {\n                defines[i][1]=value;\n                needsRecompile=true;\n                return;\n            }\n        }\n        defines.push([name,value]);\n        needsRecompile=true;\n    };\n\n    this.removeDefine=function(name,value)\n    {\n        for(var i=0;i<defines.length;i++)\n        {\n            if(defines[i][0]==name)\n            {\n                defines.splice(i,1);\n                needsRecompile=true;\n                return;\n            }\n        }\n                \n    };\n\n    this.removeUniform=function(name)\n    {\n        for(var i=0;i<uniforms.length;i++)\n        {\n            if(uniforms[i].getName()==name)\n            {\n                uniforms.splice(i,1);\n            }\n        }\n        needsRecompile=true;\n    };\n\n    this.addUniform=function(uni)\n    {\n        uniforms.push(uni);\n        needsRecompile=true;\n    };\n\n    this.getDefaultVertexShader=function()\n    {\n        return ''\n        .endl()+'attribute vec3 vPosition;'\n        .endl()+'attribute vec2 attrTexCoord;'\n        .endl()+'attribute vec3 attrVertNormal;'\n        .endl()+'varying vec2 texCoord;'\n        .endl()+'varying vec3 norm;'\n        .endl()+'uniform mat4 projMatrix;'\n        .endl()+'uniform mat4 mvMatrix;'\n        // .endl()+'uniform mat4 normalMatrix;'\n        \n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   texCoord=attrTexCoord;'\n        .endl()+'   norm=attrVertNormal;'\n        .endl()+'   gl_Position = projMatrix * mvMatrix * vec4(vPosition,  1.0);'\n        .endl()+'}';\n    };\n\n    this.getDefaultFragmentShader=function()\n    {\n        return ''\n        .endl()+'precision mediump float;'\n        .endl()+'varying vec3 norm;'\n        .endl()+'void main()'\n        .endl()+'{'\n\n        .endl()+'   gl_FragColor = vec4(0.5,0.5,0.5,1.0);'\n        // '   gl_FragColor = vec4(norm.x,norm.y,1.0,1.0);\\n'+\n        .endl()+'}';\n    };\n\n    this.getErrorFragmentShader=function()\n    {\n        return ''\n        .endl()+'precision mediump float;'\n        .endl()+'varying vec3 norm;'\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   gl_FragColor = vec4(1.0,0.0,0.0,1.0);'\n        .endl()+'}';\n    };\n\n    this.srcVert=this.getDefaultVertexShader();\n    this.srcFrag=this.getDefaultFragmentShader();\n\n    this.setSource=function(srcVert,srcFrag)\n    {\n        this.srcVert=srcVert;\n        this.srcFrag=srcFrag;\n    };\n\n\n    this.getAttrVertexPos=function(){return attrVertexPos;};\n\n    this.hasTextureUniforms=function()\n    {\n        for(var i=0;i<uniforms.length;i++)\n        {\n            if(uniforms[i].getType()=='t') return true;\n        }\n        return false;\n    };\n\n    this.compile=function()\n    {\n        var definesStr='';\n        var i=0;\n        for(i=0;i<defines.length;i++)\n        {\n            definesStr+='#define '+defines[i][0]+' '+defines[i][1]+''.endl();\n        }\n\n        if(self.hasTextureUniforms()) definesStr+='#define HAS_TEXTURES'.endl();\n\n\n\n        // console.log('shader compile...');\n        // console.log('has textures: '+self.hasTextureUniforms() );\n\n        var vs=definesStr+self.srcVert;\n        var fs=definesStr+self.srcFrag;\n\n\n        var srcHeadVert='';\n        var srcHeadFrag='';\n        for(i=0;i<moduleNames.length;i++)\n        {\n            var srcVert='';\n            var srcFrag='';\n\n            for(var j=0;j<modules.length;j++)\n            {\n                if(modules[j].name==moduleNames[i])\n                {\n                    srcVert+=modules[j].srcBodyVert || '';\n                    srcFrag+=modules[j].srcBodyFrag || '';\n                    srcHeadVert+=modules[j].srcHeadVert || '';\n                    srcHeadFrag+=modules[j].srcHeadFrag || '';\n\n                    srcVert=srcVert.replace(/{{mod}}/g,modules[j].prefix);\n                    srcFrag=srcFrag.replace(/{{mod}}/g,modules[j].prefix);\n                    srcHeadVert=srcHeadVert.replace(/{{mod}}/g,modules[j].prefix);\n                    srcHeadFrag=srcHeadFrag.replace(/{{mod}}/g,modules[j].prefix);\n                }\n            }\n\n            vs=vs.replace('{{'+moduleNames[i]+'}}',srcVert);\n            fs=fs.replace('{{'+moduleNames[i]+'}}',srcFrag);\n        }\n        vs=vs.replace('{{MODULES_HEAD}}',srcHeadVert);\n        fs=fs.replace('{{MODULES_HEAD}}',srcHeadFrag);\n\n\n        if(!program)\n        {\n            program=createProgram(vs,fs, program);\n        }\n        else\n        {\n            // self.vshader=createShader(vs, gl.VERTEX_SHADER, self.vshader );\n            // self.fshader=createShader(fs, gl.FRAGMENT_SHADER, self.fshader );\n            // linkProgram(program);\n            program=createProgram(vs,fs, program);\n            \n            mvMatrixUniform=null;\n\n            for(i=0;i<uniforms.length;i++)\n                uniforms[i].resetLoc();\n        }\n\n        needsRecompile=false;\n    };\n\n\n    this.bind=function()\n    {\n        if(!program || needsRecompile) self.compile();\n        \n        if(!mvMatrixUniform)\n        {\n            attrVertexPos = cgl.gl.getAttribLocation(program, 'vPosition');\n            projMatrixUniform = cgl.gl.getUniformLocation(program, \"projMatrix\");\n            mvMatrixUniform = cgl.gl.getUniformLocation(program, \"mvMatrix\");\n            normalMatrixUniform = cgl.gl.getUniformLocation(program, \"normalMatrix\");\n            for(var i=0;i<uniforms.length;i++)uniforms[i].needsUpdate=true;\n\n        }\n\n        if(cgl.currentProgram!=program)\n        {\n            cgl.gl.useProgram(program);\n            cgl.currentProgram=program;\n        }\n\n        for(var i=0;i<uniforms.length;i++)\n        {\n            if(uniforms[i].needsUpdate)uniforms[i].updateValue();\n        }\n\n        cgl.gl.uniformMatrix4fv(projMatrixUniform, false, cgl.pMatrix);\n\n        cgl.gl.uniformMatrix4fv(mvMatrixUniform, false, cgl.mvMatrix);\n        \n        if(normalMatrixUniform)\n        {\n            var normalMatrix = mat4.create();\n            mat4.invert(normalMatrix,cgl.mvMatrix);\n            mat4.transpose(normalMatrix, normalMatrix);\n\n            cgl.gl.uniformMatrix4fv(normalMatrixUniform, false, normalMatrix);\n        }\n\n    };\n\n    this.getProgram=function()\n    {\n        return program;\n    };\n\n    var createShader =function(str, type,_shader)\n    {\n\n        function getBadLines(infoLog)\n        {\n            var basLines=[];\n            var lines=infoLog.split('\\n');\n            for(var i in lines)\n            {\n                var divide=lines[i].split(':');\n\n                if(parseInt(divide[2],10))\n                    basLines.push(parseInt( divide[2],10) );\n            }\n            // console.log('lines ',lines.length);\n            return basLines;\n        }\n\n        var shader = _shader || cgl.gl.createShader(type);\n        cgl.gl.shaderSource(shader, str);\n        cgl.gl.compileShader(shader);\n        if (!cgl.gl.getShaderParameter(shader, cgl.gl.COMPILE_STATUS))\n        {\n            console.log('compile status: ');\n\n            if(type==cgl.gl.VERTEX_SHADER)console.log('VERTEX_SHADER');\n            if(type==cgl.gl.FRAGMENT_SHADER)console.log('FRAGMENT_SHADER');\n            \n            console.warn( cgl.gl.getShaderInfoLog(shader) );\n\n\n            var infoLog=cgl.gl.getShaderInfoLog(shader);\n            var badLines=getBadLines(infoLog);\n            var htmlWarning='<div class=\"shaderErrorCode\">';\n            var lines = str.match(/^.*((\\r\\n|\\n|\\r)|$)/gm);\n\n            for(var i in lines)\n            {\n                var j=parseInt(i,10)+1;\n                var line=j+': '+lines[i];\n                console.log(line);\n\n                var isBadLine=false;\n                for(var bj in badLines) if(badLines[bj]==j) isBadLine=true;\n\n        \n                if(isBadLine) htmlWarning+='<span class=\"error\">';\n                htmlWarning+=line;\n                if(isBadLine) htmlWarning+='</span>';\n            }\n            \n            console.warn( infoLog );\n\n            infoLog=infoLog.replace(/\\n/g,'<br/>');\n\n            htmlWarning=infoLog+'<br/>'+htmlWarning+'<br/><br/>';\n\n            CABLES.UI.MODAL.showError('shader error',htmlWarning);\n\n            htmlWarning+='</div>';\n\n            self.setSource(self.getDefaultVertexShader(),self.getErrorFragmentShader());\n\n        }\n        return shader;\n    };\n\n    linkProgram=function(program)\n    {\n        cgl.gl.linkProgram(program);\n        if (!cgl.gl.getProgramParameter(program, cgl.gl.LINK_STATUS))\n        {\n            self.setSource(self.getDefaultVertexShader(),self.getErrorFragmentShader());\n        }\n    };\n\n    createProgram=function(vstr, fstr)\n    {\n        var program = cgl.gl.createProgram();\n        self.vshader = createShader(vstr, cgl.gl.VERTEX_SHADER);\n        self.fshader = createShader(fstr, cgl.gl.FRAGMENT_SHADER);\n        cgl.gl.attachShader(program, self.vshader);\n        cgl.gl.attachShader(program, self.fshader);\n\n        linkProgram(program);\n        return program;\n    };\n\n    var moduleNames=[];\n    var modules=[];\n    var moduleNumId=0;\n    \n    this.removeModule=function(mod)\n    {\n        for(var i=0;i<modules.length;i++)\n        {\n            if(modules[i].id==mod.id)\n            {\n                modules.splice(i,1);\n                break;\n            }\n        }\n        needsRecompile=true;\n    };\n\n    this.addModule=function(mod)\n    {\n        mod.id=generateUUID();\n        mod.numId=moduleNumId;\n        mod.prefix='mod'+moduleNumId;\n\n        modules.push(mod);\n        needsRecompile=true;\n        moduleNumId++;\n\n        return mod;\n    };\n\n    this.setModules=function(names)\n    {\n        moduleNames=names;\n    };\n\n\n};\n\n\n","\nvar CGL=CGL || {};\n\nCGL.State=function()\n{\n    var self=this;\n    var mvMatrixStack=[];\n    var pMatrixStack=[];\n    var shaderStack=[];\n    var viewPort=[0,0,0,0];\n\n    this.frameStore={};\n\n    this.pMatrix=mat4.create();\n    this.mvMatrix=mat4.create();\n    this.canvas=null;\n    mat4.identity(self.mvMatrix);\n\n    var simpleShader=new CGL.Shader(this);\n    var currentShader=simpleShader;\n\n    this.setCanvas=function(id)\n    {\n        this.canvas=document.getElementById(id);\n        this.gl=this.canvas.getContext(\"experimental-webgl\",\n        {\n            preserveDrawingBuffer: true,\n            antialias:true\n        });\n\n        this.canvasWidth=this.canvas.clientWidth;\n        this.canvasHeight=this.canvas.clientHeight;\n    };\n\n    this.canvasWidth=-1;\n    this.canvasHeight=-1;\n\n    this.wireframe=false;\n    this.points=false;\n\n    this.doScreenshot=false;\n    this.screenShotDataURL=null;\n\n\n    this.getViewPort=function()\n    {\n        return viewPort;\n    };\n\n    this.resetViewPort=function()\n    {\n        this.gl.viewport(\n            viewPort[0],\n            viewPort[1],\n            viewPort[2],\n            viewPort[3]);\n    };\n    this.setViewPort=function(x,y,w,h)\n    {\n        viewPort[0]=parseInt(x,10);\n        viewPort[1]=parseInt(y,10);\n        viewPort[2]=parseInt(w,10);\n        viewPort[3]=parseInt(h,10);\n        this.gl.viewport(\n            viewPort[0],\n            viewPort[1],\n            viewPort[2],\n            viewPort[3]);\n    };\n\n    this.beginFrame=function()\n    {\n        self.setShader(simpleShader);\n    };\n\n    this.endFrame=function()\n    {\n        self.setPreviousShader();\n        if(mvMatrixStack.length>0) console.warn('mvmatrix stack length !=0 at end of rendering...');\n        if(pMatrixStack.length>0) console.warn('pmatrix stack length !=0 at end of rendering...');\n        if(shaderStack.length>0) console.warn('shaderStack length !=0 at end of rendering...');\n        mvMatrixStack.length=0;\n        pMatrixStack.length=0;\n        shaderStack.length=0;\n\n        if(this.doScreenshot)\n        {\n            console.log('do screenshot');\n\n            this.doScreenshot=false;\n            this.screenShotDataURL = document.getElementById(\"glcanvas\").toDataURL('image/png');\n        }\n    };\n\n    // shader stack\n\n    this.getShader=function()\n    {\n        return currentShader;\n    };\n\n    this.setShader=function(shader)\n    {\n        shaderStack.push(shader);\n        currentShader=shader;\n    };\n\n    this.setPreviousShader=function()\n    {\n        if(shaderStack.length===0) throw \"Invalid movelview popMatrix!\";\n        shaderStack.pop();\n        currentShader = shaderStack[shaderStack.length-1];\n    };\n\n    // modelview matrix stack\n\n    this.pushMvMatrix=function()\n    {\n        var copy = mat4.create();\n        mat4.copy(copy,self.mvMatrix);\n        mvMatrixStack.push(copy);\n    };\n\n    this.popMvMatrix=function()\n    {\n        if(mvMatrixStack.length===0) throw \"Invalid movelview popMatrix!\";\n        self.mvMatrix = mvMatrixStack.pop();\n    };\n\n    // projection matrix stack\n\n    this.pushPMatrix=function()\n    {\n        var copy = mat4.create();\n        mat4.copy(copy,self.pMatrix);\n        pMatrixStack.push(copy);\n    };\n\n    this.popPMatrix=function()\n    {\n        if(pMatrixStack.length===0) throw \"Invalid projection popMatrix!\";\n        self.pMatrix = pMatrixStack.pop();\n    };\n};\n\n\n","\nvar CGL=CGL || {};\n\nCGL.Texture=function(cgl,options)\n{\n    if(!cgl) throw \"no cgl\";\n    var self=this;\n    this.tex = cgl.gl.createTexture();\n    this.width=0;\n    this.height=0;\n    this.flip=true;\n    this.filter=CGL.Texture.FILTER_NEAREST;\n    var isDepthTexture=false;\n\n    if(options)\n    {\n        if(options.isDepthTexture)\n            isDepthTexture=options.isDepthTexture;\n    }\n\n    this.isPowerOfTwo=function()\n    {\n        return _isPowerOfTwo(this.width) && _isPowerOfTwo(this.width);\n    };\n\n    function _isPowerOfTwo (x)\n    {\n        return ( x == 1 || x == 2 || x == 4 || x == 8 || x == 16 || x == 32 || x == 64 || x == 128 || x == 256 || x == 512 || x == 1024 || x == 2048 || x == 4096 || x == 8192 || x == 16384);\n    }\n\n    function setFilter()\n    {\n        if(!_isPowerOfTwo(self.width) || !_isPowerOfTwo(self.height) )\n        {\n            cgl.gl.texParameteri(cgl.gl.TEXTURE_2D, cgl.gl.TEXTURE_WRAP_S, cgl.gl.CLAMP_TO_EDGE);\n            cgl.gl.texParameteri(cgl.gl.TEXTURE_2D, cgl.gl.TEXTURE_WRAP_T, cgl.gl.CLAMP_TO_EDGE);\n        }\n        else\n        {\n            if(self.filter==CGL.Texture.FILTER_NEAREST)\n            {\n                cgl.gl.texParameteri(cgl.gl.TEXTURE_2D, cgl.gl.TEXTURE_MAG_FILTER, cgl.gl.NEAREST);\n                cgl.gl.texParameteri(cgl.gl.TEXTURE_2D, cgl.gl.TEXTURE_MIN_FILTER, cgl.gl.NEAREST);\n            }\n\n            if(self.filter==CGL.Texture.FILTER_LINEAR)\n            {\n                cgl.gl.texParameteri(cgl.gl.TEXTURE_2D, cgl.gl.TEXTURE_MIN_FILTER, cgl.gl.LINEAR);\n                cgl.gl.texParameteri(cgl.gl.TEXTURE_2D, cgl.gl.TEXTURE_MAG_FILTER, cgl.gl.LINEAR);\n            }\n\n            if(self.filter==CGL.Texture.FILTER_MIPMAP)\n            {\n                cgl.gl.texParameteri(cgl.gl.TEXTURE_2D, cgl.gl.TEXTURE_MAG_FILTER, cgl.gl.LINEAR);\n                cgl.gl.texParameteri(cgl.gl.TEXTURE_2D, cgl.gl.TEXTURE_MIN_FILTER, cgl.gl.NEAREST_MIPMAP_LINEAR);\n            }\n        }\n    }\n\n\n    this.setSize=function(w,h)\n    {\n        self.width=w;\n        self.height=h;\n\n        // console.log('self.width',self.width,self.height);\n\n        cgl.gl.bindTexture(cgl.gl.TEXTURE_2D, self.tex);\n\n        var uarr=null;\n        // if(!isDataTexture)\n        // {\n        //     var arr=[];\n        //     arr.length=w*h*4;\n        //     // for(var x=0;x<w;x++)\n        //     // {\n        //     //     for(var y=0;y<h;y++)\n        //     //     {\n        //     //         // var index=x+y*w;\n        //     //         arr.push( parseInt( (x/w)*255,10) );\n        //     //         arr.push(0);\n        //     //         arr.push( parseInt((y/w)*255,10));\n        //     //         arr.push(255);\n        //     //     }\n        //     // }\n        //     uarr=new Uint8Array(arr);\n\n        // }\n\n\n        setFilter();\n\n        if(isDepthTexture)\n        {\n            cgl.gl.texImage2D(cgl.gl.TEXTURE_2D, 0, cgl.gl.DEPTH_COMPONENT, w,h, 0, cgl.gl.DEPTH_COMPONENT, cgl.gl.UNSIGNED_SHORT, null);\n        }\n        else\n        {\n            cgl.gl.texImage2D(cgl.gl.TEXTURE_2D, 0, cgl.gl.RGBA, w, h, 0, cgl.gl.RGBA, cgl.gl.UNSIGNED_BYTE, uarr);\n        }\n\n\n        cgl.gl.bindTexture(cgl.gl.TEXTURE_2D, null);\n    };\n\n    this.initTexture=function(img)\n    {\n        self.width=img.width;\n        self.height=img.height;\n\n        cgl.gl.bindTexture(cgl.gl.TEXTURE_2D, self.tex);\n        if(self.flip) cgl.gl.pixelStorei(cgl.gl.UNPACK_FLIP_Y_WEBGL, true);\n        cgl.gl.texImage2D(cgl.gl.TEXTURE_2D, 0, cgl.gl.RGBA, cgl.gl.RGBA, cgl.gl.UNSIGNED_BYTE, self.image);\n\n        setFilter();\n\n        if(_isPowerOfTwo(self.width) && _isPowerOfTwo(self.height) && self.filter==CGL.Texture.FILTER_MIPMAP)\n        {\n            cgl.gl.generateMipmap(cgl.gl.TEXTURE_2D);\n        }\n    \n        cgl.gl.bindTexture(cgl.gl.TEXTURE_2D, null);\n\n    };\n\n    this.setSize(8,8);\n\n    this.preview=function()\n    {\n        CGL.Texture.previewTexture=self;\n    };\n\n};\n\nCGL.Texture.load=function(cgl,url,finishedCallback,settings)\n{\n    CGL.incrementLoadingAssets();\n    var texture=new CGL.Texture(cgl);\n    texture.image = new Image();\n\n    if(settings && settings.hasOwnProperty('filter')) texture.filter=settings.filter;\n\n    texture.image.onload=function()\n    {\n        texture.initTexture(texture.image);\n        if(finishedCallback)finishedCallback();\n        CGL.decrementLoadingAssets();\n    };\n    texture.image.src = url;\n    return texture;\n};\n\n\n\nCGL.Texture.fromImage=function(cgl,img)\n{\n    var texture=new CGL.Texture(cgl);\n    texture.flip=true;\n    texture.image = img;\n    texture.initTexture(img);\n    return texture;\n};\n\nCGL.Texture.FILTER_NEAREST=0;\nCGL.Texture.FILTER_LINEAR=1;\nCGL.Texture.FILTER_MIPMAP=2;\n\n// ---------------------------------------------------------------------------\n\nCGL.Texture.previewTexture=null;\nCGL.Texture.texturePreviewer=null;\nCGL.Texture.texturePreview=function(cgl)\n{\n    var size=2;\n\n    var geom=new CGL.Geometry();\n\n    geom.vertices = [\n         size/2,  size/2,  0.0,\n        -size/2,  size/2,  0.0,\n         size/2, -size/2,  0.0,\n        -size/2, -size/2,  0.0\n    ];\n\n    geom.texCoords = [\n         1.0, 1.0,\n         0.0, 1.0,\n         1.0, 0.0,\n         0.0, 0.0\n    ];\n\n    geom.verticesIndices = [\n        0, 1, 2,\n        3, 1, 2\n    ];\n    var mesh=new CGL.Mesh(cgl,geom);\n\n\n\n    var srcFrag=''\n        .endl()+'precision highp float;'\n        .endl()+'varying vec2 texCoord;'\n        .endl()+'uniform sampler2D tex;'\n        .endl()+'uniform float time;'\n\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n\n        .endl()+'   vec4 col;'\n\n        .endl()+'bool isEven = mod(time+texCoord.y+texCoord.x,0.2)>0.1;'\n        .endl()+'vec4 col1 = vec4(0.2,0.2,0.2,1.0);'\n        .endl()+'vec4 col2 = vec4(0.5,0.5,0.5,1.0);'\n        .endl()+'col = (isEven)? col1:col2;'\n\n        .endl()+'vec4 colTex = texture2D(tex,texCoord);;'\n        .endl()+'col = mix(col,colTex,colTex.a);'\n\n        .endl()+'   gl_FragColor = col;'\n        .endl()+'}';\n\n\n    var shader=new CGL.Shader(cgl);\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n\n    var timeUni=new CGL.Uniform(shader,'f','time',0);\n    var textureUniform=new CGL.Uniform(shader,'t','tex',0);\n    var startTime=Date.now()/1000.0;\n\n    this.render=function(tex)\n    {\n        console.log('previewing ',tex.width,tex.height);\n        cgl.gl.clearColor(0,0,0,0);\n        cgl.gl.clear(cgl.gl.COLOR_BUFFER_BIT | cgl.gl.DEPTH_BUFFER_BIT);\n\n        timeUni.setValue( (Date.now()/1000.0-startTime)*0.1 );\n\n        cgl.setShader(shader);\n\n        if(tex)\n        {\n            cgl.gl.activeTexture(cgl.gl.TEXTURE0);\n            cgl.gl.bindTexture(cgl.gl.TEXTURE_2D, tex.tex);\n        }\n\n        mesh.render(cgl.getShader());\n        cgl.setPreviousShader();\n    };\n\n};\n\n","var CGL=CGL || {};\n\nCGL.TextureEffect=function(cgl)\n{\n    var self=this;\n    var geom=new CGL.Geometry();\n\n    geom.vertices = [\n         1.0,  1.0,  0.0,\n        -1.0,  1.0,  0.0,\n         1.0, -1.0,  0.0,\n        -1.0, -1.0,  0.0\n    ];\n\n    geom.texCoords = [\n         1.0, 1.0,\n         0.0, 1.0,\n         1.0, 0.0,\n         0.0, 0.0\n    ];\n\n    geom.verticesIndices = [\n        0, 1, 2,\n        3, 1, 2\n    ];\n\n    var mesh=new CGL.Mesh(cgl,geom);\n\n    var textureSource=null;\n    var textureTarget=new CGL.Texture(cgl);\n\n    var frameBuf = cgl.gl.createFramebuffer();\n    var renderbuffer = cgl.gl.createRenderbuffer();\n\n    var switched=false;\n\n    this.startEffect=function()\n    {\n        switched=false;\n    };\n\n    this.setSourceTexture=function(tex)\n    {\n        if(tex===null)\n        {\n            textureSource=new CGL.Texture(cgl);\n            textureSource.setSize(16,16);\n        }\n        else\n        {\n            textureSource=tex;\n        }\n        \n        textureTarget.setSize(textureSource.width,textureSource.height);\n\n        cgl.gl.bindFramebuffer(cgl.gl.FRAMEBUFFER, frameBuf);\n\n        cgl.gl.bindRenderbuffer(cgl.gl.RENDERBUFFER, renderbuffer);\n        cgl.gl.renderbufferStorage(cgl.gl.RENDERBUFFER, cgl.gl.DEPTH_COMPONENT16, textureSource.width,textureSource.height);\n        cgl.gl.framebufferTexture2D(cgl.gl.FRAMEBUFFER, cgl.gl.COLOR_ATTACHMENT0, cgl.gl.TEXTURE_2D, textureTarget.tex, 0);\n        cgl.gl.framebufferRenderbuffer(cgl.gl.FRAMEBUFFER, cgl.gl.DEPTH_ATTACHMENT, cgl.gl.RENDERBUFFER, renderbuffer);\n        cgl.gl.bindTexture(cgl.gl.TEXTURE_2D, null);\n        cgl.gl.bindRenderbuffer(cgl.gl.RENDERBUFFER, null);\n        cgl.gl.bindFramebuffer(cgl.gl.FRAMEBUFFER, null);\n\n        // console.log(\n        //     self.getCurrentTargetTexture().width,\n        //     self.getCurrentSourceTexture().height\n        //     );\n    };\n\n\n    this.getCurrentTargetTexture=function()\n    {\n        if(switched)return textureSource;\n            else return textureTarget;\n    };\n\n    this.getCurrentSourceTexture=function()\n    {\n        if(switched)return textureTarget;\n            else return textureSource;\n    };\n\n    this.bind=function()\n    {\n        if(textureSource===null)\n        {\n            console.log('no base texture set!');\n            return;\n        }\n\n        cgl.pushMvMatrix();\n\n        cgl.gl.bindFramebuffer(cgl.gl.FRAMEBUFFER, frameBuf);\n        cgl.gl.framebufferTexture2D(cgl.gl.FRAMEBUFFER, cgl.gl.COLOR_ATTACHMENT0, cgl.gl.TEXTURE_2D, self.getCurrentTargetTexture().tex, 0);\n\n        cgl.pushPMatrix();\n        cgl.gl.viewport(0, 0, self.getCurrentTargetTexture().width,self.getCurrentTargetTexture().height);\n        mat4.perspective(cgl.pMatrix,45, self.getCurrentTargetTexture().width/self.getCurrentTargetTexture().height, 0.01, 1100.0);\n\n        cgl.pushPMatrix();\n        mat4.identity(cgl.pMatrix);\n\n        cgl.pushMvMatrix();\n        mat4.identity(cgl.mvMatrix);\n\n        cgl.gl.clearColor(0,0,0,0);\n        cgl.gl.clear(cgl.gl.COLOR_BUFFER_BIT | cgl.gl.DEPTH_BUFFER_BIT);\n    };\n\n    this.finish=function()\n    {\n        if(textureSource===null)\n        {\n            console.log('no base texture set!');\n            return;\n        }\n\n        mesh.render(cgl.getShader());\n\n        cgl.popPMatrix();\n        cgl.popMvMatrix();\n\n        cgl.gl.bindFramebuffer(cgl.gl.FRAMEBUFFER, null);\n\n        cgl.popPMatrix();\n        // cgl.gl.viewport(0, 0, cgl.canvasWidth,cgl.canvasHeight);\n        cgl.resetViewPort();\n\n        cgl.popMvMatrix();\n\n        switched=!switched;\n    };\n\n};","var PORT_DIR_IN=0;\nvar PORT_DIR_OUT=1;\n\nvar OP_PORT_TYPE_VALUE =0;\nvar OP_PORT_TYPE_FUNCTION =1;\nvar OP_PORT_TYPE_OBJECT =2;\nvar OP_PORT_TYPE_TEXTURE =2;\nvar OP_PORT_TYPE_ARRAY =3;\nvar OP_PORT_TYPE_DYNAMIC=4;\n\nvar Ops = {};\n\nvar Op = function(_patch)\n{\n    this.objName='';\n    this.portsOut=[];\n    this.portsIn=[];\n    this.posts=[];\n    this.uiAttribs={};\n    this.enabled=true;\n    this.patch=_patch;\n    this.name='unknown';\n    this.id=generateUUID();\n    this.onAddPort=null;\n    this.onCreate=null;\n    this.onResize=null;\n    this.onLoaded=null;\n    this.onDelete=null;\n    this.onUiAttrChange=null;\n\n    this.uiAttr=function(newAttribs)\n    {\n        if(!this.uiAttribs)this.uiAttribs={};\n        for(var p in newAttribs)\n        {\n            this.uiAttribs[p]=newAttribs[p];\n        }\n        if(this.onUiAttrChange) this.onUiAttrChange();\n    };\n\n    this.getName= function()\n    {\n        return this.name;\n    };\n\n    this.addOutPort=function(p)\n    {\n        p.direction=PORT_DIR_OUT;\n        p.parent=this;\n        this.portsOut.push(p);\n        if(this.onAddPort)this.onAddPort(p);\n        return p;\n    };\n\n    this.hasPort=function(name)\n    {\n        for(var i in this.portsIn)\n        {\n            if(this.portsIn[i].getName()==name)\n            {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    this.addInPort=function(p)\n    {\n        p.direction=PORT_DIR_IN;\n        p.parent=this;\n        this.portsIn.push(p);\n        if(this.onAddPort)this.onAddPort(p);\n        return p;\n    };\n\n    this.printInfo=function()\n    {\n        for(var i=0;i<this.portsIn.length;i++)\n            console.log('in: '+this.portsIn[i].getName());\n\n        for(var ipo in this.portsOut)\n            console.log('out: '+this.portsOut[ipo].getName());\n    };\n\n    this.removeLinks=function()\n    {\n        for(var i=0;i<this.portsIn.length;i++)\n            this.portsIn[i].removeLinks();\n\n        for(var ipo in this.portsOut)\n            this.portsOut[ipo].removeLinks();\n    };\n\n\n    this.findFittingPort=function(otherPort)\n    {\n        for(var ipo in this.portsOut)\n            if(Link.canLink(otherPort,this.portsOut[ipo]))return this.portsOut[ipo];\n    \n        for(var ipi in this.portsIn)\n            if(Link.canLink(otherPort,this.portsIn[ipi]))return this.portsIn[ipi];\n    };\n\n    this.getSerialized=function()\n    {\n        var op={};\n        op.name=this.getName();\n        op.objName=this.objName;\n        op.id=this.id;\n        op.uiAttribs=this.uiAttribs;\n        op.portsIn=[];\n        op.portsOut=[];\n\n        for(var i=0;i<this.portsIn.length;i++)\n        {\n            if(this.portsIn[i].type!=OP_PORT_TYPE_DYNAMIC)\n            op.portsIn.push( this.portsIn[i].getSerialized() );\n        }\n\n        for(var ipo in this.portsOut)\n            if(this.portsOut[ipo].type!=OP_PORT_TYPE_DYNAMIC)\n                op.portsOut.push( this.portsOut[ipo].getSerialized() );\n\n        return op;\n    };\n\n    this.getPortByName=function(name)\n    {\n        for(var ipi in this.portsIn)\n            if(this.portsIn[ipi].getName()==name)return this.portsIn[ipi];\n\n        for(var ipo in this.portsOut)\n            if(this.portsOut[ipo].getName()==name)return this.portsOut[ipo];\n    };\n\n    this.getPort=function(name)\n    {\n        return this.getPortByName(name);\n    };\n\n    this.updateAnims=function()\n    {\n        for(var i=0;i<this.portsIn.length;i++)\n        {\n            this.portsIn[i].updateAnim();\n        }\n    };\n\n\n};\n\n// ------------------------------------------------------------------------------------\n\n\nvar Port=function(parent,name,type,uiAttribs)\n{\n    var self=this;\n    this.direction=PORT_DIR_IN;\n    this.id=generateUUID();\n    this.parent=parent;\n    this.links=[];\n    this.value=0.0;\n    this.name=name;\n    this.type=type || OP_PORT_TYPE_VALUE;\n    this.uiAttribs=uiAttribs || {};\n    var valueBeforeLink=null;\n    this.anim=null;\n    var animated=false;\n    var oldAnimVal=-5711;\n    this.onLink=null;\n    this.showPreview=false;\n    var uiActiveState=true;\n    this.ignoreValueSerialize=false;\n    this.onLinkChanged=null;\n\n    this.doShowPreview=function(onOff)\n    {\n        if(onOff!=self.showPreview)\n        {\n            self.showPreview=onOff;\n            self.onPreviewChanged();\n        }\n    };\n\n    this.onPreviewChanged=function(){};\n    this.shouldLink=function(){return true;};\n\n\n    this.get=function()\n    {\n        return this.value;\n    };\n\n    this.set=function(v)\n    {\n        this.setValue(v);\n    };\n\n    this.__defineGetter__(\"val\", function()\n        {\n            // throw \"deprecated val\";\n                    \n            // if(animated)\n            // {\n\n            //     this.value=self.anim.getValue(parent.patch.timer.getTime());\n\n            //     if(oldAnimVal!=this.value)\n            //     {\n            //         oldAnimVal=this.value;\n            //         console.log('changed!!');\n            //         this.onValueChanged();\n            //     }\n            //     oldAnimVal=this.value;\n            //     console.log('this.value ',this.value );\n                        \n            //     return this.value;\n            // }\n\n            return this.value;\n        });\n    this.__defineSetter__(\"val\", function(v){ this.setValue(v); });\n\n    this.getType=function(){ return this.type; };\n    this.isLinked=function(){ return this.links.length>0; };\n    this.onValueChanged=null;\n    this.onTriggered=null;\n    this._onTriggered=function()\n    {\n        parent.updateAnims();\n        if(parent.enabled && self.onTriggered) self.onTriggered();\n    };\n\n    this.setValue=function(v)\n    {\n        if(parent.enabled)\n        {\n            if(v!=this.value || this.type==OP_PORT_TYPE_TEXTURE)\n            {\n                if(animated)\n                {\n                    self.anim.setValue(parent.patch.timer.getTime(),v);\n                }\n                else\n                {\n                    this.value=v;\n                    if(this.onValueChanged)this.onValueChanged();\n                }\n\n                // if(this.links.length!==0)\n                for (var i = 0; i < this.links.length; ++i)\n                {\n                    this.links[i].setValue();\n                }\n            }\n        }\n    };\n\n    this.updateAnim=function()\n    {\n        if(animated)\n        {\n            this.value=self.anim.getValue(parent.patch.timer.getTime());\n\n            if(oldAnimVal!=this.value)\n            {\n                oldAnimVal=this.value;\n                if(this.onValueChanged)this.onValueChanged();\n            }\n            oldAnimVal=this.value;\n        }\n    };\n\n    this.isAnimated=function()\n    {\n        return animated;\n    };\n\n    this.getUiActiveState=function()\n    {\n        return uiActiveState;\n    };\n    this.setUiActiveState=function(onoff)\n    {\n        uiActiveState=onoff;\n        if(this.onUiActiveStateChange)this.onUiActiveStateChange();\n    };\n\n    this.onUiActiveStateChange=null;\n\n    this.onAnimToggle=function(){};\n    this._onAnimToggle=function(){this.onAnimToggle();};\n\n    this.setAnimated=function(a)\n    {\n        if(animated!=a)\n        {\n            animated=a;\n            if(animated && !self.anim)self.anim=new CABLES.TL.Anim();\n            this._onAnimToggle();\n        }\n    };\n\n    this.toggleAnim=function(val)\n    {\n        animated=!animated;\n        if(animated && !self.anim)self.anim=new CABLES.TL.Anim();\n        self.setAnimated(animated);\n        this._onAnimToggle();\n    };\n\n    this.getName= function()\n    {\n        return this.name;\n    };\n\n    this.addLink=function(l)\n    {\n        if(this.onLinkChanged)this.onLinkChanged();\n        valueBeforeLink=self.value;\n        this.links.push(l);\n    };\n\n    this.removeLinkTo=function(p2)\n    {\n        for(var i in this.links)\n            if(this.links[i].portIn==p2 || this.links[i].portOut==p2)\n                this.links[i].remove();\n    };\n\n    this.isLinkedTo=function(p2)\n    {\n        for(var i in this.links)\n            if(this.links[i].portIn==p2 || this.links[i].portOut==p2)return true;\n\n        return false;\n    };\n\n    this.trigger=function()\n    {\n        if(!parent.enabled)return;\n        if(this.links.length===0)return;\n\n        for (var i = 0; i < this.links.length; ++i)\n        // for(var i in this.links)\n        {\n            // if(this.direction==PORT_DIR_OUT)this.links[i].portIn._onTriggered();\n            // else\n             this.links[i].portIn._onTriggered();\n            // if(this.links[i].portIn !=this)\n            // else if(this.links[i].portOut!=this)\n        }\n    };\n\n    this.call=function()\n    {\n        console.log('call deprecated - use trigger() ');\n        this.trigger();\n    };\n\n    this.execute=function()\n    {\n        console.log('### execute port: '+this.getName() , this.goals.length);\n    };\n\n    this.getTypeString=function()\n    {\n        if(this.type==OP_PORT_TYPE_VALUE)return 'value';\n        if(this.type==OP_PORT_TYPE_FUNCTION)return 'function';\n        if(this.type==OP_PORT_TYPE_TEXTURE)return 'texture';\n    };\n\n    this.getSerialized=function()\n    {\n        var obj={};\n        obj.name=this.getName();\n\n        if(!this.ignoreValueSerialize) obj.value=this.value;\n            else console.log('ja hier nicht speichern....');\n\n        if(animated) obj.animated=true;\n        if(this.anim) obj.anim=this.anim.getSerialized();\n\n        if(this.direction==PORT_DIR_IN && this.links.length>0)\n        {\n            obj.links=[];\n            for(var i in this.links)\n            {\n                obj.links.push( this.links[i].getSerialized() );\n            }\n        }\n        return obj;\n    };\n\n    this.removeLinks=function()\n    {\n        while(this.links.length>0)\n            this.links[0].remove();\n    };\n\n    this.removeLink=function(link)\n    {\n        if(this.onLinkChanged)this.onLinkChanged();\n\n        for(var i in this.links)\n            if(this.links[i]==link)this.links.splice( i, 1 );\n\n        self.setValue(valueBeforeLink);\n    };\n};\n\n// ---------------------------------------------------------------------------\n\nvar Link = function(scene)\n{\n    this.portIn=null;\n    this.portOut=null;\n    this.scene=scene;\n\n    this.setValue=function(v)\n    {\n        this.portIn.val=v;\n    };\n\n    this.setValue=function()\n    {\n        // try\n        // if(this.portIn.val!=this.portOut.val)\n        //     this.portIn.val=this.portOut.val;\n\n        if(this.portIn.get()!=this.portOut.get())\n            this.portIn.set(this.portOut.get());\n\n\n        // catch(exc)\n        // {\n        //     console.log('',this);\n                    \n        //     // console.log('exc',exc);\n                    \n        // }\n    };\n\n    this.getOtherPort=function(p)\n    {\n        if(p==this.portIn)return this.portOut;\n        return this.portIn;\n    };\n\n    this.remove=function()\n    {\n        this.portIn.removeLink(this);\n        this.portOut.removeLink(this);\n        this.scene.onUnLink(this.portIn,this.portOut);\n        this.portIn=null;\n        this.portOut=null;\n        this.scene=null;\n    };\n\n    this.link=function(p1,p2)\n    {\n        if(!Link.canLink(p1,p2))\n        {\n            console.log('cannot link ports!');\n            return false;\n        }\n        if(p1.direction==PORT_DIR_IN)\n        {\n            this.portIn=p1;\n            this.portOut=p2;\n        }\n        else\n        {\n            this.portIn=p2;\n            this.portOut=p1;\n        }\n\n        p1.addLink(this);\n        p2.addLink(this);\n        if(p1.onLink) p1.onLink(this);\n        if(p2.onLink) p2.onLink(this);\n        this.setValue();\n    };\n\n    this.getSerialized=function()\n    {\n        var obj={};\n\n        obj.portIn=this.portIn.getName();\n        obj.portOut=this.portOut.getName();\n        obj.objIn=this.portIn.parent.id;\n        obj.objOut=this.portOut.parent.id;\n\n        return obj;\n    };\n};\n\nLink.canLinkText=function(p1,p2)\n{\n    if(p1.direction==p2.direction)\n    {\n        var txt='(out)';\n        if(p2.direction==PORT_DIR_IN)txt=\"(in)\";\n        return 'can not link: same direction'+txt;\n    }\n    if(p1.parent==p2.parent)return 'can not link: same op';\n    if( p1.type!=OP_PORT_TYPE_DYNAMIC && p2.type!=OP_PORT_TYPE_DYNAMIC )\n    {\n        if(p1.type!=p2.type)return 'can not link: different type';\n    }\n \n    if(!p1)return 'can not link: port 1 invalid';\n    if(!p2)return 'can not link: port 2 invalid';\n\n    if(p1.direction==PORT_DIR_IN && p1.isAnimated())return 'can not link: is animated';\n    if(p2.direction==PORT_DIR_IN && p2.isAnimated())return 'can not link: is animated';\n\n\n    if(p1.direction==PORT_DIR_IN && p1.links.length>0)return 'input port already busy';\n    if(p2.direction==PORT_DIR_IN && p2.links.length>0)return 'input port already busy';\n    if(p1.isLinkedTo(p2))return 'ports already linked';\n\n\n    return 'can link';\n};\n\nLink.canLink=function(p1,p2)\n{\n    if( p1.type==OP_PORT_TYPE_DYNAMIC || p2.type==OP_PORT_TYPE_DYNAMIC )return true;\n    if(!p1)return false;\n    if(!p2)return false;\n    if(p1.direction==PORT_DIR_IN && p1.isAnimated())return false;\n    if(p2.direction==PORT_DIR_IN && p2.isAnimated())return false;\n\n    if(p1.direction==PORT_DIR_IN && p1.links.length>0)return false;\n    if(p2.direction==PORT_DIR_IN && p2.links.length>0)return false;\n    if(p1.isLinkedTo(p2))return false;\n    if(p1.direction==p2.direction)return false;\n    if(p1.type!=p2.type)return false;\n    if(p1.parent==p2.parent)return false;\n\n    return true;\n};\n\n// ------------------------------------------------------------------------------------\n\nvar Scene = function(cfg)\n{\n    var self=this;\n    this.ops=[];\n    this.settings={};\n    this.timer=new Timer();\n    this.animFrameOps=[];\n    this.gui=false;\n\n    this.onLoadStart=null;\n    this.onLoadEnd=null;\n\n    this.config = cfg ||\n    {\n        glCanvasId:'glcanvas',\n        prefixAssetPath:''\n    };\n\n    this.cgl=new CGL.State();\n    this.cgl.patch=this;\n    this.cgl.setCanvas(this.config.glCanvasId);\n\n\n    this.getFilePath=function(filename)\n    {\n        return this.config.prefixAssetPath+filename;\n    };\n\n    this.clear=function()\n    {\n        self.animFrameOps.length=0;\n        this.timer=new Timer();\n        while(this.ops.length>0)\n        {\n            this.deleteOp(this.ops[0].id);\n        }\n    };\n\n    this.addOp=function(objName,uiAttribs)\n    {\n\n        // console.log('objName',objName);\n        // var op=eval('new '+objName+'();');\n        var parts=objName.split('.');\n        var op=null;\n        if(parts.length==2) op=new window[parts[0]][parts[1]](this);\n        else if(parts.length==3) op=new window[parts[0]][parts[1]][parts[2]](this);\n        else if(parts.length==4) op=new window[parts[0]][parts[1]][parts[2]][parts[3]](this);\n        else if(parts.length==5) op=new window[parts[0]][parts[1]][parts[2]][parts[3]][parts[4]](this);\n        else console.log('parts.length',parts.length);\n\n        // var op=new window[objName]();\n        op.objName=objName;\n        op.patch=this;\n        op.uiAttr(uiAttribs);\n        if(op.onCreate)op.onCreate();\n\n        if(op.hasOwnProperty('onAnimFrame')) this.animFrameOps.push(op);\n\n        this.ops.push(op);\n\n        if(this.onAdd)this.onAdd(op);\n        return op;\n    };\n\n    this.removeOnAnimFrame=function(op)\n    {\n        for(var i=0;i<this.animFrameOps.length;i++)\n        {\n            this.animFrameOps.splice(i,1);\n        }\n\n    };\n\n    this.deleteOp=function(opid,tryRelink)\n    {\n        for(var i in this.ops)\n        {\n            if(this.ops[i].id==opid)\n            {\n                var op=this.ops[i];\n                var reLinkP1=null;\n                var reLinkP2=null;\n\n                if(op)\n                {\n                    if(tryRelink)\n                    {\n                        if(\n                            (this.ops[i].portsIn.length>0 && this.ops[i].portsIn[0].isLinked()) &&\n                            (this.ops[i].portsOut.length>0 && this.ops[i].portsOut[0].isLinked()))\n                        {\n                            if(this.ops[i].portsIn[0].getType()==this.ops[i].portsOut[0].getType())\n                            {\n                                reLinkP1=this.ops[i].portsIn[0].links[0].getOtherPort(this.ops[i].portsIn[0]);\n                                reLinkP2=this.ops[i].portsOut[0].links[0].getOtherPort(this.ops[i].portsOut[0]);\n                            }\n                        }\n                    }\n\n                    this.ops[i].removeLinks();\n                    this.onDelete(this.ops[i]);\n                    this.ops[i].id=generateUUID();\n                    if(this.ops[i].onDelete)this.ops[i].onDelete();\n                    this.ops.splice( i, 1 );\n\n\n                    if(reLinkP1!==null && reLinkP2!==null)\n                    {\n                        self.link(\n                            reLinkP1.parent,\n                            reLinkP1.getName(),\n                            reLinkP2.parent,\n                            reLinkP2.getName()\n                            );\n                    }\n                }\n            }\n        }\n    };\n\n    this.exec=function(e)\n    {\n\n        if(CGL.getLoadingStatus()>0 && CGL.getLoadingStatus()<1.0)\n        {\n            // setTimeout(function()\n            // {\n                requestAnimationFrame(self.exec);\n            // 120);\n        }\n        else\n        {\n            requestAnimationFrame(self.exec);\n        }\n        self.timer.update();\n\n        var time=self.timer.getTime();\n\n        // for(var i in self.animFrameOps)\n        for (var i = 0; i < self.animFrameOps.length; ++i)\n        {\n            self.animFrameOps[i].onAnimFrame(time);\n        }\n    };\n\n    this.link=function(op1,port1Name,op2,port2Name)\n    {\n        if(!op1 || !op2)return;\n        var port1=op1.getPort(port1Name);\n        var port2=op2.getPort(port2Name);\n\n        if(!port1)\n        {\n            console.warn('port not found! '+port1Name);\n            return;\n        }\n        if(!port2)\n        {\n            console.warn('port not found! '+port2Name);\n            return;\n        }\n\n        if(!port1.shouldLink(port1,port2) || !port2.shouldLink(port1,port2))\n        {\n            return false;\n        }\n\n        if(Link.canLink(port1,port2))\n        {\n            var link=new Link(this);\n            link.link(port1,port2);\n\n            this.onLink(port1,port2);\n            return link;\n        }\n        else\n        {\n            console.log(Link.canLinkText(port1,port2));\n        }\n    };\n\n    this.onAdd=function(op){};\n    this.onDelete=function(op){};\n    this.onLink=function(p1,p2){};\n    this.onUnLink=function(p1,p2){};\n    this.serialize=function(asObj)\n    {\n        var obj={};\n\n        obj.ops=[];\n        obj.settings=this.settings;\n        for(var i in this.ops)\n        {\n            obj.ops.push( this.ops[i].getSerialized() );\n        }\n        \n        if(asObj)return obj;\n        return JSON.stringify(obj);\n    };\n\n    this.getOpById=function(opid)\n    {\n        for(var i in this.ops)\n        {\n            if(this.ops[i].id==opid)return this.ops[i];\n        }\n    };\n\n    this.getSubPatchOp=function(patchId,objName)\n    {\n        for(var i in self.ops)\n        {\n            if(self.ops[i].uiAttribs && self.ops[i].uiAttribs.subPatch==patchId && self.ops[i].objName==objName)\n            {\n                return self.ops[i];\n            }\n        }\n\n        return false;\n    };\n\n    this.deSerialize=function(obj)\n    {\n        if(this.onLoadStart)this.onLoadStart();\n\n\n        if (typeof obj === \"string\") obj=JSON.parse(obj);\n        var self=this;\n\n        this.settings=obj.settings;\n\n        function addLink(opinid,opoutid,inName,outName)\n        {\n            var found=false;\n            if(!found)\n            {\n                self.link(\n                    self.getOpById(opinid),\n                    inName,\n                    self.getOpById(opoutid),\n                    outName\n                    );\n            }\n        }\n\n        // console.log('add ops ',self.config.glCanvasId);\n        // add ops...\n        for(var iop in obj.ops)\n        {\n            var op=this.addOp(obj.ops[iop].objName,obj.ops[iop].uiAttribs);\n            op.id=obj.ops[iop].id;\n\n            for(var ipi in obj.ops[iop].portsIn)\n            {\n                var objPort=obj.ops[iop].portsIn[ipi];\n\n                var port=op.getPort(objPort.name);\n\n                if(port && port.type!=OP_PORT_TYPE_TEXTURE)port.val=objPort.value;\n                if(objPort.animated)port.setAnimated(objPort.animated);\n                if(objPort.anim)\n                {\n                    if(!port.anim) port.anim=new CABLES.TL.Anim();\n\n                    if(objPort.anim.loop) port.anim.loop=objPort.anim.loop;\n\n                    for(var ani in objPort.anim.keys)\n                    {\n                        // var o={t:objPort.anim.keys[ani].t,value:objPort.anim.keys[ani].v};\n                        port.anim.keys.push(new CABLES.TL.Key(objPort.anim.keys[ani]) );\n                    }\n                }\n            }\n\n            for(var ipo in obj.ops[iop].portsOut)\n            {\n                var port2=op.getPort(obj.ops[iop].portsOut[ipo].name);\n                if(port2&& port2.type!=OP_PORT_TYPE_TEXTURE)port2.val=obj.ops[iop].portsOut[ipo].value;\n            }\n        }\n        // console.log('create links...');\n                \n\n        // create links...\n        for(iop in obj.ops)\n        {\n            for(var ipi2 in obj.ops[iop].portsIn)\n            {\n                for(var ili in obj.ops[iop].portsIn[ipi2].links)\n                {\n                    addLink(\n                        obj.ops[iop].portsIn[ipi2].links[ili].objIn,\n                        obj.ops[iop].portsIn[ipi2].links[ili].objOut,\n                        obj.ops[iop].portsIn[ipi2].links[ili].portIn,\n                        obj.ops[iop].portsIn[ipi2].links[ili].portOut);\n                }\n            }\n        }\n\n        // console.log('create uuids ');\n\n        for(var i in this.ops)\n        {\n            this.ops[i].id=generateUUID();\n        }\n\n        if(this.onLoadEnd)this.onLoadEnd();\n\n    };\n\n    this.exec();\n\n};\n","\nvar CABLES=CABLES || {};\nCABLES.TL=CABLES.TL || {};\n\nCABLES.TL.EASING_LINEAR=0;\nCABLES.TL.EASING_ABSOLUTE=1;\nCABLES.TL.EASING_SMOOTHSTEP=2;\nCABLES.TL.EASING_SMOOTHERSTEP=3;\nCABLES.TL.EASING_BEZIER=4;\n\nCABLES.TL.EASING_CUBIC_IN=5;\nCABLES.TL.EASING_CUBIC_OUT=6;\nCABLES.TL.EASING_CUBIC_INOUT=7;\n\nCABLES.TL.EASING_EXPO_IN=8;\nCABLES.TL.EASING_EXPO_OUT=9;\nCABLES.TL.EASING_EXPO_INOUT=10;\n\nCABLES.TL.EASING_SIN_IN=11;\nCABLES.TL.EASING_SIN_OUT=12;\nCABLES.TL.EASING_SIN_INOUT=13;\n\n\n\nCABLES.TL.Key=function(obj)\n{\n    this.time=0.0;\n    this.value=0.0;\n    this.ui={};\n    this.onChange=null;\n    var easing=0;\n    this.bezTime=0.5;\n    this.bezValue=0;\n    this.bezTimeIn=-0.5;\n    this.bezValueIn=0;\n    var bezierAnim=null;\n    var updateBezier=false;\n    var self=this;\n\n    this.setBezierControlOut=function(t,v)\n    {\n        this.bezTime=t;\n        this.bezValue=v;\n        updateBezier=true;\n        if(this.onChange!==null)this.onChange();\n    };\n\n    this.setBezierControlIn=function(t,v)\n    {\n        this.bezTimeIn=t;\n        this.bezValueIn=v;\n        updateBezier=true;\n        if(this.onChange!==null)this.onChange();\n    };\n\n    this.setValue=function(v)\n    {\n        this.value=v;\n        updateBezier=true;\n        if(this.onChange!==null)this.onChange();\n    };\n\n    this.set=function(obj)\n    {\n        if(obj)\n        {\n            if(obj.e) this.setEasing(obj.e);\n\n            if(obj.b)\n            {\n                this.bezTime=obj.b[0];\n                this.bezValue=obj.b[1];\n                this.bezTimeIn=obj.b[2];\n                this.bezValueIn=obj.b[3];\n                updateBezier=true;\n            }\n\n            if(obj.hasOwnProperty('t'))this.time=obj.t;\n            if(obj.hasOwnProperty('time')) this.time=obj.time;\n\n            if(obj.hasOwnProperty('v')) this.value=obj.v;\n                else if(obj.hasOwnProperty('value')) this.value=obj.value;\n        }\n        if(this.onChange!==null)this.onChange();\n\n    };\n\n    this.getSerialized=function()\n    {\n        var obj={};\n        obj.t=this.time;\n        obj.v=this.value;\n        obj.e=easing;\n        if(easing==CABLES.TL.EASING_BEZIER)\n            obj.b=[this.bezTime,this.bezValue,this.bezTimeIn,this.bezValueIn];\n                \n        return obj;\n    };\n    \n\n    if(\"isUI\" in this)\n    {\n        // this.initUI();\n    }\n\n    function linear(perc,key1,key2)\n    {\n        return parseFloat(key1.value)+ parseFloat((key2.value - key1.value)) * perc;\n    }\n\n    this.easeLinear=function(perc,key2)\n    {\n        return linear(perc,this,key2);\n    };\n\n    this.easeAbsolute=function(perc,key2)\n    {\n        return this.value;\n    };\n\n\n\n\n    this.easeExpoIn=function( t,  key2)\n    {\n        t= Math.pow( 2, 10 * (t - 1) );\n        return linear(t,this,key2);\n    };\n\n    this.easeExpoOut=function( t,  key2)\n    {\n        t= ( -Math.pow( 2, -10 * t ) + 1 );\n        return linear(t,this,key2);\n    };\n\n    this.easeExpoInOut=function( t,  key2)\n    {\n        t*=2;\n        if (t < 1)\n        {\n          t= 0.5 * Math.pow( 2, 10 * (t - 1) );\n        }\n        else\n        {\n            t--;\n            t= 0.5 * ( -Math.pow( 2, -10 * t) + 2 );\n        }\n        return linear(t,this,key2);\n    };\n\n\n\n\n    this.easeSinIn=function( t,key2)\n    {\n        t= -1 * Math.cos(t * Math.PI/2) + 1;\n        return linear(t,this,key2);\n    };\n\n    this.easeSinOut=function( t,key2)\n    {\n        t= Math.sin(t * Math.PI/2);\n        return linear(t,this,key2);\n    };\n\n    this.easeSinInOut=function( t,key2)\n    {\n        t= -0.5 * (Math.cos(Math.PI*t) - 1.0);\n        return linear(t,this,key2);\n    };\n\n\n    this.easeCubicIn=function(t,key2)\n    {\n        t=t*t*t;\n        return linear(t,this,key2);\n    };\n\n    this.easeCubicOut=function(t,key2)\n    {\n        t--;\n        t=(t*t*t + 1) ;\n        return linear(t,this,key2);\n    };\n\n    this.easeCubicInOut=function(t,key2)\n    {\n        t*=2;\n        if (t < 1) t= 0.5*t*t*t;\n        else\n        {\n            t -= 2;\n            t= 0.5*(t*t*t + 2);\n        }\n        return linear(t,this,key2);\n    };\n\n\n\n    this.easeSmoothStep=function(perc,key2)\n    {\n        var x = Math.max(0, Math.min(1, (perc-0)/(1-0)));\n        perc= x*x*(3 - 2*x); // smoothstep\n        return linear(perc,this,key2);\n    };\n\n    this.easeSmootherStep=function(perc,key2)\n    {\n        var x = Math.max(0, Math.min(1, (perc-0)/(1-0)));\n        perc= x*x*x*(x*(x*6 - 15) + 10); // smootherstep\n        return linear(perc,this,key2);\n    };\n\n    BezierB1=function(t) { return t*t*t; };\n    BezierB2=function(t) { return 3*t*t*(1-t); };\n    BezierB3=function(t) { return 3*t*(1-t)*(1-t); };\n    BezierB4=function(t) { return (1-t)*(1-t)*(1-t); };\n    Bezier =function(percent,nextKey)\n    {\n        var val1x=nextKey.time;\n        var val1y=nextKey.value;\n\n        var c1x=nextKey.time+nextKey.bezTimeIn;\n        var c1y=nextKey.value-nextKey.bezValueIn;\n\n        var val2x=self.time;\n        var val2y=self.value;\n\n        var c2x=self.time+self.bezTime;\n        var c2y=self.value-self.bezValue;\n\n        var x = val1x*BezierB1(percent) + c1x*BezierB2(percent) + val2x*BezierB3(percent) + c2x*BezierB4(percent);\n        var y = val1y*BezierB1(percent) + c1y*BezierB2(percent) + val2y*BezierB3(percent) + c2y*BezierB4(percent);\n\n        return {x:x,y:y};\n    };\n\n\n\n    this.easeBezier=function(percent,nextKey)\n    {\n        if(!bezierAnim)\n        {\n            bezierAnim=new CABLES.TL.Anim();\n            updateBezier=true;\n        }\n\n        var timeSpan=nextKey.time-self.time;\n        if(updateBezier)\n        {\n            bezierAnim.clear();\n\n            var steps=20;\n            var is=1/steps;\n            \n            for(var i=0;i<steps;i++)\n            {\n                var v=Bezier(i*is,nextKey);\n\n                var time=self.time+timeSpan/steps*i;\n\n                bezierAnim.setValue(v.x,v.y);\n\n                // console.log('key ',time,v.y);\n            }\n            updateBezier=false;\n        }\n\n        return bezierAnim.getValue(self.time+percent*timeSpan);\n    };\n\n    this.getEasing=function()\n    {\n        return easing;\n    };\n\n    this.setEasing=function(e)\n    {\n        easing=e;\n\n        if(easing==CABLES.TL.EASING_ABSOLUTE) this.ease=this.easeAbsolute;\n        else if(easing==CABLES.TL.EASING_SMOOTHSTEP) this.ease=this.easeSmoothStep;\n        else if(easing==CABLES.TL.EASING_SMOOTHERSTEP) this.ease=this.easeSmootherStep;\n\n        else if(easing==CABLES.TL.EASING_CUBIC_IN) this.ease=this.easeCubicIn;\n        else if(easing==CABLES.TL.EASING_CUBIC_OUT) this.ease=this.easeCubicOut;\n        else if(easing==CABLES.TL.EASING_CUBIC_INOUT) this.ease=this.easeCubicInOut;\n\n        else if(easing==CABLES.TL.EASING_EXPO_IN) this.ease=this.easeExpoIn;\n        else if(easing==CABLES.TL.EASING_EXPO_OUT) this.ease=this.easeExpoOut;\n        else if(easing==CABLES.TL.EASING_EXPO_INOUT) this.ease=this.easeExpoInOut;\n\n        else if(easing==CABLES.TL.EASING_SIN_IN) this.ease=this.easeSinIn;\n        else if(easing==CABLES.TL.EASING_SIN_OUT) this.ease=this.easeSinOut;\n        else if(easing==CABLES.TL.EASING_SIN_INOUT) this.ease=this.easeSinInOut;\n\n        else if(easing==CABLES.TL.EASING_BEZIER)\n        {\n            updateBezier=true;\n            this.ease=this.easeBezier;\n        }\n        else\n        {\n            easing=CABLES.TL.EASING_LINEAR;\n            this.ease=this.easeLinear;\n        }\n    };\n\n    this.setEasing(CABLES.TL.EASING_LINEAR);\n    this.set(obj);\n\n};\n\nCABLES.TL.Anim=function(cfg)\n{\n    this.keys=[];\n    this.onChange=null;\n    this.stayInTimeline=false;\n    this.loop=false;\n    this.defaultEasing=CABLES.TL.EASING_LINEAR;\n\n    this.clear=function()\n    {\n        this.keys.length=0;\n    };\n\n    this.sortKeys=function()\n    {\n        this.keys.sort(function(a, b)\n        {\n            return parseFloat(a.time) - parseFloat(b.time);\n        });\n    };\n\n    this.getKeyIndex=function(time)\n    {\n        var theKey=0;\n        for(var i in this.keys)\n        {\n            if(time >= this.keys[i].time) theKey=i;\n            if( this.keys[i].time > time ) return theKey;\n        }\n        return theKey;\n    };\n    this.setValue=function(time,value)\n    {\n        var found=false;\n        for(var i in this.keys)\n        {\n            if(this.keys[i].time==time)\n            {\n                found=this.keys[i];\n                this.keys[i].setValue(value);\n                break;\n            }\n        }\n\n        if(!found)\n        {\n            console.log('not found');\n                    \n            this.keys.push(new CABLES.TL.Key({time:time,value:value,e:this.defaultEasing})) ;\n        }\n\n        if(this.onChange)this.onChange();\n        this.sortKeys();\n    };\n\n\n    this.getSerialized=function()\n    {\n        var obj={};\n        obj.keys=[];\n        obj.loop=this.loop;\n\n        for(var i in this.keys)\n        {\n            obj.keys.push( this.keys[i].getSerialized() );\n        }\n\n        return obj;\n    };\n\n\n    this.getKey=function(time)\n    {\n        var index=this.getKeyIndex(time);\n        return this.keys[index];\n    };\n\n    this.getValue=function(time)\n    {\n        if(this.keys.length===0)return 0;\n\n        if(time<this.keys[0].time)return this.keys[0].value;\n\n        \n        if(this.loop && time>this.keys[this.keys.length-1].time)\n        {\n            time=(time-this.keys[0].time)%(this.keys[this.keys.length-1].time-this.keys[0].time);\n            time+=this.keys[0].time;\n        }\n\n        var index=this.getKeyIndex(time);\n        if(index>=this.keys.length-1)return this.keys[this.keys.length-1].value;\n        var index2=parseInt(index,10)+1;\n        var key1=this.keys[index];\n        var key2=this.keys[index2];\n\n        if(!key2)return -1;\n\n        var perc=(time-key1.time)/(key2.time-key1.time);\n        return key1.ease(perc,key2);\n    };\n\n    this.addKey=function(k)\n    {\n        if(k.time===undefined)\n        {\n            console.log('key time undefined, ignoreing!');\n        }\n        else\n        {\n            this.keys.push(k);\n        }\n    };\n};\n\n\n","\nvar CABLES=CABLES || {};\n\nCABLES.Variable=function()\n{\n    var value=null;\n    var changedCallbacks=[];\n\n\n    this.onChanged=function(f)\n    {\n        changedCallbacks.push(f);\n    };\n\n    this.getValue=function()\n    {\n        return value;\n    };\n\n    this.setValue=function(v)\n    {\n        value=v;\n        emitChanged();\n    };\n\n    var emitChanged=function()\n    {\n        for(var i=0;i<changedCallbacks.length;i++)\n        {\n            changedCallbacks[i]();\n        }\n    };\n\n\n\n};\n\n"],"sourceRoot":"/source/"}