{"version":3,"sources":["timer.js","utils.js","cgl_mesh.js","cgl_shader.js","cgl_texture.js","holo.js","ops.gl.js","ops.js","ops.math.js"],"names":["Timer","getTime","lastTime","Date","now","timeStart","timeOffset","self","this","currentTime","paused","update","togglePlay","play","pause","setOffset","val","generateUUID","d","uuid","replace","c","r","Math","random","floor","toString","ajaxRequest","url","callback","request","XMLHttpRequest","open","responseType","onload","e","target","response","send","CGL","DEG2RAD","Mesh","geom","bufTexCoords","bufVertices","gl","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","vertices","STATIC_DRAW","itemSize","numItems","length","bufVerticesIndizes","ELEMENT_ARRAY_BUFFER","Uint16Array","verticesIndices","texCoords","render","shader","bind","GL","enableVertexAttribArray","getAttrVertexPos","getAttrTexCoords","vertexAttribPointer","FLOAT","drawElements","TRIANGLES","UNSIGNED_SHORT","Geometry","faceVertCount","texCoordsIndices","parseOBJ","buff","_readline","a","off","s","String","fromCharCode","groups","c_norms","i_norms","cg","from","to","Uint8Array","line","cds","split","x","parseFloat","y","z","push","v0a","v1a","v2a","vi0","parseInt","vi1","vi2","ui0","ui1","ui2","ni0","ni1","ni2","vlen","ulen","nlen","v3a","vi3","ui3","ni3","Uniform","_shader","_type","_name","_value","loc","name","type","value","needsUpdate","addUniform","getType","getName","resetLoc","updateValueF","getUniformLocation","getProgram","uniform1f","setValueF","v","updateValueT","console","log","uniform1i","setValueT","setValue","updateValue","Shader","program","uniforms","needsRecompile","removeUniform","i","splice","uni","getDefaultVertexShader","getDefaultFragmentShader","srcVert","srcFrag","setSource","projMatrixUniform","mvMatrixUniform","attrTexCoords","attrVertexPos","hasTextureUniforms","compile","defines","endl","vs","fs","vshader","createShader","VERTEX_SHADER","fshader","linkProgram","createProgram","getAttribLocation","useProgram","uniformMatrix4fv","pMatrix","mvMatrix","str","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","FRAGMENT_SHADER","getShaderInfoLog","getProgramParameter","LINK_STATUS","getProgramInfoLog","vstr","fstr","attachShader","Texture","tex","createTexture","slot","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","setSize","w","h","arr","uarr","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR","texImage2D","RGBA","UNSIGNED_BYTE","initTexture","img","image","TEXTURE_MAG_FILTER","NEAREST","load","texture","Image","src","PORT_DIR_IN","PORT_DIR_OUT","OP_PORT_TYPE_VALUE","OP_PORT_TYPE_FUNCTION","OP_PORT_TYPE_TEXTURE","Ops","Op","objName","portsOut","portsIn","posts","uiAttribs","id","addOutPort","p","direction","parent","addInPort","execute","exec","printInfo","ipo","removeLinks","getPort","ipi","findFittingPort","otherPort","Link","canLink","getSerialized","op","getPortByName","Port","links","valueBeforeLink","__defineGetter__","__defineSetter__","isLinked","onValueChanged","onTriggered","addLink","l","isLinkedTo","p2","portIn","portOut","call","goals","getTypeString","obj","remove","removeLink","link","scene","onUnLink","p1","objIn","objOut","canLinkText","Scene","ops","timer","animFrameOps","clear","deleteOp","addOp","eval","hasOwnProperty","onAdd","opid","onDelete","requestAnimationFrame","time","onAnimFrame","op1","port1Name","op2","port2Name","port1","port2","onLink","serialize","JSON","stringify","getOpById","deSerialize","opinid","opoutid","inName","outName","found","parse","iop","port","ipi2","ili","prototype","Gl","currentShader","mat4","create","Renderer","apply","arguments","simpleShader","trigger","initTranslate","vec3","set","enable","DEPTH_TEST","clearColor","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","viewport","canvas","clientWidth","clientHeight","perspective","identity","translate","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","document","getElementById","getContext","LeapMotion","transX","transY","transZ","finger0X","finger0Y","finger0Z","Leap","loop","frame","_translation","fingers","tipPosition","ClearColor","g","b","ClearDepth","TextureEmpty","width","height","textureOut","sizeChanged","filename","Meshes","Rectangle","mesh","ObjMesh","unwrap","ind","crd","cpi","ncrd","Array","j","Cube","Plotter","lineWidth","buffer","num","drawArrays","LINE_STRIP","Triangle","BasicMaterial","doRender","oldShader","uniform","textureUniform","Schwurbel","uniLoc","Noise","timeUniform","Matrix","Translate","vec","Scale","scale","vScale","oldMatrix","transMatrix","doScale","copy","multiply","updateMatrix","scaleChanged","Transform","posX","posY","posZ","scaleX","scaleY","scaleZ","rotX","rotY","rotZ","vPos","doTranslate","rotateX","rotateY","rotateZ","translateChanged","rotChanged","RandomCluster","reset","randoms","randomsRot","randomsFloats","fromValues","size","exe","idx","rnd","Log","input","CallsPerSecond","cps","Value","result","TimeLineTime","theTime","Repeat","IfTrueThen","bool","triggerThen","triggerElse","Group","triggers","Interval","timeOutId","interval","setTimeout","Anim","SinusAnim","sin","RelativeTime","startTime","Input","GamePad","numPads","axis1","axis2","axis3","axis4","button0","button1","button2","button3","button4","gamePads","navigator","getGamepads","count","gp","axes","buttons","pressed","Random","Clamp","clamp","min","max","SmoothStep","smoothstep","MapRange","old_min","old_max","new_min","new_max","nMin","nMax","oMin","oMax","reverseInput","oldMin","oldMax","reverseOutput","newMin","newMax","portion","Abs","number","abs","Sin","Sum","number1","number2","Multiply","Divide","Compare","IsEven","Greater","Between","Lesser","Equals"],"mappings":"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","file":"cables.min.js","sourcesContent":["\n\nfunction Timer()\n{\n    var self=this;\n    var timeStart=Date.now();\n    var timeOffset=0;\n\n    var currentTime=0;\n    var lastTime=0;\n    var paused=true;\n\n    function getTime()\n    {\n        lastTime=(Date.now()-timeStart)/1000;\n        return lastTime+timeOffset;\n\n    }\n\n    this.update=function()\n    {\n        if(paused) return;\n        currentTime=getTime();\n\n        return currentTime;\n    };\n\n    this.getTime=function()\n    {\n        return currentTime;\n    };\n\n    this.togglePlay=function()\n    {\n        if(paused)self.play();\n            else self.pause();\n    };\n\n    this.setOffset=function(val)\n    {\n        if(currentTime+val<0)\n        {\n            timeStart=Date.now();\n            timeOffset=0;\n            currentTime=0;\n        }\n        else\n        {\n            timeOffset+=val;\n            currentTime=lastTime+timeOffset;\n        }\n        \n\n    };\n\n    this.play=function()\n    {\n        timeStart=Date.now();\n        paused=false;\n    };\n\n    this.pause=function()\n    {\n        timeOffset=currentTime;\n        paused=true;\n    };\n\n}","function generateUUID()\n{\n    var d = new Date().getTime();\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c)\n    {\n        var r = (d + Math.random()*16)%16 | 0;\n        d = Math.floor(d/16);\n        return (c=='x' ? r : (r&0x3|0x8)).toString(16);\n    });\n    return uuid;\n}\n\n// ----------------------------------------------------------------\nfunction ajaxRequest(url, callback)\n{\n    var request = new XMLHttpRequest();\n    request.open(\"GET\", url, true);\n    request.responseType = \"arraybuffer\";\n    request.onload = function(e)\n    {\n        callback(e.target.response);\n    };\n    request.send();\n}\n\nString.prototype.endl = function(){return this+'\\n';};\n\n\n","var CGL=CGL ||\n{\n    DEG2RAD:3.14159/180.0\n};\n\n\n\nCGL.Mesh=function(geom)\n{\n    var bufTexCoords=-1;\n    // var bufTexCoordsIndizes=-1;\n\n    var bufVertices = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, bufVertices);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(geom.vertices), gl.STATIC_DRAW);\n    bufVertices.itemSize = 3;\n    bufVertices.numItems = geom.vertices.length/3;\n\n\n    var bufVerticesIndizes = gl.createBuffer();\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufVerticesIndizes);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(geom.verticesIndices), gl.STATIC_DRAW);\n    bufVerticesIndizes.itemSize = 1;\n    bufVerticesIndizes.numItems = geom.verticesIndices.length;\n\n    if(geom.texCoords.length>0)\n    {\n        bufTexCoords = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, bufTexCoords);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(geom.texCoords), gl.STATIC_DRAW);\n        bufTexCoords.itemSize = 2;\n        bufTexCoords.numItems = geom.texCoords.length/bufTexCoords.itemSize;\n    }\n\n\n\n    this.render=function(shader)\n    {\n        shader.bind();\n\n        GL.enableVertexAttribArray(shader.getAttrVertexPos());\n        if(bufTexCoords!=-1) GL.enableVertexAttribArray(shader.getAttrTexCoords());\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, bufVertices);\n        gl.vertexAttribPointer(shader.getAttrVertexPos(),bufVertices.itemSize, gl.FLOAT, false, 0, 0);\n\n        if(bufTexCoords!=-1)\n        {\n            gl.bindBuffer(gl.ARRAY_BUFFER, bufTexCoords);\n            gl.vertexAttribPointer(shader.getAttrTexCoords(),bufTexCoords.itemSize, gl.FLOAT, false, 0, 0);\n        }\n\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufVerticesIndizes);\n        gl.drawElements(gl.TRIANGLES, bufVerticesIndizes.numItems, gl.UNSIGNED_SHORT, 0);\n    };\n\n};\n\nCGL.Geometry=function()\n{\n    this.faceVertCount=3;\n    this.vertices=[];\n    this.verticesIndices=[];\n    this.texCoords=[];\n    this.texCoordsIndices=[];\n};\n\nparseOBJ = function(buff)\n{\n\n    _readline = function(a, off)  // Uint8Array, offset\n    {\n        var s = \"\";\n        while(a[off] != 10) s += String.fromCharCode(a[off++]);\n        return s;\n    };\n\n    var geom = new CGL.Geometry();\n    geom.groups = {};\n    \n    // geom.texCoords   = [];\n    geom.c_norms = [];\n    \n    // geom.texCoordsIndices   = [];\n    geom.i_norms = [];\n    \n    var cg = {from: 0, to:0};   // current group\n    var off = 0;\n    var a = new Uint8Array(buff);\n    \n    while(off < a.length)\n    {\n        var line = _readline(a, off);\n        off += line.length + 1;\n        line = line.replace(/ +(?= )/g,'');\n        line = line.replace(/(^\\s+|\\s+$)/g, '');\n        var cds = line.split(\" \");\n        if(cds[0] == \"g\")\n        {\n            cg.to = geom.verticesIndices.length;\n            if(geom.groups[cds[1]] == null) geom.groups[cds[1]] = {from:geom.verticesIndices.length, to:0};\n            cg = geom.groups[cds[1]];\n        }\n        if(cds[0] == \"v\")\n        {\n            var x = parseFloat(cds[1]);\n            var y = parseFloat(cds[2]);\n            var z = parseFloat(cds[3]);\n            geom.vertices.push(x,y,z);\n        }\n        if(cds[0] == \"vt\")\n        {\n            var x = parseFloat(cds[1]);\n            var y = 1-parseFloat(cds[2]);\n            geom.texCoords.push(x,y);\n        }\n        if(cds[0] == \"vn\")\n        {\n            var x = parseFloat(cds[1]);\n            var y = parseFloat(cds[2]);\n            var z = parseFloat(cds[3]);\n            geom.c_norms.push(x,y,z);\n        }\n        if(cds[0] == \"f\")\n        {\n            var v0a = cds[1].split(\"/\"), v1a = cds[2].split(\"/\"), v2a = cds[3].split(\"/\");\n            var vi0 = parseInt(v0a[0])-1, vi1 = parseInt(v1a[0])-1, vi2 = parseInt(v2a[0])-1;\n            var ui0 = parseInt(v0a[1])-1, ui1 = parseInt(v1a[1])-1, ui2 = parseInt(v2a[1])-1;\n            var ni0 = parseInt(v0a[2])-1, ni1 = parseInt(v1a[2])-1, ni2 = parseInt(v2a[2])-1;\n            \n            var vlen = geom.vertices.length/3, ulen = geom.texCoords.length/2, nlen = geom.c_norms.length/3;\n            if(vi0<0) vi0 = vlen + vi0+1; if(vi1<0) vi1 = vlen + vi1+1; if(vi2<0) vi2 = vlen + vi2+1;\n            if(ui0<0) ui0 = ulen + ui0+1; if(ui1<0) ui1 = ulen + ui1+1; if(ui2<0) ui2 = ulen + ui2+1;\n            if(ni0<0) ni0 = nlen + ni0+1; if(ni1<0) ni1 = nlen + ni1+1; if(ni2<0) ni2 = nlen + ni2+1;\n            \n            geom.verticesIndices.push(vi0, vi1, vi2);  //cg.verticesIndices.push(vi0, vi1, vi2)\n            geom.texCoordsIndices  .push(ui0, ui1, ui2);  //cg.texCoordsIndices  .push(ui0, ui1, ui2);\n            geom.i_norms.push(ni0, ni1, ni2);  //cg.i_norms.push(ni0, ni1, ni2);\n            if(cds.length == 5)\n            {\n                var v3a = cds[4].split(\"/\");\n                var vi3 = parseInt(v3a[0])-1, ui3 = parseInt(v3a[1])-1, ni3 = parseInt(v3a[2])-1;\n                if(vi3<0) vi3 = vlen + vi3+1;\n                if(ui3<0) ui3 = ulen + ui3+1;\n                if(ni3<0) ni3 = nlen + ni3+1;\n                geom.verticesIndices.push(vi0, vi2, vi3);  //cg.verticesIndices.push(vi0, vi2, vi3);\n                geom.texCoordsIndices  .push(ui0, ui2, ui3);  //cg.texCoordsIndices  .push(ui0, ui2, ui3);\n                geom.i_norms.push(ni0, ni2, ni3);  //cg.i_norms.push(ni0, ni2, ni3);\n            }\n        }\n    }\n    cg.to = geom.verticesIndices.length;\n    \n    return geom;\n};\n\n\n","var CGL=CGL || {};\n\n// ---------------------------------------------------------------------------\n\nCGL.Uniform=function(_shader,_type,_name,_value)\n{\n    var self=this;\n    var loc=-1;\n    var name=_name;\n    var type=_type;\n    var value=0;\n    var shader=_shader;\n    this.needsUpdate=true;\n\n    shader.addUniform(this);\n\n    this.getType=function() {return type;};\n    this.getName=function() {return name;};\n\n    this.resetLoc=function() { loc=-1;};\n\n    this.updateValueF=function()\n    {\n        if(loc==-1) loc=gl.getUniformLocation(shader.getProgram(), name);\n        gl.uniform1f(loc, value);\n    };\n\n    this.setValueF=function(v)\n    {\n        self.needsUpdate=true;\n        value=v;\n    };\n\n    this.updateValueT=function()\n    {\n        if(loc==-1)\n        {\n            loc=gl.getUniformLocation(shader.getProgram(), name);\n            if(loc==-1) console.log('texture loc unknown!!');\n        }\n\n        gl.uniform1i(loc, 0);\n    };\n\n    this.setValueT=function(v)\n    {\n        self.needsUpdate=true;\n        value=v;\n    };\n\n    if(type=='f')\n    {\n        this.setValue=this.setValueF;\n        this.updateValue=this.updateValueF;\n    }\n\n    if(type=='t')\n    {\n        this.setValue=this.setValueT;\n        this.updateValue=this.updateValueT;\n    }\n\n    this.setValue(_value);\n};\n\n// ---------------------------------------------------------------------------\n\nCGL.Shader=function()\n{\n    var self=this;\n    var program=false;\n    var uniforms=[];\n    var needsRecompile=true;\n\n    this.removeUniform=function(name)\n    {\n        console.log('before: '+uniforms.length);\n        for(var i in uniforms)\n        {\n            if(uniforms[i].getName()==name)\n            {\n                uniforms.splice(i,1);\n                break;\n            }\n        }\n        needsRecompile=true;\n        console.log(uniforms.length);\n                \n    };\n\n    this.addUniform=function(uni)\n    {\n        uniforms.push(uni);\n        needsRecompile=true;\n    };\n\n    this.getDefaultVertexShader=function()\n    {\n        return ''+\n        'attribute vec3 vPosition;\\n'+\n        'attribute vec2 attrTexCoord;\\n'+\n        'varying vec2 texCoord;\\n'+\n        'uniform mat4 projMatrix;\\n'+\n        'uniform mat4 mvMatrix;\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        '   texCoord=attrTexCoord;\\n'+\n        // '   gl_PointSize=3.0;\\n'+\n        '   gl_Position = projMatrix * mvMatrix * vec4(vPosition,  1.0);\\n'+\n        '}\\n';\n    };\n\n    this.getDefaultFragmentShader=function()\n    {\n        return ''+\n        'precision mediump float;\\n'+\n        'void main()\\n'+\n        '{\\n'+\n\n        '   gl_FragColor = vec4(0.5,0.5,0.5,1.0);\\n'+\n        '}\\n';\n    };\n\n    this.srcVert=this.getDefaultVertexShader();\n    this.srcFrag=this.getDefaultFragmentShader();\n\n    this.setSource=function(srcVert,srcFrag)\n    {\n        this.srcVert=srcVert;\n        this.srcFrag=srcFrag;\n    };\n\n    var projMatrixUniform=-1;\n    var mvMatrixUniform=-1;\n\n    var attrTexCoords = -1;\n    var attrVertexPos = -1;\n\n    this.getAttrTexCoords=function(){return attrTexCoords;};\n    this.getAttrVertexPos=function(){return attrVertexPos;};\n\n    this.hasTextureUniforms=function()\n    {\n        for(var i in uniforms)\n        {\n            if(uniforms[i].getType()=='t') return true;\n        }\n        return false;\n    };\n\n    this.compile=function()\n    {\n        var defines='';\n        if(self.hasTextureUniforms()) defines+='#define HAS_TEXTURES'.endl();\n\n        console.log('shader compile...');\n        console.log('has textures: '+self.hasTextureUniforms() );\n        \n\n        var vs=defines+self.srcVert;\n        var fs=defines+self.srcFrag;\n\n        if(!program)\n        {\n            console.log('create shaderprogram');\n                    \n            program=createProgram(vs,fs, program);\n        }\n        else\n        {\n            console.log('recompile shaders...');\n\n            self.vshader=createShader(vs, gl.VERTEX_SHADER, self.vshader );\n            self.fshader=createShader(fs, gl.VERTEX_SHADER, self.fshader );\n            linkProgram(program);\n            mvMatrixUniform=-1;\n\n            for(var i in uniforms)uniforms[i].resetLoc();\n            \n\n        }\n\n        needsRecompile=false;\n    };\n\n    this.bind=function()\n    {\n        if(!program || needsRecompile) self.compile();\n\n        if(mvMatrixUniform==-1)\n        {\n            attrTexCoords = gl.getAttribLocation(program, 'attrTexCoord');\n            attrVertexPos = gl.getAttribLocation(program, 'vPosition');\n\n            projMatrixUniform = gl.getUniformLocation(program, \"projMatrix\");\n            mvMatrixUniform = gl.getUniformLocation(program, \"mvMatrix\");\n        }\n\n        GL.useProgram(program);\n\n        for(var i in uniforms)\n        {\n            if(uniforms[i].needsUpdate)uniforms[i].updateValue();\n        }\n\n        gl.uniformMatrix4fv(projMatrixUniform, false, pMatrix);\n        gl.uniformMatrix4fv(mvMatrixUniform, false, mvMatrix);\n    };\n\n    this.getProgram=function()\n    {\n        return program;\n    };\n\n\n    createShader =function(str, type,_shader)\n    {\n        var shader = _shader || gl.createShader(type);\n        gl.shaderSource(shader, str);\n        gl.compileShader(shader);\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\n        {\n            console.log('compile status: ');\n\n            if(type==gl.VERTEX_SHADER)console.log('VERTEX_SHADER');\n            if(type==gl.FRAGMENT_SHADER)console.log('FRAGMENT_SHADER');\n            \n            throw gl.getShaderInfoLog(shader);\n        }\n        return shader;\n    };\n\n    linkProgram=function(program)\n    {\n        gl.linkProgram(program);\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS))\n        {\n            throw gl.getProgramInfoLog(program);\n        }\n\n    };\n\n    createProgram=function(vstr, fstr)\n    {\n        var program = gl.createProgram();\n        self.vshader = createShader(vstr, gl.VERTEX_SHADER);\n        self.fshader = createShader(fstr, gl.FRAGMENT_SHADER);\n        gl.attachShader(program, self.vshader);\n        gl.attachShader(program, self.fshader);\n\n        linkProgram(program);\n        return program;\n    };\n\n\n\n};\n\n","var CGL=CGL || {};\n\nCGL.Texture=function()\n{\n    var self=this;\n    this.tex = gl.createTexture();\n\n    // gl.bindTexture(gl.TEXTURE_2D, this.tex);\n    // gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([111, 111, 111, 255]));\n    // gl.bindTexture(gl.TEXTURE_2D, null);\n\n    this.bind=function(slot)\n    {\n        gl.activeTexture(gl.TEXTURE0+slot);\n        gl.bindTexture(gl.TEXTURE_2D, self.tex);\n    };\n\n    this.setSize=function(w,h)\n    {\n        gl.bindTexture(gl.TEXTURE_2D, self.tex);\n        \n        var arr=[];\n        for(var x=0;x<w;x++)\n        {\n            for(var y=0;y<h;y++)\n            {\n                // var index=x+y*w;\n                arr.push( parseInt( (x/w)*255,10) );\n                arr.push(0);\n                arr.push( parseInt((y/w)*255,10));\n                arr.push(255);\n            }\n        }\n        var uarr=new Uint8Array(arr);\n\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, w, h, 0, gl.RGBA, gl.UNSIGNED_BYTE, uarr);\n\n        gl.bindTexture(gl.TEXTURE_2D, null);\n    };\n\n    this.initTexture=function(img)\n    {\n        gl.bindTexture(gl.TEXTURE_2D, self.tex);\n        // gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, self.image);\n\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\n        // non power of two:\n        // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n\n        gl.bindTexture(gl.TEXTURE_2D, null);\n    };\n\n    this.setSize(8,8);\n};\n\nCGL.Texture.load=function(url)\n{\n    var texture=new CGL.Texture();\n    texture.image = new Image();\n    texture.image.onload = function ()\n    {\n        console.log(texture.image);\n                \n        texture.initTexture(texture.image);\n    };\n    texture.image.src = url;\n    return texture;\n};\n\n// ---------------------------------------------------------------------------\n","\nvar PORT_DIR_IN=0;\nvar PORT_DIR_OUT=1;\n\nvar OP_PORT_TYPE_VALUE =0;\nvar OP_PORT_TYPE_FUNCTION =1;\nvar OP_PORT_TYPE_TEXTURE =2;\n\nvar Ops = {};\n\n\nvar Op = function()\n{\n    this.objName='';\n    this.portsOut=[];\n    this.portsIn=[];\n    this.posts=[];\n    this.uiAttribs={};\n    this.name='unknown';\n    this.id=generateUUID();\n\n    this.getName= function()\n    {\n        return this.name;\n    };\n    this.addOutPort=function(p)\n    {\n        p.direction=PORT_DIR_OUT;\n        p.parent=this;\n        this.portsOut.push(p);\n        return p;\n    };\n    this.addInPort=function(p)\n    {\n        p.direction=PORT_DIR_IN;\n        p.parent=this;\n        this.portsIn.push(p);\n        return p;\n    };\n    this.execute=function()\n    {\n        this.exec();\n    };\n    this.printInfo=function()\n    {\n        for(var i=0;i<this.portsIn.length;i++)\n            console.log('in: '+this.portsIn[i].getName());\n\n        for(var ipo in this.portsOut)\n            console.log('out: '+this.portsOut[ipo].getName());\n    };\n\n    this.removeLinks=function()\n    {\n        for(var i=0;i<this.portsIn.length;i++)\n            this.portsIn[i].removeLinks();\n        for(var ipo in this.portsOut)\n            this.portsOut[ipo].removeLinks();\n    };\n\n    this.getPort=function(name)\n    {\n        for(var ipi in this.portsIn)\n            if(this.portsIn[ipi].getName()==name)return this.portsIn[ipi];\n\n        for(var ipo in this.portsOut)\n            if(this.portsOut[ipo].getName()==name)return this.portsOut[ipo];\n    };\n\n    this.findFittingPort=function(otherPort)\n    {\n        for(var ipo in this.portsOut)\n        {\n            console.log('.');\n            if(Link.canLink(otherPort,this.portsOut[ipo]))return this.portsOut[ipo];\n        }\n    \n        for(var ipi in this.portsIn)\n        {\n            console.log('.');\n            if(Link.canLink(otherPort,this.portsIn[ipi]))return this.portsIn[ipi];\n        }\n\n    };\n\n\n    this.getSerialized=function()\n    {\n        var op={};\n        op.name=this.getName();\n        op.objName=this.objName;\n        op.id=this.id;\n        op.uiAttribs=this.uiAttribs;\n\n        op.portsIn=[];\n        op.portsOut=[];\n\n        for(var i=0;i<this.portsIn.length;i++)\n            op.portsIn.push( this.portsIn[i].getSerialized() );\n\n        for(var ipo in this.portsOut)\n            op.portsOut.push( this.portsOut[ipo].getSerialized() );\n\n        return op;\n    };\n\n    this.getPortByName=function(name)\n    {\n        for(var i=0;i<this.portsIn.length;i++)\n            if(this.portsIn[i].name==name)return this.portsIn[i];\n        \n        for(var ipo in this.portsOut)\n            if(this.portsOut[ipo].name==name)return this.portsOut[ipo];\n    };\n\n};\n\n// ------------------------------------------------------------------------------------\n\nvar Port=function(parent,name,type)\n{\n    var self=this;\n    this.direction=PORT_DIR_IN;\n    this.id=generateUUID();\n    this.parent=parent;\n    this.links=[];\n    this.value=null;\n    this.name=name;\n    this.type=type || OP_PORT_TYPE_VALUE;\n    var valueBeforeLink=null;\n\n    this.__defineGetter__(\"val\", function()\n    {\n        return this.value;\n    });\n\n    this.__defineSetter__(\"val\", function(v)\n    {\n        this.setValue(v);\n    });\n\n    this.getType=function(){ return this.type; };\n    this.isLinked=function(){ return this.links.length>0; };\n    this.onValueChanged=function(){};\n    this.onTriggered=function(){};\n\n    this.setValue=function(v)\n    {\n        if(v!=this.value)\n        {\n            this.value=v;\n            this.onValueChanged();\n\n            for(var i in this.links)\n            {\n                this.links[i].setValue();\n            }\n        }\n    };\n\n    this.getName= function()\n    {\n        return this.name;\n    };\n\n    this.addLink=function(l)\n    {\n        valueBeforeLink=self.value;\n        this.links.push(l);\n    };\n\n    this.isLinkedTo=function(p2)\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i].portIn==p2 || this.links[i].portOut==p2)return true;\n        }\n        return false;\n    };\n\n    this.call=function()\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i].portIn !=this)this.links[i].portIn.onTriggered();\n            if(this.links[i].portOut!=this)this.links[i].portOut.onTriggered();\n        }\n    };\n\n\n    this.execute=function()\n    {\n        console.log('### execute port: '+this.getName() , this.goals.length);\n    };\n\n    this.getTypeString=function()\n    {\n        if(this.type==OP_PORT_TYPE_VALUE)return 'value';\n        if(this.type==OP_PORT_TYPE_FUNCTION)return 'function';\n        if(this.type==OP_PORT_TYPE_TEXTURE)return 'texture';\n    };\n\n    this.getSerialized=function()\n    {\n        var obj={};\n        obj.name=this.getName();\n        obj.value=this.value;\n\n        if(this.direction==PORT_DIR_IN && this.links.length>0)\n        {\n            obj.links=[];\n            for(var i in this.links)\n            {\n                obj.links.push( this.links[i].getSerialized() );\n            }\n        }\n        return obj;\n    };\n\n    this.removeLinks=function()\n    {\n        while(this.links.length>0)\n        {\n            this.links[0].remove();\n        }\n    };\n\n    this.removeLink=function(link)\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i]==link)this.links.splice( i, 1 );\n        }\n        self.setValue(valueBeforeLink);\n    };\n};\n\n\n\n// ---------------------------------------------------------------------------\n\nvar Link = function(scene)\n{\n    this.portIn=null;\n    this.portOut=null;\n    this.scene=scene;\n\n    this.setValue=function()\n    {\n        if(this.portIn.val!=this.portOut.val)\n            this.portIn.val=this.portOut.val;\n    };\n\n    this.remove=function()\n    {\n        this.portIn.removeLink(this);\n        this.portOut.removeLink(this);\n        this.scene.onUnLink(this.portIn,this.portOut);\n        this.portIn=null;\n        this.portOut=null;\n        this.scene=null;\n    };\n\n\n    this.link=function(p1,p2)\n    {\n        if(!Link.canLink(p1,p2))\n        {\n            console.log('cannot link ports!');\n            return false;\n        }\n        if(p1.direction==PORT_DIR_IN)\n        {\n            this.portIn=p1;\n            this.portOut=p2;\n        }\n        else\n        {\n            this.portIn=p2;\n            this.portOut=p1;\n        }\n\n        p1.addLink(this);\n        p2.addLink(this);\n        this.setValue();\n    };\n\n    this.getSerialized=function()\n    {\n        var obj={};\n\n        obj.portIn=this.portIn.getName();\n        obj.portOut=this.portOut.getName();\n        obj.objIn=this.portIn.parent.id;\n        obj.objOut=this.portOut.parent.id;\n\n        return obj;\n    };\n};\n\n\nLink.canLinkText=function(p1,p2)\n{\n    if(!p1)return 'can not link: port 1 invalid';\n    if(!p2)return 'can not link: port 2 invalid';\n    if(p1.direction==PORT_DIR_IN && p1.links.length>0)return 'input port already busy';\n    if(p2.direction==PORT_DIR_IN && p2.links.length>0)return 'input port already busy';\n    if(p1.isLinkedTo(p2))return 'ports already linked';\n    if(p1.direction==p2.direction)return 'can not link: same direction';\n    if(p1.type!=p2.type)return 'can not link: different type';\n    if(p1.parent==p2.parent)return 'can not link: same op';\n    return 'can link';\n};\n\nLink.canLink=function(p1,p2)\n{\n    if(!p1)return false;\n    if(!p2)return false;\n    if(p1.direction==PORT_DIR_IN && p1.links.length>0)return false;\n    if(p2.direction==PORT_DIR_IN && p2.links.length>0)return false;\n    if(p1.isLinkedTo(p2))return false;\n    if(p1.direction==p2.direction)return false;\n    if(p1.type!=p2.type)return false;\n    if(p1.parent==p2.parent)return false;\n\n    return true;\n};\n\n\n// ------------------------------------------------------------------------------------\n\n\nvar Scene = function()\n{\n    var self=this;\n    this.ops=[];\n    this.timer=new Timer();\n    this.animFrameOps=[];\n    \n\n    this.clear=function()\n    {\n        this.timer=new Timer();\n        while(this.ops.length>0)\n        {\n            this.deleteOp(this.ops[0].id);\n        }\n    };\n\n    this.addOp=function(objName,uiAttribs)\n    {\n        var op=eval('new '+objName+'();');\n        op.objName=objName;\n        op.uiAttribs=uiAttribs;\n\n        if(op.hasOwnProperty('onAnimFrame')) this.animFrameOps.push(op);\n\n        this.ops.push(op);\n        if(this.onAdd)this.onAdd(op);\n        return op;\n    };\n\n    this.deleteOp=function(opid)\n    {\n        for(var i in this.ops)\n        {\n            if(this.ops[i].id==opid)\n            {\n                this.ops[i].removeLinks();\n                this.onDelete(this.ops[i]);\n                this.ops.splice( i, 1 );\n            }\n        }\n    };\n\n    this.exec=function()\n    {\n        requestAnimationFrame(self.exec);\n        self.timer.update();\n\n        var time=self.timer.getTime();\n\n        for(var i in self.animFrameOps)\n        {\n            self.animFrameOps[i].onAnimFrame(time);\n        }\n\n    };\n\n    this.link=function(op1,port1Name,op2,port2Name)\n    {\n        var port1=op1.getPort(port1Name);\n        var port2=op2.getPort(port2Name);\n\n        if(Link.canLink(port1,port2))\n        {\n            var link=new Link(this);\n            link.link(port1,port2);\n            this.onLink(port1,port2);\n            return link;\n        }\n        else\n        {\n            console.log(Link.canLinkText(port1,port2));\n        }\n    };\n    this.onAdd=function(op){};\n    this.onDelete=function(op){};\n    this.onLink=function(p1,p2){};\n    this.onUnLink=function(p1,p2){};\n    this.serialize=function()\n    {\n        var obj={};\n\n        obj.ops=[];\n        for(var i in this.ops)\n        {\n            obj.ops.push( this.ops[i].getSerialized() );\n        }\n        \n        return JSON.stringify(obj);\n    };\n    this.getOpById=function(opid)\n    {\n        for(var i in this.ops)\n        {\n            if(this.ops[i].id==opid)return this.ops[i];\n        }\n\n    };\n    this.deSerialize=function(obj)\n    {\n        if (typeof obj === \"string\") obj=JSON.parse(obj);\n        var self=this;\n\n        function addLink(opinid,opoutid,inName,outName)\n        {\n            var found=false;\n            if(!found)\n            {\n                self.link(\n                    self.getOpById(opinid),\n                    inName,\n                    self.getOpById(opoutid),\n                    outName\n                    );\n            }\n        }\n\n        // add ops...\n        for(var iop in obj.ops)\n        {\n            var op=this.addOp(obj.ops[iop].objName,obj.ops[iop].uiAttribs);\n            op.id=obj.ops[iop].id;\n\n            for(var ipi in obj.ops[iop].portsIn)\n            {\n                var port=op.getPortByName(obj.ops[iop].portsIn[ipi].name);\n                if(port && port.type!=OP_PORT_TYPE_TEXTURE)port.val=obj.ops[iop].portsIn[ipi].value;\n            }\n\n            for(var ipo in obj.ops[iop].portsOut)\n            {\n                var port2=op.getPortByName(obj.ops[iop].portsOut[ipo].name);\n                if(port2&& port2.type!=OP_PORT_TYPE_TEXTURE)port2.val=obj.ops[iop].portsOut[ipo].value;\n            }\n\n\n            // op.uiAttribs=obj.ops[iop].uiAttribs;\n        }\n\n        // create links...\n        for(iop in obj.ops)\n        {\n            for(var ipi2 in obj.ops[iop].portsIn)\n            {\n\n                for(var ili in obj.ops[iop].portsIn[ipi2].links)\n                {\n                    addLink(\n                        obj.ops[iop].portsIn[ipi2].links[ili].objIn,\n                        obj.ops[iop].portsIn[ipi2].links[ili].objOut,\n                        obj.ops[iop].portsIn[ipi2].links[ili].portIn,\n                        obj.ops[iop].portsIn[ipi2].links[ili].portOut);\n                }\n            }\n\n\n            // for(var ipo in obj.ops[iop].portsOut)\n            // {\n            //     for(var ili in obj.ops[iop].portsOut[ipo].links)\n            //     {\n            //         addLink(\n            //             obj.ops[iop].portsOut[ipo].links[ili].objIn,\n            //             obj.ops[iop].portsOut[ipo].links[ili].objOut,\n            //             obj.ops[iop].portsOut[ipo].links[ili].portIn,\n            //             obj.ops[iop].portsOut[ipo].links[ili].portOut);\n\n            //     }\n            // }\n        }\n\n\n        for(var i in this.ops)\n        {\n            this.ops[i].id=generateUUID();\n        }\n\n\n\n    };\n\n    this.exec();\n\n};\n\n\n\n\n","//http://k3d.ivank.net/K3D.js\n//http://fhtr.blogspot.de/2009/12/3d-models-and-parsing-binary-data-with.html\n//https://github.com/gpjt/webgl-lessons/blob/master/lesson05/index.html\n\nOps.Gl={};\nvar GL=null;\nvar GL=null;\n\nvar currentShader=null;\n\nvar mvMatrix = mat4.create();\nvar pMatrix = mat4.create();\n\nOps.Gl.Renderer = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    var simpleShader=new CGL.Shader();\n \n\n    this.name='WebGL Renderer';\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var initTranslate=vec3.create();\n    vec3.set(initTranslate, 0,0,-2);\n\n    this.onAnimFrame=function(time)\n    {\n        currentShader=simpleShader;\n        gl.enable(gl.DEPTH_TEST);\n        GL.clearColor(0,0,0,1);\n        GL.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n        gl.viewport(0,0,self.canvas.clientWidth,self.canvas.clientHeight);\n        mat4.perspective(pMatrix,45, self.canvas.clientWidth/self.canvas.clientHeight, 0.01, 1100.0);\n        mat4.identity(mvMatrix);\n        mat4.translate(mvMatrix,mvMatrix, initTranslate);\n\n        GL.enable(GL.BLEND);\n        GL.blendFunc(GL.SRC_ALPHA,GL.ONE_MINUS_SRC_ALPHA);\n\n        self.trigger.call();\n    };\n\n    this.canvas = document.getElementById(\"glcanvas\");\n    GL = this.canvas.getContext(\"experimental-webgl\");\n    gl = this.canvas.getContext(\"experimental-webgl\");\n\n};\n\nOps.Gl.Renderer.prototype = new Op();\n\n\n\n\n\n// --------------------------------------------------------------------------\n\n\n\nOps.Gl.LeapMotion = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='LeapMotion';\n\n    this.transX=this.addOutPort(new Port(this,\"translationX\"));\n    this.transY=this.addOutPort(new Port(this,\"translationY\"));\n    this.transZ=this.addOutPort(new Port(this,\"translationZ\"));\n\n    this.finger0X=this.addOutPort(new Port(this,\"finger0X\"));\n    this.finger0Y=this.addOutPort(new Port(this,\"finger0Y\"));\n    this.finger0Z=this.addOutPort(new Port(this,\"finger0Z\"));\n\n\n\n\n\n\n    Leap.loop(function (frame)\n    {\n        // console.log(frame);\n\n        self.transX.val=frame._translation[0];\n        self.transY.val=frame._translation[1];\n        self.transZ.val=frame._translation[2];\n\n        if(frame.fingers.length>0)\n        {\n            self.finger0X.val=frame.fingers[0].tipPosition[0];\n            self.finger0Y.val=frame.fingers[0].tipPosition[1];\n            self.finger0Z.val=frame.fingers[0].tipPosition[2];\n\n        }\n\n    });\n\n\n\n};\n\nOps.Gl.LeapMotion.prototype = new Op();\n\n\n\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.ClearColor = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='ClearColor';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.r=this.addInPort(new Port(this,\"r\"));\n    this.g=this.addInPort(new Port(this,\"g\"));\n    this.b=this.addInPort(new Port(this,\"b\"));\n\n    this.r.val=0.3;\n    this.g.val=0.3;\n    this.b.val=0.3;\n    this.render.onTriggered=function()\n    {\n        GL.clearColor(self.r.val,self.g.val,self.b.val,1);\n        GL.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n\n        self.trigger.call();\n    };\n\n};\n\nOps.Gl.ClearColor.prototype = new Op();\n\n\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.ClearDepth = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='ClearDepth';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        GL.clear(GL.DEPTH_BUFFER_BIT);\n        self.trigger.call();\n    };\n};\n\nOps.Gl.ClearDepth.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n    \nOps.Gl.TextureEmpty = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='texture empty';\n    this.width=this.addInPort(new Port(this,\"width\",OP_PORT_TYPE_VALUE));\n    this.height=this.addInPort(new Port(this,\"height\",OP_PORT_TYPE_VALUE));\n\n    this.textureOut=this.addOutPort(new Port(this,\"texture\",OP_PORT_TYPE_TEXTURE));\n    this.tex=new CGL.Texture();\n    \n    var sizeChanged=function()\n    {\n        self.tex.setSize(self.width.val,self.height.val);\n        self.textureOut.val=self.tex.tex;\n    };\n\n    this.width.onValueChanged=sizeChanged;\n    this.height.onValueChanged=sizeChanged;\n\n};\n\nOps.Gl.TextureEmpty.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n    \nOps.Gl.Texture = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='texture';\n    this.filename=this.addInPort(new Port(this,\"file\",OP_PORT_TYPE_VALUE));\n    this.textureOut=this.addOutPort(new Port(this,\"texture\",OP_PORT_TYPE_TEXTURE));\n    \n    this.filename.onValueChanged=function()\n    {\n        console.log('load texture...');\n        self.tex=CGL.Texture.load(self.filename.val);\n        self.textureOut.val=self.tex.tex;\n    };\n\n    this.filename.val='assets/skull.png';\n    // this.filename.onValueChanged();\n    // this.textureOut.val=this.tex.tex;\n};\n\nOps.Gl.Texture.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.Meshes={};\n\n\n\nOps.Gl.Meshes.Rectangle = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='rectangle';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    // this.render.onTriggered=function()\n    // {\n    //     // currentShader.setAttributeVertex( self.squareVertexPositionBuffer.itemSize);\n    //     gl.vertexAttribPointer(currentShader.getAttrVertexPos(),self.squareVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);\n\n    //     currentShader.bind();\n    //     gl.bindBuffer(gl.ARRAY_BUFFER, self.squareVertexPositionBuffer);\n    //     gl.drawArrays(gl.TRIANGLE_STRIP, 0, self.squareVertexPositionBuffer.numItems);\n\n    //     self.trigger.call();\n    // };\n\n    // this.squareVertexPositionBuffer = gl.createBuffer();\n    // gl.bindBuffer(gl.ARRAY_BUFFER, this.squareVertexPositionBuffer);\n    // this.vertices = [\n\n    // ];\n    // gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(this.vertices), gl.STATIC_DRAW);\n    // this.squareVertexPositionBuffer.itemSize = 3;\n    // this.squareVertexPositionBuffer.numItems = 4;\n\n\n    this.render.onTriggered=function()\n    {\n        self.mesh.render(currentShader);\n        self.trigger.call();\n    };\n\n    var geom=new CGL.Geometry();\n    geom.vertices = [\n         1.0,  1.0,  0.0,\n        -1.0,  1.0,  0.0,\n         1.0, -1.0,  0.0,\n        -1.0, -1.0,  0.0\n    ];\n\n    geom.texCoords = [\n         1.0, 1.0,\n         0.0, 1.0,\n         1.0, 0.0,\n         0.0, 0.0\n    ];\n\n    geom.verticesIndices = [\n        0, 1, 2,\n        3, 1, 2\n    ];\n    this.mesh=new CGL.Mesh(geom);\n\n\n};\n\nOps.Gl.Meshes.Rectangle.prototype = new Op();\n\n\n\n\n\n\nOps.Gl.Meshes.ObjMesh = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='OBJ Mesh';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.mesh=null;\n\n    this.render.onTriggered=function()\n    {\n        if(self.mesh)\n        {\n            self.mesh.render(currentShader);\n        }\n\n        self.trigger.call();\n    };\n\n\n    ajaxRequest('assets/skull.obj',function(response)\n    {\n        console.log(response);\n                \n        var r=parseOBJ(response);\n\nunwrap = function(ind, crd, cpi)\n{\n    var ncrd = new Array(Math.floor(ind.length/3)*cpi);\n    for(var i=0; i<ind.length; i++)\n    {\n        for(var j=0; j<cpi; j++)\n        {\n            ncrd[i*cpi+j] = crd[ind[i]*cpi+j];\n        }\n    }\n    return ncrd;\n};\n\nvar l=r.verticesIndices.length;\n        r.vertices = unwrap(r.verticesIndices, r.vertices, 3);\n        r.texCoords = unwrap(r.texCoordsIndices  , r.texCoords  , 2);\n        r.verticesIndices = [];\n        for(var i=0; i<l; i++) r.verticesIndices.push(i);\n\n        \n        self.mesh=new CGL.Mesh(r);\n    });\n\n\n\n};\n\nOps.Gl.Meshes.ObjMesh.prototype = new Op();\n\n\n\n\n\n// ----------------------------------------------------------------\n\n\nOps.Gl.Meshes.Cube = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Cube';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.mesh=null;\n\n    this.render.onTriggered=function()\n    {\n        if(self.mesh!==null)\n        {\n            self.mesh.render(currentShader);\n        }\n\n        self.trigger.call();\n    };\n\n\n    var geom=new CGL.Geometry();\n\n            geom.vertices = [\n            // Front face\n            -1.0, -1.0,  1.0,\n             1.0, -1.0,  1.0,\n             1.0,  1.0,  1.0,\n            -1.0,  1.0,  1.0,\n            // Back face\n            -1.0, -1.0, -1.0,\n            -1.0,  1.0, -1.0,\n             1.0,  1.0, -1.0,\n             1.0, -1.0, -1.0,\n            // Top face\n            -1.0,  1.0, -1.0,\n            -1.0,  1.0,  1.0,\n             1.0,  1.0,  1.0,\n             1.0,  1.0, -1.0,\n            // Bottom face\n            -1.0, -1.0, -1.0,\n             1.0, -1.0, -1.0,\n             1.0, -1.0,  1.0,\n            -1.0, -1.0,  1.0,\n            // Right face\n             1.0, -1.0, -1.0,\n             1.0,  1.0, -1.0,\n             1.0,  1.0,  1.0,\n             1.0, -1.0,  1.0,\n            // Left face\n            -1.0, -1.0, -1.0,\n            -1.0, -1.0,  1.0,\n            -1.0,  1.0,  1.0,\n            -1.0,  1.0, -1.0,\n        ];\n\n        geom.texCoords = [\n          // Front face\n          0.0, 0.0,\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n          // Back face\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n          0.0, 0.0,\n          // Top face\n          0.0, 1.0,\n          0.0, 0.0,\n          1.0, 0.0,\n          1.0, 1.0,\n          // Bottom face\n          1.0, 1.0,\n          0.0, 1.0,\n          0.0, 0.0,\n          1.0, 0.0,\n          // Right face\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n          0.0, 0.0,\n          // Left face\n          0.0, 0.0,\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n        ];\n\n        geom.verticesIndices = [\n            0, 1, 2,      0, 2, 3,    // Front face\n            4, 5, 6,      4, 6, 7,    // Back face\n            8, 9, 10,     8, 10, 11,  // Top face\n            12, 13, 14,   12, 14, 15, // Bottom face\n            16, 17, 18,   16, 18, 19, // Right face\n            20, 21, 22,   20, 22, 23  // Left face\n        ];\n\n\n\n    this.mesh=new CGL.Mesh(geom);\n\n\n\n};\n\nOps.Gl.Meshes.Cube.prototype = new Op();\n\n\n\n\n\n// ----------------------------------------------------------------\n\n\nOps.Gl.Meshes.Plotter = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Plotter';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.v=this.addInPort(new Port(this,\"value\"));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        // currentShader.setAttributeVertex( self.buffer.itemSize);\n        gl.vertexAttribPointer(currentShader.getAttrVertexPos(),self.buffer.itemSize, gl.FLOAT, false, 0, 0);\n        currentShader.bind();\n        gl.bindBuffer(gl.ARRAY_BUFFER, self.buffer);\n        gl.drawArrays(gl.LINE_STRIP, 0, self.buffer.numItems);\n\n        self.trigger.call();\n    };\n\n    this.buffer = gl.createBuffer();\n    \n    var num=50;\n    this.vertices = [];\n    for(var i=0;i<num;i++)\n    {\n        this.vertices.push(1/num*i);\n        this.vertices.push(Math.random()-0.5);\n        this.vertices.push(0);\n    }\n\n    function bufferData()\n    {\n        gl.lineWidth(4);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, self.buffer);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(self.vertices), gl.STATIC_DRAW);\n        self.buffer.itemSize = 3;\n        self.buffer.numItems = num;\n    }\n    bufferData();\n\n    this.v.onValueChanged=function()\n    {\n        self.vertices.splice(0,3);\n        self.vertices.push(1);\n        self.vertices.push(self.v.val);\n        self.vertices.push(0);\n\n        for(var i=0;i<num*3;i+=3)\n        {\n            self.vertices[i]=1/num*i;\n        }\n\n        bufferData();\n    };\n\n\n};\n\nOps.Gl.Meshes.Plotter.prototype = new Op();\n\n\n// ----------------------------------------------------------------\n\nOps.Gl.Meshes.Triangle = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Triangle';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        self.mesh.render(currentShader);\n        self.trigger.call();\n    };\n\n    var geom=new CGL.Geometry();\n    geom.vertices = [\n         0.0,  1.0,  0.0,\n        -1.0,  -1.0,  0.0,\n         1.0, -1.0,  0.0\n    ];\n\n    geom.verticesIndices = [\n        0, 1, 2\n    ];\n    this.mesh=new CGL.Mesh(geom);\n};\n\nOps.Gl.Meshes.Triangle.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.Shader={};\n\nOps.Gl.Shader.BasicMaterial = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='BasicMaterial';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n\n    this.doRender=function()\n    {\n        var oldShader=currentShader;\n        currentShader=shader;\n\n        if(self.texture.val)\n        {\n            gl.activeTexture(gl.TEXTURE0);\n            gl.bindTexture(gl.TEXTURE_2D, self.texture.val);\n        }\n\n        self.trigger.call();\n\n        currentShader=oldShader;\n    };\n\n    var srcFrag=''+\n        'precision highp float;\\n'+\n        '#ifdef HAS_TEXTURES\\n'+\n        '  varying vec2 texCoord;\\n'+\n        '  uniform sampler2D tex;\\n'+\n        '#endif\\n'+\n        'uniform float r;\\n'+\n        'uniform float g;\\n'+\n        'uniform float b;\\n'+\n        'uniform float a;\\n'+\n        '\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        'vec4 col=vec4(r,g,b,a);\\n'+\n        '#ifdef HAS_TEXTURES\\n'+\n        '   col=texture2D(tex,texCoord);\\n'+\n        'col.a*=a;'.endl()+\n        '#endif\\n'+\n        'gl_FragColor = col;\\n'+\n        '}\\n';\n\n\n    var shader=new CGL.Shader();\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n\n\n\n\n    this.r=this.addInPort(new Port(this,\"r\"));\n    this.r.onValueChanged=function()\n    {\n        if(!self.r.uniform) self.r.uniform=new CGL.Uniform(shader,'f','r',self.r.val);\n        else self.r.uniform.setValue(self.r.val);\n    };\n\n    this.g=this.addInPort(new Port(this,\"g\"));\n    this.g.onValueChanged=function()\n    {\n        if(!self.g.uniform) self.g.uniform=new CGL.Uniform(shader,'f','g',self.g.val);\n        else self.g.uniform.setValue(self.g.val);\n    };\n\n    this.b=this.addInPort(new Port(this,\"b\"));\n    this.b.onValueChanged=function()\n    {\n        if(!self.b.uniform) self.b.uniform=new CGL.Uniform(shader,'f','b',self.b.val);\n        else self.b.uniform.setValue(self.b.val);\n    };\n\n    this.a=this.addInPort(new Port(this,\"a\"));\n    this.a.onValueChanged=function()\n    {\n        if(!self.a.uniform) self.a.uniform=new CGL.Uniform(shader,'f','a',self.a.val);\n        else self.a.uniform.setValue(self.a.val);\n    };\n\n    this.r.val=Math.random();\n    this.g.val=Math.random();\n    this.b.val=Math.random();\n    this.a.val=1.0;\n\n    this.render.onTriggered=this.doRender;\n    this.texture=this.addInPort(new Port(this,\"texture\",OP_PORT_TYPE_TEXTURE));\n    this.texture.onValueChanged=function()\n    {\n        if(self.texture.val)\n        {\n            console.log('TEXTURE ADDED');\n            self.textureUniform=new CGL.Uniform(shader,'t','tex',0);\n        }\n        else\n        {\n            shader.removeUniform('tex');\n        }\n    };\n\n    this.doRender();\n};\n\nOps.Gl.Shader.BasicMaterial.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Shader.Schwurbel = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Schwurbel';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.timer=this.addInPort(new Port(this,\"time\"));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.doRender=function()\n    {\n        currentShader=shader;\n        if(!self.timer.uniLoc)\n        {\n            shader.bind();\n            self.timer.uniLoc=gl.getUniformLocation(shader.getProgram(), \"time\");\n        }\n        gl.uniform1f(self.timer.uniLoc, self.timer.val);\n\n        self.trigger.call();\n    };\n\n    var srcFrag=''+\n        'precision mediump float;\\n'+\n        'uniform float time;\\n'+\n        '\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        'float c=sqrt(sin(time*0.02)*cos((time+gl_FragCoord.y)*0.02)+sin(time+gl_FragCoord.x*0.02)*sin(time+gl_FragCoord.y*0.02));\\n'+\n        'gl_FragColor = vec4( c,c,c,1.0);\\n'+\n        '}\\n';\n\n    var shader=new CGL.Shader();\n    shader.compile(shader.getDefaultVertexShader(),srcFrag);\n\n    this.doRender();\n    this.render.onTriggered=this.doRender;\n};\n\nOps.Gl.Shader.Schwurbel.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Shader.Noise = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Noise';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var timeUniform=-1;\n    var timeStart=-1;\n\n    this.doRender=function()\n    {\n        if(timeUniform==-1)\n        {\n            timeStart=Date.now();\n            shader.bind();\n            timeUniform=gl.getUniformLocation(shader.getProgram(), \"time\");\n        }\n\n        gl.uniform1f(timeUniform, (Date.now()-timeStart)/1000);\n        currentShader=shader;\n\n        self.trigger.call();\n    };\n\n    var srcFrag=''+\n        'precision mediump float;\\n'+\n        'uniform float time;\\n'+\n        '\\n'+\n        'float random(vec2 co)\\n'+\n        '{\\n'+\n        '   return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\\n'+\n        '}\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        '   float c=random(time*gl_FragCoord.xy);'+\n        '   gl_FragColor = vec4( c,c,c,1.0);\\n'+\n        '}\\n';\n\n\n    var shader=new CGL.Shader();\n    shader.compile(shader.getDefaultVertexShader(),srcFrag);\n\n    this.doRender();\n    this.render.onTriggered=this.doRender;\n};\n\nOps.Gl.Shader.Noise.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.Matrix={};\n\n\nOps.Gl.Matrix.Translate = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='translate';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.x=this.addInPort(new Port(this,\"x\"));\n    this.y=this.addInPort(new Port(this,\"y\"));\n    this.z=this.addInPort(new Port(this,\"z\"));\n    this.x.val=0.0;\n    this.y.val=0.0;\n    this.z.val=0.0;\n    \n    var vec=vec3.create();\n\n    this.render.onTriggered=function()\n    {\n        vec3.set(vec, self.x.val,self.y.val,self.z.val);\n\n        mat4.translate(mvMatrix,mvMatrix, vec);\n        self.trigger.call();\n    };\n\n};\n\nOps.Gl.Matrix.Translate.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Matrix.Scale = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='scale';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.scale=this.addInPort(new Port(this,\"scale\"));\n    \n    var vScale=vec3.create();\n    var oldMatrix = mat4.create();\n    var transMatrix = mat4.create();\n    mat4.identity(transMatrix);\n\n    var doScale=false;\n\n    this.render.onTriggered=function()\n    {\n        mat4.copy(oldMatrix, mvMatrix);\n\n        mat4.multiply(mvMatrix,mvMatrix,transMatrix);\n\n        self.trigger.call();\n\n        mat4.copy(mvMatrix,oldMatrix);\n    };\n\n    var updateMatrix=function()\n    {\n        mat4.identity(transMatrix);\n        mat4.scale(transMatrix,transMatrix, vScale);\n    };\n\n    this.scaleChanged=function()\n    {\n        doScale=false;\n        //if(self.scaleX.val!==0.0 || self.scaleY.val!==0.0 || self.scaleZ.val!==0.0)doScale=true;\n        vec3.set(vScale, self.scale.val,self.scale.val,self.scale.val);\n        updateMatrix();\n    };\n\n    this.scale.onValueChanged=this.scaleChanged;\n\n    this.scale.val=1.0;\n\n    updateMatrix();\n};\n\nOps.Gl.Matrix.Scale.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.Matrix.Transform = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    this.name='transform';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.posX=this.addInPort(new Port(this,\"posX\"));\n    this.posY=this.addInPort(new Port(this,\"posY\"));\n    this.posZ=this.addInPort(new Port(this,\"posZ\"));\n\n    this.scaleX=this.addInPort(new Port(this,\"scaleX\"));\n    this.scaleY=this.addInPort(new Port(this,\"scaleY\"));\n    this.scaleZ=this.addInPort(new Port(this,\"scaleZ\"));\n\n    this.rotX=this.addInPort(new Port(this,\"rotX\"));\n    this.rotY=this.addInPort(new Port(this,\"rotY\"));\n    this.rotZ=this.addInPort(new Port(this,\"rotZ\"));\n    \n    var vPos=vec3.create();\n    var vScale=vec3.create();\n    var oldMatrix = mat4.create();\n    var transMatrix = mat4.create();\n    mat4.identity(transMatrix);\n\n    var doScale=false;\n    var doTranslate=false;\n\n    this.render.onTriggered=function()\n    {\n        mat4.copy(oldMatrix, mvMatrix);\n\n        mat4.multiply(mvMatrix,mvMatrix,transMatrix);\n\n        self.trigger.call();\n\n        mat4.copy(mvMatrix,oldMatrix);\n    };\n\n    var updateMatrix=function()\n    {\n        mat4.identity(transMatrix);\n        if(doTranslate)mat4.translate(transMatrix,transMatrix, vPos);\n\n        if(self.rotX.val!==0)mat4.rotateX(transMatrix,transMatrix, self.rotX.val*CGL.DEG2RAD);\n        if(self.rotY.val!==0)mat4.rotateY(transMatrix,transMatrix, self.rotY.val*CGL.DEG2RAD);\n        if(self.rotZ.val!==0)mat4.rotateZ(transMatrix,transMatrix, self.rotZ.val*CGL.DEG2RAD);\n\n        if(doScale)mat4.scale(transMatrix,transMatrix, vScale);\n    };\n\n    this.translateChanged=function()\n    {\n        doTranslate=false;\n        if(self.posX.val!==0.0 || self.posY.val!==0.0 || self.posZ.val!==0.0)doTranslate=true;\n        vec3.set(vPos, self.posX.val,self.posY.val,self.posZ.val);\n        updateMatrix();\n    };\n\n    this.scaleChanged=function()\n    {\n        doScale=false;\n        if(self.scaleX.val!==0.0 || self.scaleY.val!==0.0 || self.scaleZ.val!==0.0)doScale=true;\n        vec3.set(vScale, self.scaleX.val,self.scaleY.val,self.scaleZ.val);\n        updateMatrix();\n    };\n\n    this.rotChanged=function()\n    {\n        updateMatrix();\n    };\n\n    this.rotX.onValueChanged=this.rotChanged;\n    this.rotY.onValueChanged=this.rotChanged;\n    this.rotZ.onValueChanged=this.rotChanged;\n\n    this.scaleX.onValueChanged=this.scaleChanged;\n    this.scaleY.onValueChanged=this.scaleChanged;\n    this.scaleZ.onValueChanged=this.scaleChanged;\n\n    this.posX.onValueChanged=this.translateChanged;\n    this.posY.onValueChanged=this.translateChanged;\n    this.posZ.onValueChanged=this.translateChanged;\n\n    this.rotX.val=0.0;\n    this.rotY.val=0.0;\n    this.rotZ.val=0.0;\n\n    this.scaleX.val=1.0;\n    this.scaleY.val=1.0;\n    this.scaleZ.val=1.0;\n\n    this.posX.val=0.0;\n    this.posY.val=0.0;\n    this.posZ.val=0.0;\n\n    updateMatrix();\n};\n\nOps.Gl.Matrix.Transform.prototype = new Op();\n\n\n\n// ----------------------------------------------------\n\n\nOps.RandomCluster = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='random cluster';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.num=this.addInPort(new Port(this,\"num\"));\n    this.size=this.addInPort(new Port(this,\"size\"));\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION)) ;\n    this.idx=this.addOutPort(new Port(this,\"index\")) ;\n    this.rnd=this.addOutPort(new Port(this,\"rnd\")) ;\n    this.randoms=[];\n    this.randomsRot=[];\n    this.randomsFloats=[];\n\n    var transVec=vec3.create();\n    var oldMatrix = mat4.create();\n\n    this.exe.onTriggered=function()\n    {\n        mat4.copy(oldMatrix, mvMatrix);\n\n        for(var i=0;i<self.randoms.length;i++)\n        {\n            mat4.translate(mvMatrix,mvMatrix, self.randoms[i]);\n\n            mat4.rotateX(mvMatrix,mvMatrix, self.randomsRot[i][0]);\n            mat4.rotateY(mvMatrix,mvMatrix, self.randomsRot[i][1]);\n            mat4.rotateZ(mvMatrix,mvMatrix, self.randomsRot[i][2]);\n\n            self.idx.val=i;\n            self.rnd.val=self.randomsFloats[i];\n\n            self.trigger.call();\n            mat4.copy(mvMatrix,oldMatrix);\n\n        }\n\n\n    };\n\n    function reset()\n    {\n        self.randoms=[];\n        self.randomsRot=[];\n        self.randomsFloats=[];\n\n        for(var i=0;i<self.num.val;i++)\n        {\n            self.randomsFloats.push(Math.random());\n            self.randoms.push(vec3.fromValues(\n                (Math.random()-0.5)*self.size.val,\n                (Math.random()-0.5)*self.size.val,\n                (Math.random()-0.5)*self.size.val\n                ));\n            self.randomsRot.push(vec3.fromValues(\n                Math.random()*360*CGL.DEG2RAD,\n                Math.random()*360*CGL.DEG2RAD,\n                Math.random()*360*CGL.DEG2RAD\n                ));\n        }\n    }\n\n    this.num.onValueChanged=reset;\n    this.size.onValueChanged=reset;\n\n    this.num.val=100;\n\n\n};\nOps.RandomCluster.prototype = new Op();\n\n\n\n\n\n","// https://github.com/automat/foam-gl\n// http://howlerjs.com/\n//http://learningwebgl.com/lessons/lesson01/index.html\n\n\nOps.Log = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='logger';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.input=this.addInPort(new Port(this,\"input\"));\n    this.input.val='';\n\n    this.exec=function()\n    {\n        console.log(\"[log] \" + self.input.val);\n    };\n\n    this.exe.onTriggered=this.exec;\n    this.input.onValueChanged=this.exec;\n};\nOps.Log.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\n\nOps.CallsPerSecond = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='CallsPerSecond';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.timeStart=0;\n    this.cps=0;\n\n    this.exe.onTriggered=function()\n    {\n        if(self.timeStart===0)self.timeStart=Date.now();\n        var now = Date.now();\n\n        if(now-self.timeStart>1000)\n        {\n            self.timeStart=Date.now();\n            console.log('cps: '+self.cps);\n            self.cps=0;\n        }\n\n        self.cps++;\n    };\n};\nOps.CallsPerSecond.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\nOps.Value = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Value';\n    this.v=this.addInPort(new Port(this,\"value\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.v.val;\n    };\n\n    this.v.onValueChanged=this.exec;\n};\n\nOps.Value.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\n\nOps.TimeLineTime = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='TimeLineTime';\n    this.theTime=this.addOutPort(new Port(this,\"time\"));\n\n    this.onAnimFrame=function(time)\n    {\n        this.theTime.val=time;\n    };\n\n};\nOps.TimeLineTime.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\n\n\n\nOps.Repeat = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Repeat';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.num=this.addInPort(new Port(this,\"num\"));\n    this.num.val=5;\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n    this.idx=this.addOutPort(new Port(this,\"index\"));\n\n    this.exe.onTriggered=function()\n    {\n\n        for(var i=0;i<self.num.value;i++)\n        {\n            self.idx.val=i;\n            self.trigger.call();\n        }\n\n    };\n};\nOps.Repeat.prototype = new Op();\n\n\n\n\n// ---------------------------------------------------------------------------\n\n\nOps.IfTrueThen = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='if true then';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.bool=this.addInPort(new Port(this,\"boolean\"));\n    this.bool.val=false;\n\n    this.triggerThen=this.addOutPort(new Port(this,\"then\",OP_PORT_TYPE_FUNCTION));\n    this.triggerElse=this.addOutPort(new Port(this,\"else\",OP_PORT_TYPE_FUNCTION));\n\n    this.exe.onTriggered=function()\n    {\n        if(self.bool.val===true)\n        {\n            self.triggerThen.call();\n        }\n        else\n        {\n            self.triggerElse.call();\n        }\n    };\n\n    this.bool.onValueChanged=function()\n    {\n        self.exe.onTriggered();\n    };\n\n};\nOps.IfTrueThen.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------\n\n\nOps.Group = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='group';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.triggers=[];\n\n    for(var i=0;i<10;i++)\n    {\n        this.triggers.push( this.addOutPort(new Port(this,\"trigger \"+i,OP_PORT_TYPE_FUNCTION)) );\n    }\n\n    this.exe.onTriggered=function()\n    {\n        for(var i in self.triggers)\n        {\n            self.triggers[i].call();\n        }\n\n    };\n\n\n};\nOps.Group.prototype = new Op();\n\n\n\n\n// ---------------------------------------------------------------------------\n\nOps.Interval = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='Interval';\n    this.timeOutId=-1;\n    this.interval=this.addInPort(new Port(this,\"interval\"));\n    this.interval.val=1000;\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.exec=function()\n    {\n        if(this.timeOutId!=-1)return;\n        var self=this;\n\n        this.timeOutId=setTimeout(function()\n        {\n            self.timeOutId=-1;\n            self.trigger.call();\n            self.exec();\n        },\n        this.interval.val );\n    };\n\n    this.exec();\n\n};\n\nOps.Interval.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\n// --------------------------------------------------------------------------\n\nOps.Anim={};\n\nOps.Anim.SinusAnim = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='SinusAnim';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    var self=this;\n\n    this.exe.onTriggered=function()\n    {\n        self.result.val=Math.sin(Date.now()/1000.0);\n    };\n\n    this.exe.onTriggered();\n\n};\n\nOps.Anim.SinusAnim.prototype = new Op();\n\n\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Anim.RelativeTime = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='RelativeTime';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    var self=this;\n    var startTime=Date.now()/1000.0;\n\n    this.exe.onTriggered=function()\n    {\n        self.result.val=Date.now()/1000.0-startTime;\n    };\n\n    this.exe.onTriggered();\n\n};\n\nOps.Anim.RelativeTime.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\nOps.Input={};\n\nOps.Input.GamePad = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='GamePad';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.numPads=this.addOutPort(new Port(this,\"numPads\"));\n    this.axis1=this.addOutPort(new Port(this,\"axis1\"));\n    this.axis2=this.addOutPort(new Port(this,\"axis2\"));\n    this.axis3=this.addOutPort(new Port(this,\"axis3\"));\n    this.axis4=this.addOutPort(new Port(this,\"axis4\"));\n    this.button0=this.addOutPort(new Port(this,\"button0\"));\n    this.button1=this.addOutPort(new Port(this,\"button1\"));\n    this.button2=this.addOutPort(new Port(this,\"button2\"));\n    this.button3=this.addOutPort(new Port(this,\"button3\"));\n    this.button4=this.addOutPort(new Port(this,\"button4\"));\n\n    var self=this;\n    var startTime=Date.now()/1000.0;\n\n    this.exe.onTriggered=function()\n    {\n        var gamePads=navigator.getGamepads();\n        var count=0;\n\n        for(var gp in gamePads)\n        {\n            if(gamePads[gp].axes)\n            {\n                self.axis1.val=gamePads[gp].axes[0];\n                self.axis2.val=gamePads[gp].axes[1];\n                self.axis3.val=gamePads[gp].axes[2];\n                self.axis4.val=gamePads[gp].axes[3];\n\n                self.button0.val=gamePads[gp].buttons[0].pressed;\n                self.button0.val=gamePads[gp].buttons[1].pressed;\n                self.button2.val=gamePads[gp].buttons[2].pressed;\n                self.button3.val=gamePads[gp].buttons[3].pressed;\n                self.button4.val=gamePads[gp].buttons[4].pressed;\n\n                count++;\n            }\n        }\n\n        self.numPads.val=count;\n    };\n\n    this.exe.onTriggered();\n\n};\n\nOps.Input.GamePad.prototype = new Op();\n\n","\n// TODO: CLAMP!\n\nOps.Math={};\n\n\nOps.Math.Random = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='random';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.exe.onTriggered=function()\n    {\n        self.result.val=Math.random();\n    };\n\n    this.exe.onTriggered();\n};\n\nOps.Math.Random.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Clamp = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='Clamp';\n    this.val=this.addInPort(new Port(this,\"val\"));\n    this.min=this.addInPort(new Port(this,\"min\"));\n    this.max=this.addInPort(new Port(this,\"max\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    function clamp()\n    {\n        self.result.val= Math.min(Math.max(self.val.val, self.min.val), self.max.val);\n    }\n\n    this.min.val=0;\n    this.max.val=1;\n\n    this.val.onValueChanged=clamp;\n    this.min.onValueChanged=clamp;\n    this.max.onValueChanged=clamp;\n\n    this.val.val=0.5;\n};\n\nOps.Math.Clamp.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\nOps.Math.SmoothStep = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='SmoothStep';\n    this.val=this.addInPort(new Port(this,\"val\"));\n    this.min=this.addInPort(new Port(this,\"min\"));\n    this.max=this.addInPort(new Port(this,\"max\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    function smoothstep ()\n    {\n        var x = Math.max(0,Math.min(1,(self.val.val-self.min.val)/(self.max.val-self.min.val)));\n        self.result.val=x*x*(3-2*x);\n    }\n\n    this.min.val=0;\n    this.max.val=1;\n    \n    this.val.onValueChanged=smoothstep;\n    this.min.onValueChanged=smoothstep;\n    this.max.onValueChanged=smoothstep;\n\n    this.val.val=0.5;\n};\n\nOps.Math.SmoothStep.prototype = new Op();\n\n// ----------------------------------------------------------------------------\n\n\nOps.Math.MapRange = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='map value range';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.v=this.addInPort(new Port(this,\"value\"));\n    this.old_min=this.addInPort(new Port(this,\"old min\"));\n    this.old_max=this.addInPort(new Port(this,\"old max\"));\n    this.new_min=this.addInPort(new Port(this,\"new min\"));\n    this.new_max=this.addInPort(new Port(this,\"new max\"));\n\n    this.exec= function()\n    {\n        if(self.v.val>self.old_max.val)\n        {\n            self.result.val=self.new_max.val;\n            return;\n        }\n        else\n        if(self.v.val<self.old_min.val)\n        {\n            self.result.val=self.new_min.val;\n            return;\n        }\n\n        var nMin=parseFloat(self.new_min.val);\n        var nMax=parseFloat(self.new_max.val);\n        var oMin=parseFloat(self.old_min.val);\n        var oMax=parseFloat(self.old_max.val);\n        var x=parseFloat(self.v.val);\n\n        var reverseInput = false;\n        var oldMin = Math.min( oMin, oMax );\n        var oldMax = Math.max( oMin, oMax );\n        if(oldMin!= oMin) reverseInput = true;\n\n        var reverseOutput = false;\n        var newMin = Math.min( nMin, nMax );\n        var newMax = Math.max( nMin, nMax );\n        if(newMin != nMin) reverseOutput = true;\n\n        var portion=0;\n\n        if(reverseInput) portion = (oldMax-x)*(newMax-newMin)/(oldMax-oldMin);\n            else portion = (x-oldMin)*(newMax-newMin)/(oldMax-oldMin);\n        \n        if(reverseOutput) self.result.val = newMax - portion;\n            else self.result.val = portion + newMin;\n\n    };\n\n    this.v.val=0;\n    this.old_min.val=-1;\n    this.old_max.val=1;\n    this.new_min.val=0;\n    this.new_max.val=1;\n\n\n    this.v.onValueChanged=this.exec;\n    this.old_min.onValueChanged=this.exec;\n    this.old_max.onValueChanged=this.exec;\n    this.new_min.onValueChanged=this.exec;\n    this.new_max.onValueChanged=this.exec;\n\n    this.exec();\n\n};\n\nOps.Math.MapRange.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Abs = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    this.name='abs';\n    this.number=this.addInPort(new Port(this,\"number\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.number.onValueChanged=function()\n    {\n        self.result.val=Math.abs(self.number.val);\n    };\n};\n\nOps.Math.Abs.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Sin = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    this.name='Sinus';\n    this.number=this.addInPort(new Port(this,\"number\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.number.onValueChanged=function()\n    {\n        self.result.val=Math.sin(self.number.val);\n    };\n};\n\nOps.Math.Sin.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Sum = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='sum';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=parseFloat(self.number1.val)+parseFloat(self.number2.val);\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Sum.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Multiply = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='multiply';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val*self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n\n};\n\nOps.Math.Multiply.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Divide = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Divide';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val/self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Divide.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\nOps.Math.Compare={};\n\n\n\n\nOps.Math.Compare.IsEven = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='isEven';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n\n    this.exec= function()\n    {\n        self.result.val=!( self.number1.val & 1 );\n    };\n\n    this.number1.onValueChanged=this.exec;\n};\n\nOps.Math.Compare.IsEven.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Math.Compare.Greater = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Greater';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val>self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Compare.Greater.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Math.Compare.Between = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Between';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number=this.addInPort(new Port(this,\"value\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n    this.number.val=2.0;\n    this.number1.val=1.0;\n    this.number2.val=3.0;\n\n    this.exec= function()\n    {\n        self.result.val=\n            (\n                self.number.val>Math.min(self.number1.val,self.number2.val) &&\n                self.number.val<Math.max(self.number1.val,self.number2.val)\n            );\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n    this.number.onValueChanged=this.exec;\n};\nOps.Math.Compare.Between.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Math.Compare.Lesser = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Lesser';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val<self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n\n};\n\nOps.Math.Compare.Lesser.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Math.Compare.Equals = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Equals';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val==self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Compare.Equals.prototype = new Op();\n\n"],"sourceRoot":"/source/"}