{"version":3,"sources":["timer.js","utils.js","cgl_mesh.js","cgl_shader.js","cgl_texture.js","holo.js","ops.gl.js","ops.js","ops.math.js"],"names":["Timer","getTime","lastTime","Date","now","timeStart","timeOffset","self","this","currentTime","paused","update","togglePlay","play","pause","setOffset","val","generateUUID","d","uuid","replace","c","r","Math","random","floor","toString","ajaxRequest","url","callback","request","XMLHttpRequest","open","responseType","onload","e","target","response","send","CGL","Mesh","geom","bufTexCoords","bufVertices","gl","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","vertices","STATIC_DRAW","itemSize","numItems","length","bufVerticesIndizes","ELEMENT_ARRAY_BUFFER","Uint16Array","verticesIndices","texCoords","render","shader","bind","GL","enableVertexAttribArray","getAttrVertexPos","getAttrTexCoords","vertexAttribPointer","FLOAT","drawElements","TRIANGLES","UNSIGNED_SHORT","Geometry","faceVertCount","texCoordsIndices","parseOBJ","buff","_readline","a","off","s","String","fromCharCode","groups","c_norms","i_norms","cg","from","to","Uint8Array","line","cds","split","x","parseFloat","y","z","push","v0a","v1a","v2a","vi0","parseInt","vi1","vi2","ui0","ui1","ui2","ni0","ni1","ni2","vlen","ulen","nlen","v3a","vi3","ui3","ni3","Uniform","_shader","_type","_name","_value","loc","name","type","value","needsUpdate","addUniform","getType","getName","resetLoc","updateValueF","getUniformLocation","getProgram","uniform1f","setValueF","v","updateValueT","console","log","uniform1i","setValueT","setValue","updateValue","Shader","program","uniforms","needsRecompile","removeUniform","i","splice","uni","getDefaultVertexShader","getDefaultFragmentShader","srcVert","srcFrag","setSource","projMatrixUniform","mvMatrixUniform","attrTexCoords","attrVertexPos","hasTextureUniforms","compile","defines","endl","vs","fs","vshader","createShader","VERTEX_SHADER","fshader","linkProgram","createProgram","getAttribLocation","useProgram","uniformMatrix4fv","pMatrix","mvMatrix","str","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","FRAGMENT_SHADER","getShaderInfoLog","getProgramParameter","LINK_STATUS","getProgramInfoLog","vstr","fstr","attachShader","Texture","tex","createTexture","slot","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","setSize","w","h","arr","uarr","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR","texImage2D","RGBA","UNSIGNED_BYTE","initTexture","img","image","TEXTURE_MAG_FILTER","NEAREST","load","texture","Image","src","PORT_DIR_IN","PORT_DIR_OUT","OP_PORT_TYPE_VALUE","OP_PORT_TYPE_FUNCTION","OP_PORT_TYPE_TEXTURE","Ops","Op","objName","portsOut","portsIn","posts","uiAttribs","id","addOutPort","p","direction","parent","addInPort","execute","exec","printInfo","ipo","removeLinks","getPort","ipi","findFittingPort","otherPort","Link","canLink","getSerialized","op","getPortByName","Port","links","valueBeforeLink","__defineGetter__","__defineSetter__","onValueChanged","onTriggered","addLink","l","isLinkedTo","p2","portIn","portOut","call","goals","getTypeString","obj","remove","removeLink","link","scene","onUnLink","p1","objIn","objOut","canLinkText","Scene","ops","timer","animFrameOps","clear","deleteOp","addOp","eval","hasOwnProperty","onAdd","opid","onDelete","requestAnimationFrame","time","onAnimFrame","op1","port1Name","op2","port2Name","port1","port2","onLink","serialize","JSON","stringify","getOpById","deSerialize","opinid","opoutid","inName","outName","found","parse","iop","port","ipi2","ili","prototype","Gl","currentShader","mat4","create","Renderer","apply","arguments","simpleShader","trigger","initTranslate","vec3","set","enable","DEPTH_TEST","clearColor","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","viewport","canvas","clientWidth","clientHeight","perspective","identity","translate","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","document","getElementById","getContext","ClearColor","g","b","ClearDepth","TextureEmpty","width","height","textureOut","sizeChanged","filename","Meshes","Rectangle","mesh","ObjMesh","unwrap","ind","crd","cpi","ncrd","Array","j","Cube","Plotter","lineWidth","buffer","num","drawArrays","LINE_STRIP","Triangle","BasicMaterial","doRender","oldShader","uniform","textureUniform","Schwurbel","uniLoc","Noise","timeUniform","Matrix","Translate","vec","Scale","scale","vScale","oldMatrix","transMatrix","doScale","copy","multiply","updateMatrix","scaleChanged","Transform","DEG2RAD","posX","posY","posZ","scaleX","scaleY","scaleZ","rotX","rotY","rotZ","vPos","doTranslate","rotateX","rotateY","rotateZ","translateChanged","rotChanged","Log","exe","input","CallsPerSecond","cps","Value","result","TimeLineTime","theTime","Repeat","idx","IfTrueThen","bool","triggerThen","triggerElse","Group","triggers","Interval","timeOutId","interval","setTimeout","Anim","SinusAnim","sin","RelativeTime","startTime","Input","GamePad","numPads","axis1","axis2","axis3","axis4","button0","button1","button2","button3","button4","gamePads","navigator","getGamepads","count","gp","axes","buttons","pressed","Random","MapRange","old_min","old_max","new_min","new_max","nMin","nMax","oMin","oMax","reverseInput","oldMin","min","oldMax","max","reverseOutput","newMin","newMax","portion","Abs","number","abs","Sin","Sum","number1","number2","Multiply","Divide","Compare","IsEven","Greater","Between","Lesser","Equals"],"mappings":"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","file":"cables.min.js","sourcesContent":["\n\nfunction Timer()\n{\n    var self=this;\n    var timeStart=Date.now();\n    var timeOffset=0;\n\n    var currentTime=0;\n    var lastTime=0;\n    var paused=true;\n\n    function getTime()\n    {\n        lastTime=(Date.now()-timeStart)/1000;\n        return lastTime+timeOffset;\n\n    }\n\n    this.update=function()\n    {\n        if(paused) return;\n        currentTime=getTime();\n\n        return currentTime;\n    };\n\n    this.getTime=function()\n    {\n        return currentTime;\n    };\n\n    this.togglePlay=function()\n    {\n        if(paused)self.play();\n            else self.pause();\n    };\n\n    this.setOffset=function(val)\n    {\n        if(currentTime+val<0)\n        {\n            timeStart=Date.now();\n            timeOffset=0;\n            currentTime=0;\n        }\n        else\n        {\n            timeOffset+=val;\n            currentTime=lastTime+timeOffset;\n        }\n        \n\n    };\n\n    this.play=function()\n    {\n        timeStart=Date.now();\n        paused=false;\n    };\n\n    this.pause=function()\n    {\n        timeOffset=currentTime;\n        paused=true;\n    };\n\n}","function generateUUID()\n{\n    var d = new Date().getTime();\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c)\n    {\n        var r = (d + Math.random()*16)%16 | 0;\n        d = Math.floor(d/16);\n        return (c=='x' ? r : (r&0x3|0x8)).toString(16);\n    });\n    return uuid;\n}\n\n// ----------------------------------------------------------------\nfunction ajaxRequest(url, callback)\n{\n    var request = new XMLHttpRequest();\n    request.open(\"GET\", url, true);\n    request.responseType = \"arraybuffer\";\n    request.onload = function(e)\n    {\n        callback(e.target.response);\n    };\n    request.send();\n}\n\nString.prototype.endl = function(){return this+'\\n';};\n\n\n","var CGL=CGL || {};\n\nCGL.Mesh=function(geom)\n{\n    var bufTexCoords=-1;\n    // var bufTexCoordsIndizes=-1;\n\n    var bufVertices = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, bufVertices);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(geom.vertices), gl.STATIC_DRAW);\n    bufVertices.itemSize = 3;\n    bufVertices.numItems = geom.vertices.length/3;\n\n\n    var bufVerticesIndizes = gl.createBuffer();\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufVerticesIndizes);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(geom.verticesIndices), gl.STATIC_DRAW);\n    bufVerticesIndizes.itemSize = 1;\n    bufVerticesIndizes.numItems = geom.verticesIndices.length;\n\n    if(geom.texCoords.length>0)\n    {\n        bufTexCoords = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, bufTexCoords);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(geom.texCoords), gl.STATIC_DRAW);\n        bufTexCoords.itemSize = 2;\n        bufTexCoords.numItems = geom.texCoords.length/bufTexCoords.itemSize;\n    }\n\n\n\n    this.render=function(shader)\n    {\n        shader.bind();\n\n        GL.enableVertexAttribArray(shader.getAttrVertexPos());\n        if(bufTexCoords!=-1) GL.enableVertexAttribArray(shader.getAttrTexCoords());\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, bufVertices);\n        gl.vertexAttribPointer(shader.getAttrVertexPos(),bufVertices.itemSize, gl.FLOAT, false, 0, 0);\n\n        if(bufTexCoords!=-1)\n        {\n            gl.bindBuffer(gl.ARRAY_BUFFER, bufTexCoords);\n            gl.vertexAttribPointer(shader.getAttrTexCoords(),bufTexCoords.itemSize, gl.FLOAT, false, 0, 0);\n        }\n\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufVerticesIndizes);\n        gl.drawElements(gl.TRIANGLES, bufVerticesIndizes.numItems, gl.UNSIGNED_SHORT, 0);\n    };\n\n};\n\nCGL.Geometry=function()\n{\n    this.faceVertCount=3;\n    this.vertices=[];\n    this.verticesIndices=[];\n    this.texCoords=[];\n    this.texCoordsIndices=[];\n};\n\nparseOBJ = function(buff)\n{\n\n    _readline = function(a, off)  // Uint8Array, offset\n    {\n        var s = \"\";\n        while(a[off] != 10) s += String.fromCharCode(a[off++]);\n        return s;\n    };\n\n    var geom = new CGL.Geometry();\n    geom.groups = {};\n    \n    // geom.texCoords   = [];\n    geom.c_norms = [];\n    \n    // geom.texCoordsIndices   = [];\n    geom.i_norms = [];\n    \n    var cg = {from: 0, to:0};   // current group\n    var off = 0;\n    var a = new Uint8Array(buff);\n    \n    while(off < a.length)\n    {\n        var line = _readline(a, off);\n        off += line.length + 1;\n        line = line.replace(/ +(?= )/g,'');\n        line = line.replace(/(^\\s+|\\s+$)/g, '');\n        var cds = line.split(\" \");\n        if(cds[0] == \"g\")\n        {\n            cg.to = geom.verticesIndices.length;\n            if(geom.groups[cds[1]] == null) geom.groups[cds[1]] = {from:geom.verticesIndices.length, to:0};\n            cg = geom.groups[cds[1]];\n        }\n        if(cds[0] == \"v\")\n        {\n            var x = parseFloat(cds[1]);\n            var y = parseFloat(cds[2]);\n            var z = parseFloat(cds[3]);\n            geom.vertices.push(x,y,z);\n        }\n        if(cds[0] == \"vt\")\n        {\n            var x = parseFloat(cds[1]);\n            var y = 1-parseFloat(cds[2]);\n            geom.texCoords.push(x,y);\n        }\n        if(cds[0] == \"vn\")\n        {\n            var x = parseFloat(cds[1]);\n            var y = parseFloat(cds[2]);\n            var z = parseFloat(cds[3]);\n            geom.c_norms.push(x,y,z);\n        }\n        if(cds[0] == \"f\")\n        {\n            var v0a = cds[1].split(\"/\"), v1a = cds[2].split(\"/\"), v2a = cds[3].split(\"/\");\n            var vi0 = parseInt(v0a[0])-1, vi1 = parseInt(v1a[0])-1, vi2 = parseInt(v2a[0])-1;\n            var ui0 = parseInt(v0a[1])-1, ui1 = parseInt(v1a[1])-1, ui2 = parseInt(v2a[1])-1;\n            var ni0 = parseInt(v0a[2])-1, ni1 = parseInt(v1a[2])-1, ni2 = parseInt(v2a[2])-1;\n            \n            var vlen = geom.vertices.length/3, ulen = geom.texCoords.length/2, nlen = geom.c_norms.length/3;\n            if(vi0<0) vi0 = vlen + vi0+1; if(vi1<0) vi1 = vlen + vi1+1; if(vi2<0) vi2 = vlen + vi2+1;\n            if(ui0<0) ui0 = ulen + ui0+1; if(ui1<0) ui1 = ulen + ui1+1; if(ui2<0) ui2 = ulen + ui2+1;\n            if(ni0<0) ni0 = nlen + ni0+1; if(ni1<0) ni1 = nlen + ni1+1; if(ni2<0) ni2 = nlen + ni2+1;\n            \n            geom.verticesIndices.push(vi0, vi1, vi2);  //cg.verticesIndices.push(vi0, vi1, vi2)\n            geom.texCoordsIndices  .push(ui0, ui1, ui2);  //cg.texCoordsIndices  .push(ui0, ui1, ui2);\n            geom.i_norms.push(ni0, ni1, ni2);  //cg.i_norms.push(ni0, ni1, ni2);\n            if(cds.length == 5)\n            {\n                var v3a = cds[4].split(\"/\");\n                var vi3 = parseInt(v3a[0])-1, ui3 = parseInt(v3a[1])-1, ni3 = parseInt(v3a[2])-1;\n                if(vi3<0) vi3 = vlen + vi3+1;\n                if(ui3<0) ui3 = ulen + ui3+1;\n                if(ni3<0) ni3 = nlen + ni3+1;\n                geom.verticesIndices.push(vi0, vi2, vi3);  //cg.verticesIndices.push(vi0, vi2, vi3);\n                geom.texCoordsIndices  .push(ui0, ui2, ui3);  //cg.texCoordsIndices  .push(ui0, ui2, ui3);\n                geom.i_norms.push(ni0, ni2, ni3);  //cg.i_norms.push(ni0, ni2, ni3);\n            }\n        }\n    }\n    cg.to = geom.verticesIndices.length;\n    \n    return geom;\n};\n\n\n","var CGL=CGL || {};\n\n// ---------------------------------------------------------------------------\n\nCGL.Uniform=function(_shader,_type,_name,_value)\n{\n    var self=this;\n    var loc=-1;\n    var name=_name;\n    var type=_type;\n    var value=0;\n    var shader=_shader;\n    this.needsUpdate=true;\n\n    shader.addUniform(this);\n\n    this.getType=function() {return type;};\n    this.getName=function() {return name;};\n\n    this.resetLoc=function() { loc=-1;};\n\n    this.updateValueF=function()\n    {\n        if(loc==-1) loc=gl.getUniformLocation(shader.getProgram(), name);\n        gl.uniform1f(loc, value);\n    };\n\n    this.setValueF=function(v)\n    {\n        self.needsUpdate=true;\n        value=v;\n    };\n\n    this.updateValueT=function()\n    {\n        if(loc==-1)\n        {\n            loc=gl.getUniformLocation(shader.getProgram(), name);\n            if(loc==-1) console.log('texture loc unknown!!');\n        }\n\n        gl.uniform1i(loc, 0);\n    };\n\n    this.setValueT=function(v)\n    {\n        self.needsUpdate=true;\n        value=v;\n    };\n\n    if(type=='f')\n    {\n        this.setValue=this.setValueF;\n        this.updateValue=this.updateValueF;\n    }\n\n    if(type=='t')\n    {\n        this.setValue=this.setValueT;\n        this.updateValue=this.updateValueT;\n    }\n\n    this.setValue(_value);\n};\n\n// ---------------------------------------------------------------------------\n\nCGL.Shader=function()\n{\n    var self=this;\n    var program=false;\n    var uniforms=[];\n    var needsRecompile=true;\n\n    this.removeUniform=function(name)\n    {\n        console.log('before: '+uniforms.length);\n        for(var i in uniforms)\n        {\n            if(uniforms[i].getName()==name)\n            {\n                uniforms.splice(i,1);\n                break;\n            }\n        }\n        needsRecompile=true;\n        console.log(uniforms.length);\n                \n    };\n\n    this.addUniform=function(uni)\n    {\n        uniforms.push(uni);\n        needsRecompile=true;\n    };\n\n    this.getDefaultVertexShader=function()\n    {\n        return ''+\n        'attribute vec3 vPosition;\\n'+\n        'attribute vec2 attrTexCoord;\\n'+\n        'varying vec2 texCoord;\\n'+\n        'uniform mat4 projMatrix;\\n'+\n        'uniform mat4 mvMatrix;\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        '   texCoord=attrTexCoord;\\n'+\n        // '   gl_PointSize=3.0;\\n'+\n        '   gl_Position = projMatrix * mvMatrix * vec4(vPosition,  1.0);\\n'+\n        '}\\n';\n    };\n\n    this.getDefaultFragmentShader=function()\n    {\n        return ''+\n        'precision mediump float;\\n'+\n        'void main()\\n'+\n        '{\\n'+\n\n        '   gl_FragColor = vec4(0.5,0.5,0.5,1.0);\\n'+\n        '}\\n';\n    };\n\n    this.srcVert=this.getDefaultVertexShader();\n    this.srcFrag=this.getDefaultFragmentShader();\n\n    this.setSource=function(srcVert,srcFrag)\n    {\n        this.srcVert=srcVert;\n        this.srcFrag=srcFrag;\n    };\n\n    var projMatrixUniform=-1;\n    var mvMatrixUniform=-1;\n\n    var attrTexCoords = -1;\n    var attrVertexPos = -1;\n\n    this.getAttrTexCoords=function(){return attrTexCoords;};\n    this.getAttrVertexPos=function(){return attrVertexPos;};\n\n    this.hasTextureUniforms=function()\n    {\n        for(var i in uniforms)\n        {\n            if(uniforms[i].getType()=='t') return true;\n        }\n        return false;\n    };\n\n    this.compile=function()\n    {\n        var defines='';\n        if(self.hasTextureUniforms()) defines+='#define HAS_TEXTURES'.endl();\n\n        console.log('shader compile...');\n        console.log('has textures: '+self.hasTextureUniforms() );\n        \n\n        var vs=defines+self.srcVert;\n        var fs=defines+self.srcFrag;\n\n        if(!program)\n        {\n            console.log('create shaderprogram');\n                    \n            program=createProgram(vs,fs, program);\n        }\n        else\n        {\n            console.log('recompile shaders...');\n\n            self.vshader=createShader(vs, gl.VERTEX_SHADER, self.vshader );\n            self.fshader=createShader(fs, gl.VERTEX_SHADER, self.fshader );\n            linkProgram(program);\n            mvMatrixUniform=-1;\n\n            for(var i in uniforms)uniforms[i].resetLoc();\n            \n\n        }\n\n        needsRecompile=false;\n    };\n\n    this.bind=function()\n    {\n        if(!program || needsRecompile) self.compile();\n\n        if(mvMatrixUniform==-1)\n        {\n            attrTexCoords = gl.getAttribLocation(program, 'attrTexCoord');\n            attrVertexPos = gl.getAttribLocation(program, 'vPosition');\n\n            projMatrixUniform = gl.getUniformLocation(program, \"projMatrix\");\n            mvMatrixUniform = gl.getUniformLocation(program, \"mvMatrix\");\n        }\n\n        GL.useProgram(program);\n\n        for(var i in uniforms)\n        {\n            if(uniforms[i].needsUpdate)uniforms[i].updateValue();\n        }\n\n        gl.uniformMatrix4fv(projMatrixUniform, false, pMatrix);\n        gl.uniformMatrix4fv(mvMatrixUniform, false, mvMatrix);\n    };\n\n    this.getProgram=function()\n    {\n        return program;\n    };\n\n\n    createShader =function(str, type,_shader)\n    {\n        var shader = _shader || gl.createShader(type);\n        gl.shaderSource(shader, str);\n        gl.compileShader(shader);\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\n        {\n            console.log('compile status: ');\n\n            if(type==gl.VERTEX_SHADER)console.log('VERTEX_SHADER');\n            if(type==gl.FRAGMENT_SHADER)console.log('FRAGMENT_SHADER');\n            \n            throw gl.getShaderInfoLog(shader);\n        }\n        return shader;\n    };\n\n    linkProgram=function(program)\n    {\n        gl.linkProgram(program);\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS))\n        {\n            throw gl.getProgramInfoLog(program);\n        }\n\n    };\n\n    createProgram=function(vstr, fstr)\n    {\n        var program = gl.createProgram();\n        self.vshader = createShader(vstr, gl.VERTEX_SHADER);\n        self.fshader = createShader(fstr, gl.FRAGMENT_SHADER);\n        gl.attachShader(program, self.vshader);\n        gl.attachShader(program, self.fshader);\n\n        linkProgram(program);\n        return program;\n    };\n\n\n\n};\n\n","var CGL=CGL || {};\n\nCGL.Texture=function()\n{\n    var self=this;\n    this.tex = gl.createTexture();\n\n    // gl.bindTexture(gl.TEXTURE_2D, this.tex);\n    // gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([111, 111, 111, 255]));\n    // gl.bindTexture(gl.TEXTURE_2D, null);\n\n    this.bind=function(slot)\n    {\n        gl.activeTexture(gl.TEXTURE0+slot);\n        gl.bindTexture(gl.TEXTURE_2D, self.tex);\n    };\n\n    this.setSize=function(w,h)\n    {\n        gl.bindTexture(gl.TEXTURE_2D, self.tex);\n        \n        var arr=[];\n        for(var x=0;x<w;x++)\n        {\n            for(var y=0;y<h;y++)\n            {\n                // var index=x+y*w;\n                arr.push( parseInt( (x/w)*255,10) );\n                arr.push(0);\n                arr.push( parseInt((y/w)*255,10));\n                arr.push(255);\n            }\n        }\n        var uarr=new Uint8Array(arr);\n\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, w, h, 0, gl.RGBA, gl.UNSIGNED_BYTE, uarr);\n\n        gl.bindTexture(gl.TEXTURE_2D, null);\n    };\n\n    this.initTexture=function(img)\n    {\n        gl.bindTexture(gl.TEXTURE_2D, self.tex);\n        // gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, self.image);\n\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\n        // non power of two:\n        // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n\n        gl.bindTexture(gl.TEXTURE_2D, null);\n    };\n\n    this.setSize(8,8);\n};\n\nCGL.Texture.load=function(url)\n{\n    var texture=new CGL.Texture();\n    texture.image = new Image();\n    texture.image.onload = function ()\n    {\n        console.log(texture.image);\n                \n        texture.initTexture(texture.image);\n    };\n    texture.image.src = url;\n    return texture;\n};\n\n// ---------------------------------------------------------------------------\n","\nvar PORT_DIR_IN=0;\nvar PORT_DIR_OUT=1;\n\nvar OP_PORT_TYPE_VALUE =0;\nvar OP_PORT_TYPE_FUNCTION =1;\nvar OP_PORT_TYPE_TEXTURE =2;\n\nvar Ops = {};\n\n\nvar Op = function()\n{\n    this.objName='';\n    this.portsOut=[];\n    this.portsIn=[];\n    this.posts=[];\n    this.uiAttribs={};\n    this.name='unknown';\n    this.id=generateUUID();\n\n    this.getName= function()\n    {\n        return this.name;\n    };\n    this.addOutPort=function(p)\n    {\n        p.direction=PORT_DIR_OUT;\n        p.parent=this;\n        this.portsOut.push(p);\n        return p;\n    };\n    this.addInPort=function(p)\n    {\n        p.direction=PORT_DIR_IN;\n        p.parent=this;\n        this.portsIn.push(p);\n        return p;\n    };\n    this.execute=function()\n    {\n        this.exec();\n    };\n    this.printInfo=function()\n    {\n        for(var i=0;i<this.portsIn.length;i++)\n            console.log('in: '+this.portsIn[i].getName());\n\n        for(var ipo in this.portsOut)\n            console.log('out: '+this.portsOut[ipo].getName());\n    };\n\n    this.removeLinks=function()\n    {\n        for(var i=0;i<this.portsIn.length;i++)\n            this.portsIn[i].removeLinks();\n        for(var ipo in this.portsOut)\n            this.portsOut[ipo].removeLinks();\n    };\n\n    this.getPort=function(name)\n    {\n        for(var ipi in this.portsIn)\n            if(this.portsIn[ipi].getName()==name)return this.portsIn[ipi];\n\n        for(var ipo in this.portsOut)\n            if(this.portsOut[ipo].getName()==name)return this.portsOut[ipo];\n    };\n\n    this.findFittingPort=function(otherPort)\n    {\n        for(var ipo in this.portsOut)\n        {\n            console.log('.');\n            if(Link.canLink(otherPort,this.portsOut[ipo]))return this.portsOut[ipo];\n        }\n    \n        for(var ipi in this.portsIn)\n        {\n            console.log('.');\n            if(Link.canLink(otherPort,this.portsIn[ipi]))return this.portsIn[ipi];\n        }\n\n    };\n\n\n    this.getSerialized=function()\n    {\n        var op={};\n        op.name=this.getName();\n        op.objName=this.objName;\n        op.id=this.id;\n        op.uiAttribs=this.uiAttribs;\n\n        op.portsIn=[];\n        op.portsOut=[];\n\n        for(var i=0;i<this.portsIn.length;i++)\n            op.portsIn.push( this.portsIn[i].getSerialized() );\n\n        for(var ipo in this.portsOut)\n            op.portsOut.push( this.portsOut[ipo].getSerialized() );\n\n        return op;\n    };\n\n    this.getPortByName=function(name)\n    {\n        for(var i=0;i<this.portsIn.length;i++)\n            if(this.portsIn[i].name==name)return this.portsIn[i];\n        \n        for(var ipo in this.portsOut)\n            if(this.portsOut[ipo].name==name)return this.portsOut[ipo];\n    };\n\n};\n\n// ------------------------------------------------------------------------------------\n\nvar Port=function(parent,name,type)\n{\n    var self=this;\n    this.direction=PORT_DIR_IN;\n    this.id=generateUUID();\n    this.parent=parent;\n    this.links=[];\n    this.value=null;\n    this.name=name;\n    this.type=type || OP_PORT_TYPE_VALUE;\n    var valueBeforeLink=null;\n\n    this.__defineGetter__(\"val\", function()\n    {\n        return this.value;\n    });\n\n    this.__defineSetter__(\"val\", function(v)\n    {\n        this.setValue(v);\n    });\n\n    this.onValueChanged=function(){};\n    this.onTriggered=function(){};\n\n    this.setValue=function(v)\n    {\n        if(v!=this.value)\n        {\n            this.value=v;\n            this.onValueChanged();\n\n            for(var i in this.links)\n            {\n                this.links[i].setValue();\n            }\n        }\n    };\n\n    this.getName= function()\n    {\n        return this.name;\n    };\n\n    this.addLink=function(l)\n    {\n        valueBeforeLink=self.value;\n        this.links.push(l);\n    };\n\n    this.isLinkedTo=function(p2)\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i].portIn==p2 || this.links[i].portOut==p2)return true;\n        }\n        return false;\n    };\n\n    this.call=function()\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i].portIn !=this)this.links[i].portIn.onTriggered();\n            if(this.links[i].portOut!=this)this.links[i].portOut.onTriggered();\n        }\n    };\n\n\n    this.execute=function()\n    {\n        console.log('### execute port: '+this.getName() , this.goals.length);\n    };\n\n    this.getTypeString=function()\n    {\n        if(this.type==OP_PORT_TYPE_VALUE)return 'value';\n        if(this.type==OP_PORT_TYPE_FUNCTION)return 'function';\n        if(this.type==OP_PORT_TYPE_TEXTURE)return 'texture';\n    };\n\n    this.getSerialized=function()\n    {\n        var obj={};\n        obj.name=this.getName();\n        obj.value=this.value;\n\n        if(this.direction==PORT_DIR_IN && this.links.length>0)\n        {\n            obj.links=[];\n            for(var i in this.links)\n            {\n                obj.links.push( this.links[i].getSerialized() );\n            }\n        }\n        return obj;\n    };\n\n    this.removeLinks=function()\n    {\n        while(this.links.length>0)\n        {\n            this.links[0].remove();\n        }\n    };\n\n    this.removeLink=function(link)\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i]==link)this.links.splice( i, 1 );\n        }\n        self.setValue(valueBeforeLink);\n    };\n};\n\n\n\n// ---------------------------------------------------------------------------\n\nvar Link = function(scene)\n{\n    this.portIn=null;\n    this.portOut=null;\n    this.scene=scene;\n\n    this.setValue=function()\n    {\n        if(this.portIn.val!=this.portOut.val)\n            this.portIn.val=this.portOut.val;\n    };\n\n    this.remove=function()\n    {\n        this.portIn.removeLink(this);\n        this.portOut.removeLink(this);\n        this.scene.onUnLink(this.portIn,this.portOut);\n        this.portIn=null;\n        this.portOut=null;\n        this.scene=null;\n    };\n\n\n    this.link=function(p1,p2)\n    {\n        if(!Link.canLink(p1,p2))\n        {\n            console.log('cannot link ports!');\n            return false;\n        }\n        if(p1.direction==PORT_DIR_IN)\n        {\n            this.portIn=p1;\n            this.portOut=p2;\n        }\n        else\n        {\n            this.portIn=p2;\n            this.portOut=p1;\n        }\n\n        p1.addLink(this);\n        p2.addLink(this);\n        this.setValue();\n    };\n\n    this.getSerialized=function()\n    {\n        var obj={};\n\n        obj.portIn=this.portIn.getName();\n        obj.portOut=this.portOut.getName();\n        obj.objIn=this.portIn.parent.id;\n        obj.objOut=this.portOut.parent.id;\n\n        return obj;\n    };\n};\n\n\nLink.canLinkText=function(p1,p2)\n{\n    if(!p1)return 'can not link: port 1 invalid';\n    if(!p2)return 'can not link: port 2 invalid';\n    if(p1.direction==PORT_DIR_IN && p1.links.length>0)return 'input port already busy';\n    if(p2.direction==PORT_DIR_IN && p2.links.length>0)return 'input port already busy';\n    if(p1.isLinkedTo(p2))return 'ports already linked';\n    if(p1.direction==p2.direction)return 'can not link: same direction';\n    if(p1.type!=p2.type)return 'can not link: different type';\n    if(p1.parent==p2.parent)return 'can not link: same op';\n    return 'can link';\n};\n\nLink.canLink=function(p1,p2)\n{\n    if(!p1)return false;\n    if(!p2)return false;\n    if(p1.direction==PORT_DIR_IN && p1.links.length>0)return false;\n    if(p2.direction==PORT_DIR_IN && p2.links.length>0)return false;\n    if(p1.isLinkedTo(p2))return false;\n    if(p1.direction==p2.direction)return false;\n    if(p1.type!=p2.type)return false;\n    if(p1.parent==p2.parent)return false;\n\n    return true;\n};\n\n\n// ------------------------------------------------------------------------------------\n\n\nvar Scene = function()\n{\n    var self=this;\n    this.ops=[];\n    this.timer=new Timer();\n    this.animFrameOps=[];\n    \n\n    this.clear=function()\n    {\n        this.timer=new Timer();\n        while(this.ops.length>0)\n        {\n            this.deleteOp(this.ops[0].id);\n        }\n    };\n\n    this.addOp=function(objName,uiAttribs)\n    {\n        var op=eval('new '+objName+'();');\n        op.objName=objName;\n        op.uiAttribs=uiAttribs;\n\n        if(op.hasOwnProperty('onAnimFrame')) this.animFrameOps.push(op);\n\n        this.ops.push(op);\n        if(this.onAdd)this.onAdd(op);\n        return op;\n    };\n\n    this.deleteOp=function(opid)\n    {\n        for(var i in this.ops)\n        {\n            if(this.ops[i].id==opid)\n            {\n                this.ops[i].removeLinks();\n                this.onDelete(this.ops[i]);\n                this.ops.splice( i, 1 );\n            }\n        }\n    };\n\n    this.exec=function()\n    {\n        requestAnimationFrame(self.exec);\n        self.timer.update();\n\n        var time=self.timer.getTime();\n\n        for(var i in self.animFrameOps)\n        {\n            self.animFrameOps[i].onAnimFrame(time);\n        }\n\n    };\n\n    this.link=function(op1,port1Name,op2,port2Name)\n    {\n        var port1=op1.getPort(port1Name);\n        var port2=op2.getPort(port2Name);\n\n        if(Link.canLink(port1,port2))\n        {\n            var link=new Link(this);\n            link.link(port1,port2);\n            this.onLink(port1,port2);\n            return link;\n        }\n        else\n        {\n            console.log(Link.canLinkText(port1,port2));\n        }\n    };\n    this.onAdd=function(op){};\n    this.onDelete=function(op){};\n    this.onLink=function(p1,p2){};\n    this.onUnLink=function(p1,p2){};\n    this.serialize=function()\n    {\n        var obj={};\n\n        obj.ops=[];\n        for(var i in this.ops)\n        {\n            obj.ops.push( this.ops[i].getSerialized() );\n        }\n        \n        return JSON.stringify(obj);\n    };\n    this.getOpById=function(opid)\n    {\n        for(var i in this.ops)\n        {\n            if(this.ops[i].id==opid)return this.ops[i];\n        }\n\n    };\n    this.deSerialize=function(obj)\n    {\n        if (typeof obj === \"string\") obj=JSON.parse(obj);\n        var self=this;\n\n        function addLink(opinid,opoutid,inName,outName)\n        {\n            var found=false;\n            if(!found)\n            {\n                self.link(\n                    self.getOpById(opinid),\n                    inName,\n                    self.getOpById(opoutid),\n                    outName\n                    );\n            }\n        }\n\n        // add ops...\n        for(var iop in obj.ops)\n        {\n            var op=this.addOp(obj.ops[iop].objName,obj.ops[iop].uiAttribs);\n            op.id=obj.ops[iop].id;\n\n            for(var ipi in obj.ops[iop].portsIn)\n            {\n                var port=op.getPortByName(obj.ops[iop].portsIn[ipi].name);\n                if(port && port.type!=OP_PORT_TYPE_TEXTURE)port.val=obj.ops[iop].portsIn[ipi].value;\n            }\n\n            for(var ipo in obj.ops[iop].portsOut)\n            {\n                var port2=op.getPortByName(obj.ops[iop].portsOut[ipo].name);\n                if(port2&& port2.type!=OP_PORT_TYPE_TEXTURE)port2.val=obj.ops[iop].portsOut[ipo].value;\n            }\n\n\n            // op.uiAttribs=obj.ops[iop].uiAttribs;\n        }\n\n        // create links...\n        for(iop in obj.ops)\n        {\n            for(var ipi2 in obj.ops[iop].portsIn)\n            {\n\n                for(var ili in obj.ops[iop].portsIn[ipi2].links)\n                {\n                    addLink(\n                        obj.ops[iop].portsIn[ipi2].links[ili].objIn,\n                        obj.ops[iop].portsIn[ipi2].links[ili].objOut,\n                        obj.ops[iop].portsIn[ipi2].links[ili].portIn,\n                        obj.ops[iop].portsIn[ipi2].links[ili].portOut);\n                }\n            }\n\n\n            // for(var ipo in obj.ops[iop].portsOut)\n            // {\n            //     for(var ili in obj.ops[iop].portsOut[ipo].links)\n            //     {\n            //         addLink(\n            //             obj.ops[iop].portsOut[ipo].links[ili].objIn,\n            //             obj.ops[iop].portsOut[ipo].links[ili].objOut,\n            //             obj.ops[iop].portsOut[ipo].links[ili].portIn,\n            //             obj.ops[iop].portsOut[ipo].links[ili].portOut);\n\n            //     }\n            // }\n        }\n\n\n        for(var i in this.ops)\n        {\n            this.ops[i].id=generateUUID();\n        }\n\n\n\n    };\n\n    this.exec();\n\n};\n\n\n\n\n","//http://k3d.ivank.net/K3D.js\n//http://fhtr.blogspot.de/2009/12/3d-models-and-parsing-binary-data-with.html\n//https://github.com/gpjt/webgl-lessons/blob/master/lesson05/index.html\n\nOps.Gl={};\nvar GL=null;\nvar GL=null;\n\nvar currentShader=null;\n\nvar mvMatrix = mat4.create();\nvar pMatrix = mat4.create();\n\nOps.Gl.Renderer = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    var simpleShader=new CGL.Shader();\n \n\n    this.name='WebGL Renderer';\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var initTranslate=vec3.create();\n    vec3.set(initTranslate, 0,0,-2);\n\n    this.onAnimFrame=function(time)\n    {\n        currentShader=simpleShader;\n        gl.enable(gl.DEPTH_TEST);\n        GL.clearColor(0,0,0,1);\n        GL.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n        gl.viewport(0,0,self.canvas.clientWidth,self.canvas.clientHeight);\n        mat4.perspective(pMatrix,45, self.canvas.clientWidth/self.canvas.clientHeight, 0.01, 1100.0);\n        mat4.identity(mvMatrix);\n        mat4.translate(mvMatrix,mvMatrix, initTranslate);\n\n        GL.enable(GL.BLEND);\n        GL.blendFunc(GL.SRC_ALPHA,GL.ONE_MINUS_SRC_ALPHA);\n\n        self.trigger.call();\n    };\n\n    this.canvas = document.getElementById(\"glcanvas\");\n    GL = this.canvas.getContext(\"experimental-webgl\");\n    gl = this.canvas.getContext(\"experimental-webgl\");\n\n};\n\nOps.Gl.Renderer.prototype = new Op();\n\n\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.ClearColor = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='ClearColor';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.r=this.addInPort(new Port(this,\"r\"));\n    this.g=this.addInPort(new Port(this,\"g\"));\n    this.b=this.addInPort(new Port(this,\"b\"));\n\n    this.render.onTriggered=function()\n    {\n        GL.clearColor(self.r.val,self.g.val,self.b.val,1);\n        GL.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n\n        self.trigger.call();\n    };\n\n};\n\nOps.Gl.ClearColor.prototype = new Op();\n\n\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.ClearDepth = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='ClearDepth';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        GL.clear(GL.DEPTH_BUFFER_BIT);\n        self.trigger.call();\n    };\n};\n\nOps.Gl.ClearDepth.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n    \nOps.Gl.TextureEmpty = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='texture empty';\n    this.width=this.addInPort(new Port(this,\"width\",OP_PORT_TYPE_VALUE));\n    this.height=this.addInPort(new Port(this,\"height\",OP_PORT_TYPE_VALUE));\n\n    this.textureOut=this.addOutPort(new Port(this,\"texture\",OP_PORT_TYPE_TEXTURE));\n    this.tex=new CGL.Texture();\n    \n    var sizeChanged=function()\n    {\n        self.tex.setSize(self.width.val,self.height.val);\n        self.textureOut.val=self.tex.tex;\n    };\n\n    this.width.onValueChanged=sizeChanged;\n    this.height.onValueChanged=sizeChanged;\n\n};\n\nOps.Gl.TextureEmpty.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n    \nOps.Gl.Texture = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='texture';\n    this.filename=this.addInPort(new Port(this,\"file\",OP_PORT_TYPE_VALUE));\n    this.textureOut=this.addOutPort(new Port(this,\"texture\",OP_PORT_TYPE_TEXTURE));\n    \n    this.filename.onValueChanged=function()\n    {\n        console.log('load texture...');\n        self.tex=CGL.Texture.load(self.filename.val);\n        self.textureOut.val=self.tex.tex;\n    };\n\n    this.filename.val='assets/skull.png';\n    // this.filename.onValueChanged();\n    // this.textureOut.val=this.tex.tex;\n};\n\nOps.Gl.Texture.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.Meshes={};\n\n\n\nOps.Gl.Meshes.Rectangle = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='rectangle';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    // this.render.onTriggered=function()\n    // {\n    //     // currentShader.setAttributeVertex( self.squareVertexPositionBuffer.itemSize);\n    //     gl.vertexAttribPointer(currentShader.getAttrVertexPos(),self.squareVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);\n\n    //     currentShader.bind();\n    //     gl.bindBuffer(gl.ARRAY_BUFFER, self.squareVertexPositionBuffer);\n    //     gl.drawArrays(gl.TRIANGLE_STRIP, 0, self.squareVertexPositionBuffer.numItems);\n\n    //     self.trigger.call();\n    // };\n\n    // this.squareVertexPositionBuffer = gl.createBuffer();\n    // gl.bindBuffer(gl.ARRAY_BUFFER, this.squareVertexPositionBuffer);\n    // this.vertices = [\n\n    // ];\n    // gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(this.vertices), gl.STATIC_DRAW);\n    // this.squareVertexPositionBuffer.itemSize = 3;\n    // this.squareVertexPositionBuffer.numItems = 4;\n\n\n    this.render.onTriggered=function()\n    {\n        self.mesh.render(currentShader);\n        self.trigger.call();\n    };\n\n    var geom=new CGL.Geometry();\n    geom.vertices = [\n         1.0,  1.0,  0.0,\n        -1.0,  1.0,  0.0,\n         1.0, -1.0,  0.0,\n        -1.0, -1.0,  0.0\n    ];\n\n    geom.texCoords = [\n         1.0, 1.0,\n         0.0, 1.0,\n         1.0, 0.0,\n         0.0, 0.0\n    ];\n\n    geom.verticesIndices = [\n        0, 1, 2,\n        3, 1, 2\n    ];\n    this.mesh=new CGL.Mesh(geom);\n\n\n};\n\nOps.Gl.Meshes.Rectangle.prototype = new Op();\n\n\n\n\n\n\nOps.Gl.Meshes.ObjMesh = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='OBJ Mesh';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.mesh=null;\n\n    this.render.onTriggered=function()\n    {\n        if(self.mesh)\n        {\n            self.mesh.render(currentShader);\n        }\n\n        self.trigger.call();\n    };\n\n\n    ajaxRequest('assets/skull.obj',function(response)\n    {\n        console.log(response);\n                \n        var r=parseOBJ(response);\n\nunwrap = function(ind, crd, cpi)\n{\n    var ncrd = new Array(Math.floor(ind.length/3)*cpi);\n    for(var i=0; i<ind.length; i++)\n    {\n        for(var j=0; j<cpi; j++)\n        {\n            ncrd[i*cpi+j] = crd[ind[i]*cpi+j];\n        }\n    }\n    return ncrd;\n};\n\nvar l=r.verticesIndices.length;\n        r.vertices = unwrap(r.verticesIndices, r.vertices, 3);\n        r.texCoords = unwrap(r.texCoordsIndices  , r.texCoords  , 2);\n        r.verticesIndices = [];\n        for(var i=0; i<l; i++) r.verticesIndices.push(i);\n\n        \n        self.mesh=new CGL.Mesh(r);\n    });\n\n\n\n};\n\nOps.Gl.Meshes.ObjMesh.prototype = new Op();\n\n\n\n\n\n// ----------------------------------------------------------------\n\n\nOps.Gl.Meshes.Cube = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Cube';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.mesh=null;\n\n    this.render.onTriggered=function()\n    {\n        if(self.mesh!==null)\n        {\n            self.mesh.render(currentShader);\n        }\n\n        self.trigger.call();\n    };\n\n\n    var geom=new CGL.Geometry();\n\n            geom.vertices = [\n            // Front face\n            -1.0, -1.0,  1.0,\n             1.0, -1.0,  1.0,\n             1.0,  1.0,  1.0,\n            -1.0,  1.0,  1.0,\n            // Back face\n            -1.0, -1.0, -1.0,\n            -1.0,  1.0, -1.0,\n             1.0,  1.0, -1.0,\n             1.0, -1.0, -1.0,\n            // Top face\n            -1.0,  1.0, -1.0,\n            -1.0,  1.0,  1.0,\n             1.0,  1.0,  1.0,\n             1.0,  1.0, -1.0,\n            // Bottom face\n            -1.0, -1.0, -1.0,\n             1.0, -1.0, -1.0,\n             1.0, -1.0,  1.0,\n            -1.0, -1.0,  1.0,\n            // Right face\n             1.0, -1.0, -1.0,\n             1.0,  1.0, -1.0,\n             1.0,  1.0,  1.0,\n             1.0, -1.0,  1.0,\n            // Left face\n            -1.0, -1.0, -1.0,\n            -1.0, -1.0,  1.0,\n            -1.0,  1.0,  1.0,\n            -1.0,  1.0, -1.0,\n        ];\n\n        geom.texCoords = [\n          // Front face\n          0.0, 0.0,\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n          // Back face\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n          0.0, 0.0,\n          // Top face\n          0.0, 1.0,\n          0.0, 0.0,\n          1.0, 0.0,\n          1.0, 1.0,\n          // Bottom face\n          1.0, 1.0,\n          0.0, 1.0,\n          0.0, 0.0,\n          1.0, 0.0,\n          // Right face\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n          0.0, 0.0,\n          // Left face\n          0.0, 0.0,\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n        ];\n\n        geom.verticesIndices = [\n            0, 1, 2,      0, 2, 3,    // Front face\n            4, 5, 6,      4, 6, 7,    // Back face\n            8, 9, 10,     8, 10, 11,  // Top face\n            12, 13, 14,   12, 14, 15, // Bottom face\n            16, 17, 18,   16, 18, 19, // Right face\n            20, 21, 22,   20, 22, 23  // Left face\n        ];\n\n\n\n    this.mesh=new CGL.Mesh(geom);\n\n\n\n};\n\nOps.Gl.Meshes.Cube.prototype = new Op();\n\n\n\n\n\n// ----------------------------------------------------------------\n\n\nOps.Gl.Meshes.Plotter = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Plotter';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.v=this.addInPort(new Port(this,\"value\"));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        // currentShader.setAttributeVertex( self.buffer.itemSize);\n        gl.vertexAttribPointer(currentShader.getAttrVertexPos(),self.buffer.itemSize, gl.FLOAT, false, 0, 0);\n        currentShader.bind();\n        gl.bindBuffer(gl.ARRAY_BUFFER, self.buffer);\n        gl.drawArrays(gl.LINE_STRIP, 0, self.buffer.numItems);\n\n        self.trigger.call();\n    };\n\n    this.buffer = gl.createBuffer();\n    \n    var num=50;\n    this.vertices = [];\n    for(var i=0;i<num;i++)\n    {\n        this.vertices.push(1/num*i);\n        this.vertices.push(Math.random()-0.5);\n        this.vertices.push(0);\n    }\n\n    function bufferData()\n    {\n        gl.lineWidth(4);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, self.buffer);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(self.vertices), gl.STATIC_DRAW);\n        self.buffer.itemSize = 3;\n        self.buffer.numItems = num;\n    }\n    bufferData();\n\n    this.v.onValueChanged=function()\n    {\n        self.vertices.splice(0,3);\n        self.vertices.push(1);\n        self.vertices.push(self.v.val);\n        self.vertices.push(0);\n\n        for(var i=0;i<num*3;i+=3)\n        {\n            self.vertices[i]=1/num*i;\n        }\n\n        bufferData();\n    };\n\n\n};\n\nOps.Gl.Meshes.Plotter.prototype = new Op();\n\n\n// ----------------------------------------------------------------\n\nOps.Gl.Meshes.Triangle = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Triangle';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        self.mesh.render(currentShader);\n        self.trigger.call();\n    };\n\n    var geom=new CGL.Geometry();\n    geom.vertices = [\n         0.0,  1.0,  0.0,\n        -1.0,  -1.0,  0.0,\n         1.0, -1.0,  0.0\n    ];\n\n    geom.verticesIndices = [\n        0, 1, 2\n    ];\n    this.mesh=new CGL.Mesh(geom);\n};\n\nOps.Gl.Meshes.Triangle.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.Shader={};\n\nOps.Gl.Shader.BasicMaterial = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='BasicMaterial';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n\n    this.doRender=function()\n    {\n        var oldShader=currentShader;\n        currentShader=shader;\n\n        if(self.texture.val)\n        {\n            gl.activeTexture(gl.TEXTURE0);\n            gl.bindTexture(gl.TEXTURE_2D, self.texture.val);\n        }\n\n        self.trigger.call();\n\n        currentShader=oldShader;\n    };\n\n    var srcFrag=''+\n        'precision highp float;\\n'+\n        '#ifdef HAS_TEXTURES\\n'+\n        '  varying vec2 texCoord;\\n'+\n        '  uniform sampler2D tex;\\n'+\n        '#endif\\n'+\n        'uniform float r;\\n'+\n        'uniform float g;\\n'+\n        'uniform float b;\\n'+\n        'uniform float a;\\n'+\n        '\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        'vec4 col=vec4(r,g,b,a);\\n'+\n        '#ifdef HAS_TEXTURES\\n'+\n        '   col=texture2D(tex,texCoord);\\n'+\n        'col.a*=a;'.endl()+\n        '#endif\\n'+\n        'gl_FragColor = col;\\n'+\n        '}\\n';\n\n\n    var shader=new CGL.Shader();\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n\n\n\n\n    this.r=this.addInPort(new Port(this,\"r\"));\n    this.r.onValueChanged=function()\n    {\n        if(!self.r.uniform) self.r.uniform=new CGL.Uniform(shader,'f','r',self.r.val);\n        else self.r.uniform.setValue(self.r.val);\n    };\n\n    this.g=this.addInPort(new Port(this,\"g\"));\n    this.g.onValueChanged=function()\n    {\n        if(!self.g.uniform) self.g.uniform=new CGL.Uniform(shader,'f','g',self.g.val);\n        else self.g.uniform.setValue(self.g.val);\n    };\n\n    this.b=this.addInPort(new Port(this,\"b\"));\n    this.b.onValueChanged=function()\n    {\n        if(!self.b.uniform) self.b.uniform=new CGL.Uniform(shader,'f','b',self.b.val);\n        else self.b.uniform.setValue(self.b.val);\n    };\n\n    this.a=this.addInPort(new Port(this,\"a\"));\n    this.a.onValueChanged=function()\n    {\n        if(!self.a.uniform) self.a.uniform=new CGL.Uniform(shader,'f','a',self.a.val);\n        else self.a.uniform.setValue(self.a.val);\n    };\n\n    this.r.val=Math.random();\n    this.g.val=Math.random();\n    this.b.val=Math.random();\n    this.a.val=1.0;\n\n    this.render.onTriggered=this.doRender;\n    this.texture=this.addInPort(new Port(this,\"texture\",OP_PORT_TYPE_TEXTURE));\n    this.texture.onValueChanged=function()\n    {\n        if(self.texture.val)\n        {\n            console.log('TEXTURE ADDED');\n            self.textureUniform=new CGL.Uniform(shader,'t','tex',0);\n        }\n        else\n        {\n            shader.removeUniform('tex');\n        }\n    };\n\n    this.doRender();\n};\n\nOps.Gl.Shader.BasicMaterial.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Shader.Schwurbel = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Schwurbel';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.timer=this.addInPort(new Port(this,\"time\"));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.doRender=function()\n    {\n        currentShader=shader;\n        if(!self.timer.uniLoc)\n        {\n            shader.bind();\n            self.timer.uniLoc=gl.getUniformLocation(shader.getProgram(), \"time\");\n        }\n        gl.uniform1f(self.timer.uniLoc, self.timer.val);\n\n        self.trigger.call();\n    };\n\n    var srcFrag=''+\n        'precision mediump float;\\n'+\n        'uniform float time;\\n'+\n        '\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        'float c=sqrt(sin(time*0.02)*cos((time+gl_FragCoord.y)*0.02)+sin(time+gl_FragCoord.x*0.02)*sin(time+gl_FragCoord.y*0.02));\\n'+\n        'gl_FragColor = vec4( c,c,c,1.0);\\n'+\n        '}\\n';\n\n    var shader=new CGL.Shader();\n    shader.compile(shader.getDefaultVertexShader(),srcFrag);\n\n    this.doRender();\n    this.render.onTriggered=this.doRender;\n};\n\nOps.Gl.Shader.Schwurbel.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Shader.Noise = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Noise';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var timeUniform=-1;\n    var timeStart=-1;\n\n    this.doRender=function()\n    {\n        if(timeUniform==-1)\n        {\n            timeStart=Date.now();\n            shader.bind();\n            timeUniform=gl.getUniformLocation(shader.getProgram(), \"time\");\n        }\n\n        gl.uniform1f(timeUniform, (Date.now()-timeStart)/1000);\n        currentShader=shader;\n\n        self.trigger.call();\n    };\n\n    var srcFrag=''+\n        'precision mediump float;\\n'+\n        'uniform float time;\\n'+\n        '\\n'+\n        'float random(vec2 co)\\n'+\n        '{\\n'+\n        '   return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\\n'+\n        '}\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        '   float c=random(time*gl_FragCoord.xy);'+\n        '   gl_FragColor = vec4( c,c,c,1.0);\\n'+\n        '}\\n';\n\n\n    var shader=new CGL.Shader();\n    shader.compile(shader.getDefaultVertexShader(),srcFrag);\n\n    this.doRender();\n    this.render.onTriggered=this.doRender;\n};\n\nOps.Gl.Shader.Noise.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.Matrix={};\n\n\nOps.Gl.Matrix.Translate = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='translate';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.x=this.addInPort(new Port(this,\"x\"));\n    this.y=this.addInPort(new Port(this,\"y\"));\n    this.z=this.addInPort(new Port(this,\"z\"));\n    this.x.val=0.0;\n    this.y.val=0.0;\n    this.z.val=0.0;\n    \n    var vec=vec3.create();\n\n    this.render.onTriggered=function()\n    {\n        vec3.set(vec, self.x.val,self.y.val,self.z.val);\n\n        mat4.translate(mvMatrix,mvMatrix, vec);\n        self.trigger.call();\n    };\n\n};\n\nOps.Gl.Matrix.Translate.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Matrix.Scale = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var DEG2RAD = 3.14159/180.0;\n    this.name='scale';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.scale=this.addInPort(new Port(this,\"scale\"));\n    \n    var vScale=vec3.create();\n    var oldMatrix = mat4.create();\n    var transMatrix = mat4.create();\n    mat4.identity(transMatrix);\n\n    var doScale=false;\n\n    this.render.onTriggered=function()\n    {\n        mat4.copy(oldMatrix, mvMatrix);\n\n        mat4.multiply(mvMatrix,mvMatrix,transMatrix);\n\n        self.trigger.call();\n\n        mat4.copy(mvMatrix,oldMatrix);\n    };\n\n    var updateMatrix=function()\n    {\n        mat4.identity(transMatrix);\n        mat4.scale(transMatrix,transMatrix, vScale);\n    };\n\n    this.scaleChanged=function()\n    {\n        doScale=false;\n        //if(self.scaleX.val!==0.0 || self.scaleY.val!==0.0 || self.scaleZ.val!==0.0)doScale=true;\n        vec3.set(vScale, self.scale.val,self.scale.val,self.scale.val);\n        updateMatrix();\n    };\n\n    this.scale.onValueChanged=this.scaleChanged;\n\n    this.scale.val=1.0;\n\n    updateMatrix();\n};\n\nOps.Gl.Matrix.Scale.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.Matrix.Transform = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var DEG2RAD = 3.14159/180.0;\n    this.name='transform';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.posX=this.addInPort(new Port(this,\"posX\"));\n    this.posY=this.addInPort(new Port(this,\"posY\"));\n    this.posZ=this.addInPort(new Port(this,\"posZ\"));\n\n    this.scaleX=this.addInPort(new Port(this,\"scaleX\"));\n    this.scaleY=this.addInPort(new Port(this,\"scaleY\"));\n    this.scaleZ=this.addInPort(new Port(this,\"scaleZ\"));\n\n    this.rotX=this.addInPort(new Port(this,\"rotX\"));\n    this.rotY=this.addInPort(new Port(this,\"rotY\"));\n    this.rotZ=this.addInPort(new Port(this,\"rotZ\"));\n    \n    var vPos=vec3.create();\n    var vScale=vec3.create();\n    var oldMatrix = mat4.create();\n    var transMatrix = mat4.create();\n    mat4.identity(transMatrix);\n\n    var doScale=false;\n    var doTranslate=false;\n\n    this.render.onTriggered=function()\n    {\n        mat4.copy(oldMatrix, mvMatrix);\n\n        mat4.multiply(mvMatrix,mvMatrix,transMatrix);\n\n        self.trigger.call();\n\n        mat4.copy(mvMatrix,oldMatrix);\n    };\n\n    var updateMatrix=function()\n    {\n        mat4.identity(transMatrix);\n        if(doTranslate)mat4.translate(transMatrix,transMatrix, vPos);\n\n        if(self.rotX.val!==0)mat4.rotateX(transMatrix,transMatrix, self.rotX.val*DEG2RAD);\n        if(self.rotY.val!==0)mat4.rotateY(transMatrix,transMatrix, self.rotY.val*DEG2RAD);\n        if(self.rotZ.val!==0)mat4.rotateZ(transMatrix,transMatrix, self.rotZ.val*DEG2RAD);\n\n        if(doScale)mat4.scale(transMatrix,transMatrix, vScale);\n    };\n\n    this.translateChanged=function()\n    {\n        doTranslate=false;\n        if(self.posX.val!==0.0 || self.posY.val!==0.0 || self.posZ.val!==0.0)doTranslate=true;\n        vec3.set(vPos, self.posX.val,self.posY.val,self.posZ.val);\n        updateMatrix();\n    };\n\n    this.scaleChanged=function()\n    {\n        doScale=false;\n        if(self.scaleX.val!==0.0 || self.scaleY.val!==0.0 || self.scaleZ.val!==0.0)doScale=true;\n        vec3.set(vScale, self.scaleX.val,self.scaleY.val,self.scaleZ.val);\n        updateMatrix();\n    };\n\n    this.rotChanged=function()\n    {\n        updateMatrix();\n    };\n\n    this.rotX.onValueChanged=this.rotChanged;\n    this.rotY.onValueChanged=this.rotChanged;\n    this.rotZ.onValueChanged=this.rotChanged;\n\n    this.scaleX.onValueChanged=this.scaleChanged;\n    this.scaleY.onValueChanged=this.scaleChanged;\n    this.scaleZ.onValueChanged=this.scaleChanged;\n\n    this.posX.onValueChanged=this.translateChanged;\n    this.posY.onValueChanged=this.translateChanged;\n    this.posZ.onValueChanged=this.translateChanged;\n\n    this.rotX.val=0.0;\n    this.rotY.val=0.0;\n    this.rotZ.val=0.0;\n\n    this.scaleX.val=1.0;\n    this.scaleY.val=1.0;\n    this.scaleZ.val=1.0;\n\n    this.posX.val=0.0;\n    this.posY.val=0.0;\n    this.posZ.val=0.0;\n\n    updateMatrix();\n};\n\nOps.Gl.Matrix.Transform.prototype = new Op();\n\n\n\n\n\n","// https://github.com/automat/foam-gl\n// http://howlerjs.com/\n//http://learningwebgl.com/lessons/lesson01/index.html\n\n\nOps.Log = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='logger';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.input=this.addInPort(new Port(this,\"input\"));\n    this.input.val='';\n\n    this.exec=function()\n    {\n        console.log(\"[log] \" + self.input.val);\n    };\n\n    this.exe.onTriggered=this.exec;\n    this.input.onValueChanged=this.exec;\n};\nOps.Log.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\n\nOps.CallsPerSecond = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='CallsPerSecond';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.timeStart=0;\n    this.cps=0;\n\n    this.exe.onTriggered=function()\n    {\n        if(self.timeStart===0)self.timeStart=Date.now();\n        var now = Date.now();\n\n        if(now-self.timeStart>1000)\n        {\n            self.timeStart=Date.now();\n            console.log('cps: '+self.cps);\n            self.cps=0;\n        }\n\n        self.cps++;\n    };\n};\nOps.CallsPerSecond.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\nOps.Value = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Value';\n    this.v=this.addInPort(new Port(this,\"value\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.v.val;\n    };\n\n    this.v.onValueChanged=this.exec;\n};\n\nOps.Value.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\n\nOps.TimeLineTime = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='TimeLineTime';\n    this.theTime=this.addOutPort(new Port(this,\"time\"));\n\n    this.onAnimFrame=function(time)\n    {\n        this.theTime.val=time;\n    };\n\n};\nOps.TimeLineTime.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\n\n\n\nOps.Repeat = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Repeat';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.num=this.addInPort(new Port(this,\"num\"));\n    this.num.val=5;\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n    this.idx=this.addOutPort(new Port(this,\"index\"));\n\n    this.exe.onTriggered=function()\n    {\n\n        for(var i=0;i<self.num.value;i++)\n        {\n            self.idx.val=i;\n            self.trigger.call();\n        }\n\n    };\n};\nOps.Repeat.prototype = new Op();\n\n\n\n\n// ---------------------------------------------------------------------------\n\n\nOps.IfTrueThen = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='if true then';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.bool=this.addInPort(new Port(this,\"boolean\"));\n    this.bool.val=false;\n\n    this.triggerThen=this.addOutPort(new Port(this,\"then\",OP_PORT_TYPE_FUNCTION));\n    this.triggerElse=this.addOutPort(new Port(this,\"else\",OP_PORT_TYPE_FUNCTION));\n\n    this.exe.onTriggered=function()\n    {\n        if(self.bool.val===true)\n        {\n            self.triggerThen.call();\n        }\n        else\n        {\n            self.triggerElse.call();\n        }\n    };\n\n    this.bool.onValueChanged=function()\n    {\n        self.exe.onTriggered();\n    };\n\n};\nOps.IfTrueThen.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------\n\n\nOps.Group = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='group';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.triggers=[];\n\n    for(var i=0;i<10;i++)\n    {\n        this.triggers.push( this.addOutPort(new Port(this,\"trigger \"+i,OP_PORT_TYPE_FUNCTION)) );\n    }\n\n    this.exe.onTriggered=function()\n    {\n        for(var i in self.triggers)\n        {\n            self.triggers[i].call();\n        }\n\n    };\n\n\n};\nOps.Group.prototype = new Op();\n\n\n\n\n\n// ---------------------------------------------------------------------------\n\nOps.Interval = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='Interval';\n    this.timeOutId=-1;\n    this.interval=this.addInPort(new Port(this,\"interval\"));\n    this.interval.val=1000;\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.exec=function()\n    {\n        if(this.timeOutId!=-1)return;\n        var self=this;\n\n        this.timeOutId=setTimeout(function()\n        {\n            self.timeOutId=-1;\n            self.trigger.call();\n            self.exec();\n        },\n        this.interval.val );\n    };\n\n    this.exec();\n\n};\n\nOps.Interval.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\n// --------------------------------------------------------------------------\n\nOps.Anim={};\n\nOps.Anim.SinusAnim = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='SinusAnim';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    var self=this;\n\n    this.exe.onTriggered=function()\n    {\n        self.result.val=Math.sin(Date.now()/1000.0);\n    };\n\n    this.exe.onTriggered();\n\n};\n\nOps.Anim.SinusAnim.prototype = new Op();\n\n\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Anim.RelativeTime = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='RelativeTime';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    var self=this;\n    var startTime=Date.now()/1000.0;\n\n    this.exe.onTriggered=function()\n    {\n        self.result.val=Date.now()/1000.0-startTime;\n    };\n\n    this.exe.onTriggered();\n\n};\n\nOps.Anim.RelativeTime.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\nOps.Input={};\n\nOps.Input.GamePad = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='GamePad';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.numPads=this.addOutPort(new Port(this,\"numPads\"));\n    this.axis1=this.addOutPort(new Port(this,\"axis1\"));\n    this.axis2=this.addOutPort(new Port(this,\"axis2\"));\n    this.axis3=this.addOutPort(new Port(this,\"axis3\"));\n    this.axis4=this.addOutPort(new Port(this,\"axis4\"));\n    this.button0=this.addOutPort(new Port(this,\"button0\"));\n    this.button1=this.addOutPort(new Port(this,\"button1\"));\n    this.button2=this.addOutPort(new Port(this,\"button2\"));\n    this.button3=this.addOutPort(new Port(this,\"button3\"));\n    this.button4=this.addOutPort(new Port(this,\"button4\"));\n\n    var self=this;\n    var startTime=Date.now()/1000.0;\n\n    this.exe.onTriggered=function()\n    {\n        var gamePads=navigator.getGamepads();\n        var count=0;\n\n        for(var gp in gamePads)\n        {\n            if(gamePads[gp].axes)\n            {\n                self.axis1.val=gamePads[gp].axes[0];\n                self.axis2.val=gamePads[gp].axes[1];\n                self.axis3.val=gamePads[gp].axes[2];\n                self.axis4.val=gamePads[gp].axes[3];\n\n                self.button0.val=gamePads[gp].buttons[0].pressed;\n                self.button0.val=gamePads[gp].buttons[1].pressed;\n                self.button2.val=gamePads[gp].buttons[2].pressed;\n                self.button3.val=gamePads[gp].buttons[3].pressed;\n                self.button4.val=gamePads[gp].buttons[4].pressed;\n\n                count++;\n            }\n        }\n\n        self.numPads.val=count;\n    };\n\n    this.exe.onTriggered();\n\n};\n\nOps.Input.GamePad.prototype = new Op();\n\n","Ops.Math={};\n\n\nOps.Math.Random = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='random';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.exe.onTriggered=function()\n    {\n        self.result.val=Math.random();\n    };\n\n    this.exe.onTriggered();\n};\n\nOps.Math.Random.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\n\n\nOps.Math.MapRange = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='map value range';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.v=this.addInPort(new Port(this,\"value\"));\n    this.old_min=this.addInPort(new Port(this,\"old min\"));\n    this.old_max=this.addInPort(new Port(this,\"old max\"));\n    this.new_min=this.addInPort(new Port(this,\"new min\"));\n    this.new_max=this.addInPort(new Port(this,\"new max\"));\n\n    this.exec= function()\n    {\n        if(self.v.val>self.old_max.val)\n        {\n            self.result.val=self.new_max.val;\n            return;\n        }\n        else\n        if(self.v.val<self.old_min.val)\n        {\n            self.result.val=self.new_min.val;\n            return;\n        }\n\n        var nMin=parseFloat(self.new_min.val);\n        var nMax=parseFloat(self.new_max.val);\n        var oMin=parseFloat(self.old_min.val);\n        var oMax=parseFloat(self.old_max.val);\n        var x=parseFloat(self.v.val);\n\n        var reverseInput = false;\n        var oldMin = Math.min( oMin, oMax );\n        var oldMax = Math.max( oMin, oMax );\n        if(oldMin!= oMin) reverseInput = true;\n\n        var reverseOutput = false;\n        var newMin = Math.min( nMin, nMax );\n        var newMax = Math.max( nMin, nMax );\n        if(newMin != nMin) reverseOutput = true;\n\n        var portion=0;\n\n        if(reverseInput) portion = (oldMax-x)*(newMax-newMin)/(oldMax-oldMin);\n            else portion = (x-oldMin)*(newMax-newMin)/(oldMax-oldMin);\n        \n        if(reverseOutput) self.result.val = newMax - portion;\n            else self.result.val = portion + newMin;\n\n    };\n\n    this.v.val=0;\n    this.old_min.val=-1;\n    this.old_max.val=1;\n    this.new_min.val=0;\n    this.new_max.val=1;\n\n\n    this.v.onValueChanged=this.exec;\n    this.old_min.onValueChanged=this.exec;\n    this.old_max.onValueChanged=this.exec;\n    this.new_min.onValueChanged=this.exec;\n    this.new_max.onValueChanged=this.exec;\n\n    this.exec();\n\n};\n\nOps.Math.MapRange.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Abs = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    this.name='abs';\n    this.number=this.addInPort(new Port(this,\"number\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.number.onValueChanged=function()\n    {\n        self.result.val=Math.abs(self.number.val);\n    };\n};\n\nOps.Math.Abs.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Sin = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    this.name='Sinus';\n    this.number=this.addInPort(new Port(this,\"number\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.number.onValueChanged=function()\n    {\n        self.result.val=Math.sin(self.number.val);\n    };\n};\n\nOps.Math.Sin.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Sum = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='sum';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=parseFloat(self.number1.val)+parseFloat(self.number2.val);\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Sum.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Multiply = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='multiply';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val*self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n\n};\n\nOps.Math.Multiply.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Divide = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Divide';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val/self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Divide.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\nOps.Math.Compare={};\n\n\n\n\nOps.Math.Compare.IsEven = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='isEven';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n\n    this.exec= function()\n    {\n        self.result.val=!( self.number1.val & 1 );\n    };\n\n    this.number1.onValueChanged=this.exec;\n};\n\nOps.Math.Compare.IsEven.prototype = new Op();\n\n\n\nOps.Math.Compare.Greater = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Greater';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val>self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Compare.Greater.prototype = new Op();\n\n\n\n\n\n\nOps.Math.Compare.Between = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Between';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number=this.addInPort(new Port(this,\"value\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n    this.number.val=2.0;\n    this.number1.val=1.0;\n    this.number2.val=3.0;\n\n    this.exec= function()\n    {\n        self.result.val=\n            (\n                self.number.val>Math.min(self.number1.val,self.number2.val) &&\n                self.number.val<Math.max(self.number1.val,self.number2.val)\n            );\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n    this.number.onValueChanged=this.exec;\n};\nOps.Math.Compare.Between.prototype = new Op();\n\n\n\n\nOps.Math.Compare.Lesser = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Lesser';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val<self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n\n};\n\nOps.Math.Compare.Lesser.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Math.Compare.Equals = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Equals';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val==self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Compare.Equals.prototype = new Op();\n\n"],"sourceRoot":"/source/"}