{"version":3,"sources":["timer.js","utils.js","cgl_mesh.js","cgl_shader.js","cgl_texture.js","holo.js","ops.gl.js","ops.js","ops.math.js"],"names":["Timer","getTime","lastTime","Date","now","timeStart","timeOffset","self","this","currentTime","paused","update","togglePlay","play","pause","setOffset","val","generateUUID","d","uuid","replace","c","r","Math","random","floor","toString","ajaxRequest","url","callback","request","XMLHttpRequest","open","responseType","onload","e","target","response","send","CGL","Mesh","geom","bufTexCoords","bufVertices","gl","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","vertices","STATIC_DRAW","itemSize","numItems","length","bufVerticesIndizes","ELEMENT_ARRAY_BUFFER","Uint16Array","verticesIndices","texCoords","render","shader","bind","GL","enableVertexAttribArray","getAttrVertexPos","getAttrTexCoords","vertexAttribPointer","FLOAT","drawElements","TRIANGLES","UNSIGNED_SHORT","Geometry","faceVertCount","texCoordsIndices","parseOBJ","buff","_readline","a","off","s","String","fromCharCode","groups","c_norms","i_norms","cg","from","to","Uint8Array","line","cds","split","x","parseFloat","y","z","push","v0a","v1a","v2a","vi0","parseInt","vi1","vi2","ui0","ui1","ui2","ni0","ni1","ni2","vlen","ulen","nlen","v3a","vi3","ui3","ni3","Uniform","_shader","_type","_name","_value","loc","name","type","value","needsUpdate","addUniform","getType","updateValueF","getUniformLocation","getProgram","uniform1f","setValueF","v","updateValueT","console","log","uniform1i","setValueT","setValue","updateValue","Shader","program","uniforms","needsRecompile","uni","getDefaultVertexShader","getDefaultFragmentShader","srcVert","srcFrag","setSource","projMatrixUniform","mvMatrixUniform","attrTexCoords","attrVertexPos","hasTextureUniforms","i","compile","defines","endl","vs","fs","createShader","VERTEX_SHADER","vshader","fshader","createProgram","getAttribLocation","useProgram","uniformMatrix4fv","pMatrix","mvMatrix","str","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","FRAGMENT_SHADER","getShaderInfoLog","vstr","fstr","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","Texture","tex","createTexture","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","slot","activeTexture","TEXTURE0","initTexture","img","image","texParameteri","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","load","texture","Image","src","PORT_DIR_IN","PORT_DIR_OUT","OP_PORT_TYPE_VALUE","OP_PORT_TYPE_FUNCTION","OP_PORT_TYPE_TEXTURE","Ops","Op","objName","portsOut","portsIn","posts","uiAttribs","id","getName","addOutPort","p","direction","parent","addInPort","execute","exec","printInfo","ipo","removeLinks","getPort","ipi","getSerialized","op","getPortByName","Port","links","__defineGetter__","__defineSetter__","onValueChanged","onTriggered","addLink","l","isLinkedTo","p2","portIn","portOut","call","goals","getTypeString","obj","remove","removeLink","link","splice","Link","scene","onUnLink","p1","canLink","objIn","objOut","canLinkText","Scene","ops","timer","animFrameOps","clear","deleteOp","addOp","eval","hasOwnProperty","onAdd","opid","onDelete","requestAnimationFrame","time","onAnimFrame","op1","port1Name","op2","port2Name","port1","port2","onLink","serialize","JSON","stringify","getOpById","deSerialize","opinid","opoutid","inName","outName","found","parse","iop","port","ipi2","ili","prototype","Gl","currentShader","mat4","create","Renderer","apply","arguments","simpleShader","trigger","initTranslate","vec3","set","enable","DEPTH_TEST","clearColor","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","viewport","canvas","clientWidth","clientHeight","perspective","identity","translate","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","document","getElementById","getContext","ClearColor","g","b","ClearDepth","filename","textureOut","Meshes","Rectangle","squareVertexPositionBuffer","drawArrays","TRIANGLE_STRIP","ObjMesh","mesh","unwrap","ind","crd","cpi","ncrd","Array","j","Cube","Plotter","lineWidth","buffer","num","LINE_STRIP","Triangle","BasicMaterial","doRender","uniform","textureUniform","Schwurbel","uniLoc","Noise","timeUniform","Matrix","Translate","vec","Scale","scale","vScale","oldMatrix","transMatrix","doScale","copy","multiply","updateMatrix","scaleChanged","Transform","DEG2RAD","posX","posY","posZ","scaleX","scaleY","scaleZ","rotX","rotY","rotZ","vPos","doTranslate","rotateX","rotateY","rotateZ","translateChanged","rotChanged","Log","exe","input","CallsPerSecond","cps","Value","result","TimeLineTime","theTime","Repeat","idx","IfTrueThen","bool","triggerThen","triggerElse","Group","triggers","Interval","timeOutId","interval","setTimeout","Anim","SinusAnim","sin","RelativeTime","startTime","Input","GamePad","numPads","axis1","axis2","axis3","axis4","button0","button1","button2","button3","button4","gamePads","navigator","getGamepads","count","gp","axes","buttons","pressed","Random","MapRange","old_min","old_max","new_min","new_max","nMin","nMax","oMin","oMax","reverseInput","oldMin","min","oldMax","max","reverseOutput","newMin","newMax","portion","Abs","number","abs","Sin","Sum","number1","number2","Multiply","Divide","Compare","IsEven","Greater","Between","Lesser","Equals"],"mappings":"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","file":"cables.min.js","sourcesContent":["\n\nfunction Timer()\n{\n    var self=this;\n    var timeStart=Date.now();\n    var timeOffset=0;\n\n    var currentTime=0;\n    var lastTime=0;\n    var paused=true;\n\n    function getTime()\n    {\n        lastTime=(Date.now()-timeStart)/1000;\n        return lastTime+timeOffset;\n\n    }\n\n    this.update=function()\n    {\n        if(paused) return;\n        currentTime=getTime();\n\n        return currentTime;\n    };\n\n    this.getTime=function()\n    {\n        return currentTime;\n    };\n\n    this.togglePlay=function()\n    {\n        if(paused)self.play();\n            else self.pause();\n    };\n\n    this.setOffset=function(val)\n    {\n        if(currentTime+val<0)\n        {\n            timeStart=Date.now();\n            timeOffset=0;\n            currentTime=0;\n        }\n        else\n        {\n            timeOffset+=val;\n            currentTime=lastTime+timeOffset;\n        }\n        \n\n    };\n\n    this.play=function()\n    {\n        timeStart=Date.now();\n        paused=false;\n    };\n\n    this.pause=function()\n    {\n        timeOffset=currentTime;\n        paused=true;\n    };\n\n}","function generateUUID()\n{\n    var d = new Date().getTime();\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c)\n    {\n        var r = (d + Math.random()*16)%16 | 0;\n        d = Math.floor(d/16);\n        return (c=='x' ? r : (r&0x3|0x8)).toString(16);\n    });\n    return uuid;\n}\n\n// ----------------------------------------------------------------\nfunction ajaxRequest(url, callback)\n{\n    var request = new XMLHttpRequest();\n    request.open(\"GET\", url, true);\n    request.responseType = \"arraybuffer\";\n    request.onload = function(e)\n    {\n        callback(e.target.response);\n    };\n    request.send();\n}\n\nString.prototype.endl = function(){return this+'\\n';};\n\n\n","var CGL=CGL || {};\n\nCGL.Mesh=function(geom)\n{\n    var bufTexCoords=-1;\n    // var bufTexCoordsIndizes=-1;\n\n    var bufVertices = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, bufVertices);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(geom.vertices), gl.STATIC_DRAW);\n    bufVertices.itemSize = 3;\n    bufVertices.numItems = geom.vertices.length/3;\n\n\n    var bufVerticesIndizes = gl.createBuffer();\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufVerticesIndizes);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(geom.verticesIndices), gl.STATIC_DRAW);\n    bufVerticesIndizes.itemSize = 1;\n    bufVerticesIndizes.numItems = geom.verticesIndices.length;\n\n    if(geom.texCoords.length>0)\n    {\n\n        bufTexCoords = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, bufTexCoords);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(geom.texCoords), gl.STATIC_DRAW);\n        bufTexCoords.itemSize = 2;\n        bufTexCoords.numItems = geom.texCoords.length/bufTexCoords.itemSize;\n\n        // bufTexCoordsIndizes = gl.createBuffer();\n        // gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufTexCoordsIndizes);\n\n        // gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(bufTexCoordsIndizes), gl.STATIC_DRAW);\n        // bufTexCoordsIndizes.itemSize = 1;\n        // bufTexCoordsIndizes.numItems = geom.texCoordsIndices.length;\n    }\n\n\n\n    this.render=function(shader)\n    {\n\n        // shader.setAttributeVertex( bufVertices.itemSize);\n        // shader.setAttributeTexCoord( bufTexCoordsIndizes.itemSize);\n        shader.bind();\n\n\n        GL.enableVertexAttribArray(shader.getAttrVertexPos());\n        if(bufTexCoords!=-1) GL.enableVertexAttribArray(shader.getAttrTexCoords());\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, bufVertices);\n        gl.vertexAttribPointer(shader.getAttrVertexPos(),bufVertices.itemSize, gl.FLOAT, false, 0, 0);\n\n\n        // gl.vertexAttribPointer(shaderProgram.textureCoordAttribute, cubeVertexTextureCoordBuffer.itemSize, gl.FLOAT, false, 0, 0);\n\n        if(bufTexCoords!=-1)\n        {\n            gl.bindBuffer(gl.ARRAY_BUFFER, bufTexCoords);\n            gl.vertexAttribPointer(shader.getAttrTexCoords(),bufTexCoords.itemSize, gl.FLOAT, false, 0, 0);\n        }\n\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufVerticesIndizes);\n        gl.drawElements(gl.TRIANGLES, bufVerticesIndizes.numItems, gl.UNSIGNED_SHORT, 0);\n\n        // gl.drawArrays(gl.POINTS, 0, bufVertices.numItems);\n\n    };\n\n};\n\nCGL.Geometry=function()\n{\n    this.faceVertCount=3;\n    this.vertices=[];\n    this.verticesIndices=[];\n    this.texCoords=[];\n    this.texCoordsIndices=[];\n};\n\nparseOBJ = function(buff)\n{\n\n    _readline = function(a, off)  // Uint8Array, offset\n    {\n        var s = \"\";\n        while(a[off] != 10) s += String.fromCharCode(a[off++]);\n        return s;\n    };\n\n    var geom = new CGL.Geometry();\n    geom.groups = {};\n    \n    // geom.texCoords   = [];\n    geom.c_norms = [];\n    \n    // geom.texCoordsIndices   = [];\n    geom.i_norms = [];\n    \n    var cg = {from: 0, to:0};   // current group\n    var off = 0;\n    var a = new Uint8Array(buff);\n    \n    while(off < a.length)\n    {\n        var line = _readline(a, off);\n        off += line.length + 1;\n        line = line.replace(/ +(?= )/g,'');\n        line = line.replace(/(^\\s+|\\s+$)/g, '');\n        var cds = line.split(\" \");\n        if(cds[0] == \"g\")\n        {\n            cg.to = geom.verticesIndices.length;\n            if(geom.groups[cds[1]] == null) geom.groups[cds[1]] = {from:geom.verticesIndices.length, to:0};\n            cg = geom.groups[cds[1]];\n        }\n        if(cds[0] == \"v\")\n        {\n            var x = parseFloat(cds[1]);\n            var y = parseFloat(cds[2]);\n            var z = parseFloat(cds[3]);\n            geom.vertices.push(x,y,z);\n        }\n        if(cds[0] == \"vt\")\n        {\n            var x = parseFloat(cds[1]);\n            var y = 1-parseFloat(cds[2]);\n            geom.texCoords.push(x,y);\n        }\n        if(cds[0] == \"vn\")\n        {\n            var x = parseFloat(cds[1]);\n            var y = parseFloat(cds[2]);\n            var z = parseFloat(cds[3]);\n            geom.c_norms.push(x,y,z);\n        }\n        if(cds[0] == \"f\")\n        {\n            var v0a = cds[1].split(\"/\"), v1a = cds[2].split(\"/\"), v2a = cds[3].split(\"/\");\n            var vi0 = parseInt(v0a[0])-1, vi1 = parseInt(v1a[0])-1, vi2 = parseInt(v2a[0])-1;\n            var ui0 = parseInt(v0a[1])-1, ui1 = parseInt(v1a[1])-1, ui2 = parseInt(v2a[1])-1;\n            var ni0 = parseInt(v0a[2])-1, ni1 = parseInt(v1a[2])-1, ni2 = parseInt(v2a[2])-1;\n            \n            var vlen = geom.vertices.length/3, ulen = geom.texCoords.length/2, nlen = geom.c_norms.length/3;\n            if(vi0<0) vi0 = vlen + vi0+1; if(vi1<0) vi1 = vlen + vi1+1; if(vi2<0) vi2 = vlen + vi2+1;\n            if(ui0<0) ui0 = ulen + ui0+1; if(ui1<0) ui1 = ulen + ui1+1; if(ui2<0) ui2 = ulen + ui2+1;\n            if(ni0<0) ni0 = nlen + ni0+1; if(ni1<0) ni1 = nlen + ni1+1; if(ni2<0) ni2 = nlen + ni2+1;\n            \n            geom.verticesIndices.push(vi0, vi1, vi2);  //cg.verticesIndices.push(vi0, vi1, vi2)\n            geom.texCoordsIndices  .push(ui0, ui1, ui2);  //cg.texCoordsIndices  .push(ui0, ui1, ui2);\n            geom.i_norms.push(ni0, ni1, ni2);  //cg.i_norms.push(ni0, ni1, ni2);\n            if(cds.length == 5)\n            {\n                var v3a = cds[4].split(\"/\");\n                var vi3 = parseInt(v3a[0])-1, ui3 = parseInt(v3a[1])-1, ni3 = parseInt(v3a[2])-1;\n                if(vi3<0) vi3 = vlen + vi3+1;\n                if(ui3<0) ui3 = ulen + ui3+1;\n                if(ni3<0) ni3 = nlen + ni3+1;\n                geom.verticesIndices.push(vi0, vi2, vi3);  //cg.verticesIndices.push(vi0, vi2, vi3);\n                geom.texCoordsIndices  .push(ui0, ui2, ui3);  //cg.texCoordsIndices  .push(ui0, ui2, ui3);\n                geom.i_norms.push(ni0, ni2, ni3);  //cg.i_norms.push(ni0, ni2, ni3);\n            }\n        }\n    }\n    cg.to = geom.verticesIndices.length;\n    \n    return geom;\n};\n\n\n","var CGL=CGL || {};\n\n// ---------------------------------------------------------------------------\n\nCGL.Uniform=function(_shader,_type,_name,_value)\n{\n    var self=this;\n    var loc=-1;\n    var name=_name;\n    var type=_type;\n    var value=0;\n    var shader=_shader;\n    this.needsUpdate=true;\n\n    shader.addUniform(this);\n\n    this.getType=function() {return type;};\n\n    this.updateValueF=function()\n    {\n        if(loc==-1) loc=gl.getUniformLocation(shader.getProgram(), name);\n        gl.uniform1f(loc, value);\n    };\n\n    this.setValueF=function(v)\n    {\n        self.needsUpdate=true;\n        value=v;\n    };\n\n    this.updateValueT=function()\n    {\n        if(loc==-1)\n        {\n            loc=gl.getUniformLocation(shader.getProgram(), name);\n            if(loc==-1) console.log('texture loc unknown!!');\n        }\n\n        // console.log('value.tex',value.tex);\n        \n\n        gl.uniform1i(loc, 0);\n    };\n\n    this.setValueT=function(v)\n    {\n        self.needsUpdate=true;\n        value=v;\n    };\n\n    if(type=='f')\n    {\n        this.setValue=this.setValueF;\n        this.updateValue=this.updateValueF;\n    }\n\n    if(type=='t')\n    {\n        this.setValue=this.setValueT;\n        this.updateValue=this.updateValueT;\n    }\n\n    this.setValue(_value);\n};\n\n// ---------------------------------------------------------------------------\n\nCGL.Shader=function()\n{\n    var self=this;\n    var program=false;\n    var uniforms=[];\n    var needsRecompile=true;\n\n    this.addUniform=function(uni)\n    {\n        uniforms.push(uni);\n        needsRecompile=true;\n                console.log('added unioform');\n                \n    };\n\n    this.getDefaultVertexShader=function()\n    {\n        return ''+\n        'attribute vec3 vPosition;\\n'+\n        'attribute vec2 attrTexCoord;\\n'+\n        'varying vec2 texCoord;\\n'+\n        'uniform mat4 projMatrix;\\n'+\n        'uniform mat4 mvMatrix;\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        '   texCoord=attrTexCoord;\\n'+\n        // '   gl_PointSize=3.0;\\n'+\n        '   gl_Position = projMatrix * mvMatrix * vec4(vPosition,  1.0);\\n'+\n        '}\\n';\n    };\n\n    this.getDefaultFragmentShader=function()\n    {\n        return ''+\n        'precision mediump float;\\n'+\n        'void main()\\n'+\n        '{\\n'+\n\n        '   gl_FragColor = vec4(0.5,0.5,0.5,1.0);\\n'+\n        '}\\n';\n    };\n\n    this.srcVert=this.getDefaultVertexShader();\n    this.srcFrag=this.getDefaultFragmentShader();\n\n    this.setSource=function(srcVert,srcFrag)\n    {\n        this.srcVert=srcVert;\n        this.srcFrag=srcFrag;\n        // console.log('compiled!');\n    };\n\n    var projMatrixUniform=-1;\n    var mvMatrixUniform=-1;\n\n    var attrTexCoords = -1;\n    var attrVertexPos = -1;\n\n    this.getAttrTexCoords=function(){return attrTexCoords;};\n    this.getAttrVertexPos=function(){return attrVertexPos;};\n\n    this.hasTextureUniforms=function()\n    {\n                \n        for(var i in uniforms)\n        {\n            console.log('tt '+uniforms[i].getType());\n                      \n            if(uniforms[i].getType()=='t') return true;\n        }\n        return false;\n    };\n\n    this.compile=function()\n    {\n        var defines='';\n        if(self.hasTextureUniforms()) defines+='#define HAS_TEXTURES'.endl();\n\n        console.log('has textures'+self.hasTextureUniforms());\n        \n\n        var vs=defines+self.srcVert;\n        var fs=defines+self.srcFrag;\n\n        console.log(defines);\n        \n\n        if(!program)\n        {\n            console.log('create shaderprogram');\n                    \n            program=createProgram(vs,fs, program);\n        }\n        else\n        {\n            console.log('compile shaders...');\n\n            createShader(vs, gl.VERTEX_SHADER, self.vshader );\n            createShader(fs, gl.VERTEX_SHADER, self.fshader );\n        }\n\n        needsRecompile=false;\n    };\n\n    this.bind=function()\n    {\n        if(!program || needsRecompile) self.compile();\n\n        if(mvMatrixUniform==-1)\n        {\n            attrTexCoords = gl.getAttribLocation(program, 'attrTexCoord');\n            attrVertexPos = gl.getAttribLocation(program, 'vPosition');\n\n            projMatrixUniform = gl.getUniformLocation(program, \"projMatrix\");\n            mvMatrixUniform = gl.getUniformLocation(program, \"mvMatrix\");\n        }\n\n        GL.useProgram(program);\n\n        for(var i in uniforms)\n        {\n            if(uniforms[i].needsUpdate)uniforms[i].updateValue();\n        }\n\n        gl.uniformMatrix4fv(projMatrixUniform, false, pMatrix);\n        gl.uniformMatrix4fv(mvMatrixUniform, false, mvMatrix);\n    };\n\n    this.getProgram=function()\n    {\n        return program;\n    };\n\n\n    createShader =function(str, type,_shader)\n    {\n        var shader = _shader || gl.createShader(type);\n        gl.shaderSource(shader, str);\n        gl.compileShader(shader);\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\n        {\n            console.log('compile status: ');\n\n            if(type==gl.VERTEX_SHADER)console.log('VERTEX_SHADER');\n            if(type==gl.FRAGMENT_SHADER)console.log('FRAGMENT_SHADER');\n            \n            throw gl.getShaderInfoLog(shader);\n        }\n        return shader;\n    };\n\n    createProgram=function(vstr, fstr)\n    {\n        var program = gl.createProgram();\n        self.vshader = createShader(vstr, gl.VERTEX_SHADER);\n        self.fshader = createShader(fstr, gl.FRAGMENT_SHADER);\n        gl.attachShader(program, self.vshader);\n        gl.attachShader(program, self.fshader);\n        gl.linkProgram(program);\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS))\n        {\n            throw gl.getProgramInfoLog(program);\n        }\n        return program;\n    };\n\n\n\n};\n\n","var CGL=CGL || {};\n\nCGL.Texture=function()\n{\n    var self=this;\n    this.tex = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, this.tex);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([111, 111, 111, 255]));\n    gl.bindTexture(gl.TEXTURE_2D, null);\n\n    this.bind=function(slot)\n    {\n        gl.activeTexture(gl.TEXTURE0+slot);\n        gl.bindTexture(gl.TEXTURE_2D, self.tex);\n    };\n\n    this.initTexture=function(img)\n    {\n        gl.bindTexture(gl.TEXTURE_2D, self.tex);\n        // gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, self.image);\n\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\n        // non power of two:\n        // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n\n        gl.bindTexture(gl.TEXTURE_2D, null);\n    };\n};\n\nCGL.Texture.load=function(url)\n{\n    var texture=new CGL.Texture();\n    texture.image = new Image();\n    texture.image.onload = function ()\n    {\n        console.log(texture.image);\n                \n        texture.initTexture(texture.image);\n    };\n    texture.image.src = url;\n    return texture;\n};\n\n// ---------------------------------------------------------------------------\n","\nvar PORT_DIR_IN=0;\nvar PORT_DIR_OUT=1;\n\nvar OP_PORT_TYPE_VALUE =0;\nvar OP_PORT_TYPE_FUNCTION =1;\nvar OP_PORT_TYPE_TEXTURE =2;\n\nvar Ops = {};\n\n\nvar Op = function()\n{\n    this.objName='';\n    this.portsOut=[];\n    this.portsIn=[];\n    this.posts=[];\n    this.uiAttribs={};\n    this.name='unknown';\n    this.id=generateUUID();\n\n    this.getName= function()\n    {\n        return this.name;\n    };\n    this.addOutPort=function(p)\n    {\n        p.direction=PORT_DIR_OUT;\n        p.parent=this;\n        this.portsOut.push(p);\n        return p;\n    };\n    this.addInPort=function(p)\n    {\n        p.direction=PORT_DIR_IN;\n        p.parent=this;\n        this.portsIn.push(p);\n        return p;\n    };\n    this.execute=function()\n    {\n        this.exec();\n    };\n    this.printInfo=function()\n    {\n        for(var i=0;i<this.portsIn.length;i++)\n            console.log('in: '+this.portsIn[i].getName());\n\n        for(var ipo in this.portsOut)\n            console.log('out: '+this.portsOut[ipo].getName());\n    };\n\n    this.removeLinks=function()\n    {\n        for(var i=0;i<this.portsIn.length;i++)\n            this.portsIn[i].removeLinks();\n        for(var ipo in this.portsOut)\n            this.portsOut[ipo].removeLinks();\n    };\n\n    this.getPort=function(name)\n    {\n        for(var ipi in this.portsIn)\n            if(this.portsIn[ipi].getName()==name)return this.portsIn[ipi];\n\n        for(var ipo in this.portsOut)\n            if(this.portsOut[ipo].getName()==name)return this.portsOut[ipo];\n    };\n\n    this.getSerialized=function()\n    {\n        var op={};\n        op.name=this.getName();\n        op.objName=this.objName;\n        op.id=this.id;\n        op.uiAttribs=this.uiAttribs;\n\n        op.portsIn=[];\n        op.portsOut=[];\n\n        for(var i=0;i<this.portsIn.length;i++)\n            op.portsIn.push( this.portsIn[i].getSerialized() );\n\n        for(var ipo in this.portsOut)\n            op.portsOut.push( this.portsOut[ipo].getSerialized() );\n\n        return op;\n    };\n\n    this.getPortByName=function(name)\n    {\n        for(var i=0;i<this.portsIn.length;i++)\n            if(this.portsIn[i].name==name)return this.portsIn[i];\n        \n        for(var ipo in this.portsOut)\n            if(this.portsOut[ipo].name==name)return this.portsOut[ipo];\n    };\n\n};\n\n// ------------------------------------------------------------------------------------\n\nvar Port=function(parent,name,type)\n{\n    var self=this;\n    this.direction=PORT_DIR_IN;\n    this.id=generateUUID();\n    this.parent=parent;\n    this.links=[];\n    this.value=null;\n    this.name=name;\n    this.type=type || OP_PORT_TYPE_VALUE;\n\n    this.__defineGetter__(\"val\", function()\n    {\n        return this.value;\n    });\n\n    this.__defineSetter__(\"val\", function(v)\n    {\n        this.setValue(v);\n    });\n\n    this.onValueChanged=function(){};\n    this.onTriggered=function(){};\n\n    this.setValue=function(v)\n    {\n        if(v!=this.value)\n        {\n            this.value=v;\n            this.onValueChanged();\n\n            for(var i in this.links)\n            {\n                this.links[i].setValue();\n            }\n        }\n    };\n\n    this.getName= function()\n    {\n        return this.name;\n    };\n\n    this.addLink=function(l)\n    {\n        this.links.push(l);\n    };\n\n    this.isLinkedTo=function(p2)\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i].portIn==p2 || this.links[i].portOut==p2)return true;\n        }\n        return false;\n    };\n\n    this.call=function()\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i].portIn !=this)this.links[i].portIn.onTriggered();\n            if(this.links[i].portOut!=this)this.links[i].portOut.onTriggered();\n        }\n    };\n\n\n    this.execute=function()\n    {\n        console.log('### execute port: '+this.getName() , this.goals.length);\n    };\n\n    this.getTypeString=function()\n    {\n        if(this.type==OP_PORT_TYPE_VALUE)return 'value';\n        if(this.type==OP_PORT_TYPE_FUNCTION)return 'function';\n        if(this.type==OP_PORT_TYPE_TEXTURE)return 'texture';\n    };\n\n    this.getSerialized=function()\n    {\n        var obj={};\n        obj.name=this.getName();\n        obj.value=this.value;\n\n        if(this.direction==PORT_DIR_IN && this.links.length>0)\n        {\n            obj.links=[];\n            for(var i in this.links)\n            {\n                obj.links.push( this.links[i].getSerialized() );\n            }\n        }\n        return obj;\n    };\n\n    this.removeLinks=function()\n    {\n        while(this.links.length>0)\n        {\n            this.links[0].remove();\n        }\n    };\n\n    this.removeLink=function(link)\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i]==link)this.links.splice( i, 1 );\n        }\n    };\n};\n\n\n\n// ---------------------------------------------------------------------------\n\nvar Link = function(scene)\n{\n    this.portIn=null;\n    this.portOut=null;\n    this.scene=scene;\n\n    this.setValue=function()\n    {\n        if(this.portIn.val!=this.portOut.val)\n            this.portIn.val=this.portOut.val;\n    };\n\n    this.remove=function()\n    {\n        this.portIn.removeLink(this);\n        this.portOut.removeLink(this);\n        this.scene.onUnLink(this.portIn,this.portOut);\n        this.portIn=null;\n        this.portOut=null;\n        this.scene=null;\n    };\n\n\n    this.link=function(p1,p2)\n    {\n        if(!Link.canLink(p1,p2))\n        {\n            console.log('cannot link ports!');\n            return false;\n        }\n        if(p1.direction==PORT_DIR_IN)\n        {\n            this.portIn=p1;\n            this.portOut=p2;\n        }\n        else\n        {\n            this.portIn=p2;\n            this.portOut=p1;\n        }\n\n        p1.addLink(this);\n        p2.addLink(this);\n        this.setValue();\n    };\n\n    this.getSerialized=function()\n    {\n        var obj={};\n\n        obj.portIn=this.portIn.getName();\n        obj.portOut=this.portOut.getName();\n        obj.objIn=this.portIn.parent.id;\n        obj.objOut=this.portOut.parent.id;\n\n        return obj;\n    };\n};\n\n\nLink.canLinkText=function(p1,p2)\n{\n    if(p1.direction==PORT_DIR_IN && p1.links.length>0)return 'input port already busy';\n    if(p2.direction==PORT_DIR_IN && p2.links.length>0)return 'input port already busy';\n    if(p1.isLinkedTo(p2))return 'ports already linked';\n    if(!p1)return 'can not link: port 1 invalid';\n    if(!p2)return 'can not link: port 2 invalid';\n    if(p1.direction==p2.direction)return 'can not link: same direction';\n    if(p1.type!=p2.type)return 'can not link: different type';\n    if(p1.parent==p2.parent)return 'can not link: same op';\n    return 'can link';\n};\n\nLink.canLink=function(p1,p2)\n{\n\n    if(p1.direction==PORT_DIR_IN && p1.links.length>0)return false;\n    if(p2.direction==PORT_DIR_IN && p2.links.length>0)return false;\n    if(p1.isLinkedTo(p2))return false;\n    if(!p1)return false;\n    if(!p2)return false;\n    if(p1.direction==p2.direction)return false;\n    if(p1.type!=p2.type)return false;\n    if(p1.parent==p2.parent)return false;\n\n    return true;\n};\n\n\n// ------------------------------------------------------------------------------------\n\n\nvar Scene = function()\n{\n    var self=this;\n    this.ops=[];\n    this.timer=new Timer();\n    this.animFrameOps=[];\n    \n\n    this.clear=function()\n    {\n        this.timer=new Timer();\n        while(this.ops.length>0)\n        {\n            this.deleteOp(this.ops[0].id);\n        }\n    };\n\n    this.addOp=function(objName,uiAttribs)\n    {\n        var op=eval('new '+objName+'();');\n        op.objName=objName;\n        op.uiAttribs=uiAttribs;\n\n        if(op.hasOwnProperty('onAnimFrame')) this.animFrameOps.push(op);\n\n        this.ops.push(op);\n        if(this.onAdd)this.onAdd(op);\n        return op;\n    };\n\n    this.deleteOp=function(opid)\n    {\n        for(var i in this.ops)\n        {\n            if(this.ops[i].id==opid)\n            {\n                this.ops[i].removeLinks();\n                this.onDelete(this.ops[i]);\n                this.ops.splice( i, 1 );\n            }\n        }\n    };\n\n    this.exec=function()\n    {\n        requestAnimationFrame(self.exec);\n        self.timer.update();\n\n        var time=self.timer.getTime();\n\n        for(var i in self.animFrameOps)\n        {\n            self.animFrameOps[i].onAnimFrame(time);\n        }\n\n    };\n\n    this.link=function(op1,port1Name,op2,port2Name)\n    {\n        var port1=op1.getPort(port1Name);\n        var port2=op2.getPort(port2Name);\n\n        if(Link.canLink(port1,port2))\n        {\n            var link=new Link(this);\n            link.link(port1,port2);\n            this.onLink(port1,port2);\n            return link;\n        }\n        else\n        {\n            console.log(Link.canLinkText(port1,port2));\n        }\n    };\n    this.onAdd=function(op){};\n    this.onDelete=function(op){};\n    this.onLink=function(p1,p2){};\n    this.onUnLink=function(p1,p2){};\n    this.serialize=function()\n    {\n        var obj={};\n\n        obj.ops=[];\n        for(var i in this.ops)\n        {\n            obj.ops.push( this.ops[i].getSerialized() );\n        }\n        \n        return JSON.stringify(obj);\n    };\n    this.getOpById=function(opid)\n    {\n        for(var i in this.ops)\n        {\n            if(this.ops[i].id==opid)return this.ops[i];\n        }\n\n    };\n    this.deSerialize=function(obj)\n    {\n        if (typeof obj === \"string\") obj=JSON.parse(obj);\n        var self=this;\n\n        function addLink(opinid,opoutid,inName,outName)\n        {\n            var found=false;\n            if(!found)\n            {\n                self.link(\n                    self.getOpById(opinid),\n                    inName,\n                    self.getOpById(opoutid),\n                    outName\n                    );\n            }\n        }\n\n        // add ops...\n        for(var iop in obj.ops)\n        {\n            var op=this.addOp(obj.ops[iop].objName,obj.ops[iop].uiAttribs);\n            op.id=obj.ops[iop].id;\n\n            for(var ipi in obj.ops[iop].portsIn)\n            {\n                var port=op.getPortByName(obj.ops[iop].portsIn[ipi].name);\n                if(port && port.type!=OP_PORT_TYPE_TEXTURE)port.val=obj.ops[iop].portsIn[ipi].value;\n            }\n\n            for(var ipo in obj.ops[iop].portsOut)\n            {\n                var port2=op.getPortByName(obj.ops[iop].portsOut[ipo].name);\n                if(port2&& port2.type!=OP_PORT_TYPE_TEXTURE)port2.val=obj.ops[iop].portsOut[ipo].value;\n            }\n\n\n            // op.uiAttribs=obj.ops[iop].uiAttribs;\n        }\n\n        // create links...\n        for(iop in obj.ops)\n        {\n            for(var ipi2 in obj.ops[iop].portsIn)\n            {\n\n                for(var ili in obj.ops[iop].portsIn[ipi2].links)\n                {\n                    addLink(\n                        obj.ops[iop].portsIn[ipi2].links[ili].objIn,\n                        obj.ops[iop].portsIn[ipi2].links[ili].objOut,\n                        obj.ops[iop].portsIn[ipi2].links[ili].portIn,\n                        obj.ops[iop].portsIn[ipi2].links[ili].portOut);\n                }\n            }\n\n\n            // for(var ipo in obj.ops[iop].portsOut)\n            // {\n            //     for(var ili in obj.ops[iop].portsOut[ipo].links)\n            //     {\n            //         addLink(\n            //             obj.ops[iop].portsOut[ipo].links[ili].objIn,\n            //             obj.ops[iop].portsOut[ipo].links[ili].objOut,\n            //             obj.ops[iop].portsOut[ipo].links[ili].portIn,\n            //             obj.ops[iop].portsOut[ipo].links[ili].portOut);\n\n            //     }\n            // }\n        }\n\n\n        for(var i in this.ops)\n        {\n            this.ops[i].id=generateUUID();\n        }\n\n\n\n    };\n\n    this.exec();\n\n};\n\n\n\n\n","//http://k3d.ivank.net/K3D.js\n//http://fhtr.blogspot.de/2009/12/3d-models-and-parsing-binary-data-with.html\n//https://github.com/gpjt/webgl-lessons/blob/master/lesson05/index.html\n\nOps.Gl={};\nvar GL=null;\nvar GL=null;\n\nvar currentShader=null;\n\nvar mvMatrix = mat4.create();\nvar pMatrix = mat4.create();\n\nOps.Gl.Renderer = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    var simpleShader=new CGL.Shader();\n \n\n    this.name='WebGL Renderer';\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var initTranslate=vec3.create();\n    vec3.set(initTranslate, 0,0,-2);\n\n    this.onAnimFrame=function(time)\n    {\n        currentShader=simpleShader;\n        gl.enable(gl.DEPTH_TEST);\n        GL.clearColor(0,0,0,1);\n        GL.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n        gl.viewport(0,0,self.canvas.clientWidth,self.canvas.clientHeight);\n        mat4.perspective(pMatrix,45, self.canvas.clientWidth/self.canvas.clientHeight, 0.01, 1100.0);\n        mat4.identity(mvMatrix);\n        mat4.translate(mvMatrix,mvMatrix, initTranslate);\n\n        GL.enable(GL.BLEND);\n        GL.blendFunc(GL.SRC_ALPHA,GL.ONE_MINUS_SRC_ALPHA);\n\n        self.trigger.call();\n    };\n\n    this.canvas = document.getElementById(\"glcanvas\");\n    GL = this.canvas.getContext(\"experimental-webgl\");\n    gl = this.canvas.getContext(\"experimental-webgl\");\n\n};\n\nOps.Gl.Renderer.prototype = new Op();\n\n\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.ClearColor = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='ClearColor';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.r=this.addInPort(new Port(this,\"r\"));\n    this.g=this.addInPort(new Port(this,\"g\"));\n    this.b=this.addInPort(new Port(this,\"b\"));\n\n    this.render.onTriggered=function()\n    {\n        GL.clearColor(self.r.val,self.g.val,self.b.val,1);\n        GL.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n\n        self.trigger.call();\n    };\n\n};\n\nOps.Gl.ClearColor.prototype = new Op();\n\n\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.ClearDepth = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='ClearDepth';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        GL.clear(GL.DEPTH_BUFFER_BIT);\n        self.trigger.call();\n    };\n};\n\nOps.Gl.ClearDepth.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\n    \nOps.Gl.Texture = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='texture';\n    this.filename=this.addInPort(new Port(this,\"file\",OP_PORT_TYPE_VALUE));\n    this.textureOut=this.addOutPort(new Port(this,\"texture\",OP_PORT_TYPE_TEXTURE));\n    \n    this.filename.onValueChanged=function()\n    {\n        console.log('load texture...');\n        self.tex=CGL.Texture.load(self.filename.val);\n        self.textureOut.val=self.tex.tex;\n    };\n\n    this.filename.val='assets/skull.png';\n    // this.filename.onValueChanged();\n    // this.textureOut.val=this.tex.tex;\n};\n\nOps.Gl.Texture.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.Meshes={};\n\n\n\nOps.Gl.Meshes.Rectangle = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='rectangle';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        // currentShader.setAttributeVertex( self.squareVertexPositionBuffer.itemSize);\n        gl.vertexAttribPointer(currentShader.getAttrVertexPos(),self.squareVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);\n\n        currentShader.bind();\n        gl.bindBuffer(gl.ARRAY_BUFFER, self.squareVertexPositionBuffer);\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, self.squareVertexPositionBuffer.numItems);\n\n        self.trigger.call();\n    };\n\n    this.squareVertexPositionBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.squareVertexPositionBuffer);\n    this.vertices = [\n         1.0,  1.0,  0.0,\n        -1.0,  1.0,  0.0,\n         1.0, -1.0,  0.0,\n        -1.0, -1.0,  0.0\n    ];\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(this.vertices), gl.STATIC_DRAW);\n    this.squareVertexPositionBuffer.itemSize = 3;\n    this.squareVertexPositionBuffer.numItems = 4;\n};\n\nOps.Gl.Meshes.Rectangle.prototype = new Op();\n\n\n\n\n\n\nOps.Gl.Meshes.ObjMesh = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='OBJ Mesh';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.mesh=null;\n\n    this.render.onTriggered=function()\n    {\n        if(self.mesh)\n        {\n            self.mesh.render(currentShader);\n        }\n\n        self.trigger.call();\n    };\n\n\n    ajaxRequest('assets/skull.obj',function(response)\n    {\n        console.log(response);\n                \n        var r=parseOBJ(response);\n\nunwrap = function(ind, crd, cpi)\n{\n    var ncrd = new Array(Math.floor(ind.length/3)*cpi);\n    for(var i=0; i<ind.length; i++)\n    {\n        for(var j=0; j<cpi; j++)\n        {\n            ncrd[i*cpi+j] = crd[ind[i]*cpi+j];\n        }\n    }\n    return ncrd;\n};\n\nvar l=r.verticesIndices.length;\n        r.vertices = unwrap(r.verticesIndices, r.vertices, 3);\n        r.texCoords = unwrap(r.texCoordsIndices  , r.texCoords  , 2);\n        r.verticesIndices = [];\n        for(var i=0; i<l; i++) r.verticesIndices.push(i);\n\n        \n        self.mesh=new CGL.Mesh(r);\n    });\n\n\n\n};\n\nOps.Gl.Meshes.ObjMesh.prototype = new Op();\n\n\n\n\n\n// ----------------------------------------------------------------\n\n\nOps.Gl.Meshes.Cube = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Cube';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.mesh=null;\n\n    this.render.onTriggered=function()\n    {\n        if(self.mesh!==null)\n        {\n            self.mesh.render(currentShader);\n        }\n\n        self.trigger.call();\n    };\n\n\n    var geom=new CGL.Geometry();\n\n            geom.vertices = [\n            // Front face\n            -1.0, -1.0,  1.0,\n             1.0, -1.0,  1.0,\n             1.0,  1.0,  1.0,\n            -1.0,  1.0,  1.0,\n            // Back face\n            -1.0, -1.0, -1.0,\n            -1.0,  1.0, -1.0,\n             1.0,  1.0, -1.0,\n             1.0, -1.0, -1.0,\n            // Top face\n            -1.0,  1.0, -1.0,\n            -1.0,  1.0,  1.0,\n             1.0,  1.0,  1.0,\n             1.0,  1.0, -1.0,\n            // Bottom face\n            -1.0, -1.0, -1.0,\n             1.0, -1.0, -1.0,\n             1.0, -1.0,  1.0,\n            -1.0, -1.0,  1.0,\n            // Right face\n             1.0, -1.0, -1.0,\n             1.0,  1.0, -1.0,\n             1.0,  1.0,  1.0,\n             1.0, -1.0,  1.0,\n            // Left face\n            -1.0, -1.0, -1.0,\n            -1.0, -1.0,  1.0,\n            -1.0,  1.0,  1.0,\n            -1.0,  1.0, -1.0,\n        ];\n\n        geom.texCoords = [\n          // Front face\n          0.0, 0.0,\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n          // Back face\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n          0.0, 0.0,\n          // Top face\n          0.0, 1.0,\n          0.0, 0.0,\n          1.0, 0.0,\n          1.0, 1.0,\n          // Bottom face\n          1.0, 1.0,\n          0.0, 1.0,\n          0.0, 0.0,\n          1.0, 0.0,\n          // Right face\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n          0.0, 0.0,\n          // Left face\n          0.0, 0.0,\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n        ];\n\n        geom.verticesIndices = [\n            0, 1, 2,      0, 2, 3,    // Front face\n            4, 5, 6,      4, 6, 7,    // Back face\n            8, 9, 10,     8, 10, 11,  // Top face\n            12, 13, 14,   12, 14, 15, // Bottom face\n            16, 17, 18,   16, 18, 19, // Right face\n            20, 21, 22,   20, 22, 23  // Left face\n        ];\n\n\n\n    this.mesh=new CGL.Mesh(geom);\n\n\n\n};\n\nOps.Gl.Meshes.Cube.prototype = new Op();\n\n\n\n\n\n// ----------------------------------------------------------------\n\n\nOps.Gl.Meshes.Plotter = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Plotter';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.v=this.addInPort(new Port(this,\"value\"));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        // currentShader.setAttributeVertex( self.buffer.itemSize);\n        gl.vertexAttribPointer(currentShader.getAttrVertexPos(),self.buffer.itemSize, gl.FLOAT, false, 0, 0);\n        currentShader.bind();\n        gl.bindBuffer(gl.ARRAY_BUFFER, self.buffer);\n        gl.drawArrays(gl.LINE_STRIP, 0, self.buffer.numItems);\n\n        self.trigger.call();\n    };\n\n    this.buffer = gl.createBuffer();\n    \n    var num=50;\n    this.vertices = [];\n    for(var i=0;i<num;i++)\n    {\n        this.vertices.push(1/num*i);\n        this.vertices.push(Math.random()-0.5);\n        this.vertices.push(0);\n    }\n\n    function bufferData()\n    {\n        gl.lineWidth(4);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, self.buffer);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(self.vertices), gl.STATIC_DRAW);\n        self.buffer.itemSize = 3;\n        self.buffer.numItems = num;\n    }\n    bufferData();\n\n    this.v.onValueChanged=function()\n    {\n        self.vertices.splice(0,3);\n        self.vertices.push(1);\n        self.vertices.push(self.v.val);\n        self.vertices.push(0);\n\n        for(var i=0;i<num*3;i+=3)\n        {\n            self.vertices[i]=1/num*i;\n        }\n\n        bufferData();\n    };\n\n\n};\n\nOps.Gl.Meshes.Plotter.prototype = new Op();\n\n\n// ----------------------------------------------------------------\n\nOps.Gl.Meshes.Triangle = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Triangle';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        // currentShader.setAttributeVertex( self.squareVertexPositionBuffer.itemSize);\n        // gl.vertexAttribPointer(shader.getAttrVertexPos(),self.squareVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);\n        // gl.vertexAttribPointer(currentShader.getAttrVertexPos(),self.squareVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);\n\n\n        // currentShader.bind();\n        self.mesh.render(currentShader);\n        // gl.bindBuffer(gl.ARRAY_BUFFER, self.squareVertexPositionBuffer);\n        // gl.drawArrays(gl.TRIANGLE_STRIP, 0, self.squareVertexPositionBuffer.numItems);\n\n        self.trigger.call();\n    };\n\n\n    var geom=new CGL.Geometry();\n    geom.vertices = [\n         0.0,  1.0,  0.0,\n        -1.0,  -1.0,  0.0,\n         1.0, -1.0,  0.0\n    ];\n\n    geom.verticesIndices = [\n        0, 1, 2\n    ];\n    this.mesh=new CGL.Mesh(geom);\n\n\n\n};\n\nOps.Gl.Meshes.Triangle.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.Shader={};\n\nOps.Gl.Shader.BasicMaterial = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='BasicMaterial';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n\n    this.doRender=function()\n    {\n        currentShader=shader;\n\n        if(self.texture.val)\n        {\n            gl.activeTexture(gl.TEXTURE0);\n            gl.bindTexture(gl.TEXTURE_2D, self.texture.val);\n        }\n\n        self.trigger.call();\n    };\n\n    var srcFrag=''+\n        'precision highp float;\\n'+\n        '#ifdef HAS_TEXTURES\\n'+\n        '  varying vec2 texCoord;\\n'+\n        '  uniform sampler2D tex;\\n'+\n        '#endif\\n'+\n        'uniform float r;\\n'+\n        'uniform float g;\\n'+\n        'uniform float b;\\n'+\n        'uniform float a;\\n'+\n        '\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        'vec4 col=vec4(r,g,b,a);\\n'+\n        '#ifdef HAS_TEXTURES\\n'+\n        '   col=texture2D(tex,texCoord);\\n'+\n        '#endif\\n'+\n        'gl_FragColor = col;\\n'+\n        \n        '}\\n';\n\n\n    var shader=new CGL.Shader();\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n\n\n\n\n    this.r=this.addInPort(new Port(this,\"r\"));\n    this.r.onValueChanged=function()\n    {\n        if(!self.r.uniform) self.r.uniform=new CGL.Uniform(shader,'f','r',self.r.val);\n        else self.r.uniform.setValue(self.r.val);\n    };\n\n    this.g=this.addInPort(new Port(this,\"g\"));\n    this.g.onValueChanged=function()\n    {\n        if(!self.g.uniform) self.g.uniform=new CGL.Uniform(shader,'f','g',self.g.val);\n        else self.g.uniform.setValue(self.g.val);\n    };\n\n    this.b=this.addInPort(new Port(this,\"b\"));\n    this.b.onValueChanged=function()\n    {\n        if(!self.b.uniform) self.b.uniform=new CGL.Uniform(shader,'f','b',self.b.val);\n        else self.b.uniform.setValue(self.b.val);\n    };\n\n    this.a=this.addInPort(new Port(this,\"a\"));\n    this.a.onValueChanged=function()\n    {\n        if(!self.a.uniform) self.a.uniform=new CGL.Uniform(shader,'f','a',self.a.val);\n        else self.a.uniform.setValue(self.a.val);\n    };\n\n    this.r.val=Math.random();\n    this.g.val=Math.random();\n    this.b.val=Math.random();\n    this.a.val=1.0;\n\n    this.render.onTriggered=this.doRender;\n    this.texture=this.addInPort(new Port(this,\"texture\",OP_PORT_TYPE_TEXTURE));\n    this.texture.onValueChanged=function()\n    {\n        if(self.texture.val)\n        {\n                    console.log('TEXTURE ADDED');\n                    \n            self.textureUniform=new CGL.Uniform(shader,'t','tex',0);\n        }\n        else\n        {\n        }\n    };\n\n    this.doRender();\n};\n\nOps.Gl.Shader.BasicMaterial.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Shader.Schwurbel = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Schwurbel';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.timer=this.addInPort(new Port(this,\"time\"));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.doRender=function()\n    {\n        currentShader=shader;\n        if(!self.timer.uniLoc)\n        {\n            shader.bind();\n            self.timer.uniLoc=gl.getUniformLocation(shader.getProgram(), \"time\");\n        }\n        gl.uniform1f(self.timer.uniLoc, self.timer.val);\n\n        self.trigger.call();\n    };\n\n    var srcFrag=''+\n        'precision mediump float;\\n'+\n        'uniform float time;\\n'+\n        '\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        'float c=sqrt(sin(time*0.02)*cos((time+gl_FragCoord.y)*0.02)+sin(time+gl_FragCoord.x*0.02)*sin(time+gl_FragCoord.y*0.02));\\n'+\n        'gl_FragColor = vec4( c,c,c,1.0);\\n'+\n        '}\\n';\n\n    var shader=new CGL.Shader();\n    shader.compile(shader.getDefaultVertexShader(),srcFrag);\n\n    this.doRender();\n    this.render.onTriggered=this.doRender;\n};\n\nOps.Gl.Shader.Schwurbel.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Shader.Noise = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Noise';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var timeUniform=-1;\n    var timeStart=-1;\n\n    this.doRender=function()\n    {\n        if(timeUniform==-1)\n        {\n            timeStart=Date.now();\n            shader.bind();\n            timeUniform=gl.getUniformLocation(shader.getProgram(), \"time\");\n        }\n\n        gl.uniform1f(timeUniform, (Date.now()-timeStart)/1000);\n        currentShader=shader;\n\n        self.trigger.call();\n    };\n\n    var srcFrag=''+\n        'precision mediump float;\\n'+\n        'uniform float time;\\n'+\n        '\\n'+\n        'float random(vec2 co)\\n'+\n        '{\\n'+\n        '   return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\\n'+\n        '}\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        '   float c=random(time*gl_FragCoord.xy);'+\n        '   gl_FragColor = vec4( c,c,c,1.0);\\n'+\n        '}\\n';\n\n\n    var shader=new CGL.Shader();\n    shader.compile(shader.getDefaultVertexShader(),srcFrag);\n\n    this.doRender();\n    this.render.onTriggered=this.doRender;\n};\n\nOps.Gl.Shader.Noise.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.Matrix={};\n\n\nOps.Gl.Matrix.Translate = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='translate';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.x=this.addInPort(new Port(this,\"x\"));\n    this.y=this.addInPort(new Port(this,\"y\"));\n    this.z=this.addInPort(new Port(this,\"z\"));\n    this.x.val=0.0;\n    this.y.val=0.0;\n    this.z.val=0.0;\n    \n    var vec=vec3.create();\n\n    this.render.onTriggered=function()\n    {\n        vec3.set(vec, self.x.val,self.y.val,self.z.val);\n\n        mat4.translate(mvMatrix,mvMatrix, vec);\n        self.trigger.call();\n    };\n\n};\n\nOps.Gl.Matrix.Translate.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Matrix.Scale = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var DEG2RAD = 3.14159/180.0;\n    this.name='scale';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.scale=this.addInPort(new Port(this,\"scale\"));\n    \n    var vScale=vec3.create();\n    var oldMatrix = mat4.create();\n    var transMatrix = mat4.create();\n    mat4.identity(transMatrix);\n\n    var doScale=false;\n\n    this.render.onTriggered=function()\n    {\n        mat4.copy(oldMatrix, mvMatrix);\n\n        mat4.multiply(mvMatrix,mvMatrix,transMatrix);\n\n        self.trigger.call();\n\n        mat4.copy(mvMatrix,oldMatrix);\n    };\n\n    var updateMatrix=function()\n    {\n        mat4.identity(transMatrix);\n        mat4.scale(transMatrix,transMatrix, vScale);\n    };\n\n    this.scaleChanged=function()\n    {\n        doScale=false;\n        //if(self.scaleX.val!==0.0 || self.scaleY.val!==0.0 || self.scaleZ.val!==0.0)doScale=true;\n        vec3.set(vScale, self.scale.val,self.scale.val,self.scale.val);\n        updateMatrix();\n    };\n\n    this.scale.onValueChanged=this.scaleChanged;\n\n    this.scale.val=1.0;\n\n    updateMatrix();\n};\n\nOps.Gl.Matrix.Scale.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.Matrix.Transform = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var DEG2RAD = 3.14159/180.0;\n    this.name='transform';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.posX=this.addInPort(new Port(this,\"posX\"));\n    this.posY=this.addInPort(new Port(this,\"posY\"));\n    this.posZ=this.addInPort(new Port(this,\"posZ\"));\n\n    this.scaleX=this.addInPort(new Port(this,\"scaleX\"));\n    this.scaleY=this.addInPort(new Port(this,\"scaleY\"));\n    this.scaleZ=this.addInPort(new Port(this,\"scaleZ\"));\n\n    this.rotX=this.addInPort(new Port(this,\"rotX\"));\n    this.rotY=this.addInPort(new Port(this,\"rotY\"));\n    this.rotZ=this.addInPort(new Port(this,\"rotZ\"));\n    \n    var vPos=vec3.create();\n    var vScale=vec3.create();\n    var oldMatrix = mat4.create();\n    var transMatrix = mat4.create();\n    mat4.identity(transMatrix);\n\n    var doScale=false;\n    var doTranslate=false;\n\n    this.render.onTriggered=function()\n    {\n        mat4.copy(oldMatrix, mvMatrix);\n\n        mat4.multiply(mvMatrix,mvMatrix,transMatrix);\n\n        self.trigger.call();\n\n        mat4.copy(mvMatrix,oldMatrix);\n    };\n\n    var updateMatrix=function()\n    {\n        mat4.identity(transMatrix);\n        if(doTranslate)mat4.translate(transMatrix,transMatrix, vPos);\n\n        if(self.rotX.val!==0)mat4.rotateX(transMatrix,transMatrix, self.rotX.val*DEG2RAD);\n        if(self.rotY.val!==0)mat4.rotateY(transMatrix,transMatrix, self.rotY.val*DEG2RAD);\n        if(self.rotZ.val!==0)mat4.rotateZ(transMatrix,transMatrix, self.rotZ.val*DEG2RAD);\n\n        if(doScale)mat4.scale(transMatrix,transMatrix, vScale);\n    };\n\n    this.translateChanged=function()\n    {\n        doTranslate=false;\n        if(self.posX.val!==0.0 || self.posY.val!==0.0 || self.posZ.val!==0.0)doTranslate=true;\n        vec3.set(vPos, self.posX.val,self.posY.val,self.posZ.val);\n        updateMatrix();\n    };\n\n    this.scaleChanged=function()\n    {\n        doScale=false;\n        if(self.scaleX.val!==0.0 || self.scaleY.val!==0.0 || self.scaleZ.val!==0.0)doScale=true;\n        vec3.set(vScale, self.scaleX.val,self.scaleY.val,self.scaleZ.val);\n        updateMatrix();\n    };\n\n    this.rotChanged=function()\n    {\n        updateMatrix();\n    };\n\n    this.rotX.onValueChanged=this.rotChanged;\n    this.rotY.onValueChanged=this.rotChanged;\n    this.rotZ.onValueChanged=this.rotChanged;\n\n    this.scaleX.onValueChanged=this.scaleChanged;\n    this.scaleY.onValueChanged=this.scaleChanged;\n    this.scaleZ.onValueChanged=this.scaleChanged;\n\n    this.posX.onValueChanged=this.translateChanged;\n    this.posY.onValueChanged=this.translateChanged;\n    this.posZ.onValueChanged=this.translateChanged;\n\n    this.rotX.val=0.0;\n    this.rotY.val=0.0;\n    this.rotZ.val=0.0;\n\n    this.scaleX.val=1.0;\n    this.scaleY.val=1.0;\n    this.scaleZ.val=1.0;\n\n    this.posX.val=0.0;\n    this.posY.val=0.0;\n    this.posZ.val=0.0;\n\n    updateMatrix();\n};\n\nOps.Gl.Matrix.Transform.prototype = new Op();\n\n\n\n\n\n","// https://github.com/automat/foam-gl\n// http://howlerjs.com/\n//http://learningwebgl.com/lessons/lesson01/index.html\n\n\nOps.Log = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='logger';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.input=this.addInPort(new Port(this,\"input\"));\n    this.input.val='';\n\n    this.exec=function()\n    {\n        console.log(\"[log] \" + self.input.val);\n    };\n\n    this.exe.onTriggered=this.exec;\n    this.input.onValueChanged=this.exec;\n};\nOps.Log.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\n\nOps.CallsPerSecond = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='CallsPerSecond';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.timeStart=0;\n    this.cps=0;\n\n    this.exe.onTriggered=function()\n    {\n        if(self.timeStart===0)self.timeStart=Date.now();\n        var now = Date.now();\n\n        if(now-self.timeStart>1000)\n        {\n            self.timeStart=Date.now();\n            console.log('cps: '+self.cps);\n            self.cps=0;\n        }\n\n        self.cps++;\n    };\n};\nOps.CallsPerSecond.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\nOps.Value = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Value';\n    this.v=this.addInPort(new Port(this,\"value\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.v.val;\n    };\n\n    this.v.onValueChanged=this.exec;\n};\n\nOps.Value.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\n\nOps.TimeLineTime = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='TimeLineTime';\n    this.theTime=this.addOutPort(new Port(this,\"time\"));\n\n    this.onAnimFrame=function(time)\n    {\n        this.theTime.val=time;\n    };\n\n};\nOps.TimeLineTime.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\n\n\n\nOps.Repeat = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Repeat';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.num=this.addInPort(new Port(this,\"num\"));\n    this.num.val=5;\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n    this.idx=this.addOutPort(new Port(this,\"index\"));\n\n    this.exe.onTriggered=function()\n    {\n\n        for(var i=0;i<self.num.value;i++)\n        {\n            self.idx.val=i;\n            self.trigger.call();\n        }\n\n    };\n};\nOps.Repeat.prototype = new Op();\n\n\n\n\n// ---------------------------------------------------------------------------\n\n\nOps.IfTrueThen = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='if true then';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.bool=this.addInPort(new Port(this,\"boolean\"));\n    this.bool.val=false;\n\n    this.triggerThen=this.addOutPort(new Port(this,\"then\",OP_PORT_TYPE_FUNCTION));\n    this.triggerElse=this.addOutPort(new Port(this,\"else\",OP_PORT_TYPE_FUNCTION));\n\n    this.exe.onTriggered=function()\n    {\n        if(self.bool.val===true)\n        {\n            self.triggerThen.call();\n        }\n        else\n        {\n            self.triggerElse.call();\n        }\n    };\n\n    this.bool.onValueChanged=function()\n    {\n        self.exe.onTriggered();\n    };\n\n};\nOps.IfTrueThen.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------\n\n\nOps.Group = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='group';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.triggers=[];\n\n    for(var i=0;i<10;i++)\n    {\n        this.triggers.push( this.addOutPort(new Port(this,\"trigger \"+i,OP_PORT_TYPE_FUNCTION)) );\n    }\n\n    this.exe.onTriggered=function()\n    {\n        for(var i in self.triggers)\n        {\n            self.triggers[i].call();\n        }\n\n    };\n\n\n};\nOps.Group.prototype = new Op();\n\n\n\n\n\n// ---------------------------------------------------------------------------\n\nOps.Interval = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='Interval';\n    this.timeOutId=-1;\n    this.interval=this.addInPort(new Port(this,\"interval\"));\n    this.interval.val=1000;\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.exec=function()\n    {\n        if(this.timeOutId!=-1)return;\n        var self=this;\n\n        this.timeOutId=setTimeout(function()\n        {\n            self.timeOutId=-1;\n            self.trigger.call();\n            self.exec();\n        },\n        this.interval.val );\n    };\n\n    this.exec();\n\n};\n\nOps.Interval.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\n// --------------------------------------------------------------------------\n\nOps.Anim={};\n\nOps.Anim.SinusAnim = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='SinusAnim';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    var self=this;\n\n    this.exe.onTriggered=function()\n    {\n        self.result.val=Math.sin(Date.now()/1000.0);\n    };\n\n    this.exe.onTriggered();\n\n};\n\nOps.Anim.SinusAnim.prototype = new Op();\n\n\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Anim.RelativeTime = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='RelativeTime';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    var self=this;\n    var startTime=Date.now()/1000.0;\n\n    this.exe.onTriggered=function()\n    {\n        self.result.val=Date.now()/1000.0-startTime;\n    };\n\n    this.exe.onTriggered();\n\n};\n\nOps.Anim.RelativeTime.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\nOps.Input={};\n\nOps.Input.GamePad = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='GamePad';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.numPads=this.addOutPort(new Port(this,\"numPads\"));\n    this.axis1=this.addOutPort(new Port(this,\"axis1\"));\n    this.axis2=this.addOutPort(new Port(this,\"axis2\"));\n    this.axis3=this.addOutPort(new Port(this,\"axis3\"));\n    this.axis4=this.addOutPort(new Port(this,\"axis4\"));\n    this.button0=this.addOutPort(new Port(this,\"button0\"));\n    this.button1=this.addOutPort(new Port(this,\"button1\"));\n    this.button2=this.addOutPort(new Port(this,\"button2\"));\n    this.button3=this.addOutPort(new Port(this,\"button3\"));\n    this.button4=this.addOutPort(new Port(this,\"button4\"));\n\n    var self=this;\n    var startTime=Date.now()/1000.0;\n\n    this.exe.onTriggered=function()\n    {\n        var gamePads=navigator.getGamepads();\n        var count=0;\n\n        for(var gp in gamePads)\n        {\n            if(gamePads[gp].axes)\n            {\n                self.axis1.val=gamePads[gp].axes[0];\n                self.axis2.val=gamePads[gp].axes[1];\n                self.axis3.val=gamePads[gp].axes[2];\n                self.axis4.val=gamePads[gp].axes[3];\n\n                self.button0.val=gamePads[gp].buttons[0].pressed;\n                self.button0.val=gamePads[gp].buttons[1].pressed;\n                self.button2.val=gamePads[gp].buttons[2].pressed;\n                self.button3.val=gamePads[gp].buttons[3].pressed;\n                self.button4.val=gamePads[gp].buttons[4].pressed;\n\n                count++;\n            }\n        }\n\n        self.numPads.val=count;\n    };\n\n    this.exe.onTriggered();\n\n};\n\nOps.Input.GamePad.prototype = new Op();\n\n","Ops.Math={};\n\n\nOps.Math.Random = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='random';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.exe.onTriggered=function()\n    {\n        self.result.val=Math.random();\n    };\n\n    this.exe.onTriggered();\n};\n\nOps.Math.Random.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\n\n\nOps.Math.MapRange = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='map value range';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.v=this.addInPort(new Port(this,\"value\"));\n    this.old_min=this.addInPort(new Port(this,\"old min\"));\n    this.old_max=this.addInPort(new Port(this,\"old max\"));\n    this.new_min=this.addInPort(new Port(this,\"new min\"));\n    this.new_max=this.addInPort(new Port(this,\"new max\"));\n\n    this.exec= function()\n    {\n        if(self.v.val>self.old_max.val)\n        {\n            self.result.val=self.new_max.val;\n            return;\n        }\n        else\n        if(self.v.val<self.old_min.val)\n        {\n            self.result.val=self.new_min.val;\n            return;\n        }\n\n        var nMin=parseFloat(self.new_min.val);\n        var nMax=parseFloat(self.new_max.val);\n        var oMin=parseFloat(self.old_min.val);\n        var oMax=parseFloat(self.old_max.val);\n        var x=parseFloat(self.v.val);\n\n        var reverseInput = false;\n        var oldMin = Math.min( oMin, oMax );\n        var oldMax = Math.max( oMin, oMax );\n        if(oldMin!= oMin) reverseInput = true;\n\n        var reverseOutput = false;\n        var newMin = Math.min( nMin, nMax );\n        var newMax = Math.max( nMin, nMax );\n        if(newMin != nMin) reverseOutput = true;\n\n        var portion=0;\n\n        if(reverseInput) portion = (oldMax-x)*(newMax-newMin)/(oldMax-oldMin);\n            else portion = (x-oldMin)*(newMax-newMin)/(oldMax-oldMin);\n        \n        if(reverseOutput) self.result.val = newMax - portion;\n            else self.result.val = portion + newMin;\n\n    };\n\n    this.v.val=0;\n    this.old_min.val=-1;\n    this.old_max.val=1;\n    this.new_min.val=0;\n    this.new_max.val=1;\n\n\n    this.v.onValueChanged=this.exec;\n    this.old_min.onValueChanged=this.exec;\n    this.old_max.onValueChanged=this.exec;\n    this.new_min.onValueChanged=this.exec;\n    this.new_max.onValueChanged=this.exec;\n\n    this.exec();\n\n};\n\nOps.Math.MapRange.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Abs = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    this.name='abs';\n    this.number=this.addInPort(new Port(this,\"number\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.number.onValueChanged=function()\n    {\n        self.result.val=Math.abs(self.number.val);\n    };\n};\n\nOps.Math.Abs.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Sin = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    this.name='Sinus';\n    this.number=this.addInPort(new Port(this,\"number\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.number.onValueChanged=function()\n    {\n        self.result.val=Math.sin(self.number.val);\n    };\n};\n\nOps.Math.Sin.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Sum = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='sum';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=parseFloat(self.number1.val)+parseFloat(self.number2.val);\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Sum.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Multiply = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='multiply';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val*self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n\n};\n\nOps.Math.Multiply.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Divide = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Divide';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val/self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Divide.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\nOps.Math.Compare={};\n\n\n\n\nOps.Math.Compare.IsEven = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='isEven';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n\n    this.exec= function()\n    {\n        self.result.val=!( self.number1.val & 1 );\n    };\n\n    this.number1.onValueChanged=this.exec;\n};\n\nOps.Math.Compare.IsEven.prototype = new Op();\n\n\n\nOps.Math.Compare.Greater = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Greater';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val>self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Compare.Greater.prototype = new Op();\n\n\n\n\n\n\nOps.Math.Compare.Between = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Between';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number=this.addInPort(new Port(this,\"value\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n    this.number.val=2.0;\n    this.number1.val=1.0;\n    this.number2.val=3.0;\n\n    this.exec= function()\n    {\n        self.result.val=\n            (\n                self.number.val>Math.min(self.number1.val,self.number2.val) &&\n                self.number.val<Math.max(self.number1.val,self.number2.val)\n            );\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n    this.number.onValueChanged=this.exec;\n};\nOps.Math.Compare.Between.prototype = new Op();\n\n\n\n\nOps.Math.Compare.Lesser = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Lesser';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val<self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n\n};\n\nOps.Math.Compare.Lesser.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Math.Compare.Equals = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Equals';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val==self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Compare.Equals.prototype = new Op();\n\n"],"sourceRoot":"/source/"}