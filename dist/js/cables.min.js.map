{"version":3,"sources":["timer.js","utils.js","cgl_mesh.js","cgl_shader.js","cgl_texture.js","holo.js","ops.gl.js","ops.js","ops.math.js"],"names":["Timer","getTime","lastTime","Date","now","timeStart","timeOffset","self","this","currentTime","paused","update","togglePlay","play","pause","setOffset","val","generateUUID","d","uuid","replace","c","r","Math","random","floor","toString","ajaxRequest","url","callback","request","XMLHttpRequest","open","responseType","onload","e","target","response","send","CGL","Mesh","geom","bufTexCoords","bufVertices","gl","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","vertices","STATIC_DRAW","itemSize","numItems","length","bufVerticesIndizes","ELEMENT_ARRAY_BUFFER","Uint16Array","verticesIndices","texCoords","render","shader","bind","GL","enableVertexAttribArray","getAttrVertexPos","getAttrTexCoords","vertexAttribPointer","FLOAT","drawElements","TRIANGLES","UNSIGNED_SHORT","Geometry","faceVertCount","texCoordsIndices","parseOBJ","buff","_readline","a","off","s","String","fromCharCode","groups","c_norms","i_norms","cg","from","to","Uint8Array","line","cds","split","x","parseFloat","y","z","push","v0a","v1a","v2a","vi0","parseInt","vi1","vi2","ui0","ui1","ui2","ni0","ni1","ni2","vlen","ulen","nlen","v3a","vi3","ui3","ni3","Uniform","_shader","_type","_name","_value","loc","name","type","value","needsUpdate","addUniform","getType","getName","resetLoc","updateValueF","getUniformLocation","getProgram","uniform1f","setValueF","v","updateValueT","console","log","uniform1i","setValueT","setValue","updateValue","Shader","program","uniforms","needsRecompile","removeUniform","i","splice","uni","getDefaultVertexShader","getDefaultFragmentShader","srcVert","srcFrag","setSource","projMatrixUniform","mvMatrixUniform","attrTexCoords","attrVertexPos","hasTextureUniforms","compile","defines","endl","vs","fs","vshader","createShader","VERTEX_SHADER","fshader","linkProgram","createProgram","getAttribLocation","useProgram","uniformMatrix4fv","pMatrix","mvMatrix","str","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","FRAGMENT_SHADER","getShaderInfoLog","attachShader","getProgramParameter","LINK_STATUS","getProgramInfoLog","vstr","fstr","Texture","tex","createTexture","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","slot","activeTexture","TEXTURE0","initTexture","img","image","texParameteri","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","load","texture","Image","src","PORT_DIR_IN","PORT_DIR_OUT","OP_PORT_TYPE_VALUE","OP_PORT_TYPE_FUNCTION","OP_PORT_TYPE_TEXTURE","Ops","Op","objName","portsOut","portsIn","posts","uiAttribs","id","addOutPort","p","direction","parent","addInPort","execute","exec","printInfo","ipo","removeLinks","getPort","ipi","getSerialized","op","getPortByName","Port","links","valueBeforeLink","__defineGetter__","__defineSetter__","onValueChanged","onTriggered","addLink","l","isLinkedTo","p2","portIn","portOut","call","goals","getTypeString","obj","remove","removeLink","link","Link","scene","onUnLink","p1","canLink","objIn","objOut","canLinkText","Scene","ops","timer","animFrameOps","clear","deleteOp","addOp","eval","hasOwnProperty","onAdd","opid","onDelete","requestAnimationFrame","time","onAnimFrame","op1","port1Name","op2","port2Name","port1","port2","onLink","serialize","JSON","stringify","getOpById","deSerialize","opinid","opoutid","inName","outName","found","parse","iop","port","ipi2","ili","prototype","Gl","currentShader","mat4","create","Renderer","apply","arguments","simpleShader","trigger","initTranslate","vec3","set","enable","DEPTH_TEST","clearColor","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","viewport","canvas","clientWidth","clientHeight","perspective","identity","translate","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","document","getElementById","getContext","ClearColor","g","b","ClearDepth","filename","textureOut","Meshes","Rectangle","mesh","ObjMesh","unwrap","ind","crd","cpi","ncrd","Array","j","Cube","Plotter","lineWidth","buffer","num","drawArrays","LINE_STRIP","Triangle","BasicMaterial","doRender","uniform","textureUniform","Schwurbel","uniLoc","Noise","timeUniform","Matrix","Translate","vec","Scale","scale","vScale","oldMatrix","transMatrix","doScale","copy","multiply","updateMatrix","scaleChanged","Transform","DEG2RAD","posX","posY","posZ","scaleX","scaleY","scaleZ","rotX","rotY","rotZ","vPos","doTranslate","rotateX","rotateY","rotateZ","translateChanged","rotChanged","Log","exe","input","CallsPerSecond","cps","Value","result","TimeLineTime","theTime","Repeat","idx","IfTrueThen","bool","triggerThen","triggerElse","Group","triggers","Interval","timeOutId","interval","setTimeout","Anim","SinusAnim","sin","RelativeTime","startTime","Input","GamePad","numPads","axis1","axis2","axis3","axis4","button0","button1","button2","button3","button4","gamePads","navigator","getGamepads","count","gp","axes","buttons","pressed","Random","MapRange","old_min","old_max","new_min","new_max","nMin","nMax","oMin","oMax","reverseInput","oldMin","min","oldMax","max","reverseOutput","newMin","newMax","portion","Abs","number","abs","Sin","Sum","number1","number2","Multiply","Divide","Compare","IsEven","Greater","Between","Lesser","Equals"],"mappings":"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","file":"cables.min.js","sourcesContent":["\n\nfunction Timer()\n{\n    var self=this;\n    var timeStart=Date.now();\n    var timeOffset=0;\n\n    var currentTime=0;\n    var lastTime=0;\n    var paused=true;\n\n    function getTime()\n    {\n        lastTime=(Date.now()-timeStart)/1000;\n        return lastTime+timeOffset;\n\n    }\n\n    this.update=function()\n    {\n        if(paused) return;\n        currentTime=getTime();\n\n        return currentTime;\n    };\n\n    this.getTime=function()\n    {\n        return currentTime;\n    };\n\n    this.togglePlay=function()\n    {\n        if(paused)self.play();\n            else self.pause();\n    };\n\n    this.setOffset=function(val)\n    {\n        if(currentTime+val<0)\n        {\n            timeStart=Date.now();\n            timeOffset=0;\n            currentTime=0;\n        }\n        else\n        {\n            timeOffset+=val;\n            currentTime=lastTime+timeOffset;\n        }\n        \n\n    };\n\n    this.play=function()\n    {\n        timeStart=Date.now();\n        paused=false;\n    };\n\n    this.pause=function()\n    {\n        timeOffset=currentTime;\n        paused=true;\n    };\n\n}","function generateUUID()\n{\n    var d = new Date().getTime();\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c)\n    {\n        var r = (d + Math.random()*16)%16 | 0;\n        d = Math.floor(d/16);\n        return (c=='x' ? r : (r&0x3|0x8)).toString(16);\n    });\n    return uuid;\n}\n\n// ----------------------------------------------------------------\nfunction ajaxRequest(url, callback)\n{\n    var request = new XMLHttpRequest();\n    request.open(\"GET\", url, true);\n    request.responseType = \"arraybuffer\";\n    request.onload = function(e)\n    {\n        callback(e.target.response);\n    };\n    request.send();\n}\n\nString.prototype.endl = function(){return this+'\\n';};\n\n\n","var CGL=CGL || {};\n\nCGL.Mesh=function(geom)\n{\n    var bufTexCoords=-1;\n    // var bufTexCoordsIndizes=-1;\n\n    var bufVertices = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, bufVertices);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(geom.vertices), gl.STATIC_DRAW);\n    bufVertices.itemSize = 3;\n    bufVertices.numItems = geom.vertices.length/3;\n\n\n    var bufVerticesIndizes = gl.createBuffer();\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufVerticesIndizes);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(geom.verticesIndices), gl.STATIC_DRAW);\n    bufVerticesIndizes.itemSize = 1;\n    bufVerticesIndizes.numItems = geom.verticesIndices.length;\n\n    if(geom.texCoords.length>0)\n    {\n        bufTexCoords = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, bufTexCoords);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(geom.texCoords), gl.STATIC_DRAW);\n        bufTexCoords.itemSize = 2;\n        bufTexCoords.numItems = geom.texCoords.length/bufTexCoords.itemSize;\n    }\n\n\n\n    this.render=function(shader)\n    {\n        shader.bind();\n\n        GL.enableVertexAttribArray(shader.getAttrVertexPos());\n        if(bufTexCoords!=-1) GL.enableVertexAttribArray(shader.getAttrTexCoords());\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, bufVertices);\n        gl.vertexAttribPointer(shader.getAttrVertexPos(),bufVertices.itemSize, gl.FLOAT, false, 0, 0);\n\n        if(bufTexCoords!=-1)\n        {\n            gl.bindBuffer(gl.ARRAY_BUFFER, bufTexCoords);\n            gl.vertexAttribPointer(shader.getAttrTexCoords(),bufTexCoords.itemSize, gl.FLOAT, false, 0, 0);\n        }\n\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufVerticesIndizes);\n        gl.drawElements(gl.TRIANGLES, bufVerticesIndizes.numItems, gl.UNSIGNED_SHORT, 0);\n    };\n\n};\n\nCGL.Geometry=function()\n{\n    this.faceVertCount=3;\n    this.vertices=[];\n    this.verticesIndices=[];\n    this.texCoords=[];\n    this.texCoordsIndices=[];\n};\n\nparseOBJ = function(buff)\n{\n\n    _readline = function(a, off)  // Uint8Array, offset\n    {\n        var s = \"\";\n        while(a[off] != 10) s += String.fromCharCode(a[off++]);\n        return s;\n    };\n\n    var geom = new CGL.Geometry();\n    geom.groups = {};\n    \n    // geom.texCoords   = [];\n    geom.c_norms = [];\n    \n    // geom.texCoordsIndices   = [];\n    geom.i_norms = [];\n    \n    var cg = {from: 0, to:0};   // current group\n    var off = 0;\n    var a = new Uint8Array(buff);\n    \n    while(off < a.length)\n    {\n        var line = _readline(a, off);\n        off += line.length + 1;\n        line = line.replace(/ +(?= )/g,'');\n        line = line.replace(/(^\\s+|\\s+$)/g, '');\n        var cds = line.split(\" \");\n        if(cds[0] == \"g\")\n        {\n            cg.to = geom.verticesIndices.length;\n            if(geom.groups[cds[1]] == null) geom.groups[cds[1]] = {from:geom.verticesIndices.length, to:0};\n            cg = geom.groups[cds[1]];\n        }\n        if(cds[0] == \"v\")\n        {\n            var x = parseFloat(cds[1]);\n            var y = parseFloat(cds[2]);\n            var z = parseFloat(cds[3]);\n            geom.vertices.push(x,y,z);\n        }\n        if(cds[0] == \"vt\")\n        {\n            var x = parseFloat(cds[1]);\n            var y = 1-parseFloat(cds[2]);\n            geom.texCoords.push(x,y);\n        }\n        if(cds[0] == \"vn\")\n        {\n            var x = parseFloat(cds[1]);\n            var y = parseFloat(cds[2]);\n            var z = parseFloat(cds[3]);\n            geom.c_norms.push(x,y,z);\n        }\n        if(cds[0] == \"f\")\n        {\n            var v0a = cds[1].split(\"/\"), v1a = cds[2].split(\"/\"), v2a = cds[3].split(\"/\");\n            var vi0 = parseInt(v0a[0])-1, vi1 = parseInt(v1a[0])-1, vi2 = parseInt(v2a[0])-1;\n            var ui0 = parseInt(v0a[1])-1, ui1 = parseInt(v1a[1])-1, ui2 = parseInt(v2a[1])-1;\n            var ni0 = parseInt(v0a[2])-1, ni1 = parseInt(v1a[2])-1, ni2 = parseInt(v2a[2])-1;\n            \n            var vlen = geom.vertices.length/3, ulen = geom.texCoords.length/2, nlen = geom.c_norms.length/3;\n            if(vi0<0) vi0 = vlen + vi0+1; if(vi1<0) vi1 = vlen + vi1+1; if(vi2<0) vi2 = vlen + vi2+1;\n            if(ui0<0) ui0 = ulen + ui0+1; if(ui1<0) ui1 = ulen + ui1+1; if(ui2<0) ui2 = ulen + ui2+1;\n            if(ni0<0) ni0 = nlen + ni0+1; if(ni1<0) ni1 = nlen + ni1+1; if(ni2<0) ni2 = nlen + ni2+1;\n            \n            geom.verticesIndices.push(vi0, vi1, vi2);  //cg.verticesIndices.push(vi0, vi1, vi2)\n            geom.texCoordsIndices  .push(ui0, ui1, ui2);  //cg.texCoordsIndices  .push(ui0, ui1, ui2);\n            geom.i_norms.push(ni0, ni1, ni2);  //cg.i_norms.push(ni0, ni1, ni2);\n            if(cds.length == 5)\n            {\n                var v3a = cds[4].split(\"/\");\n                var vi3 = parseInt(v3a[0])-1, ui3 = parseInt(v3a[1])-1, ni3 = parseInt(v3a[2])-1;\n                if(vi3<0) vi3 = vlen + vi3+1;\n                if(ui3<0) ui3 = ulen + ui3+1;\n                if(ni3<0) ni3 = nlen + ni3+1;\n                geom.verticesIndices.push(vi0, vi2, vi3);  //cg.verticesIndices.push(vi0, vi2, vi3);\n                geom.texCoordsIndices  .push(ui0, ui2, ui3);  //cg.texCoordsIndices  .push(ui0, ui2, ui3);\n                geom.i_norms.push(ni0, ni2, ni3);  //cg.i_norms.push(ni0, ni2, ni3);\n            }\n        }\n    }\n    cg.to = geom.verticesIndices.length;\n    \n    return geom;\n};\n\n\n","var CGL=CGL || {};\n\n// ---------------------------------------------------------------------------\n\nCGL.Uniform=function(_shader,_type,_name,_value)\n{\n    var self=this;\n    var loc=-1;\n    var name=_name;\n    var type=_type;\n    var value=0;\n    var shader=_shader;\n    this.needsUpdate=true;\n\n    shader.addUniform(this);\n\n    this.getType=function() {return type;};\n    this.getName=function() {return name;};\n\n    this.resetLoc=function() { loc=-1;};\n\n    this.updateValueF=function()\n    {\n        if(loc==-1) loc=gl.getUniformLocation(shader.getProgram(), name);\n        gl.uniform1f(loc, value);\n    };\n\n    this.setValueF=function(v)\n    {\n        self.needsUpdate=true;\n        value=v;\n    };\n\n    this.updateValueT=function()\n    {\n        if(loc==-1)\n        {\n            loc=gl.getUniformLocation(shader.getProgram(), name);\n            if(loc==-1) console.log('texture loc unknown!!');\n        }\n\n        gl.uniform1i(loc, 0);\n    };\n\n    this.setValueT=function(v)\n    {\n        self.needsUpdate=true;\n        value=v;\n    };\n\n    if(type=='f')\n    {\n        this.setValue=this.setValueF;\n        this.updateValue=this.updateValueF;\n    }\n\n    if(type=='t')\n    {\n        this.setValue=this.setValueT;\n        this.updateValue=this.updateValueT;\n    }\n\n    this.setValue(_value);\n};\n\n// ---------------------------------------------------------------------------\n\nCGL.Shader=function()\n{\n    var self=this;\n    var program=false;\n    var uniforms=[];\n    var needsRecompile=true;\n\n    this.removeUniform=function(name)\n    {\n        console.log('before: '+uniforms.length);\n        for(var i in uniforms)\n        {\n            if(uniforms[i].getName()==name)\n            {\n                uniforms.splice(i,1);\n                break;\n            }\n        }\n        needsRecompile=true;\n        console.log(uniforms.length);\n                \n    };\n\n    this.addUniform=function(uni)\n    {\n        uniforms.push(uni);\n        needsRecompile=true;\n    };\n\n    this.getDefaultVertexShader=function()\n    {\n        return ''+\n        'attribute vec3 vPosition;\\n'+\n        'attribute vec2 attrTexCoord;\\n'+\n        'varying vec2 texCoord;\\n'+\n        'uniform mat4 projMatrix;\\n'+\n        'uniform mat4 mvMatrix;\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        '   texCoord=attrTexCoord;\\n'+\n        // '   gl_PointSize=3.0;\\n'+\n        '   gl_Position = projMatrix * mvMatrix * vec4(vPosition,  1.0);\\n'+\n        '}\\n';\n    };\n\n    this.getDefaultFragmentShader=function()\n    {\n        return ''+\n        'precision mediump float;\\n'+\n        'void main()\\n'+\n        '{\\n'+\n\n        '   gl_FragColor = vec4(0.5,0.5,0.5,1.0);\\n'+\n        '}\\n';\n    };\n\n    this.srcVert=this.getDefaultVertexShader();\n    this.srcFrag=this.getDefaultFragmentShader();\n\n    this.setSource=function(srcVert,srcFrag)\n    {\n        this.srcVert=srcVert;\n        this.srcFrag=srcFrag;\n    };\n\n    var projMatrixUniform=-1;\n    var mvMatrixUniform=-1;\n\n    var attrTexCoords = -1;\n    var attrVertexPos = -1;\n\n    this.getAttrTexCoords=function(){return attrTexCoords;};\n    this.getAttrVertexPos=function(){return attrVertexPos;};\n\n    this.hasTextureUniforms=function()\n    {\n        for(var i in uniforms)\n        {\n            if(uniforms[i].getType()=='t') return true;\n        }\n        return false;\n    };\n\n    this.compile=function()\n    {\n        var defines='';\n        if(self.hasTextureUniforms()) defines+='#define HAS_TEXTURES'.endl();\n\n        console.log('shader compile...');\n        console.log('has textures: '+self.hasTextureUniforms() );\n        \n\n        var vs=defines+self.srcVert;\n        var fs=defines+self.srcFrag;\n\n        if(!program)\n        {\n            console.log('create shaderprogram');\n                    \n            program=createProgram(vs,fs, program);\n        }\n        else\n        {\n            console.log('recompile shaders...');\n\n            self.vshader=createShader(vs, gl.VERTEX_SHADER, self.vshader );\n            self.fshader=createShader(fs, gl.VERTEX_SHADER, self.fshader );\n            linkProgram(program);\n            mvMatrixUniform=-1;\n\n            for(var i in uniforms)uniforms[i].resetLoc();''\n            \n\n        }\n\n        needsRecompile=false;\n    };\n\n    this.bind=function()\n    {\n        if(!program || needsRecompile) self.compile();\n\n        if(mvMatrixUniform==-1)\n        {\n            attrTexCoords = gl.getAttribLocation(program, 'attrTexCoord');\n            attrVertexPos = gl.getAttribLocation(program, 'vPosition');\n\n            projMatrixUniform = gl.getUniformLocation(program, \"projMatrix\");\n            mvMatrixUniform = gl.getUniformLocation(program, \"mvMatrix\");\n        }\n\n        GL.useProgram(program);\n\n        for(var i in uniforms)\n        {\n            if(uniforms[i].needsUpdate)uniforms[i].updateValue();\n        }\n\n        gl.uniformMatrix4fv(projMatrixUniform, false, pMatrix);\n        gl.uniformMatrix4fv(mvMatrixUniform, false, mvMatrix);\n    };\n\n    this.getProgram=function()\n    {\n        return program;\n    };\n\n\n    createShader =function(str, type,_shader)\n    {\n        var shader = _shader || gl.createShader(type);\n        gl.shaderSource(shader, str);\n        gl.compileShader(shader);\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\n        {\n            console.log('compile status: ');\n\n            if(type==gl.VERTEX_SHADER)console.log('VERTEX_SHADER');\n            if(type==gl.FRAGMENT_SHADER)console.log('FRAGMENT_SHADER');\n            \n            throw gl.getShaderInfoLog(shader);\n        }\n        return shader;\n    };\n\n    linkProgram=function(program)\n    {\n        gl.attachShader(program, self.vshader);\n        gl.attachShader(program, self.fshader);\n        gl.linkProgram(program);\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS))\n        {\n            throw gl.getProgramInfoLog(program);\n        }\n\n    };\n\n    createProgram=function(vstr, fstr)\n    {\n        var program = gl.createProgram();\n        self.vshader = createShader(vstr, gl.VERTEX_SHADER);\n        self.fshader = createShader(fstr, gl.FRAGMENT_SHADER);\n\n        linkProgram(program);\n        return program;\n    };\n\n\n\n};\n\n","var CGL=CGL || {};\n\nCGL.Texture=function()\n{\n    var self=this;\n    this.tex = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, this.tex);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([111, 111, 111, 255]));\n    gl.bindTexture(gl.TEXTURE_2D, null);\n\n    this.bind=function(slot)\n    {\n        gl.activeTexture(gl.TEXTURE0+slot);\n        gl.bindTexture(gl.TEXTURE_2D, self.tex);\n    };\n\n    this.initTexture=function(img)\n    {\n        gl.bindTexture(gl.TEXTURE_2D, self.tex);\n        // gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, self.image);\n\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\n        // non power of two:\n        // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n\n        gl.bindTexture(gl.TEXTURE_2D, null);\n    };\n};\n\nCGL.Texture.load=function(url)\n{\n    var texture=new CGL.Texture();\n    texture.image = new Image();\n    texture.image.onload = function ()\n    {\n        console.log(texture.image);\n                \n        texture.initTexture(texture.image);\n    };\n    texture.image.src = url;\n    return texture;\n};\n\n// ---------------------------------------------------------------------------\n","\nvar PORT_DIR_IN=0;\nvar PORT_DIR_OUT=1;\n\nvar OP_PORT_TYPE_VALUE =0;\nvar OP_PORT_TYPE_FUNCTION =1;\nvar OP_PORT_TYPE_TEXTURE =2;\n\nvar Ops = {};\n\n\nvar Op = function()\n{\n    this.objName='';\n    this.portsOut=[];\n    this.portsIn=[];\n    this.posts=[];\n    this.uiAttribs={};\n    this.name='unknown';\n    this.id=generateUUID();\n\n    this.getName= function()\n    {\n        return this.name;\n    };\n    this.addOutPort=function(p)\n    {\n        p.direction=PORT_DIR_OUT;\n        p.parent=this;\n        this.portsOut.push(p);\n        return p;\n    };\n    this.addInPort=function(p)\n    {\n        p.direction=PORT_DIR_IN;\n        p.parent=this;\n        this.portsIn.push(p);\n        return p;\n    };\n    this.execute=function()\n    {\n        this.exec();\n    };\n    this.printInfo=function()\n    {\n        for(var i=0;i<this.portsIn.length;i++)\n            console.log('in: '+this.portsIn[i].getName());\n\n        for(var ipo in this.portsOut)\n            console.log('out: '+this.portsOut[ipo].getName());\n    };\n\n    this.removeLinks=function()\n    {\n        for(var i=0;i<this.portsIn.length;i++)\n            this.portsIn[i].removeLinks();\n        for(var ipo in this.portsOut)\n            this.portsOut[ipo].removeLinks();\n    };\n\n    this.getPort=function(name)\n    {\n        for(var ipi in this.portsIn)\n            if(this.portsIn[ipi].getName()==name)return this.portsIn[ipi];\n\n        for(var ipo in this.portsOut)\n            if(this.portsOut[ipo].getName()==name)return this.portsOut[ipo];\n    };\n\n    this.getSerialized=function()\n    {\n        var op={};\n        op.name=this.getName();\n        op.objName=this.objName;\n        op.id=this.id;\n        op.uiAttribs=this.uiAttribs;\n\n        op.portsIn=[];\n        op.portsOut=[];\n\n        for(var i=0;i<this.portsIn.length;i++)\n            op.portsIn.push( this.portsIn[i].getSerialized() );\n\n        for(var ipo in this.portsOut)\n            op.portsOut.push( this.portsOut[ipo].getSerialized() );\n\n        return op;\n    };\n\n    this.getPortByName=function(name)\n    {\n        for(var i=0;i<this.portsIn.length;i++)\n            if(this.portsIn[i].name==name)return this.portsIn[i];\n        \n        for(var ipo in this.portsOut)\n            if(this.portsOut[ipo].name==name)return this.portsOut[ipo];\n    };\n\n};\n\n// ------------------------------------------------------------------------------------\n\nvar Port=function(parent,name,type)\n{\n    var self=this;\n    this.direction=PORT_DIR_IN;\n    this.id=generateUUID();\n    this.parent=parent;\n    this.links=[];\n    this.value=null;\n    this.name=name;\n    this.type=type || OP_PORT_TYPE_VALUE;\n    var valueBeforeLink=null;\n\n    this.__defineGetter__(\"val\", function()\n    {\n        return this.value;\n    });\n\n    this.__defineSetter__(\"val\", function(v)\n    {\n        this.setValue(v);\n    });\n\n    this.onValueChanged=function(){};\n    this.onTriggered=function(){};\n\n    this.setValue=function(v)\n    {\n        if(v!=this.value)\n        {\n            this.value=v;\n            this.onValueChanged();\n\n            for(var i in this.links)\n            {\n                this.links[i].setValue();\n            }\n        }\n    };\n\n    this.getName= function()\n    {\n        return this.name;\n    };\n\n    this.addLink=function(l)\n    {\n        valueBeforeLink=self.value;\n        this.links.push(l);\n    };\n\n    this.isLinkedTo=function(p2)\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i].portIn==p2 || this.links[i].portOut==p2)return true;\n        }\n        return false;\n    };\n\n    this.call=function()\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i].portIn !=this)this.links[i].portIn.onTriggered();\n            if(this.links[i].portOut!=this)this.links[i].portOut.onTriggered();\n        }\n    };\n\n\n    this.execute=function()\n    {\n        console.log('### execute port: '+this.getName() , this.goals.length);\n    };\n\n    this.getTypeString=function()\n    {\n        if(this.type==OP_PORT_TYPE_VALUE)return 'value';\n        if(this.type==OP_PORT_TYPE_FUNCTION)return 'function';\n        if(this.type==OP_PORT_TYPE_TEXTURE)return 'texture';\n    };\n\n    this.getSerialized=function()\n    {\n        var obj={};\n        obj.name=this.getName();\n        obj.value=this.value;\n\n        if(this.direction==PORT_DIR_IN && this.links.length>0)\n        {\n            obj.links=[];\n            for(var i in this.links)\n            {\n                obj.links.push( this.links[i].getSerialized() );\n            }\n        }\n        return obj;\n    };\n\n    this.removeLinks=function()\n    {\n        while(this.links.length>0)\n        {\n            this.links[0].remove();\n        }\n    };\n\n    this.removeLink=function(link)\n    {\n        for(var i in this.links)\n        {\n            if(this.links[i]==link)this.links.splice( i, 1 );\n        }\n        self.setValue(valueBeforeLink);\n    };\n};\n\n\n\n// ---------------------------------------------------------------------------\n\nvar Link = function(scene)\n{\n    this.portIn=null;\n    this.portOut=null;\n    this.scene=scene;\n\n    this.setValue=function()\n    {\n        if(this.portIn.val!=this.portOut.val)\n            this.portIn.val=this.portOut.val;\n    };\n\n    this.remove=function()\n    {\n        this.portIn.removeLink(this);\n        this.portOut.removeLink(this);\n        this.scene.onUnLink(this.portIn,this.portOut);\n        this.portIn=null;\n        this.portOut=null;\n        this.scene=null;\n    };\n\n\n    this.link=function(p1,p2)\n    {\n        if(!Link.canLink(p1,p2))\n        {\n            console.log('cannot link ports!');\n            return false;\n        }\n        if(p1.direction==PORT_DIR_IN)\n        {\n            this.portIn=p1;\n            this.portOut=p2;\n        }\n        else\n        {\n            this.portIn=p2;\n            this.portOut=p1;\n        }\n\n        p1.addLink(this);\n        p2.addLink(this);\n        this.setValue();\n    };\n\n    this.getSerialized=function()\n    {\n        var obj={};\n\n        obj.portIn=this.portIn.getName();\n        obj.portOut=this.portOut.getName();\n        obj.objIn=this.portIn.parent.id;\n        obj.objOut=this.portOut.parent.id;\n\n        return obj;\n    };\n};\n\n\nLink.canLinkText=function(p1,p2)\n{\n    if(p1.direction==PORT_DIR_IN && p1.links.length>0)return 'input port already busy';\n    if(p2.direction==PORT_DIR_IN && p2.links.length>0)return 'input port already busy';\n    if(p1.isLinkedTo(p2))return 'ports already linked';\n    if(!p1)return 'can not link: port 1 invalid';\n    if(!p2)return 'can not link: port 2 invalid';\n    if(p1.direction==p2.direction)return 'can not link: same direction';\n    if(p1.type!=p2.type)return 'can not link: different type';\n    if(p1.parent==p2.parent)return 'can not link: same op';\n    return 'can link';\n};\n\nLink.canLink=function(p1,p2)\n{\n\n    if(p1.direction==PORT_DIR_IN && p1.links.length>0)return false;\n    if(p2.direction==PORT_DIR_IN && p2.links.length>0)return false;\n    if(p1.isLinkedTo(p2))return false;\n    if(!p1)return false;\n    if(!p2)return false;\n    if(p1.direction==p2.direction)return false;\n    if(p1.type!=p2.type)return false;\n    if(p1.parent==p2.parent)return false;\n\n    return true;\n};\n\n\n// ------------------------------------------------------------------------------------\n\n\nvar Scene = function()\n{\n    var self=this;\n    this.ops=[];\n    this.timer=new Timer();\n    this.animFrameOps=[];\n    \n\n    this.clear=function()\n    {\n        this.timer=new Timer();\n        while(this.ops.length>0)\n        {\n            this.deleteOp(this.ops[0].id);\n        }\n    };\n\n    this.addOp=function(objName,uiAttribs)\n    {\n        var op=eval('new '+objName+'();');\n        op.objName=objName;\n        op.uiAttribs=uiAttribs;\n\n        if(op.hasOwnProperty('onAnimFrame')) this.animFrameOps.push(op);\n\n        this.ops.push(op);\n        if(this.onAdd)this.onAdd(op);\n        return op;\n    };\n\n    this.deleteOp=function(opid)\n    {\n        for(var i in this.ops)\n        {\n            if(this.ops[i].id==opid)\n            {\n                this.ops[i].removeLinks();\n                this.onDelete(this.ops[i]);\n                this.ops.splice( i, 1 );\n            }\n        }\n    };\n\n    this.exec=function()\n    {\n        requestAnimationFrame(self.exec);\n        self.timer.update();\n\n        var time=self.timer.getTime();\n\n        for(var i in self.animFrameOps)\n        {\n            self.animFrameOps[i].onAnimFrame(time);\n        }\n\n    };\n\n    this.link=function(op1,port1Name,op2,port2Name)\n    {\n        var port1=op1.getPort(port1Name);\n        var port2=op2.getPort(port2Name);\n\n        if(Link.canLink(port1,port2))\n        {\n            var link=new Link(this);\n            link.link(port1,port2);\n            this.onLink(port1,port2);\n            return link;\n        }\n        else\n        {\n            console.log(Link.canLinkText(port1,port2));\n        }\n    };\n    this.onAdd=function(op){};\n    this.onDelete=function(op){};\n    this.onLink=function(p1,p2){};\n    this.onUnLink=function(p1,p2){};\n    this.serialize=function()\n    {\n        var obj={};\n\n        obj.ops=[];\n        for(var i in this.ops)\n        {\n            obj.ops.push( this.ops[i].getSerialized() );\n        }\n        \n        return JSON.stringify(obj);\n    };\n    this.getOpById=function(opid)\n    {\n        for(var i in this.ops)\n        {\n            if(this.ops[i].id==opid)return this.ops[i];\n        }\n\n    };\n    this.deSerialize=function(obj)\n    {\n        if (typeof obj === \"string\") obj=JSON.parse(obj);\n        var self=this;\n\n        function addLink(opinid,opoutid,inName,outName)\n        {\n            var found=false;\n            if(!found)\n            {\n                self.link(\n                    self.getOpById(opinid),\n                    inName,\n                    self.getOpById(opoutid),\n                    outName\n                    );\n            }\n        }\n\n        // add ops...\n        for(var iop in obj.ops)\n        {\n            var op=this.addOp(obj.ops[iop].objName,obj.ops[iop].uiAttribs);\n            op.id=obj.ops[iop].id;\n\n            for(var ipi in obj.ops[iop].portsIn)\n            {\n                var port=op.getPortByName(obj.ops[iop].portsIn[ipi].name);\n                if(port && port.type!=OP_PORT_TYPE_TEXTURE)port.val=obj.ops[iop].portsIn[ipi].value;\n            }\n\n            for(var ipo in obj.ops[iop].portsOut)\n            {\n                var port2=op.getPortByName(obj.ops[iop].portsOut[ipo].name);\n                if(port2&& port2.type!=OP_PORT_TYPE_TEXTURE)port2.val=obj.ops[iop].portsOut[ipo].value;\n            }\n\n\n            // op.uiAttribs=obj.ops[iop].uiAttribs;\n        }\n\n        // create links...\n        for(iop in obj.ops)\n        {\n            for(var ipi2 in obj.ops[iop].portsIn)\n            {\n\n                for(var ili in obj.ops[iop].portsIn[ipi2].links)\n                {\n                    addLink(\n                        obj.ops[iop].portsIn[ipi2].links[ili].objIn,\n                        obj.ops[iop].portsIn[ipi2].links[ili].objOut,\n                        obj.ops[iop].portsIn[ipi2].links[ili].portIn,\n                        obj.ops[iop].portsIn[ipi2].links[ili].portOut);\n                }\n            }\n\n\n            // for(var ipo in obj.ops[iop].portsOut)\n            // {\n            //     for(var ili in obj.ops[iop].portsOut[ipo].links)\n            //     {\n            //         addLink(\n            //             obj.ops[iop].portsOut[ipo].links[ili].objIn,\n            //             obj.ops[iop].portsOut[ipo].links[ili].objOut,\n            //             obj.ops[iop].portsOut[ipo].links[ili].portIn,\n            //             obj.ops[iop].portsOut[ipo].links[ili].portOut);\n\n            //     }\n            // }\n        }\n\n\n        for(var i in this.ops)\n        {\n            this.ops[i].id=generateUUID();\n        }\n\n\n\n    };\n\n    this.exec();\n\n};\n\n\n\n\n","//http://k3d.ivank.net/K3D.js\n//http://fhtr.blogspot.de/2009/12/3d-models-and-parsing-binary-data-with.html\n//https://github.com/gpjt/webgl-lessons/blob/master/lesson05/index.html\n\nOps.Gl={};\nvar GL=null;\nvar GL=null;\n\nvar currentShader=null;\n\nvar mvMatrix = mat4.create();\nvar pMatrix = mat4.create();\n\nOps.Gl.Renderer = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    var simpleShader=new CGL.Shader();\n \n\n    this.name='WebGL Renderer';\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var initTranslate=vec3.create();\n    vec3.set(initTranslate, 0,0,-2);\n\n    this.onAnimFrame=function(time)\n    {\n        currentShader=simpleShader;\n        gl.enable(gl.DEPTH_TEST);\n        GL.clearColor(0,0,0,1);\n        GL.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n        gl.viewport(0,0,self.canvas.clientWidth,self.canvas.clientHeight);\n        mat4.perspective(pMatrix,45, self.canvas.clientWidth/self.canvas.clientHeight, 0.01, 1100.0);\n        mat4.identity(mvMatrix);\n        mat4.translate(mvMatrix,mvMatrix, initTranslate);\n\n        GL.enable(GL.BLEND);\n        GL.blendFunc(GL.SRC_ALPHA,GL.ONE_MINUS_SRC_ALPHA);\n\n        self.trigger.call();\n    };\n\n    this.canvas = document.getElementById(\"glcanvas\");\n    GL = this.canvas.getContext(\"experimental-webgl\");\n    gl = this.canvas.getContext(\"experimental-webgl\");\n\n};\n\nOps.Gl.Renderer.prototype = new Op();\n\n\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.ClearColor = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='ClearColor';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.r=this.addInPort(new Port(this,\"r\"));\n    this.g=this.addInPort(new Port(this,\"g\"));\n    this.b=this.addInPort(new Port(this,\"b\"));\n\n    this.render.onTriggered=function()\n    {\n        GL.clearColor(self.r.val,self.g.val,self.b.val,1);\n        GL.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n\n        self.trigger.call();\n    };\n\n};\n\nOps.Gl.ClearColor.prototype = new Op();\n\n\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.ClearDepth = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='ClearDepth';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        GL.clear(GL.DEPTH_BUFFER_BIT);\n        self.trigger.call();\n    };\n};\n\nOps.Gl.ClearDepth.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\n    \nOps.Gl.Texture = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='texture';\n    this.filename=this.addInPort(new Port(this,\"file\",OP_PORT_TYPE_VALUE));\n    this.textureOut=this.addOutPort(new Port(this,\"texture\",OP_PORT_TYPE_TEXTURE));\n    \n    this.filename.onValueChanged=function()\n    {\n        console.log('load texture...');\n        self.tex=CGL.Texture.load(self.filename.val);\n        self.textureOut.val=self.tex.tex;\n    };\n\n    this.filename.val='assets/skull.png';\n    // this.filename.onValueChanged();\n    // this.textureOut.val=this.tex.tex;\n};\n\nOps.Gl.Texture.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.Meshes={};\n\n\n\nOps.Gl.Meshes.Rectangle = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='rectangle';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    // this.render.onTriggered=function()\n    // {\n    //     // currentShader.setAttributeVertex( self.squareVertexPositionBuffer.itemSize);\n    //     gl.vertexAttribPointer(currentShader.getAttrVertexPos(),self.squareVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);\n\n    //     currentShader.bind();\n    //     gl.bindBuffer(gl.ARRAY_BUFFER, self.squareVertexPositionBuffer);\n    //     gl.drawArrays(gl.TRIANGLE_STRIP, 0, self.squareVertexPositionBuffer.numItems);\n\n    //     self.trigger.call();\n    // };\n\n    // this.squareVertexPositionBuffer = gl.createBuffer();\n    // gl.bindBuffer(gl.ARRAY_BUFFER, this.squareVertexPositionBuffer);\n    // this.vertices = [\n\n    // ];\n    // gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(this.vertices), gl.STATIC_DRAW);\n    // this.squareVertexPositionBuffer.itemSize = 3;\n    // this.squareVertexPositionBuffer.numItems = 4;\n\n\n    this.render.onTriggered=function()\n    {\n        self.mesh.render(currentShader);\n        self.trigger.call();\n    };\n\n    var geom=new CGL.Geometry();\n    geom.vertices = [\n         1.0,  1.0,  0.0,\n        -1.0,  1.0,  0.0,\n         1.0, -1.0,  0.0,\n        -1.0, -1.0,  0.0\n    ];\n\n    geom.texCoords = [\n         1.0, 1.0,\n         0.0, 1.0,\n         1.0, 0.0,\n         0.0, 0.0\n    ];\n\n    geom.verticesIndices = [\n        0, 1, 2,\n        3, 1, 2\n    ];\n    this.mesh=new CGL.Mesh(geom);\n\n\n};\n\nOps.Gl.Meshes.Rectangle.prototype = new Op();\n\n\n\n\n\n\nOps.Gl.Meshes.ObjMesh = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='OBJ Mesh';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.mesh=null;\n\n    this.render.onTriggered=function()\n    {\n        if(self.mesh)\n        {\n            self.mesh.render(currentShader);\n        }\n\n        self.trigger.call();\n    };\n\n\n    ajaxRequest('assets/skull.obj',function(response)\n    {\n        console.log(response);\n                \n        var r=parseOBJ(response);\n\nunwrap = function(ind, crd, cpi)\n{\n    var ncrd = new Array(Math.floor(ind.length/3)*cpi);\n    for(var i=0; i<ind.length; i++)\n    {\n        for(var j=0; j<cpi; j++)\n        {\n            ncrd[i*cpi+j] = crd[ind[i]*cpi+j];\n        }\n    }\n    return ncrd;\n};\n\nvar l=r.verticesIndices.length;\n        r.vertices = unwrap(r.verticesIndices, r.vertices, 3);\n        r.texCoords = unwrap(r.texCoordsIndices  , r.texCoords  , 2);\n        r.verticesIndices = [];\n        for(var i=0; i<l; i++) r.verticesIndices.push(i);\n\n        \n        self.mesh=new CGL.Mesh(r);\n    });\n\n\n\n};\n\nOps.Gl.Meshes.ObjMesh.prototype = new Op();\n\n\n\n\n\n// ----------------------------------------------------------------\n\n\nOps.Gl.Meshes.Cube = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Cube';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.mesh=null;\n\n    this.render.onTriggered=function()\n    {\n        if(self.mesh!==null)\n        {\n            self.mesh.render(currentShader);\n        }\n\n        self.trigger.call();\n    };\n\n\n    var geom=new CGL.Geometry();\n\n            geom.vertices = [\n            // Front face\n            -1.0, -1.0,  1.0,\n             1.0, -1.0,  1.0,\n             1.0,  1.0,  1.0,\n            -1.0,  1.0,  1.0,\n            // Back face\n            -1.0, -1.0, -1.0,\n            -1.0,  1.0, -1.0,\n             1.0,  1.0, -1.0,\n             1.0, -1.0, -1.0,\n            // Top face\n            -1.0,  1.0, -1.0,\n            -1.0,  1.0,  1.0,\n             1.0,  1.0,  1.0,\n             1.0,  1.0, -1.0,\n            // Bottom face\n            -1.0, -1.0, -1.0,\n             1.0, -1.0, -1.0,\n             1.0, -1.0,  1.0,\n            -1.0, -1.0,  1.0,\n            // Right face\n             1.0, -1.0, -1.0,\n             1.0,  1.0, -1.0,\n             1.0,  1.0,  1.0,\n             1.0, -1.0,  1.0,\n            // Left face\n            -1.0, -1.0, -1.0,\n            -1.0, -1.0,  1.0,\n            -1.0,  1.0,  1.0,\n            -1.0,  1.0, -1.0,\n        ];\n\n        geom.texCoords = [\n          // Front face\n          0.0, 0.0,\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n          // Back face\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n          0.0, 0.0,\n          // Top face\n          0.0, 1.0,\n          0.0, 0.0,\n          1.0, 0.0,\n          1.0, 1.0,\n          // Bottom face\n          1.0, 1.0,\n          0.0, 1.0,\n          0.0, 0.0,\n          1.0, 0.0,\n          // Right face\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n          0.0, 0.0,\n          // Left face\n          0.0, 0.0,\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n        ];\n\n        geom.verticesIndices = [\n            0, 1, 2,      0, 2, 3,    // Front face\n            4, 5, 6,      4, 6, 7,    // Back face\n            8, 9, 10,     8, 10, 11,  // Top face\n            12, 13, 14,   12, 14, 15, // Bottom face\n            16, 17, 18,   16, 18, 19, // Right face\n            20, 21, 22,   20, 22, 23  // Left face\n        ];\n\n\n\n    this.mesh=new CGL.Mesh(geom);\n\n\n\n};\n\nOps.Gl.Meshes.Cube.prototype = new Op();\n\n\n\n\n\n// ----------------------------------------------------------------\n\n\nOps.Gl.Meshes.Plotter = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Plotter';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.v=this.addInPort(new Port(this,\"value\"));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        // currentShader.setAttributeVertex( self.buffer.itemSize);\n        gl.vertexAttribPointer(currentShader.getAttrVertexPos(),self.buffer.itemSize, gl.FLOAT, false, 0, 0);\n        currentShader.bind();\n        gl.bindBuffer(gl.ARRAY_BUFFER, self.buffer);\n        gl.drawArrays(gl.LINE_STRIP, 0, self.buffer.numItems);\n\n        self.trigger.call();\n    };\n\n    this.buffer = gl.createBuffer();\n    \n    var num=50;\n    this.vertices = [];\n    for(var i=0;i<num;i++)\n    {\n        this.vertices.push(1/num*i);\n        this.vertices.push(Math.random()-0.5);\n        this.vertices.push(0);\n    }\n\n    function bufferData()\n    {\n        gl.lineWidth(4);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, self.buffer);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(self.vertices), gl.STATIC_DRAW);\n        self.buffer.itemSize = 3;\n        self.buffer.numItems = num;\n    }\n    bufferData();\n\n    this.v.onValueChanged=function()\n    {\n        self.vertices.splice(0,3);\n        self.vertices.push(1);\n        self.vertices.push(self.v.val);\n        self.vertices.push(0);\n\n        for(var i=0;i<num*3;i+=3)\n        {\n            self.vertices[i]=1/num*i;\n        }\n\n        bufferData();\n    };\n\n\n};\n\nOps.Gl.Meshes.Plotter.prototype = new Op();\n\n\n// ----------------------------------------------------------------\n\nOps.Gl.Meshes.Triangle = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Triangle';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        self.mesh.render(currentShader);\n        self.trigger.call();\n    };\n\n    var geom=new CGL.Geometry();\n    geom.vertices = [\n         0.0,  1.0,  0.0,\n        -1.0,  -1.0,  0.0,\n         1.0, -1.0,  0.0\n    ];\n\n    geom.verticesIndices = [\n        0, 1, 2\n    ];\n    this.mesh=new CGL.Mesh(geom);\n};\n\nOps.Gl.Meshes.Triangle.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.Shader={};\n\nOps.Gl.Shader.BasicMaterial = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='BasicMaterial';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n\n    this.doRender=function()\n    {\n        currentShader=shader;\n\n        if(self.texture.val)\n        {\n            gl.activeTexture(gl.TEXTURE0);\n            gl.bindTexture(gl.TEXTURE_2D, self.texture.val);\n        }\n\n        self.trigger.call();\n    };\n\n    var srcFrag=''+\n        'precision highp float;\\n'+\n        '#ifdef HAS_TEXTURES\\n'+\n        '  varying vec2 texCoord;\\n'+\n        '  uniform sampler2D tex;\\n'+\n        '#endif\\n'+\n        'uniform float r;\\n'+\n        'uniform float g;\\n'+\n        'uniform float b;\\n'+\n        'uniform float a;\\n'+\n        '\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        'vec4 col=vec4(r,g,b,a);\\n'+\n        '#ifdef HAS_TEXTURES\\n'+\n        '   col=texture2D(tex,texCoord);\\n'+\n        '#endif\\n'+\n        'gl_FragColor = col;\\n'+\n        \n        '}\\n';\n\n\n    var shader=new CGL.Shader();\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n\n\n\n\n    this.r=this.addInPort(new Port(this,\"r\"));\n    this.r.onValueChanged=function()\n    {\n        if(!self.r.uniform) self.r.uniform=new CGL.Uniform(shader,'f','r',self.r.val);\n        else self.r.uniform.setValue(self.r.val);\n    };\n\n    this.g=this.addInPort(new Port(this,\"g\"));\n    this.g.onValueChanged=function()\n    {\n        if(!self.g.uniform) self.g.uniform=new CGL.Uniform(shader,'f','g',self.g.val);\n        else self.g.uniform.setValue(self.g.val);\n    };\n\n    this.b=this.addInPort(new Port(this,\"b\"));\n    this.b.onValueChanged=function()\n    {\n        if(!self.b.uniform) self.b.uniform=new CGL.Uniform(shader,'f','b',self.b.val);\n        else self.b.uniform.setValue(self.b.val);\n    };\n\n    this.a=this.addInPort(new Port(this,\"a\"));\n    this.a.onValueChanged=function()\n    {\n        if(!self.a.uniform) self.a.uniform=new CGL.Uniform(shader,'f','a',self.a.val);\n        else self.a.uniform.setValue(self.a.val);\n    };\n\n    this.r.val=Math.random();\n    this.g.val=Math.random();\n    this.b.val=Math.random();\n    this.a.val=1.0;\n\n    this.render.onTriggered=this.doRender;\n    this.texture=this.addInPort(new Port(this,\"texture\",OP_PORT_TYPE_TEXTURE));\n    this.texture.onValueChanged=function()\n    {\n        if(self.texture.val)\n        {\n            console.log('TEXTURE ADDED');\n            self.textureUniform=new CGL.Uniform(shader,'t','tex',0);\n        }\n        else\n        {\n            shader.removeUniform('tex');\n        }\n    };\n\n    this.doRender();\n};\n\nOps.Gl.Shader.BasicMaterial.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Shader.Schwurbel = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Schwurbel';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.timer=this.addInPort(new Port(this,\"time\"));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.doRender=function()\n    {\n        currentShader=shader;\n        if(!self.timer.uniLoc)\n        {\n            shader.bind();\n            self.timer.uniLoc=gl.getUniformLocation(shader.getProgram(), \"time\");\n        }\n        gl.uniform1f(self.timer.uniLoc, self.timer.val);\n\n        self.trigger.call();\n    };\n\n    var srcFrag=''+\n        'precision mediump float;\\n'+\n        'uniform float time;\\n'+\n        '\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        'float c=sqrt(sin(time*0.02)*cos((time+gl_FragCoord.y)*0.02)+sin(time+gl_FragCoord.x*0.02)*sin(time+gl_FragCoord.y*0.02));\\n'+\n        'gl_FragColor = vec4( c,c,c,1.0);\\n'+\n        '}\\n';\n\n    var shader=new CGL.Shader();\n    shader.compile(shader.getDefaultVertexShader(),srcFrag);\n\n    this.doRender();\n    this.render.onTriggered=this.doRender;\n};\n\nOps.Gl.Shader.Schwurbel.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Shader.Noise = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Noise';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var timeUniform=-1;\n    var timeStart=-1;\n\n    this.doRender=function()\n    {\n        if(timeUniform==-1)\n        {\n            timeStart=Date.now();\n            shader.bind();\n            timeUniform=gl.getUniformLocation(shader.getProgram(), \"time\");\n        }\n\n        gl.uniform1f(timeUniform, (Date.now()-timeStart)/1000);\n        currentShader=shader;\n\n        self.trigger.call();\n    };\n\n    var srcFrag=''+\n        'precision mediump float;\\n'+\n        'uniform float time;\\n'+\n        '\\n'+\n        'float random(vec2 co)\\n'+\n        '{\\n'+\n        '   return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\\n'+\n        '}\\n'+\n        'void main()\\n'+\n        '{\\n'+\n        '   float c=random(time*gl_FragCoord.xy);'+\n        '   gl_FragColor = vec4( c,c,c,1.0);\\n'+\n        '}\\n';\n\n\n    var shader=new CGL.Shader();\n    shader.compile(shader.getDefaultVertexShader(),srcFrag);\n\n    this.doRender();\n    this.render.onTriggered=this.doRender;\n};\n\nOps.Gl.Shader.Noise.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.Matrix={};\n\n\nOps.Gl.Matrix.Translate = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='translate';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.x=this.addInPort(new Port(this,\"x\"));\n    this.y=this.addInPort(new Port(this,\"y\"));\n    this.z=this.addInPort(new Port(this,\"z\"));\n    this.x.val=0.0;\n    this.y.val=0.0;\n    this.z.val=0.0;\n    \n    var vec=vec3.create();\n\n    this.render.onTriggered=function()\n    {\n        vec3.set(vec, self.x.val,self.y.val,self.z.val);\n\n        mat4.translate(mvMatrix,mvMatrix, vec);\n        self.trigger.call();\n    };\n\n};\n\nOps.Gl.Matrix.Translate.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Matrix.Scale = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var DEG2RAD = 3.14159/180.0;\n    this.name='scale';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.scale=this.addInPort(new Port(this,\"scale\"));\n    \n    var vScale=vec3.create();\n    var oldMatrix = mat4.create();\n    var transMatrix = mat4.create();\n    mat4.identity(transMatrix);\n\n    var doScale=false;\n\n    this.render.onTriggered=function()\n    {\n        mat4.copy(oldMatrix, mvMatrix);\n\n        mat4.multiply(mvMatrix,mvMatrix,transMatrix);\n\n        self.trigger.call();\n\n        mat4.copy(mvMatrix,oldMatrix);\n    };\n\n    var updateMatrix=function()\n    {\n        mat4.identity(transMatrix);\n        mat4.scale(transMatrix,transMatrix, vScale);\n    };\n\n    this.scaleChanged=function()\n    {\n        doScale=false;\n        //if(self.scaleX.val!==0.0 || self.scaleY.val!==0.0 || self.scaleZ.val!==0.0)doScale=true;\n        vec3.set(vScale, self.scale.val,self.scale.val,self.scale.val);\n        updateMatrix();\n    };\n\n    this.scale.onValueChanged=this.scaleChanged;\n\n    this.scale.val=1.0;\n\n    updateMatrix();\n};\n\nOps.Gl.Matrix.Scale.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.Matrix.Transform = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var DEG2RAD = 3.14159/180.0;\n    this.name='transform';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.posX=this.addInPort(new Port(this,\"posX\"));\n    this.posY=this.addInPort(new Port(this,\"posY\"));\n    this.posZ=this.addInPort(new Port(this,\"posZ\"));\n\n    this.scaleX=this.addInPort(new Port(this,\"scaleX\"));\n    this.scaleY=this.addInPort(new Port(this,\"scaleY\"));\n    this.scaleZ=this.addInPort(new Port(this,\"scaleZ\"));\n\n    this.rotX=this.addInPort(new Port(this,\"rotX\"));\n    this.rotY=this.addInPort(new Port(this,\"rotY\"));\n    this.rotZ=this.addInPort(new Port(this,\"rotZ\"));\n    \n    var vPos=vec3.create();\n    var vScale=vec3.create();\n    var oldMatrix = mat4.create();\n    var transMatrix = mat4.create();\n    mat4.identity(transMatrix);\n\n    var doScale=false;\n    var doTranslate=false;\n\n    this.render.onTriggered=function()\n    {\n        mat4.copy(oldMatrix, mvMatrix);\n\n        mat4.multiply(mvMatrix,mvMatrix,transMatrix);\n\n        self.trigger.call();\n\n        mat4.copy(mvMatrix,oldMatrix);\n    };\n\n    var updateMatrix=function()\n    {\n        mat4.identity(transMatrix);\n        if(doTranslate)mat4.translate(transMatrix,transMatrix, vPos);\n\n        if(self.rotX.val!==0)mat4.rotateX(transMatrix,transMatrix, self.rotX.val*DEG2RAD);\n        if(self.rotY.val!==0)mat4.rotateY(transMatrix,transMatrix, self.rotY.val*DEG2RAD);\n        if(self.rotZ.val!==0)mat4.rotateZ(transMatrix,transMatrix, self.rotZ.val*DEG2RAD);\n\n        if(doScale)mat4.scale(transMatrix,transMatrix, vScale);\n    };\n\n    this.translateChanged=function()\n    {\n        doTranslate=false;\n        if(self.posX.val!==0.0 || self.posY.val!==0.0 || self.posZ.val!==0.0)doTranslate=true;\n        vec3.set(vPos, self.posX.val,self.posY.val,self.posZ.val);\n        updateMatrix();\n    };\n\n    this.scaleChanged=function()\n    {\n        doScale=false;\n        if(self.scaleX.val!==0.0 || self.scaleY.val!==0.0 || self.scaleZ.val!==0.0)doScale=true;\n        vec3.set(vScale, self.scaleX.val,self.scaleY.val,self.scaleZ.val);\n        updateMatrix();\n    };\n\n    this.rotChanged=function()\n    {\n        updateMatrix();\n    };\n\n    this.rotX.onValueChanged=this.rotChanged;\n    this.rotY.onValueChanged=this.rotChanged;\n    this.rotZ.onValueChanged=this.rotChanged;\n\n    this.scaleX.onValueChanged=this.scaleChanged;\n    this.scaleY.onValueChanged=this.scaleChanged;\n    this.scaleZ.onValueChanged=this.scaleChanged;\n\n    this.posX.onValueChanged=this.translateChanged;\n    this.posY.onValueChanged=this.translateChanged;\n    this.posZ.onValueChanged=this.translateChanged;\n\n    this.rotX.val=0.0;\n    this.rotY.val=0.0;\n    this.rotZ.val=0.0;\n\n    this.scaleX.val=1.0;\n    this.scaleY.val=1.0;\n    this.scaleZ.val=1.0;\n\n    this.posX.val=0.0;\n    this.posY.val=0.0;\n    this.posZ.val=0.0;\n\n    updateMatrix();\n};\n\nOps.Gl.Matrix.Transform.prototype = new Op();\n\n\n\n\n\n","// https://github.com/automat/foam-gl\n// http://howlerjs.com/\n//http://learningwebgl.com/lessons/lesson01/index.html\n\n\nOps.Log = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='logger';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.input=this.addInPort(new Port(this,\"input\"));\n    this.input.val='';\n\n    this.exec=function()\n    {\n        console.log(\"[log] \" + self.input.val);\n    };\n\n    this.exe.onTriggered=this.exec;\n    this.input.onValueChanged=this.exec;\n};\nOps.Log.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\n\nOps.CallsPerSecond = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='CallsPerSecond';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.timeStart=0;\n    this.cps=0;\n\n    this.exe.onTriggered=function()\n    {\n        if(self.timeStart===0)self.timeStart=Date.now();\n        var now = Date.now();\n\n        if(now-self.timeStart>1000)\n        {\n            self.timeStart=Date.now();\n            console.log('cps: '+self.cps);\n            self.cps=0;\n        }\n\n        self.cps++;\n    };\n};\nOps.CallsPerSecond.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\nOps.Value = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Value';\n    this.v=this.addInPort(new Port(this,\"value\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.v.val;\n    };\n\n    this.v.onValueChanged=this.exec;\n};\n\nOps.Value.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\n\nOps.TimeLineTime = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='TimeLineTime';\n    this.theTime=this.addOutPort(new Port(this,\"time\"));\n\n    this.onAnimFrame=function(time)\n    {\n        this.theTime.val=time;\n    };\n\n};\nOps.TimeLineTime.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\n\n\n\nOps.Repeat = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Repeat';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.num=this.addInPort(new Port(this,\"num\"));\n    this.num.val=5;\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n    this.idx=this.addOutPort(new Port(this,\"index\"));\n\n    this.exe.onTriggered=function()\n    {\n\n        for(var i=0;i<self.num.value;i++)\n        {\n            self.idx.val=i;\n            self.trigger.call();\n        }\n\n    };\n};\nOps.Repeat.prototype = new Op();\n\n\n\n\n// ---------------------------------------------------------------------------\n\n\nOps.IfTrueThen = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='if true then';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.bool=this.addInPort(new Port(this,\"boolean\"));\n    this.bool.val=false;\n\n    this.triggerThen=this.addOutPort(new Port(this,\"then\",OP_PORT_TYPE_FUNCTION));\n    this.triggerElse=this.addOutPort(new Port(this,\"else\",OP_PORT_TYPE_FUNCTION));\n\n    this.exe.onTriggered=function()\n    {\n        if(self.bool.val===true)\n        {\n            self.triggerThen.call();\n        }\n        else\n        {\n            self.triggerElse.call();\n        }\n    };\n\n    this.bool.onValueChanged=function()\n    {\n        self.exe.onTriggered();\n    };\n\n};\nOps.IfTrueThen.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------\n\n\nOps.Group = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='group';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.triggers=[];\n\n    for(var i=0;i<10;i++)\n    {\n        this.triggers.push( this.addOutPort(new Port(this,\"trigger \"+i,OP_PORT_TYPE_FUNCTION)) );\n    }\n\n    this.exe.onTriggered=function()\n    {\n        for(var i in self.triggers)\n        {\n            self.triggers[i].call();\n        }\n\n    };\n\n\n};\nOps.Group.prototype = new Op();\n\n\n\n\n\n// ---------------------------------------------------------------------------\n\nOps.Interval = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='Interval';\n    this.timeOutId=-1;\n    this.interval=this.addInPort(new Port(this,\"interval\"));\n    this.interval.val=1000;\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.exec=function()\n    {\n        if(this.timeOutId!=-1)return;\n        var self=this;\n\n        this.timeOutId=setTimeout(function()\n        {\n            self.timeOutId=-1;\n            self.trigger.call();\n            self.exec();\n        },\n        this.interval.val );\n    };\n\n    this.exec();\n\n};\n\nOps.Interval.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\n// --------------------------------------------------------------------------\n\nOps.Anim={};\n\nOps.Anim.SinusAnim = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='SinusAnim';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    var self=this;\n\n    this.exe.onTriggered=function()\n    {\n        self.result.val=Math.sin(Date.now()/1000.0);\n    };\n\n    this.exe.onTriggered();\n\n};\n\nOps.Anim.SinusAnim.prototype = new Op();\n\n\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Anim.RelativeTime = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='RelativeTime';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    var self=this;\n    var startTime=Date.now()/1000.0;\n\n    this.exe.onTriggered=function()\n    {\n        self.result.val=Date.now()/1000.0-startTime;\n    };\n\n    this.exe.onTriggered();\n\n};\n\nOps.Anim.RelativeTime.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\nOps.Input={};\n\nOps.Input.GamePad = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='GamePad';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.numPads=this.addOutPort(new Port(this,\"numPads\"));\n    this.axis1=this.addOutPort(new Port(this,\"axis1\"));\n    this.axis2=this.addOutPort(new Port(this,\"axis2\"));\n    this.axis3=this.addOutPort(new Port(this,\"axis3\"));\n    this.axis4=this.addOutPort(new Port(this,\"axis4\"));\n    this.button0=this.addOutPort(new Port(this,\"button0\"));\n    this.button1=this.addOutPort(new Port(this,\"button1\"));\n    this.button2=this.addOutPort(new Port(this,\"button2\"));\n    this.button3=this.addOutPort(new Port(this,\"button3\"));\n    this.button4=this.addOutPort(new Port(this,\"button4\"));\n\n    var self=this;\n    var startTime=Date.now()/1000.0;\n\n    this.exe.onTriggered=function()\n    {\n        var gamePads=navigator.getGamepads();\n        var count=0;\n\n        for(var gp in gamePads)\n        {\n            if(gamePads[gp].axes)\n            {\n                self.axis1.val=gamePads[gp].axes[0];\n                self.axis2.val=gamePads[gp].axes[1];\n                self.axis3.val=gamePads[gp].axes[2];\n                self.axis4.val=gamePads[gp].axes[3];\n\n                self.button0.val=gamePads[gp].buttons[0].pressed;\n                self.button0.val=gamePads[gp].buttons[1].pressed;\n                self.button2.val=gamePads[gp].buttons[2].pressed;\n                self.button3.val=gamePads[gp].buttons[3].pressed;\n                self.button4.val=gamePads[gp].buttons[4].pressed;\n\n                count++;\n            }\n        }\n\n        self.numPads.val=count;\n    };\n\n    this.exe.onTriggered();\n\n};\n\nOps.Input.GamePad.prototype = new Op();\n\n","Ops.Math={};\n\n\nOps.Math.Random = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='random';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.exe.onTriggered=function()\n    {\n        self.result.val=Math.random();\n    };\n\n    this.exe.onTriggered();\n};\n\nOps.Math.Random.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\n\n\nOps.Math.MapRange = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='map value range';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.v=this.addInPort(new Port(this,\"value\"));\n    this.old_min=this.addInPort(new Port(this,\"old min\"));\n    this.old_max=this.addInPort(new Port(this,\"old max\"));\n    this.new_min=this.addInPort(new Port(this,\"new min\"));\n    this.new_max=this.addInPort(new Port(this,\"new max\"));\n\n    this.exec= function()\n    {\n        if(self.v.val>self.old_max.val)\n        {\n            self.result.val=self.new_max.val;\n            return;\n        }\n        else\n        if(self.v.val<self.old_min.val)\n        {\n            self.result.val=self.new_min.val;\n            return;\n        }\n\n        var nMin=parseFloat(self.new_min.val);\n        var nMax=parseFloat(self.new_max.val);\n        var oMin=parseFloat(self.old_min.val);\n        var oMax=parseFloat(self.old_max.val);\n        var x=parseFloat(self.v.val);\n\n        var reverseInput = false;\n        var oldMin = Math.min( oMin, oMax );\n        var oldMax = Math.max( oMin, oMax );\n        if(oldMin!= oMin) reverseInput = true;\n\n        var reverseOutput = false;\n        var newMin = Math.min( nMin, nMax );\n        var newMax = Math.max( nMin, nMax );\n        if(newMin != nMin) reverseOutput = true;\n\n        var portion=0;\n\n        if(reverseInput) portion = (oldMax-x)*(newMax-newMin)/(oldMax-oldMin);\n            else portion = (x-oldMin)*(newMax-newMin)/(oldMax-oldMin);\n        \n        if(reverseOutput) self.result.val = newMax - portion;\n            else self.result.val = portion + newMin;\n\n    };\n\n    this.v.val=0;\n    this.old_min.val=-1;\n    this.old_max.val=1;\n    this.new_min.val=0;\n    this.new_max.val=1;\n\n\n    this.v.onValueChanged=this.exec;\n    this.old_min.onValueChanged=this.exec;\n    this.old_max.onValueChanged=this.exec;\n    this.new_min.onValueChanged=this.exec;\n    this.new_max.onValueChanged=this.exec;\n\n    this.exec();\n\n};\n\nOps.Math.MapRange.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Abs = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    this.name='abs';\n    this.number=this.addInPort(new Port(this,\"number\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.number.onValueChanged=function()\n    {\n        self.result.val=Math.abs(self.number.val);\n    };\n};\n\nOps.Math.Abs.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Sin = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    this.name='Sinus';\n    this.number=this.addInPort(new Port(this,\"number\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.number.onValueChanged=function()\n    {\n        self.result.val=Math.sin(self.number.val);\n    };\n};\n\nOps.Math.Sin.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Sum = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='sum';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=parseFloat(self.number1.val)+parseFloat(self.number2.val);\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Sum.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Multiply = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='multiply';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val*self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n\n};\n\nOps.Math.Multiply.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Divide = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Divide';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val/self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Divide.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\nOps.Math.Compare={};\n\n\n\n\nOps.Math.Compare.IsEven = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='isEven';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n\n    this.exec= function()\n    {\n        self.result.val=!( self.number1.val & 1 );\n    };\n\n    this.number1.onValueChanged=this.exec;\n};\n\nOps.Math.Compare.IsEven.prototype = new Op();\n\n\n\nOps.Math.Compare.Greater = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Greater';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val>self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Compare.Greater.prototype = new Op();\n\n\n\n\n\n\nOps.Math.Compare.Between = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Between';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number=this.addInPort(new Port(this,\"value\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n    this.number.val=2.0;\n    this.number1.val=1.0;\n    this.number2.val=3.0;\n\n    this.exec= function()\n    {\n        self.result.val=\n            (\n                self.number.val>Math.min(self.number1.val,self.number2.val) &&\n                self.number.val<Math.max(self.number1.val,self.number2.val)\n            );\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n    this.number.onValueChanged=this.exec;\n};\nOps.Math.Compare.Between.prototype = new Op();\n\n\n\n\nOps.Math.Compare.Lesser = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Lesser';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val<self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n\n};\n\nOps.Math.Compare.Lesser.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Math.Compare.Equals = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Equals';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.result.val=self.number1.val==self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Compare.Equals.prototype = new Op();\n\n"],"sourceRoot":"/source/"}