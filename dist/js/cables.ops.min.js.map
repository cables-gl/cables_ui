{"version":3,"sources":["ops.array.js","ops.audio.js","ops.devices.js","ops.experimental.js","ops.gl.imgeffects.js","ops.gl.js","ops.gl.materials.js","ops.gl.meshes.js","ops.gl.vertexeffects.js","ops.js","ops.json.js","ops.json3d.js","ops.math.js","ops.net.js","ops.ui.js","ops.wasdcam.js"],"names":["Ops","Array","RandomArray","self","this","Op","apply","arguments","name","numValues","addInPort","Port","OP_PORT_TYPE_VALUE","values","addOutPort","OP_PORT_TYPE_ARRAY","arr","onValueChanged","length","val","i","Math","random","prototype","ArrayGetValue","update","value","set","array","index","get","type","WebAudio","Output","window","audioContext","webkitAudioContext","AudioContext","audioIn","OP_PORT_TYPE_OBJECT","oldAudioIn","console","log","disconnect","destination","connect","AudioPlayer","stop","media","createBufferSource","buffer","filter","audioOut","seek","gui","CGL","getLoadingStatus","audio","patch","timer","isPlaying","paused","play","pause","currentTime","getTime","t","isFinite","playing","start","file","display","volume","createGain","gain","loadingFilename","incrementLoadingAssets","Audio","src","canplaythrough","decrementLoadingAssets","removeEventListener","addEventListener","createMediaElementSource","request","XMLHttpRequest","open","responseType","onload","audioData","response","decodeAudioData","res","send","onPlayPause","onTimeChange","Oscillator","oscillator","createOscillator","frequency","MicrophoneIn","microphone","userMediaAvailable","navigator","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","stream","createMediaStreamSource","e","Analyser","refresh","OP_PORT_TYPE_FUNCTION","avgVolume","fftOut","analyser","createAnalyser","smoothingTimeConstant","fftSize","fftBufferLength","fftDataArray","onTriggered","Uint8Array","frequencyBinCount","getByteFrequencyData","average","Devices","MotionSensor","mulAxis","foundSensor","axis1","axis2","axis3","accX","accY","accZ","lastTime","lastTimeAcc","ondevicemotion","event","Date","now","accelerationIncludingGravity","x","y","z","alpha","beta","gamma","GamePad","exe","numPads","axis4","button0","button1","button2","button3","button4","gamePads","getGamepads","count","gp","axes","buttons","pressed","LeapMotion","transX","transY","transZ","finger0X","finger0Y","finger0Z","Leap","loop","frame","_translation","fingers","tipPosition","Experimental","ImageStream","run","source","EventSource","url","image","data","cgl","tex","OP_PORT_TYPE_TEXTURE","texture","Texture","setSize","$","append","document","getElementById","initTexture","setTimeout","SaltedPerceptionMaterial","zBufferTex","render","trigger","doRender","setShader","shader","gl","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","call","setPreviousShader","shader_vert","endl","shader_frag","Shader","setSource","zBufferTexUniform","removeUniform","define","Uniform","removeDefine","zScale","uniform","setValue","time","Gl","TextureEffects","ImageCompose","updateResolution","useVPSize","w","getViewPort","h","width","height","effect","setSourceTexture","texOut","getCurrentSourceTexture","resize","parseInt","preview","TextureEffect","currentTextureEffect","onResize","disable","SCISSOR_TEST","startEffect","enable","onPreviewChanged","showPreview","Invert","onLoaded","compile","srcFrag","getDefaultVertexShader","bind","finish","Scroll","amountX","amountY","amountXUniform","amountYUniform","Desaturate","amount","amountUniform","PixelDisplacement","displaceTex","TEXTURE1","MixImage","DrawImage","imageAlpha","TEXTURE2","previewAlpha","blendMode","alphaSrc","removeAlphaSrc","invAlphaChannel","DepthTexture","farPlane","nearPlane","uniFarplane","uniNearplane","SSAO","dist","uniAmount","uniDist","AlphaMask","method","WipeTransition","fade","fadeWidth","fadeUniform","fadeWidthUniform","ColorLookup","posy","posyUniform","BrightnessContrast","amountBright","amountBrightUniform","RemoveAlpha","ColorOverlay","r","colorPick","g","b","a","uniformR","uniformG","uniformB","uniformA","ColorChannel","channelR","channelG","channelB","mono","RgbMultiply","Hue","hue","uniformHue","Color","Vignette","lensRadius1","lensRadius2","uniLensRadius1","uniLensRadius2","Blur","iterations","uniDirX","uniDirY","uniWidth","uniHeight","FXAA","changeRes","uWidth","texWidth","uHeight","texHeight","fxaa_span","fxaa_reduceMin","fxaa_reduceMul","uniformSpan","uniformMul","uniformMin","Noise","timeUniform","ChromaticAberration","Renderer","identTranslate","vec3","create","onDelete","removeOnAnimFrame","onAnimFrame","canvasWidth","setCanvas","config","glCanvasId","canvas","clientWidth","canvasHeight","clientHeight","renderStart","previewTexture","texturePreviewer","texturePreview","renderEnd","DEPTH_TEST","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","setViewPort","mat4","perspective","pMatrix","pushPMatrix","pushMvMatrix","identity","mvMatrix","translate","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","beginFrame","popMvMatrix","popPMatrix","endFrame","Perspective","changed","frameStore","fovy","fovY","zFar","zNear","LetterBox","_w","ratio","_h","_x","_y","ops","scissor","AspectRatioBorder","ClearAlpha","colorMask","GL_COLOR_BUFFER_BIT","GL_DEPTH_BUFFER_BIT","ClearColor","FaceCulling","facing","whichFace","BACK","cullFace","CULL_FACE","FRONT","FRONT_AND_BACK","Depth","write","depthFunc","theDepthFunc","LEQUAL","NEVER","ALWAYS","LESS","GREATER","EQUAL","NOTEQUAL","depthMask","ClearDepth","Wireframe","lineWidth","wireframe","Points","pointSize","points","ColorPick","readPixels","RGBA","UNSIGNED_BYTE","pixelValues","ReadPixel","Mouse","normalize","mouseX","multiply","mouseY","updateSmooth","speed","distanceX","abs","lineX","speedX","round","distanceY","lineY","speedY","mouseLeave","smooth","smoothSpeed","smoothTimer","setInterval","clearTimeout","onmouseenter","onmouseleave","onmousemove","offsetX","offsetY","TextureEmpty","textureOut","sizeChanged","TextureCycler","setTextureArray","textures","portsIn","isLinked","push","checkPorts","allLinked","addPort","n","texturePorts","newPort","onLinkChanged","getPort","p","getPortByName","startsWith","filename","cgl_filter","FILTER_MIPMAP","reload","load","getFilePath","uiAttr","isPowerOfTwo","warning","FILTER_NEAREST","FILTER_LINEAR","TextureText","ctx","clearRect","fillStyle","font","fontSize","textAlign","align","fillText","text","restore","fontImage","fromImage","createElement","id","style","body","getElementsByTagName","appendChild","getContext","Meshes","Plotter","bufferData","bindBuffer","ARRAY_BUFFER","Float32Array","vertices","STATIC_DRAW","itemSize","numItems","num","v","getShader","enableVertexAttribArray","getAttrVertexPos","vertexAttribPointer","FLOAT","drawArrays","LINE_STRIP","createBuffer","splice","Matrix","Translate","vec","Scale","scale","vScale","transMatrix","doScale","updateMatrix","scaleChanged","LookatCamera","centerX","centerY","centerZ","eyeX","eyeY","eyeZ","vecUpX","vecUpY","vecUpZ","vUp","vEye","vCenter","lookAt","Shear","shearMatrix","tan","shearX","shearY","Transform","updateTranslation","doTranslate","posX","posY","posZ","vPos","translationChanged","updateScale","scaleX","scaleY","scaleZ","rotX","rotY","rotZ","rotChanged","doUpdateMatrix","rotateX","DEG2RAD","rotateY","rotateZ","translateChanged","MatrixMul","matrix","RandomCluster","reset","randoms","randomsRot","randomsFloats","fromValues","size","idx","rnd","Render2Texture","bindFramebuffer","FRAMEBUFFER","frameBuf","renderbuffer","deleteRenderbuffer","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","framebufferTexture2D","COLOR_ATTACHMENT0","framebufferRenderbuffer","DEPTH_ATTACHMENT","textureDepth","viewport","resetViewPort","getExtension","isDepthTexture","texDepth","createFramebuffer","Spray","Particle","pos","startPos","startTime","lifeTime","lifeTimePercent","endTime","moveVec","idDead","timeRunning","isDead","reAnimate","lifetime","particles","Identity","CanvasSize","ViewPortSize","Performance","ll","performance","ms","queue","shift","queueChilds","childsTime","frames","fpsStartTime","fps","avgMs","avgMsChilds","text2","text3","profileUniformCount","selfTime","fillRect","k","hasErrors","startTimeChilds","countFrames","error","getError","NO_ERROR","remove","CABLES","UI","setLayout","bindTextures","ShowNormalsMaterial","MatCapMaterial","shaderOut","ignoreValueSerialize","textureUniform","textureDiffuse","textureDiffuseUniform","textureNormal","textureNormalUniform","normalScale","normalScaleUniform","diffuseRepeatX","diffuseRepeatY","diffuseRepeatXUniform","diffuseRepeatYUniform","projectCoords","normalRepeatX","normalRepeatY","normalRepeatXUniform","normalRepeatYUniform","srcVert","setModules","GradientMaterial","screenSpace","r2","g2","b2","a2","r3","g3","b3","a3","colA","colB","colC","uniformWidth","uniformHeight","BasicMaterial","textureOpacity","textureOpacityUniform","colorizeTexture","doBillboard","TextureSinusWobble","Triangle","mesh","geom","Geometry","verticesIndices","Mesh","Rectangle","rebuild","pivotX","pivotY","texCoords","setGeom","FullscreenRectangle","currentViewPort","slice","xx","xy","ortho","Circle","calc","degInRad","oldPosX","oldPosY","oldPosXTexCoord","oldPosYTexCoord","oldPosXIn","oldPosYIn","oldPosXTexCoordIn","oldPosYTexCoordIn","posxTexCoord","posyTexCoord","posx","innerRadius","segments","percent","cos","radius","sin","addFace","posxIn","posyIn","posxTexCoordIn","posyTexCoordIn","steps","invertSteps","ObjMesh","calcNormals","reloadObj","ajaxRequest","parseOBJ","unwrap","ind","crd","cpi","ncrd","floor","j","l","texCoordsIndices","vertexNormals","vertexNormalIndices","Cube","Spline","subDivs","centerpoint","SplinePoints","thickness","triggerPoints","LINES","SplinePoint","transformMat4","TransformToGeometryVertices","geometry","ShaderEffects","TextureShiftGlitch","removeModule","module","extrude","unipos","uniheight","srcHeadVert","srcBodyVert","addModule","srcHeadFrag","srcBodyFrag","prefix","VertexSinusWobble","setDefines","toAxisX","toAxisY","toAxisZ","uniTime","uniFrequency","phase","uniPhase","VertexExtrudeGlitch","min","max","uniMin","uniMax","uniExtrude","VertexGlitch","VertexDisplacementMap","uniTexture","TEXTURE4","MeshMorphTargets","geometry0","geometry1","JSON","parse","stringify","morphTargets","uniFade","MorphMesh","Log","input","exec","Profiler","CallsPerSecond","cps","timeStart","cpsCount","Value","result","Value2d","resultX","resultY","Value3d","resultZ","ColorValue","outR","outG","outB","outA","TimeLineTime","theTime","TimeLineDelay","delay","pauseEvents","setDelay","TimeLineDelayFrames","TimeLineOverwrite","newTime","realTime","overwriteTime","Repeat","ArrayIterator","IfTrueThen","bool","triggerThen","triggerElse","IfBetweenThen","number","ToggleBool","boolOut","Group","triggers","uiAttribs","Sequence","TimedSequence","current","ignoreInSubPatch","triggerAlways","currentKeyTime","lastUiValue","_time","spl","setUiActiveState","anim","undefined","parent","getKey","isAnimated","links","portIn","patchId","getCurrentSubPatch","outIndex","Interval","timeOutId","interval","Anim","SinusAnim","mul","amplitude","parseFloat","RelativeTime","Frequency","TimeDiff","cableVars","Variable","varName","readValue","String","concat","string1","string2","LoadingStatus","checkPreRender","preRenderTimes","preRenderInc","preRenderDone","preRenderTime","preRenderStatus","finishedLoading","finished","preRenderTimeFrames","numAssets","loading","firstTime","preRenderAnimFrame","setTime","numMaxLoadingAssets","keys","TriggerCounter","Json","jsonValue","key","hasOwnProperty","jsonFile","Json3d","json3dFile","oldScene","currentScene","scene","addChild","parentOp","parentPort","ch","maxx","children","transOp","addOp","mat","transformation","transpose","title","link","meshes","meshOp","ajax","err","_data","xhr","root","rootnode","getValue","currentIndex","info","jsonMesh","isNumeric","verts","centerPivot","off","normals","texturecoords","faces","nfo","geometryOut","Random","minusPlusOne","Clamp","clamp","updateAnims","SmoothStep","smoothstep","SmootherStep","smootherstep","MapRange","old_min","old_max","new_min","new_max","nMin","nMax","oMin","oMax","reverseInput","oldMin","oldMax","reverseOutput","newMin","newMax","portion","Abs","Sin","setValues","Sum","number1","number2","isNaN","Subtract","Multiply","Modulo","pingpong","doPingPong","Divide","Compare","IsEven","Greater","Between","Lesser","Equals","Net","Websocket","checkConnection","connected","timeout","connectedTo","connection","close","WebSocket","MozWebSocket","onerror","message","onclose","onopen","onmessage","json","Ui","Comment","Patch","hasDynamicPort","OP_PORT_TYPE_DYNAMIC","getName","getNewDynamicPort","shouldLink","ipi","getSubPatchInputOp","patchInputOP","getSubPatchOp","subPatch","warn","p1","p2","dynPort","otherPort","pOut","updateSubPatches","maxPatchId","onCreate","deleteOp","PatchInput","getPatchOp","PatchOutput","patchOutput","WASDCamera","calcCameraMovement","camMovementXComponent","camMovementYComponent","camMovementZComponent","pitchFactor","yawFactor","pressedW","movementSpeedFactor","pressedS","pressedA","yRotRad","pressedD","speedx","speedy","speedz","moveCallback","mouseSensitivity","movementY","movementX","lockChangeCallback","pointerLockElement","mozPointerLockElement","webkitPointerLockElement","keyDown","keyUp","isLocked","move","lastMove","which","outPosX","outPosY","outPosZ","requestPointerLock","mozRequestPointerLock","webkitRequestPointerLock"],"mappings":"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","file":"cables.ops.min.js","sourcesContent":["\n\nOps.Array=Ops.Array||{};\n\n// -----------------------------------------\n\nOps.Array.RandomArray = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n\n    this.name='RandomArray';\n    this.numValues=this.addInPort(new Port(this, \"numValues\",OP_PORT_TYPE_VALUE));\n    this.values=this.addOutPort(new Port(this, \"values\",OP_PORT_TYPE_ARRAY));\n    var arr=[];\n\n\n    this.numValues.onValueChanged = function()\n    {\n        arr.length=self.numValues.val;\n        for(var i=0;i<arr.length;i++)\n        {\n            arr[i]=Math.random();\n        }\n        self.values.val=arr;\n    };\n\n    this.numValues.val=100;\n};\n\nOps.Array.RandomArray.prototype = new Op();\n\n// -----------------------------------------\n\n\nOps.Array.ArrayGetValue = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='ArrayGetValue';\n    this.array=this.addInPort(new Port(this, \"array\",OP_PORT_TYPE_ARRAY));\n    this.index=this.addInPort(new Port(this, \"index\",OP_PORT_TYPE_VALUE,{type:'int'}));\n    this.value=this.addOutPort(new Port(this, \"value\",OP_PORT_TYPE_VALUE));\n    var arr=[];\n\n    function update()\n    {\n        self.value.set( self.array.val[self.index.get()] );\n        // console.log('self.array.val',self.array.val[self.index.val]);\n    }\n\n    this.index.onValueChanged=update;\n    this.array.onValueChanged=update;\n};\n\nOps.Array.ArrayGetValue.prototype = new Op();\n\n\n","\n// TODO: CLAMP!\n\nOps.WebAudio=Ops.WebAudio || {};\n\nOps.WebAudio.Output = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    if(!window.audioContext) \n        if('webkitAudioContext' in window) audioContext = new webkitAudioContext();\n            else audioContext = new AudioContext();\n\n    this.name='audioOutput';\n    this.audioIn=this.addInPort(new Port(this,\"audio in\",OP_PORT_TYPE_OBJECT));\n\n    this.oldAudioIn=null;\n\n    this.audioIn.onValueChanged = function()\n    {\n        if(!self.audioIn.val)return;\n        console.log(self.audioIn.val);\n        if (self.audioIn.val === null) {\n            if (self.oldAudioIn !== null) {\n                self.oldAudioIn.disconnect(audioContext.destination);\n            }\n        } else {\n            self.audioIn.val.connect(audioContext.destination);\n        }\n        self.oldAudioIn=self.audioIn.val;\n    };\n};\n\nOps.WebAudio.Output.prototype = new Op();\n\n// -----------------------------------\n\nOps.WebAudio.AudioPlayer = function()\n{\n    var self = this;\n    Op.apply(this, arguments);\n    this.name='AudioPlayer';\n\n    this.file=this.addInPort(new Port(this,\"file\",OP_PORT_TYPE_VALUE,{ display:'file',filter:'mp3' }));\n    this.volume=this.addInPort(new Port(this,\"volume\",OP_PORT_TYPE_VALUE,{ display:'range' }));\n    this.volume.val=1.0;\n\n    if(!window.audioContext) \n        if('webkitAudioContext' in window) audioContext = new webkitAudioContext();\n            else audioContext = new AudioContext();\n\n    this.filter = audioContext.createGain();\n    self.audio=null;\n    var buffer=null;\n    var playing=false;\n\n    this.volume.onValueChanged = function()\n    {\n        self.filter.gain.value=self.volume.val;\n    };\n\n    function stop()\n    {\n        self.media.stop();\n        self.media = audioContext.createBufferSource();\n\n        self.media.buffer = buffer;\n        self.media.connect(self.filter);\n        self.audioOut.val = self.filter;\n    }\n\n\n    function seek()\n    {\n        if(!window.gui && CGL.getLoadingStatus()>=1.0)\n        {\n            console.log('seek canceled',CGL.getLoadingStatus());\n            return;\n        }\n\n        if(window.gui)\n        {\n            if(!self.audio)return;\n\n            if(self.patch.timer.isPlaying() && self.audio.paused) self.audio.play();\n                else if(!self.patch.timer.isPlaying() && !self.audio.paused) self.audio.pause();\n\n            self.audio.currentTime=self.patch.timer.getTime();\n        }\n        else\n        {\n            if(buffer===null)return;\n\n            var t=self.patch.timer.getTime();\n            if(!isFinite(t))\n            {\n                console.log('not finite time...',t);\n                t=0.0;\n            }\n\n            if(playing) stop();\n            playing=false;\n\n            console.log('seek.....',self.patch.timer.isPlaying());\n\n            if(self.patch.timer.isPlaying() )\n            {\n                console.log('play!');\n                            \n                self.media.start(t);\n                playing=true;\n            }\n        }\n\n    }\n\n    function playPause()\n    {\n        if(!self.audio)return;\n                \n        if(self.patch.timer.isPlaying()) self.audio.play();\n            else self.audio.pause();\n    }\n\n    var loadingFilename='';\n    this.file.onValueChanged = function()\n    {\n        // if(self.file.val==loadingFilename)return;\n        loadingFilename=self.file.val;\n\n        CGL.incrementLoadingAssets();\n\n        if(window.gui)\n        {\n            self.audio = new Audio();\n            self.audio.src = self.file.val;\n\n            var canplaythrough=function()\n            {\n                CGL.decrementLoadingAssets();\n                self.audio.removeEventListener('canplaythrough',canplaythrough, false);\n            };\n\n            self.audio.addEventListener('canplaythrough',canplaythrough, false);\n            self.media = audioContext.createMediaElementSource(self.audio);\n            self.media.connect(self.filter);\n            self.audioOut.val = self.filter;\n\n        }\n        else\n        {\n            self.media = audioContext.createBufferSource();\n\n            var request = new XMLHttpRequest();\n\n            request.open( 'GET', self.file.val, true );\n            request.responseType = 'arraybuffer';\n\n            request.onload = function()\n            {\n                var audioData = request.response;\n\n                audioContext.decodeAudioData( audioData, function(res)\n                {\n                    buffer=res;\n                    console.log('sound load complete');\n                    self.media.buffer = res;\n                    self.media.connect(self.filter);\n                    self.audioOut.val = self.filter;\n\n                    CGL.decrementLoadingAssets();\n                } );\n\n            };\n\n            request.send();\n\n        }\n\n        // var firstProgress=true;\n        // var progress=function(e)\n        // {\n        //     if(firstProgress)\n        //     {\n        //         // self.audio.play(); self.audio.pause(); // force browser to download complete file at one.... wtf...\n        //         firstProgress=false;\n        //     }\n        //     console.log('progress e',self.audio.duration);\n\n        //     for(var i = 0; i < self.audio.buffered.length; i ++)\n        //     {\n        //         if(self.audio.buffered.end(i)==self.audio.duration)\n        //         {\n        //             self.audio.removeEventListener('progress',progress, false);\n        //             // self.audio.play(); self.audio.pause();\n        //             CGL.decrementLoadingAssets();\n        //             return;\n        //         }\n        //     }\n\n\n        //     // console.log('progress e',e);\n                    \n        // };\n\n\n\n\n\n\n\n\n\n        self.patch.timer.onPlayPause(seek);\n        self.patch.timer.onTimeChange(seek);\n\n\n    };\n\n    this.audioOut=this.addOutPort(new Port(this, \"audio out\",OP_PORT_TYPE_OBJECT));\n\n};\n\nOps.WebAudio.AudioPlayer.prototype = new Op();\n\n// -----------------------------------\n\nOps.WebAudio.Oscillator = function()\n{\n    var self = this;\n    Op.apply(this, arguments);\n    \n    if(!window.audioContext){\n         audioContext = new AudioContext();\n    }\n    this.oscillator = audioContext.createOscillator();\n    this.oscillator.start(0);\n\n    this.oscillator.frequency.value = 200;\n\n    this.name='Oscillator';\n\n    this.frequency=this.addInPort(new Port(this,\"frequency\",OP_PORT_TYPE_VALUE));\n    this.frequency.onValueChanged = function()\n    {\n        self.oscillator.frequency.value = self.frequency.val;\n    };\n\n    this.audioOut=this.addOutPort(new Port(this, \"audio out\",OP_PORT_TYPE_OBJECT));\n    this.audioOut.val = this.oscillator;\n};\n\nOps.WebAudio.Oscillator.prototype = new Op();\n\n// --------------------------------------------\n\nOps.WebAudio.MicrophoneIn = function ()\n{\n    var self = this;\n    Op.apply(this, arguments);\n    this.microphone = null;\n\n    this.name='microphone';\n    \n    //detect availability of userMedia\n    this.userMediaAvailable = (navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia);\n    navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;\n\n    this.audioOut=this.addOutPort(new Port(this, \"audio out\",OP_PORT_TYPE_OBJECT));\n\n    if (this.userMediaAvailable){\n        if(!window.audioContext) {\n             audioContext = new AudioContext();\n        }\n\n        navigator.getUserMedia(\n            {audio:true},\n            function(stream){\n                self.microphone = audioContext.createMediaStreamSource(stream);\n                self.audioOut.val = self.microphone;\n            },\n            function(e){console.log('No live audio input ' + e);}\n        );\n    }\n};\n\nOps.WebAudio.MicrophoneIn.prototype = new Op();\n\n// --------------------------------------------\n\nOps.WebAudio.Analyser = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    if(!window.audioContext) {\n         audioContext = new AudioContext();\n    }\n\n    this.name='Audio Analyser';\n    this.audioIn=this.addInPort(new Port(this,\"audio in\",OP_PORT_TYPE_OBJECT));\n    this.refresh=this.addInPort(new Port(this,\"refresh\",OP_PORT_TYPE_FUNCTION));\n\n    this.audioOut=this.addOutPort(new Port(this, \"audio out\",OP_PORT_TYPE_OBJECT));\n    this.avgVolume=this.addOutPort(new Port(this, \"average volume\",OP_PORT_TYPE_VALUE));\n    this.fftOut=this.addOutPort(new Port(this, \"fft\",OP_PORT_TYPE_ARRAY));\n\n\n\n    this.oldAudioIn=null;\n\n    this.analyser = audioContext.createAnalyser();\n    this.analyser.smoothingTimeConstant = 0.3;\n    this.analyser.fftSize = 256;\n    var fftBufferLength=0;\n    var fftDataArray =null;\n\n    this.refresh.onTriggered = function()\n    {\n        var array =  new Uint8Array(self.analyser.frequencyBinCount);\n        self.analyser.getByteFrequencyData(array);\n        \n        var values = 0;\n        var average;\n\n        for (var i = 0; i < array.length; i++)\n        {\n            values += array[i];\n        }\n \n        average = values / array.length;\n        self.avgVolume.val=average;\n\n        self.analyser.getByteFrequencyData(fftDataArray);\n        self.fftOut.val=fftDataArray;\n    };\n\n    this.audioIn.onValueChanged = function()\n    {\n        console.log(self.audioIn.val);\n        if (self.audioIn.val === null) {\n            if (self.oldAudioIn !== null) {\n                self.oldAudioIn.disconnect(self.analyser);\n            }\n        } else {\n            self.audioIn.val.connect(self.analyser);\n        }\n        self.oldAudioIn=self.audioIn.val;\n\n        fftBufferLength = self.analyser.frequencyBinCount;\n        fftDataArray = new Uint8Array(fftBufferLength);\n    };\n\n    this.audioOut.val = this.analyser;\n};\n\nOps.WebAudio.Analyser.prototype = new Op();\n\n\n","\nOps.Devices= Ops.Devices || {};\n\n\n\n\nOps.Devices.MotionSensor = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='MotionSensor';\n    \n\n    this.mulAxis=this.addInPort(new Port(this,\"mulAxis\"));\n    this.mulAxis.val=1.0;\n    \n    this.foundSensor=this.addOutPort(new Port(this,\"foundSensor\"));\n    \n    this.axis1=this.addOutPort(new Port(this,\"axis1\"));\n    this.axis2=this.addOutPort(new Port(this,\"axis2\"));\n    this.axis3=this.addOutPort(new Port(this,\"axis3\"));\n\n    this.accX=this.addOutPort(new Port(this,\"accX\"));\n    this.accY=this.addOutPort(new Port(this,\"accY\"));\n    this.accZ=this.addOutPort(new Port(this,\"accX\"));\n\n    this.axis1.set(0);\n    this.axis2.set(0);\n    this.axis3.set(0);\n\n    this.accX.set(0);\n    this.accY.set(0);\n    this.accZ.set(0);\n\n    var lastTime=0;\n    var lastTimeAcc=0;\n\n    window.ondevicemotion = function(event)\n    {\n        if(Date.now()-lastTimeAcc>15)\n        {\n            lastTimeAcc=Date.now();\n\n            self.accX.set( event.accelerationIncludingGravity.x );\n            self.accY.set( event.accelerationIncludingGravity.y );\n            self.accZ.set( event.accelerationIncludingGravity.z );\n        }\n    };\n\n    window.addEventListener(\"deviceorientation\", function (event)\n    {\n        if(Date.now()-lastTime>15)\n        {\n            lastTime=Date.now();\n            self.axis1.set( (event.alpha || 0) *self.mulAxis.get() );\n            self.axis2.set( (event.beta || 0 ) *self.mulAxis.get() );\n            self.axis3.set( (event.gamma || 0) *self.mulAxis.get() );\n\n        }\n    }, true);\n\n\n};\n\nOps.Devices.MotionSensor.prototype = new Op();\n\n\n\n// -------------------------------------------------------------------------\n\nOps.Devices.GamePad = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='GamePad';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.numPads=this.addOutPort(new Port(this,\"numPads\"));\n    this.axis1=this.addOutPort(new Port(this,\"axis1\"));\n    this.axis2=this.addOutPort(new Port(this,\"axis2\"));\n    this.axis3=this.addOutPort(new Port(this,\"axis3\"));\n    this.axis4=this.addOutPort(new Port(this,\"axis4\"));\n    this.button0=this.addOutPort(new Port(this,\"button0\"));\n    this.button1=this.addOutPort(new Port(this,\"button1\"));\n    this.button2=this.addOutPort(new Port(this,\"button2\"));\n    this.button3=this.addOutPort(new Port(this,\"button3\"));\n    this.button4=this.addOutPort(new Port(this,\"button4\"));\n\n    var self=this;\n    var startTime=Date.now()/1000.0;\n\n    this.exe.onTriggered=function()\n    {\n        var gamePads=navigator.getGamepads();\n        var count=0;\n\n        for(var gp in gamePads)\n        {\n            if(gamePads[gp].axes)\n            {\n                self.axis1.val=gamePads[gp].axes[0];\n                self.axis2.val=gamePads[gp].axes[1];\n                self.axis3.val=gamePads[gp].axes[2];\n                self.axis4.val=gamePads[gp].axes[3];\n\n                self.button0.val=gamePads[gp].buttons[0].pressed;\n                self.button0.val=gamePads[gp].buttons[1].pressed;\n                self.button2.val=gamePads[gp].buttons[2].pressed;\n                self.button3.val=gamePads[gp].buttons[3].pressed;\n                self.button4.val=gamePads[gp].buttons[4].pressed;\n\n                count++;\n            }\n        }\n\n        self.numPads.val=count;\n    };\n\n    this.exe.onTriggered();\n\n};\n\nOps.Devices.GamePad.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Devices.LeapMotion = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='LeapMotion';\n\n    this.transX=this.addOutPort(new Port(this,\"translationX\"));\n    this.transY=this.addOutPort(new Port(this,\"translationY\"));\n    this.transZ=this.addOutPort(new Port(this,\"translationZ\"));\n\n    this.finger0X=this.addOutPort(new Port(this,\"finger0X\"));\n    this.finger0Y=this.addOutPort(new Port(this,\"finger0Y\"));\n    this.finger0Z=this.addOutPort(new Port(this,\"finger0Z\"));\n\n    Leap.loop(function (frame)\n    {\n        self.transX.val=frame._translation[0];\n        self.transY.val=frame._translation[1];\n        self.transZ.val=frame._translation[2];\n\n        if(frame.fingers.length>0)\n        {\n            self.finger0X.val=frame.fingers[0].tipPosition[0];\n            self.finger0Y.val=frame.fingers[0].tipPosition[1];\n            self.finger0Z.val=frame.fingers[0].tipPosition[2];\n        }\n    });\n};\n\nOps.Devices.LeapMotion.prototype = new Op();\n\n// --------------------------------------------------------------------------\n","\nOps.Experimental=Ops.Experimental || {};\n\n// --------------------------------------------------------------------------\n\nOps.Experimental.ImageStream = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=this.patch.cgl;\n\n    this.name='ImageStream';\n\n    this.url=this.addInPort(new Port(this,\"url\"));\n    this.url.val=\"http://localhost:5600/images\";\n\n    this.tex=this.addOutPort(new Port(this,\"texture\",OP_PORT_TYPE_TEXTURE));\n\n    var texture=new CGL.Texture(cgl);\n    texture.setSize(320,240);\n\n    $('#glcanvas').append('<img id=\"imagestream\">');\n\n    var image = document.getElementById('imagestream');\n\n    this.tex.val=texture;\n\n    image.onload = function ()\n    {\n        texture.image=image;\n        texture.initTexture(image);\n        console.log('loaded');\n    };\n\n    function run()\n    {\n        var source = new EventSource(self.url.val);\n\n        source.addEventListener('message', function(event)\n        {\n            image.src = event.data;\n        });\n    }\n\nsetTimeout(run, 500);\n};\n\nOps.Experimental.ImageStream.prototype = new Op();\n\n// -----------------------------------------------\n\nOps.Experimental.SaltedPerceptionMaterial = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=this.patch.cgl;\n\n    this.name='SaltedPerceptionMaterial';\n\n    this.zBufferTex=this.addInPort(new Port(this,\"zBufferTexture\",OP_PORT_TYPE_TEXTURE));\n\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.doRender=function()\n    {\n        cgl.setShader(shader);\n\n        if(self.zBufferTex.val)\n        {\n            cgl.gl.activeTexture(cgl.gl.TEXTURE0);\n            cgl.gl.bindTexture(cgl.gl.TEXTURE_2D, self.zBufferTex.val.tex);\n        }\n\n        self.trigger.call();\n        cgl.setPreviousShader();\n    };\n\n\n    var shader_vert=\"\"\n        .endl()+'attribute vec3 vPosition;'\n        .endl()+'attribute vec2 attrTexCoord;'\n        .endl()+'attribute vec3 attrVertNormal;'\n\n        .endl()+'precision highp float;'\n        // .endl()+\"uniform mat4 projMatrix,viewMatrix,modelMatrix;\"\n        .endl()+'uniform mat4 projMatrix;'\n        .endl()+'uniform mat4 mvMatrix;'\n\n        .endl()+\"uniform float time;\"\n        .endl()+\"uniform float zscale;\"\n\n        // .endl()+\"attribute vec3 Position;\"\n        .endl()+\"attribute vec3 Normal;\"\n        .endl()+\"varying  vec2 texcoord;\"\n        // .endl()+\"attribute vec2 TexCoordIn;\"\n\n        .endl()+'varying vec3 norm;'\n\n        .endl()+\"uniform sampler2D texDepth;\"\n        .endl()+\"void main(void)\"\n        .endl()+\"{\"\n        // .endl()+\"   mat4 modelViewMatrix = viewMatrix*modelMatrix;\"\n        .endl()+'   norm=attrVertNormal;'\n        .endl()+\"   texcoord=attrTexCoord;\"\n        .endl()+\"   float offX=1.0/640.0;\"\n        .endl()+\"   float offY=1.0/480.0;\"\n        .endl()+\"   vec4 texCol= 0.2*texture2D(texDepth, vec2(1.0-texcoord.s,1.0-texcoord.t));\"\n        .endl()+\"   texCol+=0.2* texture2D(texDepth, vec2(1.0-texcoord.s+offX,1.0-texcoord.t+offY));\"\n        .endl()+\"   texCol+=0.2* texture2D(texDepth, vec2(1.0-texcoord.s-offX,1.0-texcoord.t-offY));\"\n        .endl()+\"   texCol+=0.2* texture2D(texDepth, vec2(1.0-texcoord.s+offX,1.0-texcoord.t-offY));\"\n        .endl()+\"   texCol+=0.2* texture2D(texDepth, vec2(1.0-texcoord.s-offX,1.0-texcoord.t+offY));\"\n\n        .endl()+\"   vec3 vertex=vPosition;\"\n\n        .endl()+\"   vertex.z+=zscale*(texCol.r*190.0+sin(texCol.r*8.0+time*2.0)*5.0+sin(vertex.y+texture2D(texDepth,texcoord).r*10.0));\"\n        .endl()+\"   texCol.b=0.0;\"\n        .endl()+\"   gl_Position = projMatrix * mvMatrix * vec4(vertex,1.0);\"\n        .endl()+\"}\";\n\n\n    var shader_frag=\"\"\n        .endl()+'precision highp float;'\n        .endl()+\"uniform sampler2D texColor;\"\n        .endl()+\"uniform sampler2D texDepth;\"\n\n        .endl()+\"uniform float time;\"\n        .endl()+\"varying  vec2 texcoord;\"\n        .endl()+\"void main(){ \"\n        .endl()+\"vec4 color=texture2D(texDepth, vec2(1.0-texcoord.s,1.0-texcoord.t));\"\n        .endl()+\"color.a=1.0;\"\n        .endl()+\"//float d= texture2D(texDepth, vec2(1.0-texcoord.s,texcoord.t)).r;\"\n        .endl()+\"//if(d==1.0)color=vec4(0.0,0.0,0.0,0.0);\"\n        .endl()+\"gl_FragColor = color;\"\n        .endl()+\"}\";\n\n    var shader=new CGL.Shader(cgl);\n    shader.setSource(shader_vert,shader_frag);\n\n\n\n    this.zBufferTexUniform=null;\n\n    this.zBufferTex.onValueChanged=function()\n    {\n\n        if(self.zBufferTex.val)\n        {\n            if(self.zBufferTexUniform!==null)return;\n            // console.log('TEXTURE ADDED');\n            shader.removeUniform('texDepth');\n            shader.define('HAS_TEXTURE_DIFFUSE');\n            self.zBufferTexUniform=new CGL.Uniform(shader,'t','texDepth',0);\n        }\n        else\n        {\n            // console.log('TEXTURE REMOVED');\n            shader.removeUniform('texDepth');\n            shader.removeDefine('HAS_TEXTURE_DIFFUSE');\n            self.zBufferTexUniform=null;\n        }\n    };\n\n    this.zScale=this.addInPort(new Port(this,\"zscale\",OP_PORT_TYPE_VALUE));\n    this.zScale.onValueChanged=function()\n    {\n        if(!self.zScale.uniform) self.zScale.uniform=new CGL.Uniform(shader,'f','zscale',self.zScale.val);\n        else self.zScale.uniform.setValue(self.zScale.val);\n    };\n\n\n\n    this.time=this.addInPort(new Port(this,\"time\",OP_PORT_TYPE_VALUE));\n    this.time.onValueChanged=function()\n    {\n        if(!self.time.uniform) self.time.uniform=new CGL.Uniform(shader,'f','time',self.time.val);\n        else self.time.uniform.setValue(self.time.val);\n    };\n\n\n    this.zScale.val=1.0;\n\n    this.render.onTriggered=this.doRender;\n    this.doRender();\n\n};\nOps.Experimental.SaltedPerceptionMaterial.prototype = new Op();\n","\nOps.Gl=Ops.Gl || {};\nOps.Gl.TextureEffects=Ops.Gl.TextureEffects || {};\n\n// ---------------------------------------------------------------------------------------------\n\nOps.Gl.TextureEffects.ImageCompose = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=this.patch.cgl;\n\n    this.name='image compose';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n\n    this.useVPSize=this.addInPort(new Port(this,\"use viewport size\",OP_PORT_TYPE_VALUE,{ display:'bool' }));\n\n    this.width=this.addInPort(new Port(this,\"width\",OP_PORT_TYPE_VALUE));\n    this.height=this.addInPort(new Port(this,\"height\",OP_PORT_TYPE_VALUE));\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n    this.texOut=this.addOutPort(new Port(this,\"texture_out\",OP_PORT_TYPE_TEXTURE,{preview:true}));\n\n    var effect=new CGL.TextureEffect(cgl);\n\n    cgl.currentTextureEffect=effect;\n    this.tex=new CGL.Texture(cgl);\n\n    var w=8,h=8;\n\n    function updateResolution()\n    {\n        if(self.useVPSize.val)\n        {\n            w=cgl.getViewPort()[2];\n            h=cgl.getViewPort()[3];\n        }\n        \n        if((w!= self.tex.width || h!= self.tex.height) && (w!==0 && h!==0))\n        {\n     \n            self.height.val=h;\n            self.width.val=w;\n            self.tex.setSize(w,h);\n            effect.setSourceTexture(self.tex);\n            self.texOut.val=effect.getCurrentSourceTexture();\n        }\n    }\n\n    this.onResize=updateResolution;\n\n    this.useVPSize.onValueChanged=function()\n    {\n        if(self.useVPSize.val)\n        {\n            self.width.onValueChanged=null;\n            self.height.onValueChanged=null;\n        }\n        else\n        {\n            self.width.onValueChanged=resize;\n            self.height.onValueChanged=resize;\n        }\n    };\n    this.useVPSize.val=true;\n\n\n    function resize()\n    {\n        h=parseInt(self.height.val,10);\n        w=parseInt(self.width.val,10);\n        updateResolution();\n    }\n\n    render=function()\n    {\n        cgl.gl.disable(cgl.gl.SCISSOR_TEST);\n\n        updateResolution();\n        \n        cgl.currentTextureEffect=effect;\n\n        effect.startEffect();\n\n            // cgl.currentTextureEffect.bind();\n\n            // cgl.gl.activeTexture(cgl.gl.TEXTURE0);\n            // cgl.gl.bindTexture(cgl.gl.TEXTURE_2D, cgl.currentTextureEffect.getCurrentSourceTexture().tex );\n            // cgl.gl.clearColor(0,0,0,0.0);\n\n            // cgl.gl.clear(cgl.gl.COLOR_BUFFER_BIT | cgl.gl.DEPTH_BUFFER_BIT);\n\n            // cgl.currentTextureEffect.finish();\n\n        self.trigger.trigger();\n        self.texOut.val=effect.getCurrentSourceTexture();\n\n        cgl.gl.enable(cgl.gl.SCISSOR_TEST);\n\n    };\n\n\n    this.texOut.onPreviewChanged=function()\n    {\n        if(self.texOut.showPreview) self.render.onTriggered=self.texOut.val.preview;\n        else self.render.onTriggered=render;\n                console.log('jaja changed');\n    };\n    \n\n    this.width.val=1920;\n    this.height.val=1080;\n    this.render.onTriggered=render;\n};\n\nOps.Gl.TextureEffects.ImageCompose.prototype = new Op();\n\n// ---------------------------------------------------------------------------------------------\n\nOps.Gl.TextureEffects.Invert = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=this.patch.cgl;\n\n    this.name='Invert';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var shader=new CGL.Shader(cgl);\n    this.onLoaded=shader.compile;\n    \n\n    var srcFrag=''\n        .endl()+'precision highp float;'\n        .endl()+'#ifdef HAS_TEXTURES'\n        .endl()+'  varying vec2 texCoord;'\n        .endl()+'  uniform sampler2D tex;'\n        .endl()+'#endif'\n        .endl()+''\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   vec4 col=vec4(1.0,0.0,0.0,1.0);'\n        .endl()+'   #ifdef HAS_TEXTURES'\n        .endl()+'       col=texture2D(tex,texCoord);'\n        .endl()+'       col.rgb=1.0-col.rgb;'\n        .endl()+'   #endif'\n        .endl()+'   gl_FragColor = col;'\n        .endl()+'}\\n';\n\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n    var textureUniform=new CGL.Uniform(shader,'t','tex',0);\n\n\n    this.render.onTriggered=function()\n    {\n        if(!cgl.currentTextureEffect)return;\n        \n        cgl.setShader(shader);\n        cgl.currentTextureEffect.bind();\n\n        cgl.gl.activeTexture(cgl.gl.TEXTURE0);\n        cgl.gl.bindTexture(cgl.gl.TEXTURE_2D, cgl.currentTextureEffect.getCurrentSourceTexture().tex );\n\n        cgl.currentTextureEffect.finish();\n        cgl.setPreviousShader();\n\n        self.trigger.trigger();\n    };\n};\n\nOps.Gl.TextureEffects.Invert.prototype = new Op();\n\n// ---------------------------------------------------------------------------------------------\n\nOps.Gl.TextureEffects.Scroll = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=this.patch.cgl;\n\n    this.name='Scroll';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.amountX=this.addInPort(new Port(this,\"amountX\",OP_PORT_TYPE_VALUE));\n    this.amountY=this.addInPort(new Port(this,\"amountY\",OP_PORT_TYPE_VALUE));\n\n    var shader=new CGL.Shader(cgl);\n    this.onLoaded=shader.compile;\n\n    var srcFrag=''\n        .endl()+'precision highp float;'\n        .endl()+'#ifdef HAS_TEXTURES'\n        .endl()+'  varying vec2 texCoord;'\n        .endl()+'  uniform sampler2D tex;'\n        .endl()+'#endif'\n        .endl()+''\n        .endl()+'  uniform float amountX;'\n        .endl()+'  uniform float amountY;'\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   vec4 col=vec4(0.0,0.0,0.0,1.0);'\n        .endl()+'   #ifdef HAS_TEXTURES'\n        .endl()+'       col=texture2D(tex,vec2(mod(texCoord.x+amountX*0.1,1.0),mod(texCoord.y+amountY*0.1,1.0) ));'\n        .endl()+'   #endif'\n        .endl()+'   gl_FragColor = col;'\n        .endl()+'}\\n';\n\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n    var textureUniform=new CGL.Uniform(shader,'t','tex',0);\n\n\n    this.render.onTriggered=function()\n    {\n        if(!cgl.currentTextureEffect)return;\n        \n        cgl.setShader(shader);\n        cgl.currentTextureEffect.bind();\n\n        cgl.gl.activeTexture(cgl.gl.TEXTURE0);\n        cgl.gl.bindTexture(cgl.gl.TEXTURE_2D, cgl.currentTextureEffect.getCurrentSourceTexture().tex );\n\n        cgl.currentTextureEffect.finish();\n        cgl.setPreviousShader();\n\n        self.trigger.trigger();\n    };\n\n    var amountXUniform=new CGL.Uniform(shader,'f','amountX',1.0);\n\n    this.amountX.onValueChanged=function()\n    {\n        amountXUniform.setValue(self.amountX.val);\n    };\n\n    var amountYUniform=new CGL.Uniform(shader,'f','amountY',1.0);\n\n    this.amountY.onValueChanged=function()\n    {\n        amountYUniform.setValue(self.amountY.val);\n    };\n\n    this.amountY.val=0.0;\n    this.amountX.val=0.0;\n\n\n};\n\nOps.Gl.TextureEffects.Scroll.prototype = new Op();\n\n// ---------------------------------------------------------------------------------------------\n\nOps.Gl.TextureEffects.Desaturate = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=this.patch.cgl;\n\n    this.name='Desaturate';\n\n    this.amount=this.addInPort(new Port(this,\"amount\",OP_PORT_TYPE_VALUE,{ display:'range' }));\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var shader=new CGL.Shader(cgl);\n    this.onLoaded=shader.compile;\n\n    var srcFrag=''\n        .endl()+'precision highp float;'\n        .endl()+'#ifdef HAS_TEXTURES'\n        .endl()+'  varying vec2 texCoord;'\n        .endl()+'  uniform sampler2D tex;'\n        .endl()+'#endif'\n        .endl()+'uniform float amount;'\n        .endl()+''\n        .endl()+''\n        .endl()+'vec3 desaturate(vec3 color, float amount)'\n        .endl()+'{'\n        .endl()+'   vec3 gray = vec3(dot(vec3(0.2126,0.7152,0.0722), color));'\n        .endl()+'   return vec3(mix(color, gray, amount));'\n        .endl()+'}'\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   vec4 col=vec4(1.0,0.0,0.0,1.0);'\n        .endl()+'   #ifdef HAS_TEXTURES'\n        .endl()+'       col=texture2D(tex,texCoord);'\n        .endl()+'       col.rgb=desaturate(col.rgb,amount);'\n        .endl()+'   #endif'\n        .endl()+'   gl_FragColor = col;'\n        .endl()+'}';\n\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n    var textureUniform=new CGL.Uniform(shader,'t','tex',0);\n    var amountUniform=new CGL.Uniform(shader,'f','amount',1.0);\n\n    this.amount.onValueChanged=function()\n    {\n        amountUniform.setValue(self.amount.val);\n    };\n\n    this.render.onTriggered=function()\n    {\n        if(!cgl.currentTextureEffect)return;\n        \n        cgl.setShader(shader);\n        cgl.currentTextureEffect.bind();\n\n        cgl.gl.activeTexture(cgl.gl.TEXTURE0);\n        cgl.gl.bindTexture(cgl.gl.TEXTURE_2D, cgl.currentTextureEffect.getCurrentSourceTexture().tex );\n\n        cgl.currentTextureEffect.finish();\n        cgl.setPreviousShader();\n\n        self.trigger.trigger();\n    };\n};\n\nOps.Gl.TextureEffects.Desaturate.prototype = new Op();\n\n// ---------------------------------------------------------------------------------------------\n\nOps.Gl.TextureEffects.PixelDisplacement = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=this.patch.cgl;\n\n    this.name='PixelDisplacement';\n\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n\n    this.amount=this.addInPort(new Port(this,\"amountX\",OP_PORT_TYPE_VALUE,{ display:'range' }));\n    this.amountY=this.addInPort(new Port(this,\"amountY\",OP_PORT_TYPE_VALUE,{ display:'range' }));\n    this.displaceTex=this.addInPort(new Port(this,\"displaceTex\",OP_PORT_TYPE_TEXTURE));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var shader=new CGL.Shader(cgl);\n    this.onLoaded=shader.compile;\n\n    var srcFrag=''\n        .endl()+'precision highp float;'\n        .endl()+'#ifdef HAS_TEXTURES'\n        .endl()+'  varying vec2 texCoord;'\n        .endl()+'  uniform sampler2D tex;'\n        .endl()+'  uniform sampler2D displaceTex;'\n        .endl()+'#endif'\n        .endl()+'uniform float amountX;'\n        .endl()+'uniform float amountY;'\n        .endl()+''\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   vec4 col=vec4(1.0,0.0,0.0,1.0);'\n        .endl()+'   #ifdef HAS_TEXTURES'\n        .endl()+'       col=texture2D(tex,vec2(mod(texCoord.x+texture2D(displaceTex,texCoord).g*1.0*amountX,1.0),mod(texCoord.y+texture2D(displaceTex,texCoord).g*1.0*amountY,1.0) ) );'\n        // .endl()+'       col.rgb=desaturate(col.rgb,amount);'\n        .endl()+'   #endif'\n        .endl()+'   gl_FragColor = col;'\n        .endl()+'}';\n\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n    var textureUniform=new CGL.Uniform(shader,'t','tex',0);\n    var textureDisplaceUniform=new CGL.Uniform(shader,'t','displaceTex',1);\n\n    var amountXUniform=new CGL.Uniform(shader,'f','amountX',0.0);\n    var amountYUniform=new CGL.Uniform(shader,'f','amountY',0.0);\n\n    this.amount.onValueChanged=function()\n    {\n        amountXUniform.setValue(self.amount.val);\n    };\n\n    this.amountY.onValueChanged=function()\n    {\n        amountYUniform.setValue(self.amountY.val);\n    };\n\n    this.render.onTriggered=function()\n    {\n        if(!cgl.currentTextureEffect)return;\n        \n        cgl.setShader(shader);\n        cgl.currentTextureEffect.bind();\n\n        cgl.gl.activeTexture(cgl.gl.TEXTURE0);\n        cgl.gl.bindTexture(cgl.gl.TEXTURE_2D, cgl.currentTextureEffect.getCurrentSourceTexture().tex );\n\n        if(self.displaceTex.val)\n        {\n            cgl.gl.activeTexture(cgl.gl.TEXTURE1);\n            cgl.gl.bindTexture(cgl.gl.TEXTURE_2D, self.displaceTex.val.tex );\n        }\n\n        cgl.currentTextureEffect.finish();\n        cgl.setPreviousShader();\n\n        self.trigger.trigger();\n    };\n\n    self.amount.val=0.0;\n    self.amountY.val=0.0;\n};\n\nOps.Gl.TextureEffects.PixelDisplacement.prototype = new Op();\n\n// ---------------------------------------------------------------------------------------------\n\nOps.Gl.TextureEffects.MixImage = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=this.patch.cgl;\n\n    this.name='MixImage';\n\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.amount=this.addInPort(new Port(this,\"amount\",OP_PORT_TYPE_VALUE,{ display:'range' }));\n    this.image=this.addInPort(new Port(this,\"image\",OP_PORT_TYPE_TEXTURE));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var shader=new CGL.Shader(cgl);\n    this.onLoaded=shader.compile;\n\n    var srcFrag=''\n        .endl()+'precision highp float;'\n        .endl()+'#ifdef HAS_TEXTURES'\n        .endl()+'  varying vec2 texCoord;'\n        .endl()+'  uniform sampler2D tex;'\n        .endl()+'  uniform sampler2D image;'\n        .endl()+'#endif'\n        .endl()+'uniform float amount;'\n        .endl()+''\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   vec4 col=vec4(0.0,0.0,0.0,1.0);'\n        .endl()+'   #ifdef HAS_TEXTURES'\n        .endl()+'       col=texture2D(tex,texCoord)*(1.0-amount);'\n        .endl()+'       col+=texture2D(image,texCoord)*amount;'\n        .endl()+'   #endif'\n        // .endl()+'   col.a=1.0;'\n        .endl()+'   gl_FragColor = col;'\n        .endl()+'}';\n\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n    var textureUniform=new CGL.Uniform(shader,'t','tex',0);\n    var textureDisplaceUniform=new CGL.Uniform(shader,'t','image',1);\n\n    var amountUniform=new CGL.Uniform(shader,'f','amount',1.0);\n\n    this.amount.onValueChanged=function()\n    {\n        amountUniform.setValue(self.amount.val);\n    };\n    self.amount.val=1.0;\n\n    this.render.onTriggered=function()\n    {\n        if(!cgl.currentTextureEffect)return;\n\n        if(self.image.val && self.image.val.tex)\n        {\n\n            cgl.setShader(shader);\n            cgl.currentTextureEffect.bind();\n\n            cgl.gl.activeTexture(cgl.gl.TEXTURE0);\n            cgl.gl.bindTexture(cgl.gl.TEXTURE_2D, cgl.currentTextureEffect.getCurrentSourceTexture().tex );\n\n            cgl.gl.activeTexture(cgl.gl.TEXTURE1);\n            cgl.gl.bindTexture(cgl.gl.TEXTURE_2D, self.image.val.tex );\n\n            cgl.currentTextureEffect.finish();\n            cgl.setPreviousShader();\n        }\n\n        self.trigger.trigger();\n    };\n};\n\nOps.Gl.TextureEffects.MixImage.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------------------------\n\n\nOps.Gl.TextureEffects.DrawImage = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=this.patch.cgl;\n\n    this.name='DrawImage';\n\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.amount=this.addInPort(new Port(this,\"amount\",OP_PORT_TYPE_VALUE,{ display:'range' }));\n    \n    this.image=this.addInPort(new Port(this,\"image\",OP_PORT_TYPE_TEXTURE,{preview:true }));\n    this.blendMode=this.addInPort(new Port(this,\"blendMode\",OP_PORT_TYPE_VALUE,{ display:'dropdown',values:[\n        'normal','lighten','darken','multiply','average','add','substract','difference','negation','exclusion','overlay','screen',\n        'color dodge',\n        'color burn',\n        'softlight',\n        'hardlight'\n        ] }));\n    self.blendMode.val='normal';\n    this.imageAlpha=this.addInPort(new Port(this,\"imageAlpha\",OP_PORT_TYPE_TEXTURE,{preview:true }));\n    this.alphaSrc=this.addInPort(new Port(this,\"alphaSrc\",OP_PORT_TYPE_VALUE,{ display:'dropdown',values:[\n        'alpha channel','luminance'\n        ] }));\n    this.removeAlphaSrc=this.addInPort(new Port(this,\"removeAlphaSrc\",OP_PORT_TYPE_VALUE,{ display:'bool' }));\n    this.removeAlphaSrc.val=true;\n    this.invAlphaChannel=this.addInPort(new Port(this,\"invert alpha channel\",OP_PORT_TYPE_VALUE,{ display:'bool' }));\n\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var shader=new CGL.Shader(cgl);\n    this.onLoaded=shader.compile;\n\n    var srcFrag=''\n        .endl()+'precision highp float;'\n        .endl()+'#ifdef HAS_TEXTURES'\n        .endl()+'  varying vec2 texCoord;'\n        .endl()+'  uniform sampler2D tex;'\n        .endl()+'  uniform sampler2D image;'\n        .endl()+'#endif'\n\n        .endl()+'#ifdef HAS_TEXTUREALPHA'\n        .endl()+'  uniform sampler2D imageAlpha;'\n        .endl()+'#endif'\n\n        .endl()+'uniform float amount;'\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   vec4 blendRGBA=vec4(0.0,0.0,0.0,1.0);'\n        .endl()+'   #ifdef HAS_TEXTURES'\n        .endl()+'       blendRGBA=texture2D(image,texCoord);'\n\n\n        .endl()+'vec3 blend=blendRGBA.rgb;'\n        .endl()+'vec4 baseRGBA=texture2D(tex,texCoord);'\n        .endl()+'vec3 base=baseRGBA.rgb;'\n\n        .endl()+'vec3 colNew=blend;'\n        .endl()+'#define Blend(base, blend, funcf)       vec3(funcf(base.r, blend.r), funcf(base.g, blend.g), funcf(base.b, blend.b))'\n\n\n        .endl()+'#ifdef BM_NORMAL'\n        .endl()+'colNew=blend;'\n        .endl()+'#endif'\n\n        .endl()+'#ifdef BM_MULTIPLY'\n        .endl()+'colNew=base*blend;'\n        .endl()+'#endif'\n\n\n        .endl()+'#ifdef BM_AVERAGE'\n        .endl()+'colNew=((base + blend) / 2.0);'\n        .endl()+'#endif'\n\n        .endl()+'#ifdef BM_ADD'\n        .endl()+'colNew=min(base + blend, vec3(1.0));'\n        .endl()+'#endif'\n\n        .endl()+'#ifdef BM_SUBSTRACT'\n        .endl()+'colNew=max(base + blend - vec3(1.0), vec3(0.0));'\n        .endl()+'#endif'\n\n        .endl()+'#ifdef BM_DIFFERENCE'\n        .endl()+'colNew=abs(base - blend);'\n        .endl()+'#endif'\n\n        .endl()+'#ifdef BM_NEGATION'\n        .endl()+'colNew=(vec3(1.0) - abs(vec3(1.0) - base - blend));'\n        .endl()+'#endif'\n\n        .endl()+'#ifdef BM_EXCLUSION'\n        .endl()+'colNew=(base + blend - 2.0 * base * blend);'\n        .endl()+'#endif'\n  \n        .endl()+'#ifdef BM_LIGHTEN'\n        .endl()+'colNew=max(blend, base);'\n        .endl()+'#endif'\n\n        .endl()+'#ifdef BM_DARKEN'\n        .endl()+'colNew=min(blend, base);'\n        .endl()+'#endif'\n\n        .endl()+'#ifdef BM_OVERLAY'\n        .endl()+'   #define BlendOverlayf(base, blend)  (base < 0.5 ? (2.0 * base * blend) : (1.0 - 2.0 * (1.0 - base) * (1.0 - blend)))'\n        // .endl()+'   #define BlendOverlay(base, blend)       Blend(base, blend, BlendOverlayf)'\n        .endl()+'   colNew=Blend(base, blend, BlendOverlayf);'\n        .endl()+'#endif'\n\n        .endl()+'#ifdef BM_SCREEN'\n        .endl()+'   #define BlendScreenf(base, blend)       (1.0 - ((1.0 - base) * (1.0 - blend)))'\n        // .endl()+'   #define BlendScreen(base, blend)        Blend(base, blend, BlendScreenf)'\n        .endl()+'   colNew=Blend(base, blend, BlendScreenf);'\n        .endl()+'#endif'\n\n        .endl()+'#ifdef BM_SOFTLIGHT'\n        .endl()+'   #define BlendSoftLightf(base, blend)    ((blend < 0.5) ? (2.0 * base * blend + base * base * (1.0 - 2.0 * blend)) : (sqrt(base) * (2.0 * blend - 1.0) + 2.0 * base * (1.0 - blend)))'\n        // .endl()+'   #define BlendSoftLight(base, blend)     Blend(base, blend, BlendSoftLightf)'\n        .endl()+'   colNew=Blend(base, blend, BlendSoftLightf);'\n        .endl()+'#endif'\n\n        .endl()+'#ifdef BM_HARDLIGHT'\n        .endl()+'   #define BlendOverlayf(base, blend)  (base < 0.5 ? (2.0 * base * blend) : (1.0 - 2.0 * (1.0 - base) * (1.0 - blend)))'\n        // .endl()+'   #define BlendOverlay(base, blend)       Blend(base, blend, BlendOverlayf)'\n        .endl()+'   colNew=Blend(blend, base, BlendOverlayf);'\n        .endl()+'#endif'\n\n        .endl()+'#ifdef BM_COLORDODGE'\n        .endl()+'   #define BlendColorDodgef(base, blend)   ((blend == 1.0) ? blend : min(base / (1.0 - blend), 1.0))'\n        .endl()+'   colNew=Blend(base, blend, BlendColorDodgef);'\n        .endl()+'#endif'\n\n        .endl()+'#ifdef BM_COLORBURN'\n        .endl()+'   #define BlendColorBurnf(base, blend)    ((blend == 0.0) ? blend : max((1.0 - ((1.0 - base) / blend)), 0.0))'\n        .endl()+'   colNew=Blend(base, blend, BlendColorBurnf);'\n        .endl()+'#endif'\n\n\n\n\n        .endl()+'#ifdef REMOVE_ALPHA_SRC'\n        .endl()+'   blendRGBA.a=1.0;'\n        .endl()+'#endif'\n\n        .endl()+'#ifdef HAS_TEXTUREALPHA'\n\n        .endl()+'   vec4 colImgAlpha=texture2D(imageAlpha,texCoord);'\n        .endl()+'   float colImgAlphaAlpha=colImgAlpha.a;'\n\n        .endl()+'   #ifdef INVERT_ALPHA'\n        .endl()+'       colImgAlphaAlpha=1.0-colImgAlphaAlpha;'\n        .endl()+'   #endif'\n\n\n        .endl()+'   #ifdef ALPHA_FROM_LUMINANCE'\n        .endl()+'       vec3 gray = vec3(dot(vec3(0.2126,0.7152,0.0722), colImgAlpha.rgb ));'\n        .endl()+'       colImgAlphaAlpha=(gray.r+gray.g+gray.b)/3.0;'\n        .endl()+'   #endif'\n\n        .endl()+'   blendRGBA.a=colImgAlphaAlpha*blendRGBA.a;'\n\n\n        .endl()+'#endif'\n        \n\n        // .endl()+'vec4 finalColor=vec4(colNew*amount*blendRGBA.a,blendRGBA.a);'\n        // .endl()+'finalColor+=vec4(base*(1.0-amount)*baseRGBA.a,baseRGBA.a);'//, base ,1.0-blendRGBA.a*amount);'\n        .endl()+'blendRGBA.rgb=mix( colNew, base ,1.0-blendRGBA.a*amount);'\n        .endl()+'blendRGBA.a=baseRGBA.a+blendRGBA.a;'\n\n\n        // .endl()+'blendRGBA.rgb=mix( colNew, base ,1.0-blendRGBA.a*amount);'\n        // .endl()+'blendRGBA.a=alpha;'\n\n        .endl()+'#endif'\n   \n\n        .endl()+'   gl_FragColor = blendRGBA;'\n        .endl()+'}';\n\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n    var textureUniform=new CGL.Uniform(shader,'t','tex',0);\n    var textureDisplaceUniform=new CGL.Uniform(shader,'t','image',1);\n    var textureAlpha=new CGL.Uniform(shader,'t','imageAlpha',2);\n\n    this.invAlphaChannel.onValueChanged=function()\n    {\n        if(self.invAlphaChannel.val) shader.define('INVERT_ALPHA');\n            else shader.removeDefine('INVERT_ALPHA');\n        shader.compile();\n    };\n\n    this.removeAlphaSrc.onValueChanged=function()\n    {\n        if(self.removeAlphaSrc.val) shader.define('REMOVE_ALPHA_SRC');\n            else shader.removeDefine('REMOVE_ALPHA_SRC');\n        shader.compile();\n    };\n\n    this.alphaSrc.onValueChanged=function()\n    {\n        if(self.alphaSrc.val=='luminance') shader.define('ALPHA_FROM_LUMINANCE');\n            else shader.removeDefine('ALPHA_FROM_LUMINANCE');\n        shader.compile();\n    };\n\n    this.alphaSrc.val=\"alpha channel\";\n\n    this.blendMode.onValueChanged=function()\n    {\n        if(self.blendMode.val=='normal') shader.define('BM_NORMAL');\n            else shader.removeDefine('BM_NORMAL');\n\n        if(self.blendMode.val=='multiply') shader.define('BM_MULTIPLY');\n            else shader.removeDefine('BM_MULTIPLY');\n\n        if(self.blendMode.val=='average') shader.define('BM_AVERAGE');\n            else shader.removeDefine('BM_AVERAGE');\n\n        if(self.blendMode.val=='add') shader.define('BM_ADD');\n            else shader.removeDefine('BM_ADD');\n\n        if(self.blendMode.val=='substract') shader.define('BM_SUBSTRACT');\n            else shader.removeDefine('BM_SUBSTRACT');\n\n        if(self.blendMode.val=='difference') shader.define('BM_DIFFERENCE');\n            else shader.removeDefine('BM_DIFFERENCE');\n\n        if(self.blendMode.val=='negation') shader.define('BM_NEGATION');\n            else shader.removeDefine('BM_NEGATION');\n\n        if(self.blendMode.val=='exclusion') shader.define('BM_EXCLUSION');\n            else shader.removeDefine('BM_EXCLUSION');\n\n        if(self.blendMode.val=='lighten') shader.define('BM_LIGHTEN');\n            else shader.removeDefine('BM_LIGHTEN');\n\n        if(self.blendMode.val=='darken') shader.define('BM_DARKEN');\n            else shader.removeDefine('BM_DARKEN');\n\n        if(self.blendMode.val=='overlay') shader.define('BM_OVERLAY');\n            else shader.removeDefine('BM_OVERLAY');\n\n        if(self.blendMode.val=='screen') shader.define('BM_SCREEN');\n            else shader.removeDefine('BM_SCREEN');\n        \n        if(self.blendMode.val=='softlight') shader.define('BM_SOFTLIGHT');\n            else shader.removeDefine('BM_SOFTLIGHT');\n\n        if(self.blendMode.val=='hardlight') shader.define('BM_HARDLIGHT');\n            else shader.removeDefine('BM_HARDLIGHT');\n\n        if(self.blendMode.val=='color dodge') shader.define('BM_COLORDODGE');\n            else shader.removeDefine('BM_COLORDODGE');\n\n        if(self.blendMode.val=='color burn') shader.define('BM_COLORBURN');\n            else shader.removeDefine('BM_COLORBURN');\n\n        shader.compile();\n    };\n\n    var amountUniform=new CGL.Uniform(shader,'f','amount',1.0);\n\n    this.amount.onValueChanged=function()\n    {\n        amountUniform.setValue(self.amount.val);\n    };\n    self.amount.val=1.0;\n\n    this.imageAlpha.onValueChanged=function()\n    {\n        if(self.imageAlpha.val && self.imageAlpha.val.tex) shader.define('HAS_TEXTUREALPHA');\n            else shader.removeDefine('HAS_TEXTUREALPHA');\n        shader.compile();\n    };\n\n    function render()\n    {\n        if(!cgl.currentTextureEffect)return;\n\n        if(self.image.val && self.image.val.tex)\n        {\n\n            cgl.setShader(shader);\n            cgl.currentTextureEffect.bind();\n\n            cgl.gl.activeTexture(cgl.gl.TEXTURE0);\n            cgl.gl.bindTexture(cgl.gl.TEXTURE_2D, cgl.currentTextureEffect.getCurrentSourceTexture().tex );\n\n            cgl.gl.activeTexture(cgl.gl.TEXTURE1);\n            cgl.gl.bindTexture(cgl.gl.TEXTURE_2D, self.image.val.tex );\n\n            if(self.imageAlpha.val && self.imageAlpha.val.tex)\n            {\n                cgl.gl.activeTexture(cgl.gl.TEXTURE2);\n                cgl.gl.bindTexture(cgl.gl.TEXTURE_2D, self.imageAlpha.val.tex );\n            }\n\n            cgl.currentTextureEffect.finish();\n            cgl.setPreviousShader();\n        }\n\n        self.trigger.trigger();\n    }\n\n    function preview()\n    {\n        render();\n        self.image.val.preview();\n    }\n\n    function previewAlpha()\n    {\n        render();\n        self.imageAlpha.val.preview();\n    }\n\n    this.image.onPreviewChanged=function()\n    {\n        if(self.image.showPreview) self.render.onTriggered=preview;\n        else self.render.onTriggered=render;\n    };\n\n    this.imageAlpha.onPreviewChanged=function()\n    {\n        if(self.imageAlpha.showPreview) self.render.onTriggered=previewAlpha;\n        else self.render.onTriggered=render;\n    };\n    \n    this.render.onTriggered=render;\n\n\n};\n\nOps.Gl.TextureEffects.DrawImage.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------------------------\n\n\n\n// ---------------------------------------------------------------------------------------------\n\nOps.Gl.TextureEffects.DepthTexture = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=this.patch.cgl;\n\n    this.name='DepthTexture';\n\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.farPlane=this.addInPort(new Port(this,\"farplane\",OP_PORT_TYPE_VALUE));\n    this.nearPlane=this.addInPort(new Port(this,\"nearplane\",OP_PORT_TYPE_VALUE));\n    \n    this.image=this.addInPort(new Port(this,\"image\",OP_PORT_TYPE_TEXTURE));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var shader=new CGL.Shader(cgl);\n    this.onLoaded=shader.compile;\n\n    var srcFrag=''\n        .endl()+'precision highp float;'\n        .endl()+'#ifdef HAS_TEXTURES'\n        .endl()+'  varying vec2 texCoord;'\n        .endl()+'  uniform sampler2D image;'\n        .endl()+'#endif'\n        .endl()+'uniform float n;'\n        .endl()+'uniform float f;'\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   vec4 col=vec4(0.0,0.0,0.0,1.0);'\n        .endl()+'   #ifdef HAS_TEXTURES'\n        .endl()+'       col=texture2D(image,texCoord);'\n        .endl()+'       float z=col.r;'\n        .endl()+'       float c=(2.0*n)/(f+n-z*(f-n));'\n        .endl()+'       col=vec4(c,c,c,1.0);'\n\n        .endl()+'       if(c>=0.99)col.a=0.0;'\n        .endl()+'           else col.a=1.0;'\n        .endl()+'   #endif'\n        \n        .endl()+'   gl_FragColor = col;'\n        .endl()+'}';\n\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n    var textureUniform=new CGL.Uniform(shader,'t','image',0);\n\n    var uniFarplane=new CGL.Uniform(shader,'f','f',1.0);\n    var uniNearplane=new CGL.Uniform(shader,'f','n',1.0);\n\n    this.farPlane.onValueChanged=function()\n    {\n        uniFarplane.setValue(self.farPlane.val);\n    };\n    self.farPlane.val=5.0;\n\n    this.nearPlane.onValueChanged=function()\n    {\n        uniNearplane.setValue(self.nearPlane.val);\n    };\n    self.nearPlane.val=0.01;\n\n    this.render.onTriggered=function()\n    {\n        if(!cgl.currentTextureEffect)return;\n\n        if(self.image.val && self.image.val.tex)\n        {\n            cgl.setShader(shader);\n            cgl.currentTextureEffect.bind();\n\n            cgl.gl.activeTexture(cgl.gl.TEXTURE0);\n            cgl.gl.bindTexture(cgl.gl.TEXTURE_2D, self.image.val.tex );\n\n            cgl.currentTextureEffect.finish();\n            cgl.setPreviousShader();\n        }\n\n        self.trigger.trigger();\n    };\n};\n\nOps.Gl.TextureEffects.DepthTexture.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------------------------\n\n\n\nOps.Gl.TextureEffects.SSAO = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=this.patch.cgl;\n\n    this.name='SSAO';\n\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.farPlane=this.addInPort(new Port(this,\"farplane\",OP_PORT_TYPE_VALUE));\n    this.nearPlane=this.addInPort(new Port(this,\"nearplane\",OP_PORT_TYPE_VALUE));\n    this.amount=this.addInPort(new Port(this,\"amount\",OP_PORT_TYPE_VALUE,{display:'range'}));\n    this.dist=this.addInPort(new Port(this,\"dist\",OP_PORT_TYPE_VALUE,{display:'range'}));\n\n    this.image=this.addInPort(new Port(this,\"image\",OP_PORT_TYPE_TEXTURE));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var shader=new CGL.Shader(cgl);\n    this.onLoaded=shader.compile;\n\n    var srcFrag=''\n        .endl()+'precision highp float;'\n        .endl()+'#ifdef HAS_TEXTURES'\n        .endl()+'  varying vec2 texCoord;'\n        .endl()+'  uniform sampler2D image;'\n        .endl()+'  uniform sampler2D colTex;'\n        .endl()+'#endif'\n        .endl()+'uniform float amount;'\n        .endl()+'uniform float dist;'\n        \n        .endl()+'uniform float near;'\n        .endl()+'uniform float far;'\n        .endl()+''\n\n.endl()+'#define samples 8.0'\n.endl()+'#define rings 4.0'\n.endl()+'#define PI    3.14159265'\n.endl()+''\n\n.endl()+'float readDepth(vec2 coord)'\n.endl()+'{'\n.endl()+'    return (2.0 * near) / (far + near - texture2D(image, coord ).x * (far-near));'\n.endl()+'}'\n\n.endl()+'float compareDepths( in float depth1, in float depth2 )'\n.endl()+'{'\n.endl()+'    float aoCap = 1.9;'\n.endl()+'    float aoMultiplier =40.0;'\n.endl()+'    float depthTolerance = 0.001;'\n.endl()+'    float aorange = 100.0;'// units in space the AO effect extends to (this gets divided by the camera far range\n.endl()+'    float diff = sqrt(clamp(1.0-(depth1-depth2) / (aorange/(far-near)),0.0,1.0));'\n.endl()+'    float ao = min(aoCap,max(0.0,depth1-depth2-depthTolerance) * aoMultiplier) * diff;'\n.endl()+'    return ao;'\n.endl()+'}'\n\n        .endl()+'void main()'\n        .endl()+'{'\n\n        .endl()+'float d;float ao=1.0;    float depth = readDepth(texCoord);'\n\n        .endl()+'float w=1.0/640.0;'\n        .endl()+'float h=1.0/360.0;'\n\n        .endl()+'float pw;'\n        .endl()+'float ph;'\n\n        .endl()+'float s=0.0;'\n        .endl()+'float fade = 1.0;'\n\n        .endl()+'for (float i = 0.0 ; i < rings; i += 1.0)'\n        .endl()+'{'\n        .endl()+'   fade *= 0.5;'\n        .endl()+'   for (float j = 0.0 ; j < samples; j += 1.0)'\n        .endl()+'   {'\n        .endl()+'       float step = PI*2.0 / (samples*i);'\n        .endl()+'       float jj=j*2.0*i*2.0;'\n\n        .endl()+'       pw = (cos(jj*step)*i);'\n        .endl()+'       ph = (sin(jj*step)*i)*2.0;'\n\n        .endl()+'       pw*=dist;'\n        .endl()+'       ph*=dist;'\n\n        .endl()+'       d = readDepth( vec2(texCoord.s+pw*w,texCoord.t+ph*h));'\n\n        .endl()+'       ao += compareDepths(depth,d)*fade;'\n        .endl()+'       s += 1.0*fade*1.0;'\n        .endl()+'   }'\n        .endl()+'}'\n\n        .endl()+'ao /= s;'\n        .endl()+'ao = 1.0-ao;'\n        // .endl()+'ao *= amount;'\n        .endl()+'ao = 1.0-ao;'\n        \n        .endl()+'vec4 col=vec4(ao,ao,ao,1.0);'\n        // .endl()+'col.r=0.0;'\n        .endl()+'col=texture2D(colTex,texCoord)-col*amount;'\n        .endl()+'       col.a=1.0;'\n\n\n        .endl()+'   gl_FragColor = col;'\n        .endl()+'}';\n\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n    var textureUniform=new CGL.Uniform(shader,'t','image',0);\n    var textureColorUniform=new CGL.Uniform(shader,'t','colTex',1);\n\n    var uniFarplane=new CGL.Uniform(shader,'f','far',1.0);\n    var uniNearplane=new CGL.Uniform(shader,'f','near',1.0);\n    var uniAmount=new CGL.Uniform(shader,'f','amount',1.0);\n    var uniDist=new CGL.Uniform(shader,'f','dist',1.0);\n    \n\n\n    this.dist.onValueChanged=function()\n    {\n        uniDist.setValue(self.dist.val*5);\n    };\n    self.dist.val=0.2;\n\n    this.amount.onValueChanged=function()\n    {\n        uniAmount.setValue(self.amount.val);\n    };\n    self.amount.val=1.0;\n\n    this.farPlane.onValueChanged=function()\n    {\n        uniFarplane.setValue(self.farPlane.val);\n    };\n    self.farPlane.val=5.0;\n\n    this.nearPlane.onValueChanged=function()\n    {\n        uniNearplane.setValue(self.nearPlane.val);\n    };\n    self.nearPlane.val=0.01;\n\n    this.render.onTriggered=function()\n    {\n        if(!cgl.currentTextureEffect)return;\n\n        if(self.image.val && self.image.val.tex)\n        {\n            cgl.setShader(shader);\n            cgl.currentTextureEffect.bind();\n\n            cgl.gl.activeTexture(cgl.gl.TEXTURE0);\n            cgl.gl.bindTexture(cgl.gl.TEXTURE_2D, self.image.val.tex );\n\n            cgl.gl.activeTexture(cgl.gl.TEXTURE1);\n            cgl.gl.bindTexture(cgl.gl.TEXTURE_2D, cgl.currentTextureEffect.getCurrentSourceTexture().tex );\n\n\n            cgl.currentTextureEffect.finish();\n            cgl.setPreviousShader();\n        }\n\n        self.trigger.trigger();\n    };\n};\n\nOps.Gl.TextureEffects.SSAO.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------------------------\n\n\n\n\n\n\nOps.Gl.TextureEffects.AlphaMask = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=this.patch.cgl;\n\n    this.name='AlphaMask';\n\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    // this.amount=this.addInPort(new Port(this,\"amount\",OP_PORT_TYPE_VALUE,{ display:'range' }));\n    this.image=this.addInPort(new Port(this,\"image\",OP_PORT_TYPE_TEXTURE));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n\n    var shader=new CGL.Shader(cgl);\n    this.onLoaded=shader.compile;\n\n    var srcFrag=''\n        .endl()+'precision highp float;'\n        .endl()+'#ifdef HAS_TEXTURES'\n        .endl()+'  varying vec2 texCoord;'\n        .endl()+'  uniform sampler2D tex;'\n        .endl()+'  uniform sampler2D image;'\n        .endl()+'#endif'\n        // .endl()+'uniform float amount;'\n        .endl()+''\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   vec4 col=vec4(0.0,0.0,0.0,1.0);'\n        .endl()+'   #ifdef HAS_TEXTURES'\n        .endl()+'       col=texture2D(tex,texCoord);'\n        \n        .endl()+'   #ifdef FROM_RED'\n        .endl()+'       col.a=texture2D(image,texCoord).r;'\n        .endl()+'   #endif'\n\n        .endl()+'   #ifdef FROM_GREEN'\n        .endl()+'       col.a=texture2D(image,texCoord).g;'\n        .endl()+'   #endif'\n\n        .endl()+'   #ifdef FROM_BLUE'\n        .endl()+'       col.a=texture2D(image,texCoord).b;'\n        .endl()+'   #endif'\n\n        .endl()+'   #ifdef FROM_ALPHA'\n        .endl()+'       col.a=texture2D(image,texCoord).a;'\n        .endl()+'   #endif'\n\n        .endl()+'   #ifdef FROM_LUMINANCE'\n        .endl()+'       vec3 gray = vec3(dot(vec3(0.2126,0.7152,0.0722), texture2D(image,texCoord).rgb ));'\n        .endl()+'       col.a=(gray.r+gray.g+gray.b)/3.0;'\n        .endl()+'   #endif'\n\n        .endl()+'   #endif'\n        .endl()+'   gl_FragColor = col;'\n        .endl()+'}';\n\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n    var textureUniform=new CGL.Uniform(shader,'t','tex',0);\n    var textureDisplaceUniform=new CGL.Uniform(shader,'t','image',1);\n\n    this.method=this.addInPort(new Port(this,\"method\",OP_PORT_TYPE_VALUE ,{display:'dropdown',values:[\"luminance\",\"image alpha\",\"red\",\"green\",\"blue\"]} ));\n\n    this.method.onValueChanged=function()\n    {\n        if(self.method.val=='luminance') shader.define('FROM_LUMINANCE');\n            else shader.removeDefine('FROM_LUMINANCE');\n        if(self.method.val=='image alpha') shader.define('FROM_ALPHA');\n            else shader.removeDefine('FROM_ALPHA');\n        if(self.method.val=='red') shader.define('FROM_RED');\n            else shader.removeDefine('FROM_RED');\n        if(self.method.val=='green') shader.define('FROM_GREEN');\n            else shader.removeDefine('FROM_GREEN');\n        if(self.method.val=='blue') shader.define('FROM_BLUE');\n            else shader.removeDefine('FROM_BLUE');\n    };\n\n    this.render.onTriggered=function()\n    {\n        if(!cgl.currentTextureEffect)return;\n        \n        cgl.setShader(shader);\n        cgl.currentTextureEffect.bind();\n\n        cgl.gl.activeTexture(cgl.gl.TEXTURE0);\n        cgl.gl.bindTexture(cgl.gl.TEXTURE_2D, cgl.currentTextureEffect.getCurrentSourceTexture().tex );\n\n        if(self.image.val && self.image.val.tex)\n        {\n            cgl.gl.activeTexture(cgl.gl.TEXTURE1);\n            cgl.gl.bindTexture(cgl.gl.TEXTURE_2D, self.image.val.tex );\n        }\n\n        cgl.currentTextureEffect.finish();\n        cgl.setPreviousShader();\n\n        self.trigger.trigger();\n    };\n};\n\nOps.Gl.TextureEffects.AlphaMask.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------------------------\n\n\n\n\nOps.Gl.TextureEffects.WipeTransition = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=this.patch.cgl;\n\n    this.name='WipeTransition';\n\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.fade=this.addInPort(new Port(this,\"fade\",OP_PORT_TYPE_VALUE,{ display:'range' }));\n    this.fadeWidth=this.addInPort(new Port(this,\"fadeWidth\",OP_PORT_TYPE_VALUE,{ display:'range' }));\n    this.image=this.addInPort(new Port(this,\"image\",OP_PORT_TYPE_TEXTURE));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var shader=new CGL.Shader(cgl);\n    this.onLoaded=shader.compile;\n\n    var srcFrag=''\n        .endl()+'precision highp float;'\n        .endl()+'#ifdef HAS_TEXTURES'\n        .endl()+'  varying vec2 texCoord;'\n        .endl()+'  uniform sampler2D tex;'\n        .endl()+'  uniform sampler2D image;'\n        .endl()+'#endif'\n\n        .endl()+'uniform float fade;'\n        .endl()+'uniform float fadeWidth;'\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   vec4 col=vec4(0.0,0.0,0.0,1.0);'\n        .endl()+'   #ifdef HAS_TEXTURES'\n        .endl()+'       col=texture2D(tex,texCoord);'\n        .endl()+'       vec4 colWipe=texture2D(image,texCoord);'\n\n        .endl()+'       float w=fadeWidth;'\n        .endl()+'       float v=colWipe.r;'\n        .endl()+'       float f=fade+fade*w;'\n\n        .endl()+'       if(f<v) col.a=1.0;'\n        .endl()+'       else if(f>v+w) col.a=0.0;'\n        .endl()+'       else if(f>v && f<=v+w) col.a = 1.0-(f-v)/w; ;'\n\n        .endl()+'   #endif'\n        .endl()+'   gl_FragColor = col;'\n        .endl()+'}';\n\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n    var textureUniform=new CGL.Uniform(shader,'t','tex',0);\n    var textureDisplaceUniform=new CGL.Uniform(shader,'t','image',1);\n    var fadeUniform=new CGL.Uniform(shader,'f','fade',0);\n    var fadeWidthUniform=new CGL.Uniform(shader,'f','fadeWidth',0);\n\n    this.fade.onValueChanged=function()\n    {\n        fadeUniform.setValue(self.fade.val);\n    };\n\n    this.fadeWidth.onValueChanged=function()\n    {\n        fadeWidthUniform.setValue(self.fadeWidth.val);\n    };\n\n    this.fade.val=0.5;\n    this.fadeWidth.val=0.2;\n\n    this.render.onTriggered=function()\n    {\n        if(!cgl.currentTextureEffect)return;\n\n        if(self.image.val && self.image.val.tex)\n        {\n            cgl.setShader(shader);\n            cgl.currentTextureEffect.bind();\n\n            cgl.gl.activeTexture(cgl.gl.TEXTURE0);\n            cgl.gl.bindTexture(cgl.gl.TEXTURE_2D, cgl.currentTextureEffect.getCurrentSourceTexture().tex );\n\n            cgl.gl.activeTexture(cgl.gl.TEXTURE1);\n            cgl.gl.bindTexture(cgl.gl.TEXTURE_2D, self.image.val.tex );\n\n            cgl.currentTextureEffect.finish();\n            cgl.setPreviousShader();\n        }\n\n        self.trigger.trigger();\n    };\n\n};\n\nOps.Gl.TextureEffects.WipeTransition.prototype = new Op();\n\n// ---------------------------------------------------------------------------------------------\n\nOps.Gl.TextureEffects.ColorLookup = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=this.patch.cgl;\n\n    this.name='ColorLookup';\n\n    this.amount=this.addInPort(new Port(this,\"amount\",OP_PORT_TYPE_VALUE,{ display:'range' }));\n    this.posy=this.addInPort(new Port(this,\"posy\",OP_PORT_TYPE_VALUE,{ display:'range' }));\n    this.image=this.addInPort(new Port(this,\"image\",OP_PORT_TYPE_TEXTURE));\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var shader=new CGL.Shader(cgl);\n    this.onLoaded=shader.compile;\n\n    var srcFrag=''\n        .endl()+'precision highp float;'\n        .endl()+'#ifdef HAS_TEXTURES'\n        .endl()+'  varying vec2 texCoord;'\n        .endl()+'  uniform sampler2D tex;'\n        .endl()+'  uniform sampler2D image;'\n        .endl()+'  uniform float posy;'\n        .endl()+'#endif'\n        .endl()+'uniform float amount;'\n        .endl()+''\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   vec4 col=vec4(0.0,0.0,0.0,1.0);'\n        .endl()+'   #ifdef HAS_TEXTURES'\n        .endl()+'       col=texture2D(tex,texCoord);'\n        .endl()+'       col.r=col.r*(1.0-amount)+texture2D(image,vec2(col.r,posy)).r*amount;'\n        .endl()+'       col.g=col.g*(1.0-amount)+texture2D(image,vec2(col.g,posy)).g*amount;'\n        .endl()+'       col.b=col.b*(1.0-amount)+texture2D(image,vec2(col.b,posy)).b*amount;'\n        .endl()+'   #endif'\n        .endl()+'   col.a=1.0;'\n        .endl()+'   gl_FragColor = col;'\n        .endl()+'}';\n\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n    var textureUniform=new CGL.Uniform(shader,'t','tex',0);\n    var textureDisplaceUniform=new CGL.Uniform(shader,'t','image',1);\n\n    var amountUniform=new CGL.Uniform(shader,'f','amount',1.0);\n\n    this.amount.onValueChanged=function()\n    {\n        amountUniform.setValue(self.amount.val);\n    };\n\n    var posyUniform=new CGL.Uniform(shader,'f','posy',0.0);\n\n    this.posy.onValueChanged=function()\n    {\n        posyUniform.setValue(self.posy.val);\n    };\n\n    this.posy.val=0.0;\n\n    this.render.onTriggered=function()\n    {\n        if(!cgl.currentTextureEffect)return;\n        \n        cgl.setShader(shader);\n        cgl.currentTextureEffect.bind();\n\n        cgl.gl.activeTexture(cgl.gl.TEXTURE0);\n        cgl.gl.bindTexture(cgl.gl.TEXTURE_2D, cgl.currentTextureEffect.getCurrentSourceTexture().tex );\n\n        if(self.image.val && self.image.val.tex)\n        {\n            cgl.gl.activeTexture(cgl.gl.TEXTURE1);\n            cgl.gl.bindTexture(cgl.gl.TEXTURE_2D, self.image.val.tex );\n        }\n\n        cgl.currentTextureEffect.finish();\n        cgl.setPreviousShader();\n\n        self.trigger.trigger();\n    };\n};\n\nOps.Gl.TextureEffects.ColorLookup.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------------------------\n\nOps.Gl.TextureEffects.BrightnessContrast = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=this.patch.cgl;\n\n    this.name='BrightnessContrast';\n\n    this.amount=this.addInPort(new Port(this,\"contrast\",OP_PORT_TYPE_VALUE,{ display:'range' }));\n    this.amountBright=this.addInPort(new Port(this,\"brightness\",OP_PORT_TYPE_VALUE,{ display:'range' }));\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var shader=new CGL.Shader(cgl);\n    this.onLoaded=shader.compile;\n\n    var srcFrag=''\n        .endl()+'precision highp float;'\n        .endl()+'#ifdef HAS_TEXTURES'\n        .endl()+'  varying vec2 texCoord;'\n        .endl()+'  uniform sampler2D tex;'\n        .endl()+'#endif'\n        .endl()+'uniform float amount;'\n        .endl()+'uniform float amountbright;'\n        .endl()+''\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   vec4 col=vec4(1.0,0.0,0.0,1.0);'\n        .endl()+'   #ifdef HAS_TEXTURES'\n        .endl()+'       col=texture2D(tex,texCoord);'\n\n        .endl()+'       // apply contrast'\n        .endl()+'       col.rgb = ((col.rgb - 0.5) * max(amount*2.0, 0.0))+0.5;'\n\n        .endl()+'       // apply brightness'\n        .endl()+'       col.rgb += amountbright;'\n\n        .endl()+'   #endif'\n        .endl()+'   gl_FragColor = col;'\n        .endl()+'}';\n\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n    var textureUniform=new CGL.Uniform(shader,'t','tex',0);\n    var amountUniform=new CGL.Uniform(shader,'f','amount',0.4);\n    var amountBrightUniform=new CGL.Uniform(shader,'f','amountbright',0.0);\n\n    this.amount.onValueChanged=function()\n    {\n        console.log('amount changed! '+self.amount.val);\n        amountUniform.setValue(self.amount.val);\n    };\n\n    this.amountBright.onValueChanged=function()\n    {\n        amountBrightUniform.setValue(self.amountBright.val);\n    };\n    \n\n    this.amountBright.val=0;\n    this.amount.val=0.5;\n\n    this.render.onTriggered=function()\n    {\n        if(!cgl.currentTextureEffect)return;\n        \n        cgl.setShader(shader);\n        cgl.currentTextureEffect.bind();\n\n        cgl.gl.activeTexture(cgl.gl.TEXTURE0);\n        cgl.gl.bindTexture(cgl.gl.TEXTURE_2D, cgl.currentTextureEffect.getCurrentSourceTexture().tex );\n\n        cgl.currentTextureEffect.finish();\n        cgl.setPreviousShader();\n\n        self.trigger.trigger();\n    };\n};\n\nOps.Gl.TextureEffects.BrightnessContrast.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------------------------\n\nOps.Gl.TextureEffects.RemoveAlpha = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=this.patch.cgl;\n\n    this.name='RemoveAlpha';\n\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var shader=new CGL.Shader(cgl);\n    this.onLoaded=shader.compile;\n\n    var srcFrag=''\n        .endl()+'precision highp float;'\n        .endl()+'#ifdef HAS_TEXTURES'\n        .endl()+'  varying vec2 texCoord;'\n        .endl()+'  uniform sampler2D tex;'\n        .endl()+'#endif'\n        .endl()+''\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   vec4 col=vec4(1.0,0.0,0.0,1.0);'\n        .endl()+'   #ifdef HAS_TEXTURES'\n        .endl()+'       col=texture2D(tex,texCoord);'\n        .endl()+'       col.a=1.0;'\n        .endl()+'   #endif'\n        .endl()+'   gl_FragColor = col;'\n        .endl()+'}';\n\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n    var textureUniform=new CGL.Uniform(shader,'t','tex',0);\n\n    this.render.onTriggered=function()\n    {\n        if(!cgl.currentTextureEffect)return;\n        \n        cgl.setShader(shader);\n        cgl.currentTextureEffect.bind();\n\n        cgl.gl.activeTexture(cgl.gl.TEXTURE0);\n        cgl.gl.bindTexture(cgl.gl.TEXTURE_2D, cgl.currentTextureEffect.getCurrentSourceTexture().tex );\n\n        cgl.currentTextureEffect.finish();\n        cgl.setPreviousShader();\n\n        self.trigger.trigger();\n    };\n};\n\nOps.Gl.TextureEffects.RemoveAlpha.prototype = new Op();\n\n// ---------------------------------------------------------------------------------------------\n\n\n\n\n\nOps.Gl.TextureEffects.ColorOverlay = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=this.patch.cgl;\n\n    this.name='ColorOverlay';\n\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.r=this.addInPort(new Port(this,\"r\",OP_PORT_TYPE_VALUE,{ display:'range', colorPick:'true'}));\n    this.g=this.addInPort(new Port(this,\"g\",OP_PORT_TYPE_VALUE,{ display:'range' }));\n    this.b=this.addInPort(new Port(this,\"b\",OP_PORT_TYPE_VALUE,{ display:'range' }));\n    this.a=this.addInPort(new Port(this,\"a\",OP_PORT_TYPE_VALUE,{ display:'range' }));\n\n\n    var shader=new CGL.Shader(cgl);\n    this.onLoaded=shader.compile;\n\n    var srcFrag=''\n        .endl()+'precision highp float;'\n        .endl()+'#ifdef HAS_TEXTURES'\n        .endl()+'  varying vec2 texCoord;'\n        .endl()+'  uniform sampler2D tex;'\n        .endl()+'  uniform float r;'\n        .endl()+'  uniform float g;'\n        .endl()+'  uniform float b;'\n        .endl()+'  uniform float a;'\n        .endl()+'#endif'\n        .endl()+''\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   vec4 col=vec4(1.0,0.0,0.0,1.0);'\n        .endl()+'   #ifdef HAS_TEXTURES'\n        .endl()+'       col=texture2D(tex,texCoord);'\n        // .endl()+'       col.a=1.0;'\n        .endl()+'   #endif'\n\n\n        .endl()+'   vec4 overCol=vec4(r,g,b,col.a);'\n        .endl()+'   col=mix(col,overCol, a);'\n\n        .endl()+'   gl_FragColor = col;'\n        .endl()+'}';\n\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n    var textureUniform=new CGL.Uniform(shader,'t','tex',0);\n\n    this.render.onTriggered=function()\n    {\n        if(!cgl.currentTextureEffect)return;\n        \n        cgl.setShader(shader);\n        cgl.currentTextureEffect.bind();\n\n        cgl.gl.activeTexture(cgl.gl.TEXTURE0);\n        cgl.gl.bindTexture(cgl.gl.TEXTURE_2D, cgl.currentTextureEffect.getCurrentSourceTexture().tex );\n\n        cgl.currentTextureEffect.finish();\n        cgl.setPreviousShader();\n\n        self.trigger.trigger();\n    };\n\n\n\n    var uniformR=new CGL.Uniform(shader,'f','r',1.0);\n    var uniformG=new CGL.Uniform(shader,'f','g',1.0);\n    var uniformB=new CGL.Uniform(shader,'f','b',1.0);\n    var uniformA=new CGL.Uniform(shader,'f','a',1.0);\n\n\n    this.r.onValueChanged=function()\n    {\n        uniformR.setValue(self.r.val);\n    };\n\n    this.g.onValueChanged=function()\n    {\n        uniformG.setValue(self.g.val);\n    };\n\n    this.b.onValueChanged=function()\n    {\n        uniformB.setValue(self.b.val);\n    };\n\n    this.a.onValueChanged=function()\n    {\n        uniformA.setValue(self.a.val);\n    };\n\n    this.a.val=1.0;\n    this.r.val=1.0;\n    this.g.val=0.0;\n    this.b.val=0.0;\n\n};\n\nOps.Gl.TextureEffects.ColorOverlay.prototype = new Op();\n\n// ---------------------------------------------------------------------------------------------\n\n\n\nOps.Gl.TextureEffects.ColorChannel = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=this.patch.cgl;\n\n    this.name='ColorChannel';\n\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var shader=new CGL.Shader(cgl);\n    this.onLoaded=shader.compile;\n\n    var srcFrag=''\n        .endl()+'precision highp float;'\n        .endl()+'#ifdef HAS_TEXTURES'\n        .endl()+'  varying vec2 texCoord;'\n        .endl()+'  uniform sampler2D tex;'\n        .endl()+'#endif'\n        .endl()+''\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   vec4 col=vec4(0.0,0.0,0.0,1.0);'\n        .endl()+'   #ifdef HAS_TEXTURES'\n        \n        .endl()+'   #ifdef CHANNEL_R'\n        .endl()+'       col.r=texture2D(tex,texCoord).r;'\n        .endl()+'       #ifdef MONO'\n        .endl()+'           col.g=col.b=col.r;'\n        .endl()+'       #endif'\n\n        .endl()+'   #endif'\n\n        .endl()+'   #ifdef CHANNEL_G'\n        .endl()+'       col.g=texture2D(tex,texCoord).g;'\n        .endl()+'       #ifdef MONO'\n        .endl()+'           col.r=col.b=col.g;'\n        .endl()+'       #endif'\n        .endl()+'   #endif'\n\n        .endl()+'   #ifdef CHANNEL_B'\n        .endl()+'       col.b=texture2D(tex,texCoord).b;'\n        .endl()+'       #ifdef MONO'\n        .endl()+'           col.g=col.r=col.b;'\n        .endl()+'       #endif'\n        .endl()+'   #endif'\n\n        .endl()+'   #endif'\n        .endl()+'   gl_FragColor = col;'\n        .endl()+'}';\n\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n    var textureUniform=new CGL.Uniform(shader,'t','tex',0);\n\n    this.render.onTriggered=function()\n    {\n        if(!cgl.currentTextureEffect)return;\n        \n        cgl.setShader(shader);\n        cgl.currentTextureEffect.bind();\n\n        cgl.gl.activeTexture(cgl.gl.TEXTURE0);\n        cgl.gl.bindTexture(cgl.gl.TEXTURE_2D, cgl.currentTextureEffect.getCurrentSourceTexture().tex );\n\n        cgl.currentTextureEffect.finish();\n        cgl.setPreviousShader();\n\n        self.trigger.trigger();\n    };\n\n    this.channelR=this.addInPort(new Port(this,\"channelR\",OP_PORT_TYPE_VALUE,{ display:'bool' }));\n    this.channelR.onValueChanged=function()\n    {\n        if(self.channelR.val) shader.define('CHANNEL_R');\n            else shader.removeDefine('CHANNEL_R');\n    };\n    this.channelR.val=true;\n\n    this.channelG=this.addInPort(new Port(this,\"channelG\",OP_PORT_TYPE_VALUE,{ display:'bool' }));\n    this.channelG.val=false;\n    this.channelG.onValueChanged=function()\n    {\n        if(self.channelG.val)shader.define('CHANNEL_G');\n            else shader.removeDefine('CHANNEL_G');\n    };\n\n\n    this.channelB=this.addInPort(new Port(this,\"channelB\",OP_PORT_TYPE_VALUE,{ display:'bool' }));\n    this.channelB.val=false;\n    this.channelB.onValueChanged=function()\n    {\n        if(self.channelB.val) shader.define('CHANNEL_B');\n            else shader.removeDefine('CHANNEL_B');\n    };\n\n    this.mono=this.addInPort(new Port(this,\"mono\",OP_PORT_TYPE_VALUE,{ display:'bool' }));\n    this.mono.val=false;\n    this.mono.onValueChanged=function()\n    {\n        if(self.mono.val) shader.define('MONO');\n            else shader.removeDefine('MONO');\n    };\n\n\n};\n\nOps.Gl.TextureEffects.ColorChannel.prototype = new Op();\n\n// ---------------------------------------------------------------------------------------------\n\n\nOps.Gl.TextureEffects.RgbMultiply = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=this.patch.cgl;\n\n    this.name='RgbMultiply';\n\n    this.r=this.addInPort(new Port(this,\"r\"));\n    this.g=this.addInPort(new Port(this,\"g\"));\n    this.b=this.addInPort(new Port(this,\"b\"));\n    this.r.val=1.0;\n    this.g.val=1.0;\n    this.b.val=1.0;\n\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var shader=new CGL.Shader(cgl);\n    this.onLoaded=shader.compile;\n\n    var srcFrag=''\n        .endl()+'precision highp float;'\n        .endl()+'#ifdef HAS_TEXTURES'\n        .endl()+'  varying vec2 texCoord;'\n        .endl()+'  uniform sampler2D tex;'\n        .endl()+'#endif'\n        .endl()+'uniform float r;'\n        .endl()+'uniform float g;'\n        .endl()+'uniform float b;'\n        .endl()+''\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   vec4 col=vec4(1.0,0.0,0.0,1.0);'\n        .endl()+'   #ifdef HAS_TEXTURES'\n        .endl()+'       col=texture2D(tex,texCoord);'\n        .endl()+'       col.r*=r;'\n        .endl()+'       col.g*=g;'\n        .endl()+'       col.b*=b;'\n        .endl()+'   #endif'\n        .endl()+'   gl_FragColor = col;'\n        .endl()+'}';\n\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n    var textureUniform=new CGL.Uniform(shader,'t','tex',0);\n    var uniformR=new CGL.Uniform(shader,'f','r',1.0);\n    var uniformG=new CGL.Uniform(shader,'f','g',1.0);\n    var uniformB=new CGL.Uniform(shader,'f','b',1.0);\n\n    this.r.onValueChanged=function()\n    {\n        uniformR.setValue(self.r.val);\n    };\n\n    this.g.onValueChanged=function()\n    {\n        uniformG.setValue(self.g.val);\n    };\n\n    this.b.onValueChanged=function()\n    {\n        uniformB.setValue(self.b.val);\n    };\n\n    this.render.onTriggered=function()\n    {\n        if(!cgl.currentTextureEffect)return;\n        \n        cgl.setShader(shader);\n        cgl.currentTextureEffect.bind();\n\n        cgl.gl.activeTexture(cgl.gl.TEXTURE0);\n        cgl.gl.bindTexture(cgl.gl.TEXTURE_2D, cgl.currentTextureEffect.getCurrentSourceTexture().tex );\n\n        cgl.currentTextureEffect.finish();\n        cgl.setPreviousShader();\n\n        self.trigger.trigger();\n    };\n};\n\nOps.Gl.TextureEffects.RgbMultiply.prototype = new Op();\n\n// ---------------------------------------------------------------------------------------------\n\nOps.Gl.TextureEffects.Hue = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=this.patch.cgl;\n\n    this.name='Hue';\n\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n\n    this.hue=this.addInPort(new Port(this,\"hue\",OP_PORT_TYPE_VALUE,{display:'range'}));\n    this.hue.val=1.0;\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var shader=new CGL.Shader(cgl);\n    this.onLoaded=shader.compile;\n\n    var srcFrag=''\n        .endl()+'precision highp float;'\n        .endl()+'#ifdef HAS_TEXTURES'\n        .endl()+'  varying vec2 texCoord;'\n        .endl()+'  uniform sampler2D tex;'\n        .endl()+'#endif'\n        .endl()+'uniform float hue;'\n        .endl()+''\n\n        .endl()+'vec3 rgb2hsv(vec3 c)'\n        .endl()+'{'\n        .endl()+'    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);'\n        .endl()+'    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));'\n        .endl()+'    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));'\n        .endl()+''\n        .endl()+'    float d = q.x - min(q.w, q.y);'\n        .endl()+'    float e = 1.0e-10;'\n        .endl()+'    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);'\n        .endl()+'}'\n\n        .endl()+'vec3 hsv2rgb(vec3 c)'\n        .endl()+'{'\n        .endl()+'    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);'\n        .endl()+'    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);'\n        .endl()+'    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);'\n        .endl()+'}'\n\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   vec4 col=vec4(1.0,0.0,0.0,1.0);'\n        .endl()+'   #ifdef HAS_TEXTURES'\n        .endl()+'       col=texture2D(tex,texCoord);'\n        \n        .endl()+'       vec3 hsv = rgb2hsv(col.rgb);'\n        .endl()+'       hsv.x=hsv.x+hue;'\n        .endl()+'       col.rgb = hsv2rgb(hsv);'\n\n        .endl()+'   #endif'\n        .endl()+'   gl_FragColor = col;'\n        .endl()+'}';\n\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n    var textureUniform=new CGL.Uniform(shader,'t','tex',0);\n    var uniformHue=new CGL.Uniform(shader,'f','hue',1.0);\n\n    this.hue.onValueChanged=function()\n    {\n        uniformHue.setValue(self.hue.val);\n    };\n\n    this.render.onTriggered=function()\n    {\n        if(!cgl.currentTextureEffect)return;\n        \n        cgl.setShader(shader);\n        cgl.currentTextureEffect.bind();\n\n        cgl.gl.activeTexture(cgl.gl.TEXTURE0);\n        cgl.gl.bindTexture(cgl.gl.TEXTURE_2D, cgl.currentTextureEffect.getCurrentSourceTexture().tex );\n\n        cgl.currentTextureEffect.finish();\n        cgl.setPreviousShader();\n\n        self.trigger.trigger();\n    };\n};\n\nOps.Gl.TextureEffects.Hue.prototype = new Op();\n\n// ---------------------------------------------------------------------------------------------\n\nOps.Gl.TextureEffects.Color = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=this.patch.cgl;\n\n    this.name='Color';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.r=this.addInPort(new Port(this,\"r\",OP_PORT_TYPE_VALUE,{ display:'range', colorPick:'true'}));\n    this.g=this.addInPort(new Port(this,\"g\",OP_PORT_TYPE_VALUE,{ display:'range' }));\n    this.b=this.addInPort(new Port(this,\"b\",OP_PORT_TYPE_VALUE,{ display:'range' }));\n    this.a=this.addInPort(new Port(this,\"a\",OP_PORT_TYPE_VALUE,{ display:'range' }));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var shader=new CGL.Shader(cgl);\n    this.onLoaded=shader.compile;\n\n    var srcFrag=''\n        .endl()+'precision highp float;'\n        .endl()+'#ifdef HAS_TEXTURES'\n        .endl()+'  varying vec2 texCoord;'\n        .endl()+'  uniform sampler2D tex;'\n        .endl()+'#endif'\n        .endl()+'uniform float r;'\n        .endl()+'uniform float g;'\n        .endl()+'uniform float b;'\n        .endl()+'uniform float a;'\n        .endl()+''\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   vec4 col=vec4(r,g,b,a);'\n        .endl()+'   gl_FragColor = col;'\n        .endl()+'}';\n\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n    var textureUniform=new CGL.Uniform(shader,'t','tex',0);\n    var uniformR=new CGL.Uniform(shader,'f','r',1.0);\n    var uniformG=new CGL.Uniform(shader,'f','g',1.0);\n    var uniformB=new CGL.Uniform(shader,'f','b',1.0);\n    var uniformA=new CGL.Uniform(shader,'f','a',1.0);\n\n\n    this.r.onValueChanged=function()\n    {\n        uniformR.setValue(self.r.val);\n    };\n\n    this.g.onValueChanged=function()\n    {\n        uniformG.setValue(self.g.val);\n    };\n\n    this.b.onValueChanged=function()\n    {\n        uniformB.setValue(self.b.val);\n    };\n\n    this.a.onValueChanged=function()\n    {\n        uniformA.setValue(self.a.val);\n    };\n\n    this.r.val=1.0;\n    this.g.val=1.0;\n    this.b.val=1.0;\n    this.a.val=1.0;\n\n    this.render.onTriggered=function()\n    {\n        if(!cgl.currentTextureEffect)return;\n        \n        cgl.setShader(shader);\n        cgl.currentTextureEffect.bind();\n\n        cgl.gl.activeTexture(cgl.gl.TEXTURE0);\n        cgl.gl.bindTexture(cgl.gl.TEXTURE_2D, cgl.currentTextureEffect.getCurrentSourceTexture().tex );\n\n        cgl.currentTextureEffect.finish();\n        cgl.setPreviousShader();\n\n        self.trigger.trigger();\n    };\n};\n\nOps.Gl.TextureEffects.Color.prototype = new Op();\n\n// ---------------------------------------------------------------------------------------------\n\nOps.Gl.TextureEffects.Vignette = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=this.patch.cgl;\n\n    this.name='Vignette';\n\n    this.lensRadius1=this.addInPort(new Port(this,\"lensRadius1\"));\n    this.lensRadius2=this.addInPort(new Port(this,\"lensRadius2\"));\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var shader=new CGL.Shader(cgl);\n    this.onLoaded=shader.compile;\n\n    var srcFrag=''\n        .endl()+'precision highp float;'\n        .endl()+'#ifdef HAS_TEXTURES'\n        .endl()+'  varying vec2 texCoord;'\n        .endl()+'  uniform sampler2D tex;'\n        .endl()+'#endif'\n        .endl()+'uniform float lensRadius1;'\n        .endl()+'uniform float lensRadius2;'\n        .endl()+''\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   vec4 col=vec4(1.0,0.0,0.0,1.0);'\n        .endl()+'   #ifdef HAS_TEXTURES'\n        .endl()+'       col=texture2D(tex,texCoord);'\n        .endl()+'       vec2 tcPos=vec2(texCoord.x,texCoord.y/1.777+0.25);'\n\n        .endl()+'       float dist = distance(tcPos, vec2(0.5,0.5));'\n        .endl()+'       col.rgb *= smoothstep(lensRadius1, lensRadius2, dist);'\n        .endl()+'   #endif'\n        .endl()+'   gl_FragColor = col;'\n        .endl()+'}';\n\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n    var textureUniform=new CGL.Uniform(shader,'t','tex',0);\n    var uniLensRadius1=new CGL.Uniform(shader,'f','lensRadius1',0.4);\n    var uniLensRadius2=new CGL.Uniform(shader,'f','lensRadius2',0.3);\n\n    this.lensRadius1.onValueChanged=function()\n    {\n        uniLensRadius1.setValue(self.lensRadius1.val);\n    };\n\n    this.lensRadius2.onValueChanged=function()\n    {\n        uniLensRadius2.setValue(self.lensRadius2.val);\n    };\n\n    this.lensRadius1.val=0.8;\n    this.lensRadius2.val=0.4;\n\n    this.render.onTriggered=function()\n    {\n        if(!cgl.currentTextureEffect)return;\n        \n        cgl.setShader(shader);\n        cgl.currentTextureEffect.bind();\n\n        cgl.gl.activeTexture(cgl.gl.TEXTURE0);\n        cgl.gl.bindTexture(cgl.gl.TEXTURE_2D, cgl.currentTextureEffect.getCurrentSourceTexture().tex );\n\n        cgl.currentTextureEffect.finish();\n        cgl.setPreviousShader();\n\n        self.trigger.trigger();\n    };\n};\n\nOps.Gl.TextureEffects.Vignette.prototype = new Op();\n\n// ---------------------------------------------------------------------------------------------\n\nOps.Gl.TextureEffects.Blur = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=this.patch.cgl;\n\n    this.name='Blur';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.iterations=this.addInPort(new Port(this,\"iterations\",OP_PORT_TYPE_VALUE));\n    this.iterations.val=10;\n\n    var shader=new CGL.Shader(cgl);\n    this.onLoaded=shader.compile;\n\n    var srcFrag=''\n        .endl()+'precision highp float;'\n        .endl()+'#ifdef HAS_TEXTURES'\n        .endl()+'  varying vec2 texCoord;'\n        .endl()+'  uniform sampler2D tex;'\n        .endl()+'  uniform float dirX;'\n        .endl()+'  uniform float dirY;'\n        .endl()+'  uniform float width;'\n        .endl()+'  uniform float height;'\n        .endl()+'#endif'\n        .endl()+''\n        .endl()+'vec4 blur9(sampler2D texture, vec2 uv, vec2 red, vec2 dir)'\n        .endl()+'{'\n        .endl()+'   vec4 color = vec4(0.0);'\n        .endl()+'   vec2 offset1 = vec2(1.3846153846) * dir;'\n        .endl()+'   vec2 offset2 = vec2(3.2307692308) * dir;'\n        .endl()+'   color += texture2D(texture, uv) * 0.2270270270;'\n        .endl()+'   color += texture2D(texture, uv + (offset1 / red)) * 0.3162162162;'\n        .endl()+'   color += texture2D(texture, uv - (offset1 / red)) * 0.3162162162;'\n        .endl()+'   color += texture2D(texture, uv + (offset2 / red)) * 0.0702702703;'\n        .endl()+'   color += texture2D(texture, uv - (offset2 / red)) * 0.0702702703;'\n        .endl()+'   return color;'\n        .endl()+'}'\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   vec4 col=vec4(1.0,0.0,0.0,1.0);'\n        .endl()+'   #ifdef HAS_TEXTURES'\n        .endl()+'       col=blur9(tex,texCoord,vec2(width,height),vec2(dirX,dirY));'\n        .endl()+'   #endif'\n        .endl()+'   gl_FragColor = col;'\n        .endl()+'}';\n\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n    var textureUniform=new CGL.Uniform(shader,'t','tex',0);\n    var uniDirX=new CGL.Uniform(shader,'f','dirX',0);\n    var uniDirY=new CGL.Uniform(shader,'f','dirY',0);\n\n    var uniWidth=new CGL.Uniform(shader,'f','width',0);\n    var uniHeight=new CGL.Uniform(shader,'f','height',0);\n\n    this.render.onTriggered=function()\n    {\n        if(!cgl.currentTextureEffect)return;\n        cgl.setShader(shader);\n\n        uniWidth.setValue(cgl.currentTextureEffect.getCurrentSourceTexture().width);\n        uniHeight.setValue(cgl.currentTextureEffect.getCurrentSourceTexture().height);\n\n        for(var i =0;i<self.iterations.val;i++)\n        {\n            // first pass\n\n            cgl.currentTextureEffect.bind();\n            cgl.gl.activeTexture(cgl.gl.TEXTURE0);\n            cgl.gl.bindTexture(cgl.gl.TEXTURE_2D, cgl.currentTextureEffect.getCurrentSourceTexture().tex );\n\n            uniDirX.setValue(0.0);\n            uniDirY.setValue(1.0);\n\n            cgl.currentTextureEffect.finish();\n\n            // second pass\n\n            cgl.currentTextureEffect.bind();\n            cgl.gl.activeTexture(cgl.gl.TEXTURE0);\n            cgl.gl.bindTexture(cgl.gl.TEXTURE_2D, cgl.currentTextureEffect.getCurrentSourceTexture().tex );\n\n            uniDirX.setValue(1.0);\n            uniDirY.setValue(0.0);\n\n            cgl.currentTextureEffect.finish();\n        }\n\n        cgl.setPreviousShader();\n        self.trigger.trigger();\n    };\n};\n\nOps.Gl.TextureEffects.Blur.prototype = new Op();\n\n\n\n\n\n// ---------------------------------------------------------------------------------------------\n\nOps.Gl.TextureEffects.FXAA = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=this.patch.cgl;\n\n    // shader from: https://github.com/mattdesl/glsl-fxaa\n\n    this.name='FXAA';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n    \n    this.fxaa_span=this.addInPort(new Port(this,\"span\",OP_PORT_TYPE_VALUE,{display:'dropdown',values:[0,2,4,8,16,32,64]}));\n    this.fxaa_reduceMin=this.addInPort(new Port(this,\"reduceMin\",OP_PORT_TYPE_VALUE));\n    this.fxaa_reduceMul=this.addInPort(new Port(this,\"reduceMul\",OP_PORT_TYPE_VALUE));\n\n    this.texWidth=this.addInPort(new Port(this,\"width\",OP_PORT_TYPE_VALUE));\n    this.texHeight=this.addInPort(new Port(this,\"height\",OP_PORT_TYPE_VALUE));\n\n    var shader=new CGL.Shader(cgl);\n    this.onLoaded=shader.compile;\n    var srcFrag=''\n               \n        .endl()+'precision highp float;'\n        .endl()+'#ifdef HAS_TEXTURES'\n        .endl()+'  varying vec2 texCoord;'\n        .endl()+'  uniform sampler2D tex;'\n        .endl()+'#endif'\n        .endl()+'    uniform float FXAA_SPAN_MAX;'\n\n        .endl()+'    uniform float FXAA_REDUCE_MUL;'\n        .endl()+'    uniform float FXAA_REDUCE_MIN;'\n        .endl()+'    uniform float width;'\n        .endl()+'    uniform float height;'\n\n        .endl()+'vec4 getColorFXAA(vec2 coord)'\n        .endl()+'{'\n        .endl()+'    vec2 invtexsize=vec2(1.0/width,1.0/height);'\n        .endl()+''\n        .endl()+'    float step=1.0;'\n        .endl()+''\n        .endl()+'    vec3 rgbNW = texture2D(tex, coord.xy + (vec2(-step, -step)*invtexsize )).xyz;'\n        .endl()+'    vec3 rgbNE = texture2D(tex, coord.xy + (vec2(+step, -step)*invtexsize )).xyz;'\n        .endl()+'    vec3 rgbSW = texture2D(tex, coord.xy + (vec2(-step, +step)*invtexsize )).xyz;'\n        .endl()+'    vec3 rgbSE = texture2D(tex, coord.xy + (vec2(+step, +step)*invtexsize )).xyz;'\n        .endl()+'    vec3 rgbM  = texture2D(tex, coord.xy).xyz;'\n        .endl()+''\n        .endl()+'    vec3 luma = vec3(0.299, 0.587, 0.114);'\n        .endl()+'    float lumaNW = dot(rgbNW, luma);'\n        .endl()+'    float lumaNE = dot(rgbNE, luma);'\n        .endl()+'    float lumaSW = dot(rgbSW, luma);'\n        .endl()+'    float lumaSE = dot(rgbSE, luma);'\n        .endl()+'    float lumaM  = dot( rgbM, luma);'\n        .endl()+''\n        .endl()+'    float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));'\n        .endl()+'    float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));'\n        .endl()+''\n        .endl()+'    vec2 dir;'\n        .endl()+'    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));'\n        .endl()+'    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));'\n        .endl()+''\n        .endl()+'    float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) * (0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);'\n        .endl()+''\n        .endl()+'    float rcpDirMin = 1.0/(min(abs(dir.x), abs(dir.y)) + dirReduce);'\n        .endl()+''\n        .endl()+'    dir = min(vec2(FXAA_SPAN_MAX,  FXAA_SPAN_MAX),'\n        .endl()+'          max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX), dir * rcpDirMin))*invtexsize ;'\n        .endl()+''\n        .endl()+'    vec3 rgbA = (1.0/2.0) * ('\n        .endl()+'                texture2D(tex, coord.xy + dir * (1.0/3.0 - 0.5)).xyz +'\n        .endl()+'                texture2D(tex, coord.xy + dir * (2.0/3.0 - 0.5)).xyz);'\n        .endl()+'    vec3 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * ('\n        .endl()+'                texture2D(tex, coord.xy + dir * (0.0/3.0 - 0.5)).xyz +'\n        .endl()+'                texture2D(tex, coord.xy + dir * (3.0/3.0 - 0.5)).xyz);'\n        .endl()+'    float lumaB = dot(rgbB, luma);'\n        .endl()+''\n        .endl()+'    vec4 color=texture2D(tex,coord).rgba;'\n        .endl()+''\n        .endl()+'    if((lumaB < lumaMin) || (lumaB > lumaMax)){'\n        .endl()+'      color.xyz=rgbA;'\n        .endl()+'    } else {'\n        .endl()+'      color.xyz=rgbB;'\n        .endl()+'    }'\n        .endl()+'    return color;'\n        .endl()+'}'\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   vec4 col=vec4(1.0,0.0,0.0,1.0);'\n        .endl()+'   gl_FragColor = getColorFXAA(texCoord);'\n        .endl()+'}';\n\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n    var textureUniform=new CGL.Uniform(shader,'t','tex',0);\n\n    this.render.onTriggered=function()\n    {\n        if(!cgl.currentTextureEffect)return;\n        cgl.setShader(shader);\n\n        cgl.currentTextureEffect.bind();\n        cgl.gl.activeTexture(cgl.gl.TEXTURE0);\n        cgl.gl.bindTexture(cgl.gl.TEXTURE_2D, cgl.currentTextureEffect.getCurrentSourceTexture().tex );\n\n        cgl.currentTextureEffect.finish();\n        \n        cgl.setPreviousShader();\n\n        self.trigger.trigger();\n    };\n\n\n    var uniformSpan=new CGL.Uniform(shader,'f','FXAA_SPAN_MAX',0);\n\n    var uniformMul=new CGL.Uniform(shader,'f','FXAA_REDUCE_MUL',0);\n    var uniformMin=new CGL.Uniform(shader,'f','FXAA_REDUCE_MIN',0);\n\n    this.fxaa_span.onValueChanged=function()\n    {\n        uniformSpan.setValue(parseInt(self.fxaa_span.val,10));\n    };\n\n    var uWidth=new CGL.Uniform(shader,'f','width',0);\n    var uHeight=new CGL.Uniform(shader,'f','height',0);\n\n    function changeRes()\n    {\n        uWidth.setValue(self.texWidth.val);\n        uHeight.setValue(self.texHeight.val);\n    }\n\n    this.texWidth.onValueChanged=changeRes;\n    this.texHeight.onValueChanged=changeRes;\n    \n    this.fxaa_span.val=8;\n    this.texWidth.val=1920;\n    this.texHeight.val=1080;\n\n    this.fxaa_reduceMul.onValueChanged=function()\n    {\n        uniformMul.setValue(1.0/self.fxaa_reduceMul.val);\n    };\n\n    this.fxaa_reduceMin.onValueChanged=function()\n    {\n        uniformMin.setValue(1.0/self.fxaa_reduceMin.val);\n    };\n\n    this.fxaa_reduceMul.val=8;\n    this.fxaa_reduceMin.val=128;\n\n\n};\n\nOps.Gl.TextureEffects.FXAA.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------------------------\n\nOps.Gl.TextureEffects.Noise = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=this.patch.cgl;\n\n    this.name='Noise';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.amount=this.addInPort(new Port(this,\"amount\",OP_PORT_TYPE_VALUE,{display:'range'}));\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var shader=new CGL.Shader(cgl);\n    this.onLoaded=shader.compile;\n\n    var srcFrag=''\n        .endl()+'precision highp float;'\n        .endl()+'#ifdef HAS_TEXTURES'\n        .endl()+'  varying vec2 texCoord;'\n        .endl()+'  uniform sampler2D tex;'\n        .endl()+'#endif'\n\n        .endl()+'uniform float amount;'\n        .endl()+'uniform float time;'\n\n        .endl()+'float random(vec2 co)'\n        .endl()+'{'\n        .endl()+'   return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);'\n        .endl()+'}'\n\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   float c=random(time*texCoord.xy);'\n        .endl()+'   vec4 col=texture2D(tex,texCoord);'\n        .endl()+'   col.rgb=mix(col.rgb,vec3(c),amount);'\n        .endl()+'   gl_FragColor = col;'\n        .endl()+'}';\n\n\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n    var textureUniform=new CGL.Uniform(shader,'t','tex',0);\n\n    this.render.onTriggered=function()\n    {\n        if(!cgl.currentTextureEffect)return;\n        \n        timeUniform.setValue(self.patch.timer.getTime());\n\n        cgl.setShader(shader);\n        cgl.currentTextureEffect.bind();\n\n        cgl.gl.activeTexture(cgl.gl.TEXTURE0);\n        cgl.gl.bindTexture(cgl.gl.TEXTURE_2D, cgl.currentTextureEffect.getCurrentSourceTexture().tex );\n\n        cgl.currentTextureEffect.finish();\n        cgl.setPreviousShader();\n\n        self.trigger.trigger();\n    };\n\n    var amountUniform=new CGL.Uniform(shader,'f','amount',1.0);\n    var timeUniform=new CGL.Uniform(shader,'f','time',1.0);\n\n    this.amount.onValueChanged=function()\n    {\n        amountUniform.setValue(self.amount.val);\n    };\n\n    this.amount.val=0.3;\n\n};\n\nOps.Gl.TextureEffects.Noise.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------------------------\n\n\nOps.Gl.TextureEffects.ChromaticAberration = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=this.patch.cgl;\n\n    this.name='ChromaticAberration';\n\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.amount=this.addInPort(new Port(this,\"amount\",OP_PORT_TYPE_VALUE,{display:'range'}));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var shader=new CGL.Shader(cgl);\n    this.onLoaded=shader.compile;\n\n    var srcFrag=''\n        .endl()+'precision highp float;'\n        .endl()+'#ifdef HAS_TEXTURES'\n        .endl()+'  varying vec2 texCoord;'\n        .endl()+'  uniform sampler2D tex;'\n        .endl()+'#endif'\n        .endl()+'uniform float amount;'\n        .endl()+''\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   vec4 col=vec4(1.0,0.0,0.0,1.0);'\n        .endl()+'   #ifdef HAS_TEXTURES'\n        .endl()+'       col=texture2D(tex,texCoord);'\n        .endl()+'       vec2 tcPos=vec2(texCoord.x,texCoord.y/1.777+0.25);'\n        .endl()+'       float dist = distance(tcPos, vec2(0.5,0.5));'\n        .endl()+'       col.r=texture2D(tex,texCoord+(dist)*-amount).r;'\n        .endl()+'       col.b=texture2D(tex,texCoord+(dist)*amount).b;'\n        .endl()+'   #endif'\n        .endl()+'   gl_FragColor = col;'\n        .endl()+'}';\n\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n    var textureUniform=new CGL.Uniform(shader,'t','tex',0);\n    var uniAmount=new CGL.Uniform(shader,'f','amount',0);\n\n    this.amount.onValueChanged=function()\n    {\n        uniAmount.setValue(self.amount.val*0.1);\n    };\n    this.amount.val=0.5;\n\n    this.render.onTriggered=function()\n    {\n        if(!cgl.currentTextureEffect)return;\n        \n        cgl.setShader(shader);\n        cgl.currentTextureEffect.bind();\n\n        cgl.gl.activeTexture(cgl.gl.TEXTURE0);\n        cgl.gl.bindTexture(cgl.gl.TEXTURE_2D, cgl.currentTextureEffect.getCurrentSourceTexture().tex );\n\n        cgl.currentTextureEffect.finish();\n        cgl.setPreviousShader();\n\n        self.trigger.trigger();\n    };\n};\n\nOps.Gl.TextureEffects.ChromaticAberration.prototype = new Op();\n","\n//http://k3d.ivank.net/K3D.js\n//http://fhtr.blogspot.de/2009/12/3d-models-and-parsing-binary-data-with.html\n//https://github.com/gpjt/webgl-lessons/blob/master/lesson05/index.html\n\nOps.Gl=Ops.Gl || {};\n\n\n\n\n\nOps.Gl.Renderer = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    if(!this.patch.cgl)\n    {\n        console.log(' no cgl!');\n    }\n\n    var cgl=this.patch.cgl;\n\n    this.name='renderer';\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n    this.width=this.addOutPort(new Port(this,\"width\",OP_PORT_TYPE_VALUE));\n    this.height=this.addOutPort(new Port(this,\"height\",OP_PORT_TYPE_VALUE));\n\n    var identTranslate=vec3.create();\n    vec3.set(identTranslate, 0,0,-2);\n\n    this.onDelete=function()\n    {\n        self.patch.removeOnAnimFrame(self);\n    };\n\n    this.onAnimFrame=function(time)\n    {\n        if(cgl.canvasWidth==-1)\n        {\n            cgl.setCanvas(self.patch.config.glCanvasId);\n            return;\n        }\n\n        if(cgl.canvasWidth!=cgl.canvas.clientWidth || cgl.canvasHeight!=cgl.canvas.clientHeight)\n        {\n            cgl.canvasWidth=cgl.canvas.clientWidth;\n            self.width.set(cgl.canvasWidth);\n            cgl.canvasHeight=cgl.canvas.clientHeight;\n            self.height.set(cgl.canvasHeight);\n        }\n\n        Ops.Gl.Renderer.renderStart(cgl,identTranslate);\n\n        self.trigger.trigger();\n\n        if(CGL.Texture.previewTexture)\n        {\n            if(!CGL.Texture.texturePreviewer) CGL.Texture.texturePreviewer=new CGL.Texture.texturePreview(cgl);\n            CGL.Texture.texturePreviewer.render(CGL.Texture.previewTexture);\n        }\n        Ops.Gl.Renderer.renderEnd(cgl);\n    };\n\n};\n\n\nOps.Gl.Renderer.renderStart=function(cgl,identTranslate)\n{\n    cgl.gl.enable(cgl.gl.DEPTH_TEST);\n    cgl.gl.clearColor(0,0,0,1);\n    cgl.gl.clear(cgl.gl.COLOR_BUFFER_BIT | cgl.gl.DEPTH_BUFFER_BIT);\n\n    cgl.setViewPort(0,0,cgl.canvas.clientWidth,cgl.canvas.clientHeight);\n    mat4.perspective(cgl.pMatrix,45, cgl.canvasWidth/cgl.canvasHeight, 0.01, 1100.0);\n\n    cgl.pushPMatrix();\n    cgl.pushMvMatrix();\n\n    mat4.identity(cgl.mvMatrix);\n    mat4.translate(cgl.mvMatrix,cgl.mvMatrix, identTranslate);\n\n    cgl.gl.enable(cgl.gl.BLEND);\n    cgl.gl.blendFunc(cgl.gl.SRC_ALPHA,cgl.gl.ONE_MINUS_SRC_ALPHA);\n\n    cgl.beginFrame();\n};\n\nOps.Gl.Renderer.renderEnd=function(cgl,identTranslate)\n{\n    cgl.popMvMatrix();\n    cgl.popPMatrix();\n\n    cgl.endFrame();\n};\n\nOps.Gl.Renderer.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.Perspective = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=self.patch.cgl;\n\n    this.name='Perspective';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.fovY=this.addInPort(new Port(this,\"fov y\",OP_PORT_TYPE_VALUE ));\n    this.fovY.val=45;\n\n    this.zNear=this.addInPort(new Port(this,\"frustum near\",OP_PORT_TYPE_VALUE ));\n    this.zNear.val=0.01;\n\n    this.zFar=this.addInPort(new Port(this,\"frustum far\",OP_PORT_TYPE_VALUE ));\n    this.zFar.val=2000.0;\n\n\n    this.render.onTriggered=function()\n    {\n        mat4.perspective(cgl.pMatrix,self.fovY.val*0.0174533, cgl.getViewPort()[2]/cgl.getViewPort()[3], self.zNear.val, self.zFar.val);\n        cgl.pushPMatrix();\n\n        self.trigger.trigger();\n\n        cgl.popPMatrix();\n    };\n\n    function changed()\n    {\n        cgl.frameStore.perspective=\n        {\n            fovy:self.fovY.val,\n            zFar:self.zFar.val,\n            zNear:self.zNear.val,\n        };\n    }\n\n    this.fovY.onValueChanged=changed;\n    this.zFar.onValueChanged=changed;\n    this.zNear.onValueChanged=changed;\n\n};\n\nOps.Gl.Perspective.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.LetterBox = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=self.patch.cgl;\n\n    this.name='letterbox';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.ratio=this.addInPort(new Port(this,\"ratio\",OP_PORT_TYPE_VALUE ,{display:'dropdown',values:[1.25,1.3333333333,1.777777777778,2.33333333333333]} ));\n    this.ratio.val=1.777777777778;\n\n    var x=0,y=0,w=1000,h=1000;\n\n\n    function resize()\n    {\n        var _w=cgl.canvasHeight*self.ratio.val;\n        var _h=cgl.canvasHeight;\n        var _x=0;\n        var _y=0;\n        if(_w>cgl.canvasWidth)\n        {\n           _w=cgl.canvasWidth;\n           _h=cgl.canvasWidth/self.ratio.val;\n        }\n\n        if(_w<cgl.canvasWidth) _x=(cgl.canvasWidth-_w)/2;\n        if(_h<cgl.canvasHeight) _y=(cgl.canvasHeight-_h)/2;\n\n\n        if(_w!=w || _h!=h || _x!=x ||_y!=y)\n        {\n            w=_w;\n            h=_h;\n            x=_x;\n            y=_y;\n\n            cgl.setViewPort(x,y,w,h);\n\n            for(var i=0;i<self.patch.ops.length;i++)\n            {\n                if(self.patch.ops[i].onResize)self.patch.ops[i].onResize();\n            }\n\n        }\n        \n\n    }\n\n    this.render.onTriggered=function()\n    {\n        cgl.gl.enable(cgl.gl.SCISSOR_TEST);\n\n        resize();\n\n        cgl.gl.scissor(x,y,w,h);\n        cgl.setViewPort(x,y,w,h);\n        \n        mat4.perspective(cgl.pMatrix,45, self.ratio.val, 0.01, 1100.0);\n\n\n        self.trigger.trigger();\n        cgl.gl.disable(cgl.gl.SCISSOR_TEST);\n\n    };\n};\n\nOps.Gl.LetterBox.prototype = new Op();\nOps.Gl.AspectRatioBorder=Ops.Gl.LetterBox;\n\n// --------------------------------------------------------------------------\n\n\n\n\n\nOps.Gl.ClearAlpha = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=self.patch.cgl;\n\n    this.name='ClearAlpha';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.a=this.addInPort(new Port(this,\"a\",OP_PORT_TYPE_VALUE,{ display:'range' }));\n\n    this.a.val=1.0;\n\n    this.render.onTriggered=function()\n    {\n        cgl.gl.colorMask(false, false, false, true);\n        cgl.gl.clearColor(0, 0, 0, self.a.val);\n        cgl.gl.clear(cgl.gl.GL_COLOR_BUFFER_BIT | cgl.gl.GL_DEPTH_BUFFER_BIT);\n        cgl.gl.colorMask(true, true, true, true);\n\n        self.trigger.trigger();\n    };\n};\n\nOps.Gl.ClearAlpha.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.ClearColor = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=self.patch.cgl;\n\n    this.name='ClearColor';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.r=this.addInPort(new Port(this,\"r\",OP_PORT_TYPE_VALUE,{ display:'range', colorPick:'true'}));\n    this.g=this.addInPort(new Port(this,\"g\",OP_PORT_TYPE_VALUE,{ display:'range' }));\n    this.b=this.addInPort(new Port(this,\"b\",OP_PORT_TYPE_VALUE,{ display:'range' }));\n    this.a=this.addInPort(new Port(this,\"a\",OP_PORT_TYPE_VALUE,{ display:'range' }));\n\n    this.r.val=0.3;\n    this.g.val=0.3;\n    this.b.val=0.3;\n    this.a.val=1.0;\n    this.render.onTriggered=function()\n    {\n        cgl.gl.clearColor(self.r.val,self.g.val,self.b.val,self.a.val);\n        cgl.gl.clear(cgl.gl.COLOR_BUFFER_BIT | cgl.gl.DEPTH_BUFFER_BIT);\n\n        self.trigger.trigger();\n    };\n};\n\nOps.Gl.ClearColor.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.FaceCulling = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=self.patch.cgl;\n\n    this.name='FaceCulling';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.enable=this.addInPort(new Port(this,\"enable\",OP_PORT_TYPE_VALUE,{ display:'bool' }));\n    this.enable.val=true;\n\n    this.facing=this.addInPort(new Port(this,\"facing\",OP_PORT_TYPE_VALUE ,{display:'dropdown',values:['back','front','both']} ));\n    this.facing.val='back';\n\n    var whichFace=cgl.gl.BACK;\n    this.render.onTriggered=function()\n    {\n        cgl.gl.cullFace(whichFace);\n\n        if(self.enable.val) cgl.gl.enable(cgl.gl.CULL_FACE);\n        else cgl.gl.disable(cgl.gl.CULL_FACE);\n\n        self.trigger.trigger();\n\n        cgl.gl.disable(cgl.gl.CULL_FACE);\n    };\n\n    this.facing.onValueChanged=function()\n    {\n        whichFace=cgl.gl.BACK;\n        if(self.facing.val=='front')whichFace=cgl.gl.FRONT;\n        if(self.facing.val=='both')whichFace=cgl.gl.FRONT_AND_BACK;\n    };\n};\n\nOps.Gl.FaceCulling.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Depth = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=self.patch.cgl;\n\n    this.name='Depth';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.clear=this.addInPort(new Port(this,\"clear depth\",OP_PORT_TYPE_VALUE,{ display:'bool' }));\n    this.enable=this.addInPort(new Port(this,\"enable depth testing\",OP_PORT_TYPE_VALUE,{ display:'bool' }));\n    this.write=this.addInPort(new Port(this,\"write to depth buffer\",OP_PORT_TYPE_VALUE,{ display:'bool' }));\n\n    this.depthFunc=this.addInPort(new Port(this,\"ratio\",OP_PORT_TYPE_VALUE ,{display:'dropdown',values:['never','always','less','less or equal','greater', 'greater or equal','equal','not equal']} ));\n\n    var theDepthFunc=cgl.gl.LEQUAL;\n\n    this.depthFunc.onValueChanged=function()\n    {\n        if(self.depthFunc.val=='never') theDepthFunc=cgl.gl.NEVER;\n        if(self.depthFunc.val=='always') theDepthFunc=cgl.gl.ALWAYS;\n        if(self.depthFunc.val=='less') theDepthFunc=cgl.gl.LESS;\n        if(self.depthFunc.val=='less or equal') theDepthFunc=cgl.gl.LEQUAL;\n        if(self.depthFunc.val=='greater') theDepthFunc=cgl.gl.GREATER;\n        if(self.depthFunc.val=='greater or equal') theDepthFunc=cgl.gl.EQUAL;\n        if(self.depthFunc.val=='equal') theDepthFunc=cgl.gl.EQUAL;\n        if(self.depthFunc.val=='not equal') theDepthFunc=cgl.gl.NOTEQUAL;\n    };\n\n    this.depthFunc.val='less or equal';\n\n    this.clear.val=false;\n    this.enable.val=true;\n    this.write.val=true;\n\n    this.render.onTriggered=function()\n    {\n        if(true===self.clear.val) cgl.gl.clear(cgl.gl.DEPTH_BUFFER_BIT);\n        if(true!==self.enable.val) cgl.gl.disable(cgl.gl.DEPTH_TEST);\n        if(true!==self.write.val) cgl.gl.depthMask(false);\n\n        cgl.gl.depthFunc(theDepthFunc);\n\n        self.trigger.trigger();\n\n        cgl.gl.enable(cgl.gl.DEPTH_TEST);\n        cgl.gl.depthMask(true);\n        cgl.gl.depthFunc(cgl.gl.LEQUAL);\n    };\n\n};\n\nOps.Gl.Depth.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.ClearDepth = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=self.patch.cgl;\n\n    this.name='ClearDepth';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        cgl.gl.clear(cgl.gl.DEPTH_BUFFER_BIT);\n        self.trigger.trigger();\n    };\n};\n\nOps.Gl.ClearDepth.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Wireframe = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=self.patch.cgl;\n\n    this.name='Wireframe';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n    this.lineWidth=this.addInPort(new Port(this,\"lineWidth\"));\n\n    this.render.onTriggered=function()\n    {\n        cgl.wireframe=true;\n        cgl.gl.lineWidth(self.lineWidth.val);\n        self.trigger.trigger();\n        cgl.wireframe=false;\n\n    };\n\n    this.lineWidth.val=2;\n};\n\nOps.Gl.Wireframe.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Points = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=self.patch.cgl;\n\n    this.name='Points';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n    this.pointSize=this.addInPort(new Port(this,\"pointSize\"));\n\n    this.render.onTriggered=function()\n    {\n        cgl.points=true;\n        // gl.pointSize(self.pointSize.val);\n        self.trigger.trigger();\n        cgl.points=false;\n\n    };\n\n    this.pointSize.val=5;\n};\n\nOps.Gl.Points.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.ColorPick=function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=self.patch.cgl;\n\n    this.name='ColorPick';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.x=this.addInPort(new Port(this,\"x\",OP_PORT_TYPE_VALUE));\n    this.y=this.addInPort(new Port(this,\"y\",OP_PORT_TYPE_VALUE));\n\n    this.r=this.addOutPort(new Port(this,\"r\",OP_PORT_TYPE_VALUE));\n    this.g=this.addOutPort(new Port(this,\"g\",OP_PORT_TYPE_VALUE));\n    this.b=this.addOutPort(new Port(this,\"b\",OP_PORT_TYPE_VALUE));\n    this.a=this.addOutPort(new Port(this,\"a\",OP_PORT_TYPE_VALUE));\n\n    var pixelValues = new Uint8Array(4);\n    // var canvas = document.getElementById(\"glcanvas\");\n\n    function render()\n    {\n        cgl.gl.readPixels(self.x.val, cgl.canvas.height-self.y.val, 1,1,  cgl.gl.RGBA, cgl.gl.UNSIGNED_BYTE ,pixelValues);\n        self.r.val=pixelValues[0]/255;\n        self.g.val=pixelValues[1]/255;\n        self.b.val=pixelValues[2]/255;\n        self.a.val=pixelValues[3]/255;\n    }\n\n    this.render.onTriggered=render;\n};\n\nOps.Gl.ColorPick.prototype = new Op();\nOps.Gl.ReadPixel=Ops.Gl.ColorPick;\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.Mouse = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=self.patch.cgl;\n\n    this.name='mouse';\n    this.mouseX=this.addOutPort(new Port(this,\"x\",OP_PORT_TYPE_VALUE));\n    this.mouseY=this.addOutPort(new Port(this,\"y\",OP_PORT_TYPE_VALUE));\n\n    this.normalize=this.addInPort(new Port(this,\"normalize\",OP_PORT_TYPE_VALUE,{display:'bool'}));\n\n    this.smooth=this.addInPort(new Port(this,\"smooth\",OP_PORT_TYPE_VALUE,{display:'bool'}));\n    this.smoothSpeed=this.addInPort(new Port(this,\"smoothSpeed\",OP_PORT_TYPE_VALUE));\n\n    this.multiply=this.addInPort(new Port(this,\"multiply\",OP_PORT_TYPE_VALUE));\n    this.multiply.set(1.0);\n\n    this.smoothSpeed.set(20);\n    var speed=this.smoothSpeed.get();\n\n    var smoothTimer;\n\n    function setValue(x,y)\n    {\n        if(self.normalize.get())\n        {\n            self.mouseX.set( (x/cgl.canvas.width*2.0-1.0)*self.multiply.get() );\n            self.mouseY.set( (y/cgl.canvas.height*2.0-1.0)*self.multiply.get() );\n        }\n        else\n        {\n            self.mouseX.set( x*self.multiply.get() );\n            self.mouseY.set( y*self.multiply.get() );\n        }\n    }\n\n    this.smooth.onValueChanged=function()\n    {\n        if(self.smooth.get()) smoothTimer = setInterval(updateSmooth, 15);\n            else clearTimeout(smoothTimer);\n    };\n\n    var smoothX,smoothY;\n    var lineX=0,lineY=0;\n\n    var mouseX=cgl.canvas.width/2;\n    var mouseY=cgl.canvas.height/2;\n    lineX=mouseX;\n    lineY=mouseY;\n\n    this.mouseX.set(mouseX);\n    this.mouseY.set(mouseY);\n\n    function updateSmooth()\n    {\n        if(speed<=0)speed=0.01;\n        var distanceX = Math.abs(mouseX - lineX);\n        var speedX = Math.round( distanceX / speed, 0 );\n        lineX = (lineX < mouseX) ? lineX + speedX : lineX - speedX;\n\n        var distanceY = Math.abs(mouseY - lineY);\n        var speedY = Math.round( distanceY / speed, 0 );\n        lineY = (lineY < mouseY) ? lineY + speedY : lineY - speedY;\n\n        setValue(lineX,lineY);\n    }\n\n    cgl.canvas.onmouseenter = function(e)\n    {\n        speed=self.smoothSpeed.get();\n    };\n\n    function mouseLeave(e)\n    {\n        speed=100;\n        if(self.smooth.get())\n        {\n            mouseX=cgl.canvas.width/2;\n            mouseY=cgl.canvas.height/2;\n        }\n    }\n    cgl.canvas.onmouseleave=mouseLeave;\n\n    cgl.canvas.onmousemove = function(e)\n    {\n        if(self.smooth.get())\n        {\n            mouseX=e.offsetX;\n            mouseY=e.offsetY;\n        }\n        else\n        {\n            setValue(e.offsetX,e.offsetY);\n        }\n    };\n\n};\n\nOps.Gl.Mouse.prototype = new Op();\n\n\n\n// --------------------------------------------------------------------------\n    \nOps.Gl.TextureEmpty = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=self.patch.cgl;\n\n    this.name='texture empty';\n    this.width=this.addInPort(new Port(this,\"width\",OP_PORT_TYPE_VALUE));\n    this.height=this.addInPort(new Port(this,\"height\",OP_PORT_TYPE_VALUE));\n\n    this.textureOut=this.addOutPort(new Port(this,\"texture\",OP_PORT_TYPE_TEXTURE));\n    this.tex=new CGL.Texture(cgl);\n    \n    var sizeChanged=function()\n    {\n        self.tex.setSize(self.width.val,self.height.val);\n        self.textureOut.val=self.tex;\n    };\n\n    this.width.onValueChanged=sizeChanged;\n    this.height.onValueChanged=sizeChanged;\n\n    this.width.val=8;\n    this.height.val=8;\n};\n\nOps.Gl.TextureEmpty.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.TextureCycler = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=self.patch.cgl;\n\n    this.name='TextureCycler';\n\n    this.textureOut=this.addOutPort(new Port(this,\"texture\",OP_PORT_TYPE_TEXTURE,{preview:true}));\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    \n    var textures=[];\n    var texturePorts=[];\n\n    function setTextureArray()\n    {\n        textures.length=0;\n        for(var i in self.portsIn)\n        {\n            if(self.portsIn[i].isLinked() && self.portsIn[i].get())\n            {\n                textures.push(self.portsIn[i].get());\n            }\n        }\n    }\n\n    this.getPort=function(name)\n    {\n        var p=self.getPortByName(name);\n\n        if(p)return p;\n\n        if(name.startsWith('texture')) p=addPort(name);\n        return p;\n    };\n\n    function checkPorts()\n    {\n        var allLinked=true;\n        for(var i in self.portsIn)\n        {\n            if(!self.portsIn[i].isLinked())\n            {\n                allLinked=false;\n            }\n        }\n\n        if(allLinked)\n        {\n            addPort();\n        }\n\n        setTextureArray();\n    }\n\n    function addPort(n)\n    {\n        if(!n)n=\"texture\"+texturePorts.length;\n        var newPort=self.addInPort(new Port(self,n,OP_PORT_TYPE_TEXTURE));\n\n        // newPort.onLink=checkPorts;\n        newPort.onLinkChanged=checkPorts;\n        newPort.onValueChanged=checkPorts;\n\n        texturePorts.push(newPort);\n        checkPorts();\n    }\n\n    addPort();\n\n    var index=0;\n\n    this.exe.onTriggered=function()\n    {\n        if(textures.length===0)\n        {\n            self.textureOut.set(null);\n            return;\n        }\n\n        index++;\n        if(index>textures.length-1)index=0;\n        self.textureOut.set(textures[index]);\n    };\n\n    this.textureOut.onPreviewChanged=function()\n    {\n        if(self.textureOut.showPreview) CGL.Texture.previewTexture=self.textureOut.get();\n    };\n\n};\n\nOps.Gl.TextureCycler.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.Texture = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=self.patch.cgl;\n\n    this.name='texture';\n    this.filename=this.addInPort(new Port(this,\"file\",OP_PORT_TYPE_VALUE,{ display:'file',type:'string',filter:'image' } ));\n    this.filter=this.addInPort(new Port(this,\"filter\",OP_PORT_TYPE_VALUE,{display:'dropdown',values:['nearest','linear','mipmap']}));\n\n    this.textureOut=this.addOutPort(new Port(this,\"texture\",OP_PORT_TYPE_TEXTURE,{preview:true}));\n\n    this.width=this.addOutPort(new Port(this,\"width\",OP_PORT_TYPE_VALUE));\n    this.height=this.addOutPort(new Port(this,\"height\",OP_PORT_TYPE_VALUE));\n    \n    this.cgl_filter=CGL.Texture.FILTER_MIPMAP;\n\n    var reload=function()\n    {\n        if(self.filename.val)\n        {\n            // console.log('load texture... '+self.filename.val);\n            self.tex=CGL.Texture.load(cgl,self.patch.getFilePath(self.filename.val),function()\n            {\n                self.textureOut.val=self.tex;\n                self.width.val=self.tex.width;\n                self.height.val=self.tex.height;\n\n                if(!self.tex.isPowerOfTwo()) self.uiAttr({warning:'texture dimensions not power of two! - texture filtering will not work.'});\n                else self.uiAttr({warning:''});\n\n            },{filter:self.cgl_filter});\n            self.textureOut.val=self.tex;\n        }\n\n    };\n\n    this.filename.onValueChanged=reload;\n    this.filter.onValueChanged=function()\n    {\n        if(self.filter.val=='nearest') self.cgl_filter=CGL.Texture.FILTER_NEAREST;\n        if(self.filter.val=='linear') self.cgl_filter=CGL.Texture.FILTER_LINEAR;\n        if(self.filter.val=='mipmap') self.cgl_filter=CGL.Texture.FILTER_MIPMAP;\n\n        reload();\n    };\n    this.filter.val='linear';\n\n    this.textureOut.onPreviewChanged=function()\n    {\n        if(self.textureOut.showPreview) CGL.Texture.previewTexture=self.textureOut.val;\n    };\n\n};\n\nOps.Gl.Texture.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.TextureText = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=self.patch.cgl;\n\n    this.name='TextureText';\n    this.text=this.addInPort(new Port(this,\"text\",OP_PORT_TYPE_VALUE,{type:'string'}));\n    this.fontSize=this.addInPort(new Port(this,\"fontSize\"));\n    this.align=this.addInPort(new Port(this,\"align\",OP_PORT_TYPE_VALUE,{display:'dropdown',values:['left','center','right']}));\n    this.font=this.addInPort(new Port(this,\"font\"));\n    this.textureOut=this.addOutPort(new Port(this,\"texture\",OP_PORT_TYPE_TEXTURE));\n    \n    this.fontSize.val=30;\n    this.font.val='Arial';\n    this.align.val='center';\n\n    var canvas = document.createElement('canvas');\n    canvas.id     = \"hiddenCanvas\";\n    canvas.width  = 512;\n    canvas.height = 512;\n    canvas.style.display   = \"none\";\n    var body = document.getElementsByTagName(\"body\")[0];\n    body.appendChild(canvas);\n\n    var fontImage = document.getElementById('hiddenCanvas');\n    var ctx = fontImage.getContext('2d');\n\n    function refresh()\n    {\n        ctx.clearRect(0,0,canvas.width,canvas.height);\n        ctx.fillStyle = 'white';\n        ctx.font = self.fontSize.val+\"px \"+self.font.val;\n        ctx.textAlign = self.align.val;\n        if(self.align.val=='center') ctx.fillText(self.text.val, ctx.canvas.width / 2, ctx.canvas.height / 2);\n        if(self.align.val=='left') ctx.fillText(self.text.val, 0, ctx.canvas.height / 2);\n        if(self.align.val=='right') ctx.fillText(self.text.val, ctx.canvas.width, ctx.canvas.height / 2);\n        ctx.restore();\n\n        if(self.textureOut.val) self.textureOut.val.initTexture(fontImage);\n            else self.textureOut.val=new CGL.Texture.fromImage(cgl,fontImage);\n    }\n\n    this.align.onValueChanged=refresh;\n    this.text.onValueChanged=refresh;\n    this.fontSize.onValueChanged=refresh;\n    this.font.onValueChanged=refresh;\n    this.text.val='cables';\n};\n\nOps.Gl.TextureText.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Meshes=Ops.Gl.Meshes || {};\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Meshes.Plotter = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=self.patch.cgl;\n\n    this.name='Plotter';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.v=this.addInPort(new Port(this,\"value\"));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        cgl.getShader().bind();\n        cgl.gl.enableVertexAttribArray(cgl.getShader().getAttrVertexPos());\n        cgl.gl.vertexAttribPointer(cgl.getShader().getAttrVertexPos(),self.buffer.itemSize, cgl.gl.FLOAT, false, 0, 0);\n        cgl.gl.bindBuffer(cgl.gl.ARRAY_BUFFER, self.buffer);\n        cgl.gl.drawArrays(cgl.gl.LINE_STRIP, 0, self.buffer.numItems);\n\n        self.trigger.trigger();\n    };\n\n    this.buffer = cgl.gl.createBuffer();\n\n    var num=50;\n    this.vertices = [];\n    for(var i=0;i<num;i++)\n    {\n        this.vertices.push(1/num*i);\n        this.vertices.push(Math.random()-0.5);\n        this.vertices.push(0);\n    }\n\n    function bufferData()\n    {\n        cgl.gl.lineWidth(4);\n\n        cgl.gl.bindBuffer(cgl.gl.ARRAY_BUFFER, self.buffer);\n        cgl.gl.bufferData(cgl.gl.ARRAY_BUFFER, new Float32Array(self.vertices), cgl.gl.STATIC_DRAW);\n        self.buffer.itemSize = 3;\n        self.buffer.numItems = num;\n    }\n    bufferData();\n\n    this.v.onValueChanged=function()\n    {\n        self.vertices.splice(0,3);\n        self.vertices.push(1);\n        self.vertices.push(self.v.val);\n        self.vertices.push(0);\n\n        for(var i=0;i<num*3;i+=3)\n        {\n            self.vertices[i]=1/num*i;\n        }\n\n        bufferData();\n    };\n};\n\nOps.Gl.Meshes.Plotter.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Matrix={};\n\nOps.Gl.Matrix.Translate = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=self.patch.cgl;\n\n    this.name='translate';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.x=this.addInPort(new Port(this,\"x\"));\n    this.y=this.addInPort(new Port(this,\"y\"));\n    this.z=this.addInPort(new Port(this,\"z\"));\n    this.x.val=0.0;\n    this.y.val=0.0;\n    this.z.val=0.0;\n    \n    var vec=vec3.create();\n\n    this.render.onTriggered=function()\n    {\n        vec3.set(vec, self.x.val,self.y.val,self.z.val);\n        cgl.pushMvMatrix();\n        mat4.translate(cgl.mvMatrix,cgl.mvMatrix, vec);\n        self.trigger.trigger();\n        cgl.popMvMatrix();\n    };\n};\n\nOps.Gl.Matrix.Translate.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Matrix.Scale = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=self.patch.cgl;\n\n    this.name='scale';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.scale=this.addInPort(new Port(this,\"scale\"));\n    \n    var vScale=vec3.create();\n    var transMatrix = mat4.create();\n    mat4.identity(transMatrix);\n\n    var doScale=false;\n\n    this.render.onTriggered=function()\n    {\n        cgl.pushMvMatrix();\n        mat4.multiply(cgl.mvMatrix,cgl.mvMatrix,transMatrix);\n        self.trigger.trigger();\n        cgl.popMvMatrix();\n    };\n\n    var updateMatrix=function()\n    {\n        mat4.identity(transMatrix);\n        mat4.scale(transMatrix,transMatrix, vScale);\n    };\n\n    this.scaleChanged=function()\n    {\n        doScale=false;\n        vec3.set(vScale, self.scale.get(),self.scale.get(),self.scale.get());\n        updateMatrix();\n    };\n\n    this.scale.onValueChanged=this.scaleChanged;\n    this.scale.val=1.0;\n    updateMatrix();\n};\n\nOps.Gl.Matrix.Scale.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Matrix.LookatCamera = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=self.patch.cgl;\n\n    this.name='LookatCamera';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.centerX=this.addInPort(new Port(this,\"centerX\"));\n    this.centerY=this.addInPort(new Port(this,\"centerY\"));\n    this.centerZ=this.addInPort(new Port(this,\"centerZ\"));\n\n    this.eyeX=this.addInPort(new Port(this,\"eyeX\"));\n    this.eyeY=this.addInPort(new Port(this,\"eyeY\"));\n    this.eyeZ=this.addInPort(new Port(this,\"eyeZ\"));\n\n    this.vecUpX=this.addInPort(new Port(this,\"upX\"));\n    this.vecUpY=this.addInPort(new Port(this,\"upY\"));\n    this.vecUpZ=this.addInPort(new Port(this,\"upZ\"));\n\n    this.centerX.val=0;\n    this.centerY.val=0;\n    this.centerZ.val=0;\n\n    this.eyeX.val=5;\n    this.eyeY.val=5;\n    this.eyeZ.val=5;\n\n    this.vecUpX.val=0;\n    this.vecUpY.val=1;\n    this.vecUpZ.val=0;\n    \n    var vUp=vec3.create();\n    var vEye=vec3.create();\n    var vCenter=vec3.create();\n    var transMatrix = mat4.create();\n    mat4.identity(transMatrix);\n\n    this.render.onTriggered=function()\n    {\n        cgl.pushMvMatrix();\n\n        vec3.set(vUp, self.vecUpX.val,self.vecUpY.val,self.vecUpZ.val);\n        vec3.set(vEye, self.eyeX.val,self.eyeY.val,self.eyeZ.val);\n        vec3.set(vCenter, self.centerX.val,self.centerY.val,self.centerZ.val);\n\n        mat4.lookAt(cgl.mvMatrix, vEye, vCenter, vUp);\n        self.trigger.trigger();\n        cgl.popMvMatrix();\n    };\n\n};\n\nOps.Gl.Matrix.LookatCamera.prototype = new Op();\n\n// ----------------------------------------------------\n\n\nOps.Gl.Matrix.Shear = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=self.patch.cgl;\n    this.name='Shear';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.shearX=this.addInPort(new Port(this,\"shearX\"));\n    this.shearY=this.addInPort(new Port(this,\"shearY\"));\n\n    var shearMatrix = mat4.create();\n\n    function update()\n    {\n        mat4.identity(shearMatrix);\n        shearMatrix[1]=Math.tan(self.shearX.val);\n        shearMatrix[4]=Math.tan(self.shearY.val);\n    }\n\n    this.shearY.onValueChanged=update;\n    this.shearX.onValueChanged=update;\n\n    // 1, shearY, 0, 0, \n    //   shearX, 1, 0, 0,\n    //   0, 0, 1, 0,\n    //   0, 0, 0, 1 };\n\n    this.render.onTriggered=function()\n    {\n        cgl.pushMvMatrix();\n\n        mat4.multiply(cgl.mvMatrix,cgl.mvMatrix,shearMatrix);\n        self.trigger.trigger();\n\n        cgl.popMvMatrix();\n    };\n\n    self.shearX.val=0.0;\n    self.shearY.val=0.0;\n};\n\nOps.Gl.Matrix.Shear.prototype = new Op();\n\n// -----------------------------------------------------\n\nOps.Gl.Matrix.Transform = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=self.patch.cgl;\n    this.name='transform';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.posX=this.addInPort(new Port(this,\"posX\"));\n    this.posY=this.addInPort(new Port(this,\"posY\"));\n    this.posZ=this.addInPort(new Port(this,\"posZ\"));\n\n    this.scaleX=this.addInPort(new Port(this,\"scaleX\"));\n    this.scaleY=this.addInPort(new Port(this,\"scaleY\"));\n    this.scaleZ=this.addInPort(new Port(this,\"scaleZ\"));\n\n    this.rotX=this.addInPort(new Port(this,\"rotX\"));\n    this.rotY=this.addInPort(new Port(this,\"rotY\"));\n    this.rotZ=this.addInPort(new Port(this,\"rotZ\"));\n   \n    var vPos=vec3.create();\n    var vScale=vec3.create();\n    var transMatrix = mat4.create();\n    mat4.identity(transMatrix);\n\n    var doScale=false;\n    var doTranslate=false;\n\n    var translationChanged=true;\n    var scaleChanged=true;\n    var rotChanged=true;\n\n    this.render.onTriggered=function()\n    {\n        var updateMatrix=false;\n        if(translationChanged)\n        {\n            updateTranslation();\n            updateMatrix=true;\n        }\n        if(scaleChanged)\n        {\n            updateScale();\n            updateMatrix=true;\n        }\n        if(rotChanged)\n        {\n            updateMatrix=true;\n        }\n        if(updateMatrix)doUpdateMatrix();\n\n\n        cgl.pushMvMatrix();\n        mat4.multiply(cgl.mvMatrix,cgl.mvMatrix,transMatrix);\n\n        self.trigger.trigger();\n        cgl.popMvMatrix();\n    };\n\n    var doUpdateMatrix=function()\n    {\n        mat4.identity(transMatrix);\n        if(doTranslate)mat4.translate(transMatrix,transMatrix, vPos);\n\n        if(self.rotX.get()!==0)mat4.rotateX(transMatrix,transMatrix, self.rotX.get()*CGL.DEG2RAD);\n        if(self.rotY.get()!==0)mat4.rotateY(transMatrix,transMatrix, self.rotY.get()*CGL.DEG2RAD);\n        if(self.rotZ.get()!==0)mat4.rotateZ(transMatrix,transMatrix, self.rotZ.get()*CGL.DEG2RAD);\n\n        if(doScale)mat4.scale(transMatrix,transMatrix, vScale);\n        rotChanged=false;\n    };\n\n    function updateTranslation()\n    {\n        doTranslate=false;\n        if(self.posX.get()!==0.0 || self.posY.get()!==0.0 || self.posZ.get()!==0.0)doTranslate=true;\n        vec3.set(vPos, self.posX.get(),self.posY.get(),self.posZ.get());\n        translationChanged=false;\n    }\n\n    function updateScale()\n    {\n        doScale=false;\n        if(self.scaleX.get()!==0.0 || self.scaleY.get()!==0.0 || self.scaleZ.get()!==0.0)doScale=true;\n        vec3.set(vScale, self.scaleX.get(),self.scaleY.get(),self.scaleZ.get());\n        scaleChanged=false;\n    }\n\n    this.translateChanged=function()\n    {\n        translationChanged=true;\n    };\n\n    this.scaleChanged=function()\n    {\n        scaleChanged=true;\n    };\n\n    this.rotChanged=function()\n    {\n        rotChanged=true;\n    };\n\n    this.rotX.onValueChanged=this.rotChanged;\n    this.rotY.onValueChanged=this.rotChanged;\n    this.rotZ.onValueChanged=this.rotChanged;\n\n    this.scaleX.onValueChanged=this.scaleChanged;\n    this.scaleY.onValueChanged=this.scaleChanged;\n    this.scaleZ.onValueChanged=this.scaleChanged;\n\n    this.posX.onValueChanged=this.translateChanged;\n    this.posY.onValueChanged=this.translateChanged;\n    this.posZ.onValueChanged=this.translateChanged;\n\n    this.rotX.set(0.0);\n    this.rotY.set(0.0);\n    this.rotZ.set(0.0);\n\n    this.scaleX.set(1.0);\n    this.scaleY.set(1.0);\n    this.scaleZ.set(1.0);\n\n    this.posX.set(0.0);\n    this.posY.set(0.0);\n    this.posZ.set(0.0);\n\n    doUpdateMatrix();\n};\n\nOps.Gl.Matrix.Transform.prototype = new Op();\n\n// ----------------------------------------------------\n\nOps.Gl.Matrix.MatrixMul = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=self.patch.cgl;\n    this.name='matrix';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.matrix=this.addInPort(new Port(this,\"matrix\"),OP_PORT_TYPE_ARRAY);\n\n    this.render.onTriggered=function()\n    {\n        cgl.pushMvMatrix();\n        mat4.multiply(cgl.mvMatrix,cgl.mvMatrix,self.matrix.val);\n        self.trigger.trigger();\n        cgl.popMvMatrix();\n    };\n\n\n    // this.matrix.onValueChanged=update;\n\n    this.matrix.val=[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n\n};\n\nOps.Gl.Matrix.MatrixMul.prototype = new Op();\n\n\n// -----------------------------------------\n\nOps.RandomCluster = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=self.patch.cgl;\n\n    this.name='random cluster';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.num=this.addInPort(new Port(this,\"num\"));\n    this.size=this.addInPort(new Port(this,\"size\"));\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION)) ;\n    this.idx=this.addOutPort(new Port(this,\"index\")) ;\n    this.rnd=this.addOutPort(new Port(this,\"rnd\")) ;\n    this.randoms=[];\n    this.randomsRot=[];\n    this.randomsFloats=[];\n\n    var transVec=vec3.create();\n\n    this.exe.onTriggered=function()\n    {\n        for(var i=0;i<self.randoms.length;i++)\n        {\n            cgl.pushMvMatrix();\n\n            mat4.translate(cgl.mvMatrix,cgl.mvMatrix, self.randoms[i]);\n\n            mat4.rotateX(cgl.mvMatrix,cgl.mvMatrix, self.randomsRot[i][0]);\n            mat4.rotateY(cgl.mvMatrix,cgl.mvMatrix, self.randomsRot[i][1]);\n            mat4.rotateZ(cgl.mvMatrix,cgl.mvMatrix, self.randomsRot[i][2]);\n\n            self.idx.set(i);\n            self.rnd.set(self.randomsFloats[i]);\n\n            self.trigger.trigger();\n\n            cgl.popMvMatrix();\n        }\n    };\n\n    function reset()\n    {\n        self.randoms=[];\n        self.randomsRot=[];\n        self.randomsFloats=[];\n\n        for(var i=0;i<self.num.get();i++)\n        {\n            self.randomsFloats.push(Math.random());\n            self.randoms.push(vec3.fromValues(\n                (Math.random()-0.5)*self.size.get(),\n                (Math.random()-0.5)*self.size.get(),\n                (Math.random()-0.5)*self.size.get()\n                ));\n            self.randomsRot.push(vec3.fromValues(\n                Math.random()*360*CGL.DEG2RAD,\n                Math.random()*360*CGL.DEG2RAD,\n                Math.random()*360*CGL.DEG2RAD\n                ));\n        }\n    }\n\n    this.size.set(40);\n\n    this.num.onValueChanged=reset;\n    this.size.onValueChanged=reset;\n\n    this.num.set(100);\n};\n\nOps.RandomCluster.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Render2Texture = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=self.patch.cgl;\n\n    var depthTextureExt = cgl.gl.getExtension( \"WEBKIT_WEBGL_depth_texture\" ) ||\n                    cgl.gl.getExtension( \"MOZ_WEBGL_depth_texture\" ) ||\n                    cgl.gl.getExtension('WEBGL_depth_texture');\n    // var depthTextureExt = cgl.gl.getExtension(\"WEBKIT_WEBGL_depth_texture\"); // Or browser-appropriate prefix\n\n    this.name='render to texture';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var frameBuf;\n    var texture=new CGL.Texture(cgl);\n    var textureDepth=new CGL.Texture(cgl,{isDepthTexture:true});\n\n    this.useVPSize=this.addInPort(new Port(this,\"use viewport size\",OP_PORT_TYPE_VALUE,{ display:'bool' }));\n\n    this.width=this.addInPort(new Port(this,\"texture width\"));\n    this.height=this.addInPort(new Port(this,\"texture height\"));\n    // this.clear=this.addInPort(new Port(this,\"clear\",OP_PORT_TYPE_VALUE,{ display:'bool' }));\n    // this.clear.val=true;\n\n    this.tex=this.addOutPort(new Port(this,\"texture\",OP_PORT_TYPE_TEXTURE,{preview:true}));\n    this.texDepth=this.addOutPort(new Port(this,\"textureDepth\",OP_PORT_TYPE_TEXTURE));\n    var renderbuffer=null;\n\n    frameBuf = cgl.gl.createFramebuffer();\n\n    self.tex.val=texture;\n    self.texDepth.val=textureDepth;\n\n    function resize()\n    {\n        cgl.gl.bindFramebuffer(cgl.gl.FRAMEBUFFER, frameBuf);\n\n        self.width.val=cgl.getViewPort()[2];\n        self.height.val=cgl.getViewPort()[3];\n\n        if(renderbuffer)cgl.gl.deleteRenderbuffer(renderbuffer);\n\n        renderbuffer = cgl.gl.createRenderbuffer();\n        cgl.gl.bindRenderbuffer(cgl.gl.RENDERBUFFER, renderbuffer);\n        cgl.gl.renderbufferStorage(cgl.gl.RENDERBUFFER, cgl.gl.DEPTH_COMPONENT16, self.width.val,self.height.val);\n\n        cgl.gl.framebufferTexture2D(cgl.gl.FRAMEBUFFER, cgl.gl.COLOR_ATTACHMENT0, cgl.gl.TEXTURE_2D, texture.tex, 0);\n        cgl.gl.framebufferRenderbuffer(cgl.gl.FRAMEBUFFER, cgl.gl.DEPTH_ATTACHMENT, cgl.gl.RENDERBUFFER, renderbuffer);\n\n        cgl.gl.framebufferTexture2D(\n            cgl.gl.FRAMEBUFFER,\n            cgl.gl.DEPTH_ATTACHMENT,\n            cgl.gl.TEXTURE_2D,\n            textureDepth.tex,\n            0 );\n\n        cgl.gl.bindTexture(cgl.gl.TEXTURE_2D, null);\n        cgl.gl.bindRenderbuffer(cgl.gl.RENDERBUFFER, null);\n        cgl.gl.bindFramebuffer(cgl.gl.FRAMEBUFFER, null);\n\n        // console.log('resize r2t',self.width.val,self.height.val);\n\n        texture.setSize(self.width.val,self.height.val);\n        textureDepth.setSize(self.width.val,self.height.val);\n    }\n\n\n    this.useVPSize.onValueChanged=function()\n    {\n        if(self.useVPSize.val)\n        {\n            self.width.onValueChanged=null;\n            self.height.onValueChanged=null;\n        }\n        else\n        {\n            self.width.onValueChanged=resize;\n            self.height.onValueChanged=resize;\n        }\n    };\n\n    this.width.val=1920;\n    this.height.val=1080;\n    this.useVPSize.val=true;\n\n    var oldViewport;\n\n    this.onResize=resize;\n\n\n    function render()\n    {\n        cgl.pushMvMatrix();\n\n        cgl.gl.disable(cgl.gl.SCISSOR_TEST);\n\n        if(self.useVPSize.val)\n        {\n            if(texture.width!=cgl.getViewPort()[2] || texture.height!=cgl.getViewPort()[3] )\n            {\n                console.log('not the same ? ',texture.width, cgl.getViewPort()[2] , texture.height , cgl.getViewPort()[3]);\n                        \n                for(var i=0;i<self.patch.ops.length;i++)\n                {\n                    if(self.patch.ops[i].onResize)self.patch.ops[i].onResize();\n                }\n            }\n        }\n\n        cgl.gl.bindFramebuffer(cgl.gl.FRAMEBUFFER, frameBuf);\n\n        cgl.pushPMatrix();\n        // cgl.gl.viewport(-self.width/2, 0, self.width.val/2,self.height.val);\n\n        cgl.gl.viewport(0, 0, self.width.val,self.height.val);\n        // mat4.perspective(cgl.pMatrix,45, 1, 0.01, 1100.0);\n\n        // if(self.clear.val)\n        // {\n        //     cgl.gl.clearColor(0,0,0,1);\n        //     cgl.gl.clear(cgl.gl.COLOR_BUFFER_BIT | cgl.gl.DEPTH_BUFFER_BIT);\n        // }\n        // else\n        // {\n            cgl.gl.clearColor(0,0,0,0);\n            cgl.gl.clear(cgl.gl.COLOR_BUFFER_BIT | cgl.gl.DEPTH_BUFFER_BIT);\n        // }\n\n        self.trigger.trigger();\n\n        cgl.popPMatrix();\n        \n        cgl.gl.bindFramebuffer(cgl.gl.FRAMEBUFFER, null);\n        \n        cgl.popMvMatrix();\n        cgl.resetViewPort();\n\n        cgl.gl.enable(cgl.gl.SCISSOR_TEST);\n\n    }\n\n    function preview()\n    {\n        render();\n        self.tex.val.preview();\n    }\n\n    this.tex.onPreviewChanged=function()\n    {\n        if(self.tex.showPreview) self.render.onTriggered=preview;\n        else self.render.onTriggered=render;\n    };\n\n\n    self.render.onTriggered=render;\n};\n\nOps.Gl.Render2Texture.prototype = new Op();\n\n\n\n\n\n\n\n\n\n\n\n// ----------------------------------------------------\n\nOps.Gl.Spray = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=self.patch.cgl;\n\n    this.name='spray';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    \n\n    this.timer=this.addInPort(new Port(this,\"time\"));\n\n    this.num=this.addInPort(new Port(this,\"num\"));\n    this.size=this.addInPort(new Port(this,\"size\"));\n\n    \n    this.lifetime=this.addInPort(new Port(this,\"lifetime\"));\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION)) ;\n    this.idx=this.addOutPort(new Port(this,\"index\")) ;\n    this.lifeTimePercent=this.addOutPort(new Port(this,\"lifeTimePercent\")) ;\n    var particles=[];\n\n    var transVec=vec3.create();\n\n    function Particle()\n    {\n        this.pos=null;\n\n        this.startPos=null;\n        this.startTime=0;\n        this.lifeTime=0;\n        this.lifeTimePercent=0;\n        this.endTime=0;\n\n        this.pos=[0,0,0];\n        this.moveVec=[0,0,0];\n        this.idDead=false;\n\n        this.update=function(time)\n        {\n            var timeRunning=time-this.startTime;\n            if(time>this.endTime)this.isDead=true;\n            this.lifeTimePercent=timeRunning/this.lifeTime;\n        \n            this.pos=vec3.fromValues(\n                this.startPos[0]+timeRunning*this.moveVec[0],\n                this.startPos[1]+timeRunning*this.moveVec[1],\n                this.startPos[2]+timeRunning*this.moveVec[2]\n                );\n        };\n\n        this.reAnimate=function(time)\n        {\n            this.isDead=false;\n            this.startTime=time;\n            this.lifeTime=Math.random()*self.lifetime.val;\n            this.endTime=time+this.lifeTime;\n            this.startPos=vec3.fromValues(\n                Math.random()*0.5,\n                Math.random()*0.5,\n                Math.random()*0.5);\n\n            this.moveVec=[\n                Math.random()*0.2,\n                Math.random()*0.2,\n                Math.random()*0.2\n                ];\n\n                    \n\n        };\n        this.reAnimate(0);\n    }\n\n\n\n\n    this.exe.onTriggered=function()\n    {\n        // var time=self.patch.timer.getTime();\n        var time=self.timer.val;\n        for(var i=0;i<particles.length;i++)\n        {\n            if(particles[i].isDead)particles[i].reAnimate(time);\n            \n            particles[i].update(time);\n\n            cgl.pushMvMatrix();\n\n            mat4.translate(cgl.mvMatrix,cgl.mvMatrix, particles[i].pos);\n\n\n            self.idx.val=i;\n            self.lifeTimePercent.val= particles[i].lifeTimePercent;\n            // self.rnd.val=self.randomsFloats[i];\n\n            self.trigger.trigger();\n\n            cgl.popMvMatrix();\n        }\n    };\n\n    function reset()\n    {\n        particles.length=0;\n\n        for(var i=0;i<self.num.val;i++)\n        {\n            var p=new Particle();\n            p.reAnimate(0);\n            particles.push(p);\n        }\n    }\n\n    this.num.onValueChanged=reset;\n    this.size.onValueChanged=reset;\n    this.lifetime.onValueChanged=reset;\n\n    this.num.val=100;\n    reset();\n};\n\nOps.Gl.Spray.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Identity = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=self.patch.cgl;\n\n    this.name='Identity';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.exe.onTriggered=function()\n    {\n        cgl.pushMvMatrix();\n        mat4.identity(cgl.mvMatrix);\n\n        // if(cgl.frameStore.perspective) mat4.perspective(cgl.pMatrix,cgl.frameStore.perspective.fovY, cgl.getViewPort()[2]/cgl.getViewPort()[3], cgl.frameStore.perspective.zNear, cgl.frameStore.perspective.zFar);\n        //     else mat4.perspective(cgl.pMatrix,45, cgl.canvasWidth/cgl.canvasHeight, 0.01, 1100.0);\n\n        self.trigger.trigger();\n\n        cgl.popMvMatrix();\n    };\n\n};\n\nOps.Gl.Identity.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.CanvasSize = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=self.patch.cgl;\n\n    this.name='CanvasSize';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.width=this.addOutPort(new Port(this,\"width\",OP_PORT_TYPE_VALUE));\n    this.height=this.addOutPort(new Port(this,\"height\",OP_PORT_TYPE_VALUE));\n\n    var w=0,h=0;\n\n    this.exe.onTriggered=function()\n    {\n        if(cgl.canvasHeight!=h) h=self.height.val=cgl.canvasHeight;\n        if(cgl.canvasWidth!=w) w=self.width.val=cgl.canvasWidth;\n        self.trigger.trigger();\n    };\n};\n\nOps.Gl.CanvasSize.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.ViewPortSize = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=self.patch.cgl;\n\n    this.name='ViewPortSize';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.x=this.addOutPort(new Port(this,\"x\",OP_PORT_TYPE_VALUE));\n    this.y=this.addOutPort(new Port(this,\"y\",OP_PORT_TYPE_VALUE));\n\n    this.width=this.addOutPort(new Port(this,\"width\",OP_PORT_TYPE_VALUE));\n    this.height=this.addOutPort(new Port(this,\"height\",OP_PORT_TYPE_VALUE));\n\n    var w=0,h=0,x=0,y=0;\n\n    this.exe.onTriggered=function()\n    {\n        if(cgl.getViewPort()[0]!=x) w=self.x.val=cgl.getViewPort()[0];\n        if(cgl.getViewPort()[1]!=y) h=self.y.val=cgl.getViewPort()[1];\n        if(cgl.getViewPort()[2]!=h) h=self.width.val=cgl.getViewPort()[2];\n        if(cgl.getViewPort()[3]!=w) w=self.height.val=cgl.getViewPort()[3];\n        self.trigger.trigger();\n    };\n};\n\nOps.Gl.ViewPortSize.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Performance = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=self.patch.cgl;\n\n    this.name='Performance';\n    this.textureOut=this.addOutPort(new Port(this,\"texture\",OP_PORT_TYPE_TEXTURE));\n\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION)) ;\n\n    var canvas = document.createElement('canvas');\n    canvas.id     = \"performance_\"+self.patch.config.glCanvasId;\n    canvas.width  = 512;\n    canvas.height = 128;\n    canvas.style.display   = \"block\";\n    var body = document.getElementsByTagName(\"body\")[0];\n    body.appendChild(canvas);\n\n    var fontImage = document.getElementById(canvas.id);\n    var ctx = fontImage.getContext('2d');\n\n    var text='';\n\n    ctx.font = \"13px arial\";\n    ctx.fillStyle = 'white';\n\n    var frames=0;\n    var fps=0;\n    var fpsStartTime=0;\n\n    var lastTime=0;\n    var childsTime=0;\n\n    var queue=[];\n    var queueChilds=[];\n    for(var i=0;i<canvas.width;i++)\n    {\n        queue[i]=-1;\n        queueChilds[i]=-1;\n    }\n\n    var avgMs=0;\n    var avgMsChilds=0;\n    var text2='';\n    var text3='';\n\n    var ll=0;\n    var selfTime=0;\n    var hasErrors=false;\n    var countFrames=0;\n\n    function refresh()\n    {\n        ll=performance.now();\n\n        var ms=performance.now()-lastTime;\n        queue.push(ms);\n        queue.shift();\n\n        queueChilds.push(childsTime);\n        queueChilds.shift();\n\n        frames++;\n        \n        if(fpsStartTime===0)fpsStartTime=Date.now();\n        if(Date.now()-fpsStartTime>=1000)\n        {\n            fps=frames;\n            frames=0;\n\n            text=self.patch.config.glCanvasId+' fps: '+fps;\n            fpsStartTime=Date.now();\n\n            var count=0;\n            for(var i=queue.length;i>queue.length-queue.length/3;i--)\n            {\n                if(queue[i]>-1)\n                {\n                    avgMs+=queue[i];\n                    count++;\n                }\n\n                if(queueChilds[i]>-1)\n                {\n                    avgMsChilds+=queueChilds[i];\n                }\n            }\n            avgMs/=count;\n            avgMsChilds/=count;\n\n            text2='frame: '+Math.round(avgMs*100)/100+' ms';\n            \n            text3='child ops: '+Math.round(avgMsChilds*100)/100+' ms ('+Math.round(avgMsChilds/avgMs*100)+'%) uniforms/s: '+CGL.profileUniformCount;\n            if(selfTime>=1.25) text3+=' (self: '+Math.round((selfTime)*100)/100+' ms) ';\n            CGL.profileUniformCount=0;\n\n        }\n        ctx.clearRect(0,0,canvas.width,canvas.height);\n\n        ctx.fillStyle=\"#222222\";\n        ctx.fillRect(0,0,canvas.width,canvas.height);\n\n\n        ctx.fillStyle=\"#aaaaaa\";\n        for(var k=0;k<512;k++)\n        {\n            ctx.fillRect(k,canvas.height-queue[k]*2.5,1,queue[k]*2.5);\n        }\n\n        ctx.fillStyle=\"#ffffff\";\n        for(k=0;k<512;k++)\n        {\n            ctx.fillRect(k,canvas.height-queueChilds[k]*2.5,1,queueChilds[k]*2.5);\n        }\n        \n        ctx.fillStyle=\"#bbbbbb\";\n        ctx.fillText(text, 10, 20);\n        ctx.fillText(text2, 10, 35);\n        ctx.fillText(text3, 10, 50);\n        if(hasErrors)\n        {\n            ctx.fillStyle=\"#ff8844\";\n            ctx.fillText('has errors!', 10, 65);\n        }\n\n        ctx.restore();\n\n        if(self.textureOut.get()) self.textureOut.get().initTexture(cgl,fontImage);\n            else self.textureOut.set( new CGL.Texture.fromImage(cgl,fontImage) );\n\n        lastTime=performance.now();\n        selfTime=performance.now()-ll;\n        \n        var startTimeChilds=performance.now();\n\n        self.trigger.trigger();\n\n        childsTime=performance.now()-startTimeChilds;\n\n        countFrames++;\n        if(countFrames==30)\n        {\n            hasErrors=false;\n            var error = cgl.gl.getError();\n            if (error != cgl.gl.NO_ERROR)\n            {\n                hasErrors=true;\n            }\n            countFrames=0;\n        }\n        \n    }\n\n    this.onDelete=function()\n    {\n        document.getElementById(canvas.id).remove();\n    };\n\n    self.exe.onTriggered=refresh;\n    if(CABLES.UI)gui.setLayout();\n};\n\nOps.Gl.Performance.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n","\nOps.Gl.Shader= Ops.Gl.Shader || {};\n\n// --------------------------------------------------------------------------\nOps.Gl.Shader.Shader = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=self.patch.cgl;\n\n    this.name='Shader';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.shader=this.addInPort(new Port(this,\"shader\",OP_PORT_TYPE_OBJECT));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.doRender=function()\n    {\n        if(self.shader.val)\n        {\n            cgl.setShader(self.shader.val);\n            self.shader.val.bindTextures();\n            self.trigger.trigger();\n            cgl.setPreviousShader();\n        }\n    };\n\n    this.render.onTriggered=this.doRender;\n    this.doRender();\n};\n\nOps.Gl.Shader.Shader.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Shader.ShowNormalsMaterial = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=self.patch.cgl;\n\n    this.name='ShowNormalsMaterial';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.doRender=function()\n    {\n        cgl.setShader(shader);\n        self.trigger.trigger();\n        cgl.setPreviousShader();\n    };\n\n    var srcFrag=''\n        .endl()+'precision highp float;'\n        .endl()+'varying vec3 norm;'\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   vec4 col=vec4(norm.x,norm.y,norm.z,1.0);'\n        .endl()+'   gl_FragColor = col;'\n        .endl()+'}';\n\n\n    var shader=new CGL.Shader(cgl);\n    this.onLoaded=shader.compile;\n\n\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n\n    this.render.onTriggered=this.doRender;\n    this.doRender();\n};\n\nOps.Gl.Shader.ShowNormalsMaterial.prototype = new Op();\n\n\n\nOps.Gl.Shader.MatCapMaterial = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=self.patch.cgl;\n\n    this.name='MatCapMaterial';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n    this.shaderOut=this.addOutPort(new Port(this,\"shader\",OP_PORT_TYPE_OBJECT));\n    this.shaderOut.ignoreValueSerialize=true;\n\n    this.texture=this.addInPort(new Port(this,\"texture\",OP_PORT_TYPE_TEXTURE,{preview:true}));\n    this.textureUniform=null;\n\n    this.textureDiffuse=this.addInPort(new Port(this,\"diffuse\",OP_PORT_TYPE_TEXTURE,{preview:true}));\n    this.textureDiffuseUniform=null;\n\n    this.textureNormal=this.addInPort(new Port(this,\"normal\",OP_PORT_TYPE_TEXTURE,{preview:true}));\n    this.textureNormalUniform=null;\n\n    this.normalScale=this.addInPort(new Port(this,\"normalScale\",OP_PORT_TYPE_VALUE,{display:'range'}));\n    this.normalScale.val=0.4;\n    this.normalScaleUniform=null;\n\n\n\n    this.diffuseRepeatX=this.addInPort(new Port(this,\"diffuseRepeatX\",OP_PORT_TYPE_VALUE));\n    this.diffuseRepeatY=this.addInPort(new Port(this,\"diffuseRepeatY\",OP_PORT_TYPE_VALUE));\n    this.diffuseRepeatX.val=1.0;\n    this.diffuseRepeatY.val=1.0;\n\n    this.diffuseRepeatX.onValueChanged=function()\n    {\n        self.diffuseRepeatXUniform.setValue(self.diffuseRepeatX.val);\n    };\n\n    this.diffuseRepeatY.onValueChanged=function()\n    {\n        self.diffuseRepeatYUniform.setValue(self.diffuseRepeatY.val);\n    };\n\n\n    this.projectCoords=this.addInPort(new Port(this,\"projectCoords\",OP_PORT_TYPE_VALUE,{display:'dropdown',values:['no','xy','yz']}));\n    this.projectCoords.val='no';\n    this.projectCoords.onValueChanged=function()\n    {\n        shader.removeDefine('DO_PROJECT_COORDS_XY');\n        shader.removeDefine('DO_PROJECT_COORDS_YZ');\n\n        if(self.projectCoords.val=='xy') shader.define('DO_PROJECT_COORDS_XY');\n        if(self.projectCoords.val=='yz') shader.define('DO_PROJECT_COORDS_YZ');\n    };\n\n    this.normalRepeatX=this.addInPort(new Port(this,\"normalRepeatX\",OP_PORT_TYPE_VALUE));\n    this.normalRepeatY=this.addInPort(new Port(this,\"normalRepeatY\",OP_PORT_TYPE_VALUE));\n    this.normalRepeatX.val=1.0;\n    this.normalRepeatY.val=1.0;\n\n    this.normalRepeatX.onValueChanged=function()\n    {\n        self.normalRepeatXUniform.setValue(self.normalRepeatX.val);\n    };\n\n    this.normalRepeatY.onValueChanged=function()\n    {\n        self.normalRepeatYUniform.setValue(self.normalRepeatY.val);\n    };\n\n    this.normalScale.onValueChanged=function()\n    {\n        self.normalScaleUniform.setValue(self.normalScale.val*2.0);\n    };\n\n    this.texture.onPreviewChanged=function()\n    {\n        if(self.texture.showPreview) self.render.onTriggered=self.texture.val.preview;\n            else self.render.onTriggered=self.doRender;\n    };\n\n    this.textureDiffuse.onPreviewChanged=function()\n    {\n        if(self.textureDiffuse.showPreview) self.render.onTriggered=self.textureDiffuse.val.preview;\n            else self.render.onTriggered=self.doRender;\n    };\n\n    this.textureNormal.onPreviewChanged=function()\n    {\n        if(self.textureNormal.showPreview) self.render.onTriggered=self.textureNormal.val.preview;\n            else self.render.onTriggered=self.doRender;\n    };\n\n    this.texture.onValueChanged=function()\n    {\n        if(self.texture.get())\n        {\n            if(self.textureUniform!==null)return;\n            shader.removeUniform('tex');\n            self.textureUniform=new CGL.Uniform(shader,'t','tex',0);\n        }\n        else\n        {\n            console.log('TEXTURE REMOVED');\n            shader.removeUniform('tex');\n            self.textureUniform=null;\n        }\n    };\n\n    this.textureDiffuse.onValueChanged=function()\n    {\n        if(self.textureDiffuse.val)\n        {\n            if(self.textureDiffuseUniform!==null)return;\n            shader.define('HAS_DIFFUSE_TEXTURE');\n            shader.removeUniform('texDiffuse');\n            self.textureDiffuseUniform=new CGL.Uniform(shader,'t','texDiffuse',1);\n        }\n        else\n        {\n            shader.removeDefine('HAS_DIFFUSE_TEXTURE');\n            shader.removeUniform('texDiffuse');\n            self.textureDiffuseUniform=null;\n        }\n    };\n\n    this.textureNormal.onValueChanged=function()\n    {\n        if(self.textureNormal.val)\n        {\n            if(self.textureNormalUniform!==null)return;\n            shader.define('HAS_NORMAL_TEXTURE');\n            shader.removeUniform('texNormal');\n            self.textureNormalUniform=new CGL.Uniform(shader,'t','texNormal',2);\n        }\n        else\n        {\n            shader.removeDefine('HAS_NORMAL_TEXTURE');\n            shader.removeUniform('texNormal');\n            self.textureNormalUniform=null;\n        }\n    };\n\n    this.bindTextures=function()\n    {\n        if(self.texture.get())\n        {\n            cgl.gl.activeTexture(cgl.gl.TEXTURE0);\n            cgl.gl.bindTexture(cgl.gl.TEXTURE_2D, self.texture.val.tex);\n        }\n\n        if(self.textureDiffuse.val)\n        {\n            cgl.gl.activeTexture(cgl.gl.TEXTURE1);\n            cgl.gl.bindTexture(cgl.gl.TEXTURE_2D, self.textureDiffuse.val.tex);\n        }\n\n        if(self.textureNormal.val)\n        {\n            cgl.gl.activeTexture(cgl.gl.TEXTURE2);\n            cgl.gl.bindTexture(cgl.gl.TEXTURE_2D, self.textureNormal.val.tex);\n        }\n    };\n\n    this.doRender=function()\n    {\n        cgl.setShader(shader);\n        self.bindTextures();\n\n        self.trigger.trigger();\n        cgl.setPreviousShader();\n    };\n\n    var srcVert=''\n        .endl()+'{{MODULES_HEAD}}'\n        .endl()+'precision mediump float;'\n        .endl()+'attribute vec3 vPosition;'\n        .endl()+'attribute vec2 attrTexCoord;'\n        .endl()+'attribute vec3 attrVertNormal;'\n\n\n        .endl()+'varying vec2 texCoord;'\n        .endl()+'varying vec3 norm;'\n        .endl()+'uniform mat4 projMatrix;'\n        .endl()+'uniform mat4 mvMatrix;'\n        .endl()+'uniform mat4 normalMatrix;'\n        .endl()+'varying vec2 vNorm;'\n\n\n        // .endl()+'varying vec2 testTexCoords;'\n\n        \n\n        .endl()+'varying vec3 e;'\n\n\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'    texCoord=attrTexCoord;'\n        .endl()+'    norm=attrVertNormal;'\n\n        .endl()+'   vec4 pos = vec4( vPosition, 1. );'\n        \n\n\n        .endl()+'    {{MODULE_VERTEX_POSITION}}'\n\n\n        .endl()+'    e = normalize( vec3( mvMatrix * pos ) );'\n        .endl()+'    vec3 n = normalize( mat3(normalMatrix) * norm );'\n\n        .endl()+'    vec3 r = reflect( e, n );'\n        .endl()+'    float m = 2. * sqrt( '\n        .endl()+'        pow(r.x, 2.0)+'\n        .endl()+'        pow(r.y, 2.0)+'\n        .endl()+'        pow(r.z + 1.0, 2.0)'\n        .endl()+'    );'\n        .endl()+'    vNorm = r.xy / m + 0.5;'\n\n        .endl()+'   #ifdef DO_PROJECT_COORDS_XY'\n        .endl()+'       texCoord=(projMatrix * mvMatrix*pos).xy*0.1;'\n        .endl()+'   #endif'\n        .endl()+'   #ifdef DO_PROJECT_COORDS_YZ'\n        .endl()+'       texCoord=(projMatrix * mvMatrix*pos).yz*0.1;'\n        .endl()+'   #endif'\n\n        .endl()+'    gl_Position = projMatrix * mvMatrix * pos;'\n\n        .endl()+'}';\n\n\n    var srcFrag=''\n        .endl()+'{{MODULES_HEAD}}'\n        .endl()+'precision mediump float;'\n        .endl()+'varying vec3 norm;'\n        .endl()+'varying vec2 texCoord;'\n        .endl()+'uniform sampler2D tex;'\n        .endl()+'varying vec2 vNorm;'\n\n        .endl()+'uniform float diffuseRepeatX;'\n        .endl()+'uniform float diffuseRepeatY;'\n\n\n        .endl()+'#ifdef HAS_DIFFUSE_TEXTURE'\n        .endl()+'   uniform sampler2D texDiffuse;'\n        .endl()+'#endif'\n\n        .endl()+'#ifdef HAS_NORMAL_TEXTURE'\n        .endl()+'   uniform sampler2D texNormal;'\n        .endl()+'   uniform mat4 normalMatrix;'\n        .endl()+'   uniform float normalScale;'\n        .endl()+'   uniform float normalRepeatX;'\n        .endl()+'   uniform float normalRepeatY;'\n        .endl()+'   varying vec3 e;'\n        .endl()+'   vec2 vNormt;'\n        .endl()+'#endif'\n        \n        .endl()+''\n\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n\n        .endl()+'   vec2 vn=vNorm;'\n\n        .endl()+'   #ifdef HAS_NORMAL_TEXTURE'\n        .endl()+'       vec3 tnorm=texture2D( texNormal, vec2(texCoord.x*normalRepeatX,texCoord.y*normalRepeatY) ).xyz * 2.0 - 1.0;'\n\n        // .endl()+'       tnorm.y *= -1.0;'\n\n        .endl()+'       tnorm = normalize(tnorm*normalScale);'\n        \n\n        .endl()+'vec3 tangent;'\n        .endl()+'vec3 binormal;'\n        .endl()+'vec3 c1 = cross(norm, vec3(0.0, 0.0, 1.0));'\n        .endl()+'vec3 c2 = cross(norm, vec3(0.0, 1.0, 0.0));'\n        .endl()+'if(length(c1)>length(c2)) tangent = c1;'\n        .endl()+'    else tangent = c2;'\n        .endl()+'tangent = normalize(tangent);'\n        .endl()+'binormal = cross(norm, tangent);'\n        .endl()+'binormal = normalize(binormal);'\n        .endl()+'tnorm=normalize(tangent*tnorm.x + binormal*tnorm.y + norm*tnorm.z);'\n    \n        \n\n        .endl()+'       vec3 n = normalize( mat3(normalMatrix) * (norm+tnorm*normalScale) );'\n\n        .endl()+'       vec3 r = reflect( e, n );'\n        .endl()+'       float m = 2. * sqrt( '\n        .endl()+'           pow(r.x, 2.0)+'\n        .endl()+'           pow(r.y, 2.0)+'\n        .endl()+'           pow(r.z + 1.0, 2.0)'\n        .endl()+'       );'\n        .endl()+'       vn = r.xy / m + 0.5;'\n\n\n.endl()+'vn.t=clamp(vn.t, 0.0, 1.0);'\n.endl()+'vn.s=clamp(vn.s, 0.0, 1.0);'\n\n\n        .endl()+'    #endif'\n\n        \n        .endl()+'    vec4 col = texture2D( tex, vn );'\n\n\n        .endl()+'    #ifdef HAS_DIFFUSE_TEXTURE'\n        // .endl()+'       col = mix(col,texture2D( texDiffuse, vec2(texCoord.x*diffuseRepeatX,texCoord.y*diffuseRepeatY) ),0.5);'\n        .endl()+'       col = col*texture2D( texDiffuse, vec2(texCoord.x*diffuseRepeatX,texCoord.y*diffuseRepeatY));'\n        .endl()+'    #endif'\n\n        .endl()+'    {{MODULE_COLOR}}'\n\n        .endl()+'    gl_FragColor = col;'\n        .endl()+''\n        .endl()+'}';\n\n    var shader=new CGL.Shader(cgl);\n    \n    shader.setModules(['MODULE_VERTEX_POSITION','MODULE_COLOR']);\n\n    shader.bindTextures=this.bindTextures;\n    this.shaderOut.val=shader;\n    this.onLoaded=shader.compile;\n    shader.setSource(srcVert,srcFrag);\n    this.normalScaleUniform=new CGL.Uniform(shader,'f','normalScale',self.normalScale.val);\n    this.normalRepeatXUniform=new CGL.Uniform(shader,'f','normalRepeatX',self.normalRepeatX.val);\n    this.normalRepeatYUniform=new CGL.Uniform(shader,'f','normalRepeatY',self.normalRepeatY.val);\n\n    this.diffuseRepeatXUniform=new CGL.Uniform(shader,'f','diffuseRepeatX',self.diffuseRepeatX.val);\n    this.diffuseRepeatYUniform=new CGL.Uniform(shader,'f','diffuseRepeatY',self.diffuseRepeatY.val);\n\n    this.render.onTriggered=this.doRender;\n    this.doRender();\n};\n\nOps.Gl.Shader.MatCapMaterial.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\n\nOps.Gl.Shader.GradientMaterial = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=self.patch.cgl;\n\n    this.name='GradientMaterial';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.screenSpace=this.addInPort(new Port(this,\"screen space\",OP_PORT_TYPE_VALUE,{ display:'bool' }));\n    this.screenSpace.val=false;\n\n    this.r=this.addInPort(new Port(this,\"r1\",OP_PORT_TYPE_VALUE,{ display:'range', colorPick:'true' }));\n    this.g=this.addInPort(new Port(this,\"g1\",OP_PORT_TYPE_VALUE,{ display:'range' }));\n    this.b=this.addInPort(new Port(this,\"b1\",OP_PORT_TYPE_VALUE,{ display:'range' }));\n    this.a=this.addInPort(new Port(this,\"a1\",OP_PORT_TYPE_VALUE,{ display:'range' }));\n\n    this.r2=this.addInPort(new Port(this,\"r2\",OP_PORT_TYPE_VALUE,{ display:'range', colorPick:'true' }));\n    this.g2=this.addInPort(new Port(this,\"g2\",OP_PORT_TYPE_VALUE,{ display:'range' }));\n    this.b2=this.addInPort(new Port(this,\"b2\",OP_PORT_TYPE_VALUE,{ display:'range' }));\n    this.a2=this.addInPort(new Port(this,\"a2\",OP_PORT_TYPE_VALUE,{ display:'range' }));\n\n    this.r3=this.addInPort(new Port(this,\"r3\",OP_PORT_TYPE_VALUE,{ display:'range', colorPick:'true' }));\n    this.g3=this.addInPort(new Port(this,\"g3\",OP_PORT_TYPE_VALUE,{ display:'range' }));\n    this.b3=this.addInPort(new Port(this,\"b3\",OP_PORT_TYPE_VALUE,{ display:'range' }));\n    this.a3=this.addInPort(new Port(this,\"a3\",OP_PORT_TYPE_VALUE,{ display:'range' }));\n\n    this.r.val=0.2;\n    this.g.val=0.2;\n    this.b.val=0.2;\n    this.a.val=1.0;\n\n    this.r2.val=0.73;\n    this.g2.val=0.73;\n    this.b2.val=0.73;\n    this.a2.val=1.0;\n\n    this.r3.val=1.0;\n    this.g3.val=1.0;\n    this.b3.val=1.0;\n    this.a3.val=1.0;\n\n    var colA=[];\n    var colB=[];\n    var colC=[];\n\n    var w=0,h=0;\n\n    this.doRender=function()\n    {\n        if(w!=cgl.getViewPort()[2] || h!=cgl.getViewPort()[3])\n        {\n            w=cgl.getViewPort()[2];\n            h=cgl.getViewPort()[3];\n        }\n\n        uniformWidth.setValue(w);\n        uniformHeight.setValue(h);\n                    \n        cgl.setShader(shader);\n        self.trigger.trigger();\n        cgl.setPreviousShader();\n    };\n\n    var srcFrag=''\n        .endl()+'precision highp float;'\n        .endl()+'varying vec3 norm;'\n        .endl()+'varying vec2 texCoord;'\n        .endl()+'uniform vec4 colA;'\n        .endl()+'uniform vec4 colB;'\n        .endl()+'uniform vec4 colC;'\n        .endl()+'uniform float width,height;'\n\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n\n\n        .endl()+'   #ifdef USE_TEXCOORDS'\n        .endl()+'       vec2 coords=texCoord;'\n        .endl()+'   #endif'\n\n        .endl()+'   #ifdef USE_FRAGCOORDS'\n        .endl()+'       vec2 coords=vec2(gl_FragCoord.x/width,gl_FragCoord.y/height);'\n        .endl()+'   #endif'\n\n        .endl()+'   if(coords.y<=0.5)'\n        .endl()+'   {'\n        .endl()+'       gl_FragColor = vec4(mix(colA, colB, coords.y*2.0));'\n        .endl()+'   }'\n        .endl()+'   if(coords.y>0.5)'\n        .endl()+'   {'\n        .endl()+'       gl_FragColor = vec4(mix(colB, colC, (coords.y-0.5)*2.0));'\n        .endl()+'   }'\n        .endl()+'}';\n\n    var shader=new CGL.Shader(cgl);\n    this.onLoaded=shader.compile;\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n    shader.define(\"USE_TEXCOORDS\");\n    var uniformWidth=new CGL.Uniform(shader,'f','width',w);\n    var uniformHeight=new CGL.Uniform(shader,'f','height',h);\n\n    this.doRender();\n\n\n    this.r.onValueChanged=this.g.onValueChanged=this.b.onValueChanged=this.a.onValueChanged=function()\n    {\n        colA=[self.r.val,self.g.val,self.b.val,self.a.val];\n        if(!self.r.uniform) self.r.uniform=new CGL.Uniform(shader,'4f','colA',colA);\n        else self.r.uniform.setValue(colA);\n    };\n\n    this.r2.onValueChanged=this.g2.onValueChanged=this.b2.onValueChanged=this.a2.onValueChanged=function()\n    {\n        colB=[self.r2.val,self.g2.val,self.b2.val,self.a2.val];\n        if(!self.r2.uniform) self.r2.uniform=new CGL.Uniform(shader,'4f','colB',colB);\n        else self.r2.uniform.setValue(colB);\n    };\n\n    this.r3.onValueChanged=this.g3.onValueChanged=this.b3.onValueChanged=this.a3.onValueChanged=function()\n    {\n        colC=[self.r3.val,self.g3.val,self.b3.val,self.a3.val];\n        if(!self.r3.uniform) self.r3.uniform=new CGL.Uniform(shader,'4f','colC',colC);\n        else self.r3.uniform.setValue(colC);\n    };\n\n    this.screenSpace.onValueChanged=function()\n    {\n        if(self.screenSpace.val)\n        {\n            shader.define(\"USE_FRAGCOORDS\");\n            shader.removeDefine(\"USE_TEXCOORDS\");\n        }\n        else\n        {\n            shader.define(\"USE_TEXCOORDS\");\n            shader.removeDefine(\"USE_FRAGCOORDS\");\n        }\n\n    };\n\n    this.r3.onValueChanged();\n    this.r2.onValueChanged();\n    this.r.onValueChanged();\n    this.render.onTriggered=this.doRender;\n};\n\nOps.Gl.Shader.GradientMaterial.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.Shader.BasicMaterial = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=self.patch.cgl;\n\n    this.name='BasicMaterial';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION) );\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n    this.shaderOut=this.addOutPort(new Port(this,\"shader\",OP_PORT_TYPE_OBJECT));\n    this.shaderOut.ignoreValueSerialize=true;\n\n    this.bindTextures=function()\n    {\n        if(self.texture.get())\n        {\n            cgl.gl.activeTexture(cgl.gl.TEXTURE0);\n            cgl.gl.bindTexture(cgl.gl.TEXTURE_2D, self.texture.val.tex);\n        }\n\n        if(self.textureOpacity.get())\n        {\n            cgl.gl.activeTexture(cgl.gl.TEXTURE1);\n            cgl.gl.bindTexture(cgl.gl.TEXTURE_2D, self.textureOpacity.val.tex);\n        }\n    };\n\n    this.doRender=function()\n    {\n        cgl.setShader(shader);\n        shader.bindTextures();\n        \n        self.trigger.trigger();\n\n        cgl.setPreviousShader();\n    };\n\n    var srcVert=''\n        .endl()+'{{MODULES_HEAD}}'\n        .endl()+'attribute vec3 vPosition;'\n        .endl()+'attribute vec2 attrTexCoord;'\n        .endl()+'attribute vec3 attrVertNormal;'\n        .endl()+'varying vec2 texCoord;'\n        .endl()+'varying vec3 norm;'\n        .endl()+'uniform mat4 projMatrix;'\n        .endl()+'uniform mat4 mvMatrix;'\n        .endl()+'uniform mat4 normalMatrix;'\n\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   texCoord=attrTexCoord;'\n        .endl()+'   norm=attrVertNormal;'\n\n        .endl()+'{{MODULE_VERTEX_POSITION}}'\n\n\n        .endl()+'#ifdef BILLBOARD'\n        .endl()+'   vec3 position=vPosition;'\n\n        .endl()+\"   gl_Position = projMatrix * mvMatrix * vec4(( \"\n        .endl()+\"       position.x * vec3(\"\n        .endl()+\"           mvMatrix[0][0],\"\n        .endl()+\"           mvMatrix[1][0], \"\n        .endl()+\"           mvMatrix[2][0] ) +\"\n        .endl()+\"       position.y * vec3(\"\n        .endl()+\"           mvMatrix[0][1],\"\n        .endl()+\"           mvMatrix[1][1], \"\n        .endl()+\"           mvMatrix[2][1]) ), 1.0);\"\n        .endl()+'#endif '\n        .endl()+\"\"\n        .endl()+\"#ifndef BILLBOARD\"\n        .endl()+'   gl_Position = projMatrix * mvMatrix * vec4(vPosition,  1.0);'\n        .endl()+'#endif '\n        .endl()+'}';\n\n    var srcFrag=''\n\n        .endl()+'precision mediump float;'\n\n        .endl()+'{{MODULES_HEAD}}'\n        .endl()+'#ifdef HAS_TEXTURES'\n        .endl()+'   varying vec2 texCoord;'\n        .endl()+'   #ifdef HAS_TEXTURE_DIFFUSE'\n        .endl()+'       uniform sampler2D tex;'\n        .endl()+'   #endif'\n        .endl()+'   #ifdef HAS_TEXTURE_OPACITY'\n        .endl()+'       uniform sampler2D texOpacity;'\n        .endl()+'   #endif'\n        .endl()+'#endif'\n        .endl()+'uniform float r;'\n        .endl()+'uniform float g;'\n        .endl()+'uniform float b;'\n        .endl()+'uniform float a;'\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n\n        .endl()+'#ifdef HAS_TEXTURES'\n        .endl()+'   vec2 texCoords=texCoord;'\n        .endl()+'#endif'\n\n        .endl()+'{{MODULE_BEGIN_FRAG}}'\n\n\n        .endl()+'   vec4 col=vec4(r,g,b,a);'\n        .endl()+'   #ifdef HAS_TEXTURES'\n        .endl()+'      #ifdef HAS_TEXTURE_DIFFUSE'\n        .endl()+'          col=texture2D(tex,vec2(texCoords.x,1.0-texCoords.y));'\n        .endl()+'           #ifdef COLORIZE_TEXTURE'\n        .endl()+'               col.r*=r;'\n        .endl()+'               col.g*=g;'\n        .endl()+'               col.b*=b;'\n        .endl()+'           #endif'\n        .endl()+'      #endif'\n        .endl()+'      #ifdef HAS_TEXTURE_OPACITY'\n        .endl()+'          col.a*=texture2D(texOpacity,texCoords).g;'\n        .endl()+'       #endif'\n        .endl()+'       col.a*=a;'\n        .endl()+'   #endif'\n        .endl()+'{{MODULE_COLOR}}'\n        \n        .endl()+'   gl_FragColor = col;'\n        .endl()+'}';\n\n\n    var shader=new CGL.Shader(cgl);\n    shader.setModules(['MODULE_VERTEX_POSITION','MODULE_COLOR','MODULE_BEGIN_FRAG']);\n    shader.bindTextures=this.bindTextures;\n    this.shaderOut.val=shader;\n    this.onLoaded=shader.compile;\n    shader.setSource(srcVert,srcFrag);\n\n    this.r=this.addInPort(new Port(this,\"r\",OP_PORT_TYPE_VALUE,{ display:'range', colorPick:'true' }));\n    this.r.onValueChanged=function()\n    {\n        if(!self.r.uniform) self.r.uniform=new CGL.Uniform(shader,'f','r',self.r.get());\n        else self.r.uniform.setValue(self.r.get());\n    };\n\n    this.g=this.addInPort(new Port(this,\"g\",OP_PORT_TYPE_VALUE,{ display:'range' }));\n    this.g.onValueChanged=function()\n    {\n        if(!self.g.uniform) self.g.uniform=new CGL.Uniform(shader,'f','g',self.g.get());\n        else self.g.uniform.setValue(self.g.get());\n    };\n\n    this.b=this.addInPort(new Port(this,\"b\",OP_PORT_TYPE_VALUE,{ display:'range' }));\n    this.b.onValueChanged=function()\n    {\n        if(!self.b.uniform) self.b.uniform=new CGL.Uniform(shader,'f','b',self.b.get());\n        else self.b.uniform.setValue(self.b.get());\n    };\n\n    this.a=this.addInPort(new Port(this,\"a\",OP_PORT_TYPE_VALUE,{ display:'range' }));\n    this.a.onValueChanged=function()\n    {\n        if(!self.a.uniform) self.a.uniform=new CGL.Uniform(shader,'f','a',self.a.get());\n        else self.a.uniform.setValue(self.a.get());\n    };\n\n    this.r.val=Math.random();\n    this.g.val=Math.random();\n    this.b.val=Math.random();\n    this.a.val=1.0;\n\n    this.render.onTriggered=this.doRender;\n    this.texture=this.addInPort(new Port(this,\"texture\",OP_PORT_TYPE_TEXTURE,{preview:true}));\n    this.textureUniform=null;\n\n    this.texture.onPreviewChanged=function()\n    {\n        if(self.texture.showPreview) self.render.onTriggered=self.texture.val.preview;\n        else self.render.onTriggered=self.doRender;\n\n        console.log('show preview!');\n    };\n\n\n    this.texture.onValueChanged=function()\n    {\n\n        if(self.texture.get())\n        {\n            if(self.textureUniform!==null)return;\n            // console.log('TEXTURE ADDED');\n            shader.removeUniform('tex');\n            shader.define('HAS_TEXTURE_DIFFUSE');\n            self.textureUniform=new CGL.Uniform(shader,'t','tex',0);\n        }\n        else\n        {\n            // console.log('TEXTURE REMOVED');\n            shader.removeUniform('tex');\n            shader.removeDefine('HAS_TEXTURE_DIFFUSE');\n            self.textureUniform=null;\n        }\n    };\n\n    this.textureOpacity=this.addInPort(new Port(this,\"textureOpacity\",OP_PORT_TYPE_TEXTURE,{preview:true}));\n    this.textureOpacityUniform=null;\n\n    this.textureOpacity.onPreviewChanged=function()\n    {\n        if(self.textureOpacity.showPreview) self.render.onTriggered=self.textureOpacity.val.preview;\n        else self.render.onTriggered=self.doRender;\n\n        console.log('show preview!');\n    };\n\n    this.textureOpacity.onValueChanged=function()\n    {\n        if(self.textureOpacity.get())\n        {\n            if(self.textureOpacityUniform!==null)return;\n            console.log('TEXTURE OPACITY ADDED');\n            shader.removeUniform('texOpacity');\n            shader.define('HAS_TEXTURE_OPACITY');\n            self.textureOpacityUniform=new CGL.Uniform(shader,'t','texOpacity',1);\n        }\n        else\n        {\n            console.log('TEXTURE OPACITY REMOVED');\n            shader.removeUniform('texOpacity');\n            shader.removeDefine('HAS_TEXTURE_OPACITY');\n            self.textureOpacityUniform=null;\n        }\n    };\n\n    this.colorizeTexture=this.addInPort(new Port(this,\"colorizeTexture\",OP_PORT_TYPE_VALUE,{ display:'bool' }));\n    this.colorizeTexture.val=false;\n    this.colorizeTexture.onValueChanged=function()\n    {\n        if(self.colorizeTexture.val) shader.define('COLORIZE_TEXTURE');\n            else shader.removeDefine('COLORIZE_TEXTURE');\n    };\n\n\n    this.doBillboard=this.addInPort(new Port(this,\"billboard\",OP_PORT_TYPE_VALUE,{ display:'bool' }));\n    this.doBillboard.val=false;\n    this.doBillboard.onValueChanged=function()\n    {\n        if(self.doBillboard.val)\n            shader.define('BILLBOARD');\n        else\n            shader.removeDefine('BILLBOARD');\n    };\n\n\n\n    this.doRender();\n};\n\nOps.Gl.Shader.BasicMaterial.prototype = new Op();\n\n\n\n\n\n// --------------------------------------------------------------------------\n\n\n\n\n\nOps.Gl.Shader.TextureSinusWobble = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=self.patch.cgl;\n\n    this.name='texture sinus wobble';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION) );\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.doRender=function()\n    {\n        cgl.setShader(shader);\n\n        if(self.texture.get())\n        {\n            gl.activeTexture(gl.TEXTURE0);\n            gl.bindTexture(gl.TEXTURE_2D, self.texture.val.tex);\n        }\n\n        self.trigger.trigger();\n\n\n        cgl.setPreviousShader();\n    };\n\n    var srcFrag=''\n        .endl()+'precision highp float;'\n        .endl()+'#ifdef HAS_TEXTURES'\n        .endl()+'   varying vec2 texCoord;'\n        .endl()+'   #ifdef HAS_TEXTURE_DIFFUSE'\n        .endl()+'       uniform sampler2D tex;'\n        .endl()+'   #endif'\n        .endl()+'#endif'\n        .endl()+'uniform float a;'\n        .endl()+'uniform float time;'\n        .endl()+''\n        .endl()+'void main()'\n        .endl()+'{'\n        .endl()+'   vec4 col=vec4(1,1,1,a);'\n        .endl()+'   #ifdef HAS_TEXTURES'\n        .endl()+'      #ifdef HAS_TEXTURE_DIFFUSE'\n\n        // float smoothstep(float edge0, float edge1, float x)  \n\n        // .endl()+'          col=texture2D(tex,texCoord);'\n        // .endl()+'           float x=smoothstep(-1.0,1.0,texCoord.x*sin(time+texCoord.y*(col.r-0.5)) );'\n        .endl()+'           float x=texCoord.x+sin(time+texCoord.y*(3.0))*0.15 ;'\n        .endl()+'           float y=texCoord.y+sin(time+texCoord.x*(3.0))*0.15 ;'\n        // .endl()+'           float y=smoothstep(-1.0,1.0,texCoord.x*sin(time+texCoord.x*3.0)*cos(texCoord.x) );'\n        // .endl()+'           float y=texCoord.y;'\n\n        .endl()+'           vec2 tc=vec2(x,y );'\n        .endl()+'          col=texture2D(tex,tc);'\n        \n        .endl()+'      #endif'\n        .endl()+'       col.a*=a;'\n        .endl()+'   #endif'\n        .endl()+'gl_FragColor = col;'\n        .endl()+'}';\n\n\n    var shader=new CGL.Shader(cgl);\n    this.onLoaded=shader.compile;\n    shader.setSource(shader.getDefaultVertexShader(),srcFrag);\n\n    this.a=this.addInPort(new Port(this,\"a\",OP_PORT_TYPE_VALUE,{ display:'range' }));\n    this.a.onValueChanged=function()\n    {\n        if(!self.a.uniform) self.a.uniform=new CGL.Uniform(shader,'f','a',self.a.val);\n        else self.a.uniform.setValue(self.a.val);\n    };\n\n    this.a.val=1.0;\n\n    this.time=this.addInPort(new Port(this,\"time\",OP_PORT_TYPE_VALUE,{  }));\n    this.time.onValueChanged=function()\n    {\n        if(!self.time.uniform) self.time.uniform=new CGL.Uniform(shader,'f','time',self.a.val);\n        else self.time.uniform.setValue(self.time.val);\n    };\n\n    this.time.val=1.0;\n\n\n    this.render.onTriggered=this.doRender;\n    this.texture=this.addInPort(new Port(this,\"texture\",OP_PORT_TYPE_TEXTURE));\n    this.textureUniform=null;\n\n    this.texture.onValueChanged=function()\n    {\n\n        if(self.texture.get())\n        {\n            if(self.textureUniform!==null)return;\n            // console.log('TEXTURE ADDED');\n            shader.removeUniform('tex');\n            shader.define('HAS_TEXTURE_DIFFUSE');\n            self.textureUniform=new CGL.Uniform(shader,'t','tex',0);\n        }\n        else\n        {\n            // console.log('TEXTURE REMOVED');\n            shader.removeUniform('tex');\n            shader.removeDefine('HAS_TEXTURE_DIFFUSE');\n            self.textureUniform=null;\n        }\n    };\n\n    this.doRender();\n};\n\nOps.Gl.Shader.TextureSinusWobble.prototype = new Op();\n\n\n","\nOps.Gl.Meshes=Ops.Gl.Meshes || {};\n\n\nOps.Gl.Meshes.Triangle = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=this.patch.cgl;\n\n    this.name='Triangle';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        self.mesh.render(cgl.getShader());\n        self.trigger.trigger();\n    };\n\n    var geom=new CGL.Geometry();\n    geom.vertices = [\n         0.0,  1.0,  0.0,\n        -1.0,  -1.0,  0.0,\n         1.0, -1.0,  0.0\n    ];\n\n    geom.verticesIndices = [\n        0, 1, 2\n    ];\n    this.mesh=new CGL.Mesh(cgl,geom);\n};\n\nOps.Gl.Meshes.Triangle.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Meshes.Rectangle = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=this.patch.cgl;\n\n    this.name='rectangle';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n    this.width=this.addInPort(new Port(this,\"width\"));\n    this.height=this.addInPort(new Port(this,\"height\"));\n    \n    this.pivotX=this.addInPort(new Port(this,\"pivot x\",OP_PORT_TYPE_VALUE,{display:'dropdown',values:[\"center\",\"left\",\"right\"]} ));\n    this.pivotX.val='center';\n\n    this.pivotY=this.addInPort(new Port(this,\"pivot y\",OP_PORT_TYPE_VALUE,{display:'dropdown',values:[\"center\",\"top\",\"bottom\"]} ));\n    this.pivotY.val='center';\n\n    this.width.val=1.0;\n    this.height.val=1.0;\n\n    this.render.onTriggered=function()\n    {\n        self.mesh.render(cgl.getShader());\n        self.trigger.trigger();\n    };\n\n    var geom=new CGL.Geometry();\n    this.mesh=null;\n\n    function rebuild()\n    {\n        var x=0;\n        var y=0;\n        if(self.pivotX.get()=='center') x=0;\n        if(self.pivotX.get()=='right') x=-self.width.get()/2;\n        if(self.pivotX.get()=='left') x=+self.width.get()/2;\n\n        if(self.pivotY.get()=='center') y=0;\n        if(self.pivotY.get()=='top') y=-self.height.get()/2;\n        if(self.pivotY.get()=='bottom') y=+self.height.get()/2;\n\n        geom.vertices = [\n             self.width.get()/2+x,  self.height.get()/2+y,  0.0,\n            -self.width.get()/2+x,  self.height.get()/2+y,  0.0,\n             self.width.get()/2+x, -self.height.get()/2+y,  0.0,\n            -self.width.get()/2+x, -self.height.get()/2+y,  0.0\n        ];\n\n        geom.texCoords = [\n             1.0, 0.0,\n             0.0, 0.0,\n             1.0, 1.0,\n             0.0, 1.0\n        ];\n\n        geom.verticesIndices = [\n            0, 1, 2,\n            2, 1, 3\n        ];\n        if(!self.mesh) self.mesh=new CGL.Mesh(cgl,geom);\n        self.mesh.setGeom(geom);\n    }\n    rebuild();\n\n    this.pivotX.onValueChanged=rebuild;\n    this.pivotY.onValueChanged=rebuild;\n    this.width.onValueChanged=rebuild;\n    this.height.onValueChanged=rebuild;\n};\n\nOps.Gl.Meshes.Rectangle.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Meshes.FullscreenRectangle = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=this.patch.cgl;\n\n    this.name='fullscreen rectangle';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.mesh=null;\n    var geom=new CGL.Geometry();\n    var x=0,y=0,z=0,w=0;\n\n    this.render.onTriggered=function()\n    {\n        if(\n          cgl.getViewPort()[2]!=w ||\n          cgl.getViewPort()[3]!=h ) rebuild();\n\n        cgl.pushPMatrix();\n        mat4.identity(cgl.pMatrix);\n        mat4.ortho(cgl.pMatrix, 0, w, h, 0, -10.0, 1000);\n\n        cgl.pushMvMatrix();\n        mat4.identity(cgl.mvMatrix);\n\n        self.mesh.render(cgl.getShader());\n\n        cgl.gl.clear(cgl.gl.DEPTH_BUFFER_BIT);\n\n        cgl.popPMatrix();\n        cgl.popMvMatrix();\n\n        self.trigger.trigger();\n    };\n\n    this.onResize=this.rebuild;\n\n    function rebuild()\n    {\n        var currentViewPort=cgl.getViewPort().slice();\n\n        x=currentViewPort[0];\n        y=currentViewPort[1];\n        w=currentViewPort[2];\n        h=currentViewPort[3];\n\n        var xx=0,xy=0;\n        geom.vertices = [\n             xx+w, xy+h,  0.0,\n             xx,   xy+h,  0.0,\n             xx+w, xy,    0.0,\n             xx,   xy,    0.0\n        ];\n\n        geom.texCoords = [\n             1.0, 1.0,\n             0.0, 1.0,\n             1.0, 0.0,\n             0.0, 0.0\n        ];\n\n        geom.verticesIndices = [\n            0, 1, 2,\n            3, 1, 2\n        ];\n\n        if(!self.mesh) self.mesh=new CGL.Mesh(cgl,geom);\n        else self.mesh.setGeom(geom);\n    }\n};\n\nOps.Gl.Meshes.FullscreenRectangle.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Meshes.Circle = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=this.patch.cgl;\n\n    this.name='Circle';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n\n    this.segments=this.addInPort(new Port(this,\"segments\"));\n    this.radius=this.addInPort(new Port(this,\"radius\"));\n    this.innerRadius=this.addInPort(new Port(this,\"innerRadius\",OP_PORT_TYPE_VALUE,{display:\"range\"}));\n    this.percent=this.addInPort(new Port(this,\"percent\"));\n\n    this.steps=this.addInPort(new Port(this,\"steps\",OP_PORT_TYPE_VALUE,{type:\"int\"}));\n    this.steps.val=0.0;\n    this.invertSteps=this.addInPort(new Port(this,\"invertSteps\",OP_PORT_TYPE_VALUE,{ display:'bool' }));\n    this.invertSteps.val=false;\n\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        mesh.render(cgl.getShader());\n        self.trigger.trigger();\n    };\n\n    this.segments.val=40;\n    this.radius.val=1;\n    this.innerRadius.val=0;\n    this.percent.val=1;\n\n\n    var geom=new CGL.Geometry();\n    var mesh=new CGL.Mesh(cgl,geom);\n\n    function calc()\n    {\n        geom.clear();\n        var i=0,degInRad=0;\n        var oldPosX=0,oldPosY=0;\n        var oldPosXTexCoord=0,oldPosYTexCoord=0;\n\n        var oldPosXIn=0,oldPosYIn=0;\n        var oldPosXTexCoordIn=0,oldPosYTexCoordIn=0;\n\n        var posxTexCoord=0,posyTexCoord=0;\n        var posx=0,posy=0;\n\n        if(self.innerRadius.get()<=0)\n        {\n          for (i=0; i <= self.segments.get()*self.percent.get(); i++)\n          {\n              degInRad = (360/self.segments.get())*i*CGL.DEG2RAD;\n              posx=Math.cos(degInRad)*self.radius.get();\n              posy=Math.sin(degInRad)*self.radius.get();\n\n              posxTexCoord=(Math.cos(degInRad)+1.0)/2;\n              posyTexCoord=(Math.sin(degInRad)+1.0)/2;\n\n              geom.addFace(\n                          [posx,posy,0],\n                          [oldPosX,oldPosY,0],\n                          [0,0,0]\n                          );\n\n              geom.texCoords.push(posxTexCoord,posyTexCoord,oldPosXTexCoord,oldPosYTexCoord,0.5,0.5);\n\n              oldPosXTexCoord=posxTexCoord;\n              oldPosYTexCoord=posyTexCoord;\n\n              oldPosX=posx;\n              oldPosY=posy;\n          }\n        }\n        else\n        {\n          var count=0;\n          for (i=0; i <= self.segments.get()*self.percent.get(); i++)\n          {\n              count++;\n\n              degInRad = (360/self.segments.get())*i*CGL.DEG2RAD;\n              posx=Math.cos(degInRad)*self.radius.get();\n              posy=Math.sin(degInRad)*self.radius.get();\n\n              var posxIn=Math.cos(degInRad)*self.innerRadius.get()*self.radius.get();\n              var posyIn=Math.sin(degInRad)*self.innerRadius.get()*self.radius.get();\n\n              posxTexCoord=(Math.cos(degInRad)+1.0)/2;\n              posyTexCoord=(Math.sin(degInRad)+1.0)/2;\n\n              var posxTexCoordIn=(Math.cos(degInRad)+1.0)/2*self.innerRadius.get();\n              var posyTexCoordIn=(Math.sin(degInRad)+1.0)/2*self.innerRadius.get();\n\n              // if(count%5!==0)\n              if(self.steps.get()===0.0 ||\n                (count%parseInt(self.steps.get(),10)===0 && !self.invertSteps.get()) ||\n                (count%parseInt(self.steps.get(),10)!==0 && self.invertSteps.get())\n                )\n              {\n                  geom.addFace(\n                              [posx,posy,0],\n                              [oldPosX,oldPosY,0],\n                              [posxIn,posyIn,0]\n                              );\n\n                  geom.addFace(\n                              [posxIn,posyIn,0],\n                              [oldPosX,oldPosY,0],\n                              [oldPosXIn,oldPosYIn,0]\n                              );\n\n                  geom.texCoords.push(posxTexCoord,posyTexCoord,oldPosXTexCoord,oldPosYTexCoord,posxTexCoordIn,posyTexCoordIn);\n                  geom.texCoords.push(posxTexCoordIn,posyTexCoordIn,oldPosXTexCoord,oldPosYTexCoord,oldPosXTexCoordIn,oldPosYTexCoordIn);\n              }\n\n              oldPosXTexCoordIn=posxTexCoordIn;\n              oldPosYTexCoordIn=posyTexCoordIn;\n\n              oldPosXTexCoord=posxTexCoord;\n              oldPosYTexCoord=posyTexCoord;\n\n              oldPosX=posx;\n              oldPosY=posy;\n\n              oldPosXIn=posxIn;\n              oldPosYIn=posyIn;\n            }\n        }\n\n        mesh.setGeom(geom);\n    }\n\n    this.segments.onValueChanged=calc;\n    this.radius.onValueChanged=calc;\n    this.innerRadius.onValueChanged=calc;\n    this.percent.onValueChanged=calc;\n    this.steps.onValueChanged=calc;\n    this.invertSteps.onValueChanged=calc;\n    calc();\n};\n\nOps.Gl.Meshes.Circle.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Meshes.ObjMesh = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=this.patch.cgl;\n\n    this.name='OBJ Mesh';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n    this.calcNormals=this.addInPort(new Port(this,\"calcNormals\",OP_PORT_TYPE_VALUE,{display:'dropdown',values:['no','face','vertex']}));\n    this.calcNormals.val='no';\n\n    this.filename=this.addInPort(new Port(this,\"file\",OP_PORT_TYPE_VALUE,{display:'file',type:'string',filter:'mesh'}));\n\n    this.mesh=null;\n\n    this.render.onTriggered=function()\n    {\n        if(self.mesh) self.mesh.render(cgl.getShader());\n\n        self.trigger.trigger();\n    };\n\n\n    var reloadObj=function()\n    {\n        // console.log('load texture...');\n        // self.tex=CGL.Texture.load(self.filename.val,function()\n        //     {\n        //         console.log('tex load FINISHED!!!');\n\n        //         self.textureOut.val=self.tex;\n        //     });\n        // self.textureOut.val=self.tex;\n\n      CGL.incrementLoadingAssets();\n\n      // console.log('filename:',self.filename.val);\n      if(self.filename.val===0)\n      {\n        CGL.decrementLoadingAssets();\n        return;\n      }\n      \n\n      ajaxRequest(self.patch.getFilePath(self.filename.val),function(response)\n      {\n        console.log('parse obj');\n          // console.log(response);\n          var r=parseOBJ(response);\n\n          unwrap = function(ind, crd, cpi)\n          {\n              var ncrd = new Array(Math.floor(ind.length/3)*cpi);\n              for(var i=0; i<ind.length; i++)\n              {\n                  for(var j=0; j<cpi; j++)\n                  {\n                      ncrd[i*cpi+j] = crd[ind[i]*cpi+j];\n                  }\n              }\n              return ncrd;\n          };\n\n\n          var l=r.verticesIndices.length;\n              r.vertices = unwrap(r.verticesIndices, r.vertices, 3);\n              r.texCoords = unwrap(r.texCoordsIndices  , r.texCoords  , 2);\n              r.vertexNormals = unwrap(r.vertexNormalIndices  , r.vertexNormals  , 3);\n              r.verticesIndices = [];\n              for(var i=0; i<l; i++) r.verticesIndices.push(i);\n          \n          if(self.calcNormals.val=='face')r.calcNormals();\n          else if(self.calcNormals.val=='vertex')r.calcNormals(true);\n\n          self.mesh=new CGL.Mesh(cgl,r);\n\n\n          CGL.decrementLoadingAssets();\n\n      });\n\n    };\n\n    this.filename.onValueChanged=reloadObj;\n    this.calcNormals.onValueChanged=function()\n    {\n        reloadObj();\n    };\n\n\n\n    // this.filename.val='assets/skull.obj';\n\n};\n\nOps.Gl.Meshes.ObjMesh.prototype = new Op();\n\n// ----------------------------------------------------------------\n\nOps.Gl.Meshes.Cube = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=this.patch.cgl;\n\n    this.name='Cube';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.mesh=null;\n\n    this.render.onTriggered=function()\n    {\n        if(self.mesh!==null) self.mesh.render(cgl.getShader());\n        self.trigger.trigger();\n    };\n\n    var geom=new CGL.Geometry();\n\n        geom.vertices = [\n          // Front face\n          -1.0, -1.0,  1.0,\n           1.0, -1.0,  1.0,\n           1.0,  1.0,  1.0,\n          -1.0,  1.0,  1.0,\n          // Back face\n          -1.0, -1.0, -1.0,\n          -1.0,  1.0, -1.0,\n           1.0,  1.0, -1.0,\n           1.0, -1.0, -1.0,\n          // Top face\n          -1.0,  1.0, -1.0,\n          -1.0,  1.0,  1.0,\n           1.0,  1.0,  1.0,\n           1.0,  1.0, -1.0,\n          // Bottom face\n          -1.0, -1.0, -1.0,\n           1.0, -1.0, -1.0,\n           1.0, -1.0,  1.0,\n          -1.0, -1.0,  1.0,\n          // Right face\n           1.0, -1.0, -1.0,\n           1.0,  1.0, -1.0,\n           1.0,  1.0,  1.0,\n           1.0, -1.0,  1.0,\n          // Left face\n          -1.0, -1.0, -1.0,\n          -1.0, -1.0,  1.0,\n          -1.0,  1.0,  1.0,\n          -1.0,  1.0, -1.0,\n        ];\n\n        geom.texCoords = [\n          // Front face\n          0.0, 0.0,\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n          // Back face\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n          0.0, 0.0,\n          // Top face\n          0.0, 1.0,\n          0.0, 0.0,\n          1.0, 0.0,\n          1.0, 1.0,\n          // Bottom face\n          1.0, 1.0,\n          0.0, 1.0,\n          0.0, 0.0,\n          1.0, 0.0,\n          // Right face\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n          0.0, 0.0,\n          // Left face\n          0.0, 0.0,\n          1.0, 0.0,\n          1.0, 1.0,\n          0.0, 1.0,\n        ];\n\n        geom.vertexNormals = [\n            // Front face\n             0.0,  0.0,  1.0,\n             0.0,  0.0,  1.0,\n             0.0,  0.0,  1.0,\n             0.0,  0.0,  1.0,\n\n            // Back face\n             0.0,  0.0, -1.0,\n             0.0,  0.0, -1.0,\n             0.0,  0.0, -1.0,\n             0.0,  0.0, -1.0,\n\n            // Top face\n             0.0,  1.0,  0.0,\n             0.0,  1.0,  0.0,\n             0.0,  1.0,  0.0,\n             0.0,  1.0,  0.0,\n\n            // Bottom face\n             0.0, -1.0,  0.0,\n             0.0, -1.0,  0.0,\n             0.0, -1.0,  0.0,\n             0.0, -1.0,  0.0,\n\n            // Right face\n             1.0,  0.0,  0.0,\n             1.0,  0.0,  0.0,\n             1.0,  0.0,  0.0,\n             1.0,  0.0,  0.0,\n\n            // Left face\n            -1.0,  0.0,  0.0,\n            -1.0,  0.0,  0.0,\n            -1.0,  0.0,  0.0,\n            -1.0,  0.0,  0.0\n        ];\n\n\n        geom.verticesIndices = [\n            0, 1, 2,      0, 2, 3,    // Front face\n            4, 5, 6,      4, 6, 7,    // Back face\n            8, 9, 10,     8, 10, 11,  // Top face\n            12, 13, 14,   12, 14, 15, // Bottom face\n            16, 17, 18,   16, 18, 19, // Right face\n            20, 21, 22,   20, 22, 23  // Left face\n        ];\n\n    this.mesh=new CGL.Mesh(cgl,geom);\n};\n\nOps.Gl.Meshes.Cube.prototype = new Op();\n\n// ----------------------------------------------------------------\n\n\nOps.Gl.Meshes.Spline = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=self.patch.cgl;\n    cgl.frameStore.SplinePoints=[];\n\n    this.name='Spline';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n\n    this.thickness=this.addInPort(new Port(this,\"thickness\",OP_PORT_TYPE_VALUE));\n    this.thickness.val=1.0;\n\n    this.subDivs=this.addInPort(new Port(this,\"subDivs\",OP_PORT_TYPE_VALUE));\n    this.centerpoint=this.addInPort(new Port(this,\"centerpoint\",OP_PORT_TYPE_VALUE,{display:'bool'}));\n    this.centerpoint.val=false;\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n    this.triggerPoints=this.addOutPort(new Port(this,\"triggerPoints\",OP_PORT_TYPE_FUNCTION));\n    \n    var buffer = cgl.gl.createBuffer();\n\n\n\n    function easeSmoothStep(perc)\n    {\n        var x = Math.max(0, Math.min(1, (perc-0)/(1-0)));\n        perc= x*x*(3 - 2*x); // smoothstep\n        return perc;\n    }\n\n    function easeSmootherStep(perc)\n    {\n        var x = Math.max(0, Math.min(1, (perc-0)/(1-0)));\n        perc= x*x*x*(x*(x*6 - 15) + 10); // smootherstep\n        return perc;\n    }\n\n\n    this.render.onTriggered=function()\n    {\n        self.trigger.trigger();\n        bufferData();\n\n        cgl.pushMvMatrix();\n        mat4.identity(cgl.mvMatrix);\n\n        cgl.getShader().bind();\n        cgl.gl.vertexAttribPointer(cgl.getShader().getAttrVertexPos(),buffer.itemSize, cgl.gl.FLOAT, false, 0, 0);\n        cgl.gl.enableVertexAttribArray(cgl.getShader().getAttrVertexPos());\n\n        cgl.gl.bindBuffer(cgl.gl.ARRAY_BUFFER, buffer);\n        if(self.centerpoint.val)cgl.gl.drawArrays(cgl.gl.LINES, 0, buffer.numItems);\n          else cgl.gl.drawArrays(cgl.gl.LINE_STRIP, 0, buffer.numItems);\n\n        for(var i=0;i<cgl.frameStore.SplinePoints.length;i+=3)\n        {\n            var vec=[0,0,0];\n            vec3.set(vec, cgl.frameStore.SplinePoints[i+0], cgl.frameStore.SplinePoints[i+1], cgl.frameStore.SplinePoints[i+2]);\n            cgl.pushMvMatrix();\n            mat4.translate(cgl.mvMatrix,cgl.mvMatrix, vec);\n            self.triggerPoints.trigger();\n            cgl.popMvMatrix();\n        }\n\n        cgl.popMvMatrix();\n\n        cgl.frameStore.SplinePoints.length=0;\n    };\n\n    function bufferData()\n    {\n        \n        var subd=self.subDivs.val;\n\n        if(self.centerpoint.val)\n        {\n            var points=[];\n\n            for(var i=0;i<cgl.frameStore.SplinePoints.length;i+=3)\n            {\n                //center point...\n                points.push( cgl.frameStore.SplinePoints[0] );\n                points.push( cgl.frameStore.SplinePoints[1] );\n                points.push( cgl.frameStore.SplinePoints[2] );\n\n                //other point\n                points.push( cgl.frameStore.SplinePoints[i+0] );\n                points.push( cgl.frameStore.SplinePoints[i+1] );\n                points.push( cgl.frameStore.SplinePoints[i+2] );\n\n            }\n\n            cgl.frameStore.SplinePoints=points;\n        }\n\n        // if(subd>0)\n        // {\n            // var points=[];\n        //     for(var i=0;i<cgl.frameStore.SplinePoints.length-3;i+=3)\n        //     {\n        //         for(var j=0;j<subd;j++)\n        //         {\n        //             for(var k=0;k<3;k++)\n        //             {\n        //                 points.push(\n        //                     cgl.frameStore.SplinePoints[i+k]+\n        //                         ( cgl.frameStore.SplinePoints[i+k+3] - cgl.frameStore.SplinePoints[i+k] ) *\n        //                         easeSmootherStep(j/subd)\n        //                         );\n        //             }\n\n        //             // console.log('easeSmootherStep(j/subd)',easeSmootherStep(j/subd));\n                            \n        //         }\n        //     }\n\n        // // console.log('cgl.frameStore.SplinePoints',cgl.frameStore.SplinePoints.length);\n        // // console.log('points',points.length);\n        \n\n        //     cgl.frameStore.SplinePoints=points;\n        // }\n\n        cgl.gl.lineWidth(self.thickness.val);\n        cgl.gl.bindBuffer(cgl.gl.ARRAY_BUFFER, buffer);\n        cgl.gl.bufferData(cgl.gl.ARRAY_BUFFER, new Float32Array(cgl.frameStore.SplinePoints), cgl.gl.STATIC_DRAW);\n        buffer.itemSize = 3;\n        buffer.numItems = cgl.frameStore.SplinePoints.length/buffer.itemSize;\n    }\n\n    bufferData();\n};\n\nOps.Gl.Meshes.Spline.prototype = new Op();\n\n\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Meshes.SplinePoint = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=self.patch.cgl;\n\n    this.name='SplinePoint';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.render.onTriggered=function()\n    {\n        if(!cgl.frameStore.SplinePoints)return;\n        var pos=[0,0,0];\n        vec3.transformMat4(pos, [0,0,0], cgl.mvMatrix);\n\n        cgl.frameStore.SplinePoints.push(pos[0]);\n        cgl.frameStore.SplinePoints.push(pos[1]);\n        cgl.frameStore.SplinePoints.push(pos[2]);\n\n        self.trigger.trigger();\n    };\n\n};\n\nOps.Gl.Meshes.SplinePoint.prototype = new Op();\n\n\n\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Meshes.TransformToGeometryVertices = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=this.patch.cgl;\n\n    this.name='TransformToGeometryVertices';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.geometry=this.addInPort(new Port(this,\"geometry\",OP_PORT_TYPE_OBJECT));\n    this.geometry.ignoreValueSerialize=true;\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n    this.x=this.addOutPort(new Port(this,\"x\",OP_PORT_TYPE_VALUE));\n    this.y=this.addOutPort(new Port(this,\"y\",OP_PORT_TYPE_VALUE));\n    this.z=this.addOutPort(new Port(this,\"z\",OP_PORT_TYPE_VALUE));\n    this.index=this.addOutPort(new Port(this,\"index\",OP_PORT_TYPE_VALUE));\n    \n\n    var vec=[0,0,0];\n    this.render.onTriggered=function()\n    {\n        if(self.geometry.val)\n        {\n\n            for(var i=0;i<self.geometry.val.vertices.length;i+=3)\n            {\n                vec3.set(vec, self.geometry.val.vertices[i+0],self.geometry.val.vertices[i+1],self.geometry.val.vertices[i+2]);\n                self.x.val=self.geometry.val.vertices[i+0];\n                self.y.val=self.geometry.val.vertices[i+1];\n                self.z.val=self.geometry.val.vertices[i+2];\n                self.index.val=i;\n                cgl.pushMvMatrix();\n                mat4.translate(cgl.mvMatrix,cgl.mvMatrix, vec);\n                self.trigger.trigger();\n                cgl.popMvMatrix();\n            }\n        }\n    };\n\n\n};\n\nOps.Gl.Meshes.TransformToGeometryVertices.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\n\n","\nOps.Gl.ShaderEffects=Ops.Gl.ShaderEffects || {};\n\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.ShaderEffects.TextureShiftGlitch = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=self.patch.cgl;\n\n    this.name='TextureShiftGlitch';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.pos=this.addInPort(new Port(this,\"pos\",OP_PORT_TYPE_VALUE,{display:'range'}));\n    this.height=this.addInPort(new Port(this,\"height\",OP_PORT_TYPE_VALUE,{display:'range'}));\n    this.width=this.addInPort(new Port(this,\"width\",OP_PORT_TYPE_VALUE,{display:'range'}));\n    this.extrude=this.addInPort(new Port(this,\"extrude\",OP_PORT_TYPE_VALUE));\n\n    this.pos.onValueChanged=function(){ if(unipos)unipos.setValue(self.pos.val); };\n    this.height.onValueChanged=function(){ if(uniheight)uniheight.setValue(self.height.val); };\n    this.width.onValueChanged=function(){ if(uniWidth)uniWidth.setValue(self.width.val); };\n\n    var shader=null;\n    var unipos;\n    var uniheight;\n    var uniWidth;\n    \n    var srcHeadVert=''\n        .endl()+'uniform float {{mod}}_pos;'\n        .endl()+'uniform float {{mod}}_height;'\n        .endl()+'uniform float {{mod}}_width;'\n        .endl();\n\n    var srcBodyVert=''\n    \n        .endl()+'   if( texCoords.y > {{mod}}_pos - {{mod}}_height*0.5 && texCoords.y<{{mod}}_pos+{{mod}}_height*0.5) texCoords.x+={{mod}}_width; '\n        .endl();\n\n    var module=null;\n\n    function removeModule()\n    {\n        if(shader && module)\n        {\n            shader.removeModule(module);\n            shader=null;\n        }\n    }\n\n    this.render.onLinkChanged=removeModule;\n\n    this.render.onTriggered=function()\n    {\n        if(cgl.getShader()!=shader)\n        {\n            if(shader) removeModule();\n\n            shader=cgl.getShader();\n            module=shader.addModule(\n                {\n                    name:'MODULE_BEGIN_FRAG',\n                    srcHeadFrag:srcHeadVert,\n                    srcBodyFrag:srcBodyVert\n                });\n\n            unipos=new CGL.Uniform(shader,'f',module.prefix+'_pos',self.pos.val);\n            uniheight=new CGL.Uniform(shader,'f',module.prefix+'_height',self.height.val);\n            uniWidth=new CGL.Uniform(shader,'f',module.prefix+'_width',self.width.val);\n        }\n\n        self.trigger.trigger();\n    };\n\n};\n\nOps.Gl.ShaderEffects.TextureShiftGlitch.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.ShaderEffects.VertexSinusWobble = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=self.patch.cgl;\n\n    var shader=null;\n    var uniTime;\n\n    this.name='VertexSinusWobble';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.frequency=this.addInPort(new Port(this,\"frequency\",OP_PORT_TYPE_VALUE));\n    var uniFrequency=null;\n    this.frequency.val=1.0;\n    this.frequency.onValueChanged=function(){ if(uniFrequency)uniFrequency.setValue(self.frequency.val); };\n\n    this.amount=this.addInPort(new Port(this,\"amount\",OP_PORT_TYPE_VALUE));\n    var uniAmount=null;\n    this.amount.val=1.0;\n    this.amount.onValueChanged=function(){ if(uniAmount)uniAmount.setValue(self.amount.val); };\n\n\n    this.phase=this.addInPort(new Port(this,\"phase\",OP_PORT_TYPE_VALUE));\n    var uniPhase=null;\n    this.phase.val=1.0;\n    this.phase.onValueChanged=function(){ if(uniAmount)uniAmount.setValue(self.phase.val); };\n\n\n    this.toAxisX=this.addInPort(new Port(this,\"axisX\",OP_PORT_TYPE_VALUE,{display:'bool'}));\n    this.toAxisX.val=true;\n    this.toAxisX.onValueChanged=setDefines;\n\n    this.toAxisY=this.addInPort(new Port(this,\"axisY\",OP_PORT_TYPE_VALUE,{display:'bool'}));\n    this.toAxisY.val=true;\n    this.toAxisY.onValueChanged=setDefines;\n\n    this.toAxisZ=this.addInPort(new Port(this,\"axisZ\",OP_PORT_TYPE_VALUE,{display:'bool'}));\n    this.toAxisZ.val=true;\n    this.toAxisZ.onValueChanged=setDefines;\n\n\n    function setDefines()\n    {\n        if(!shader)return;\n\n        if(self.toAxisX.val)shader.define(module.prefix+'_TO_AXIS_X');\n            else shader.removeDefine(module.prefix+'_TO_AXIS_X');\n\n        if(self.toAxisY.val)shader.define(module.prefix+'_TO_AXIS_Y');\n            else shader.removeDefine(module.prefix+'_TO_AXIS_Y');\n\n        if(self.toAxisZ.val)shader.define(module.prefix+'_TO_AXIS_Z');\n            else shader.removeDefine(module.prefix+'_TO_AXIS_Z');\n    }\n    \n    var srcHeadVert=''\n        .endl()+'uniform float {{mod}}_time;'\n        .endl()+'uniform float {{mod}}_frequency;'\n        .endl()+'uniform float {{mod}}_amount;'\n        .endl()+'uniform float {{mod}}_phase;'\n        .endl();\n\n    var srcBodyVert=''\n        .endl()+'float {{mod}}_v=sin( (pos.x)*3.0 + {{mod}}_time * {{mod}}_frequency + {{mod}}_phase ) * {{mod}}_amount;'\n\n        .endl()+'#ifdef {{mod}}_TO_AXIS_X'\n        .endl()+'   pos.x+={{mod}}_v;'\n        .endl()+'#endif'\n\n        .endl()+'#ifdef {{mod}}_TO_AXIS_Y'\n        .endl()+'   pos.y+={{mod}}_v;'\n        .endl()+'#endif'\n\n        .endl()+'#ifdef {{mod}}_TO_AXIS_Z'\n        .endl()+'   pos.z+={{mod}}_v;'\n        .endl()+'#endif'\n\n        // .endl()+'norm=normalize(norm);'\n        .endl();\n\n\n\n\n    var startTime=Date.now()/1000.0;\n\n    function removeModule()\n    {\n        if(shader && module)\n        {\n            shader.removeModule(module);\n            shader=null;\n        }\n    }\n\n    this.render.onLinkChanged=removeModule;\n    this.render.onTriggered=function()\n    {\n        if(cgl.getShader()!=shader)\n        {\n            if(shader) removeModule();\n            shader=cgl.getShader();\n            module=shader.addModule(\n                {\n                    name:'MODULE_VERTEX_POSITION',\n                    srcHeadVert:srcHeadVert,\n                    srcBodyVert:srcBodyVert\n                });\n\n            uniTime=new CGL.Uniform(shader,'f',module.prefix+'_time',0);\n            uniFrequency=new CGL.Uniform(shader,'f',module.prefix+'_frequency',self.frequency.val);\n            uniAmount=new CGL.Uniform(shader,'f',module.prefix+'_amount',self.amount.val);\n            uniPhase=new CGL.Uniform(shader,'f',module.prefix+'_phase',self.phase.val);\n            setDefines();\n        }\n\n        uniTime.setValue(Date.now()/1000.0-startTime);\n        self.trigger.trigger();\n    };\n\n};\n\nOps.Gl.ShaderEffects.VertexSinusWobble.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Gl.ShaderEffects.VertexExtrudeGlitch = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=self.patch.cgl;\n\n    this.name='VertexExtrudeGlitch';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.min=this.addInPort(new Port(this,\"min\",OP_PORT_TYPE_VALUE,{display:'range'}));\n    this.max=this.addInPort(new Port(this,\"max\",OP_PORT_TYPE_VALUE,{display:'range'}));\n    this.width=this.addInPort(new Port(this,\"width\",OP_PORT_TYPE_VALUE,{display:'range'}));\n    this.extrude=this.addInPort(new Port(this,\"extrude\",OP_PORT_TYPE_VALUE));\n\n    this.min.onValueChanged=function(){ if(uniMin)uniMin.setValue(self.min.val); };\n    this.max.onValueChanged=function(){ if(uniMax)uniMax.setValue(self.max.val); };\n    this.width.onValueChanged=function(){ if(uniWidth)uniWidth.setValue(self.width.val); };\n    this.extrude.onValueChanged=function(){ if(uniExtrude)uniExtrude.setValue(self.extrude.val); };\n\n    var shader=null;\n    var uniMin;\n    var uniMax;\n    var uniWidth;\n    var uniExtrude;\n    \n    var srcHeadVert=''\n        .endl()+'uniform float {{mod}}_x;'\n        .endl()+'uniform float {{mod}}_y;'\n        .endl()+'uniform float {{mod}}_width;'\n        .endl()+'uniform float {{mod}}_extrude;'\n        .endl();\n\n    var srcBodyVert=''\n        .endl()+'   if(texCoord.x>{{mod}}_x && texCoord.x<{{mod}}_x+{{mod}}_width && texCoord.y>{{mod}}_y && texCoord.y<{{mod}}_y+{{mod}}_width)pos.xyz*={{mod}}_extrude;'\n        .endl();\n\n    var module=null;\n\n    function removeModule()\n    {\n        console.log('remove module?',shader,module);\n\n        if(shader && module)\n        {\n            shader.removeModule(module);\n            shader=null;\n            console.log('remove module!');\n        }\n    }\n\n    this.render.onLinkChanged=removeModule;\n\n    this.render.onTriggered=function()\n    {\n        if(cgl.getShader()!=shader)\n        {\n            if(shader) removeModule();\n\n            shader=cgl.getShader();\n            module=shader.addModule(\n                {\n                    name:'MODULE_VERTEX_POSITION',\n                    srcHeadVert:srcHeadVert,\n                    srcBodyVert:srcBodyVert\n                });\n\n            uniMin=new CGL.Uniform(shader,'f',module.prefix+'_x',self.min.val);\n            uniMax=new CGL.Uniform(shader,'f',module.prefix+'_y',self.max.val);\n            uniWidth=new CGL.Uniform(shader,'f',module.prefix+'_width',self.width.val);\n            uniExtrude=new CGL.Uniform(shader,'f',module.prefix+'_extrude',self.extrude.val);\n\n        }\n\n        self.trigger.trigger();\n    };\n\n};\n\nOps.Gl.ShaderEffects.VertexExtrudeGlitch.prototype = new Op();\nOps.Gl.ShaderEffects.VertexGlitch=Ops.Gl.ShaderEffects.VertexExtrudeGlitch;\n\n// --------------------------------------------------------------------------\n\nOps.Gl.ShaderEffects.VertexDisplacementMap = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=self.patch.cgl;\n\n    this.name='VertexDisplacementMap';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.texture=this.addInPort(new Port(this,\"texture\",OP_PORT_TYPE_TEXTURE));\n    this.extrude=this.addInPort(new Port(this,\"extrude\",OP_PORT_TYPE_VALUE));\n\n    this.extrude.onValueChanged=function(){ if(uniExtrude)uniExtrude.setValue(self.extrude.val); };\n\n    var shader=null;\n    var uniExtrude,uniTexture;\n    \n    var srcHeadVert=''\n        .endl()+'uniform float {{mod}}_extrude;'\n        .endl()+'uniform sampler2D {{mod}}_texture;'\n        .endl();\n\n    var srcBodyVert=''\n        .endl()+'float {{mod}}_texVal=texture2D( {{mod}}_texture, texCoord ).b+1.0;'\n        // .endl()+'pos.y+={{mod}}_texVal * {{mod}}_extrude;'\n        .endl()+'pos.xyz*={{mod}}_texVal * {{mod}}_extrude;'\n\n        // .endl()+'norm=normalize(norm+normalize(pos.xyz));'\n\n\n        // .endl()+'vec3 tangent;'\n        // .endl()+'vec3 binormal;'\n        // .endl()+'vec3 c1 = cross(norm, vec3(0.0, 0.0, 1.0));'\n        // .endl()+'vec3 c2 = cross(norm, vec3(0.0, 1.0, 0.0));'\n        // .endl()+'if(length(c1)>length(c2)) tangent = c1;'\n        // .endl()+'    else tangent = c2;'\n        // .endl()+'tangent = normalize(tangent);'\n        // .endl()+'binormal = cross(norm, tangent);'\n        // .endl()+'binormal = normalize(binormal);'\n        // .endl()+'vec3 normpos = normalize(pos.xyz);'\n\n        // .endl()+'norm=normalize(tangent*normpos.x + binormal*normpos.y + norm*normpos.z);'\n\n\n        // .endl()+'norm.y+={{mod}}_texVal * {{mod}}_extrude;'\n        .endl();\n\n\n    var srcHeadFrag=''\n        .endl()+'uniform sampler2D {{mod}}_texture;'\n        .endl();\n\n    var srcBodyFrag=''\n        .endl()+'col=texture2D( {{mod}}_texture, texCoord );'\n        .endl();\n\n    var module=null;\n\n    function removeModule()\n    {\n        if(shader && module)\n        {\n            shader.removeModule(module);\n            shader=null;\n        }\n    }\n\n    this.render.onLinkChanged=removeModule;\n\n    this.render.onTriggered=function()\n    {\n        if(cgl.getShader()!=shader)\n        {\n            if(shader) removeModule();\n\n            shader=cgl.getShader();\n\n\n\n            module=shader.addModule(\n                {\n                    name:'MODULE_VERTEX_POSITION',\n                    srcHeadVert:srcHeadVert,\n                    srcBodyVert:srcBodyVert\n                });\n\n            uniTexture=new CGL.Uniform(shader,'t',module.prefix+'_texture',4);\n            uniExtrude=new CGL.Uniform(shader,'f',module.prefix+'_extrude',self.extrude.val);\n\n            // module=shader.addModule(\n            //     {\n            //         name:'MODULE_COLOR',\n            //         srcHeadFrag:srcHeadFrag,\n            //         srcBodyFrag:srcBodyFrag\n            //     });\n\n            // uniTexture=new CGL.Uniform(shader,'t',module.prefix+'_texture',4);\n\n        }\n\n        if(self.texture.val)\n        {\n            cgl.gl.activeTexture(cgl.gl.TEXTURE4);\n            cgl.gl.bindTexture(cgl.gl.TEXTURE_2D, self.texture.val.tex);\n        }\n\n        self.trigger.trigger();\n    };\n\n};\n\nOps.Gl.ShaderEffects.VertexDisplacementMap.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\n\nOps.Gl.ShaderEffects.MeshMorphTargets = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=this.patch.cgl;\n\n    this.name='MeshMorphTargets';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n\n    this.geometry0=this.addInPort(new Port(this,\"geometry 0\",OP_PORT_TYPE_OBJECT));\n    this.geometry1=this.addInPort(new Port(this,\"geometry 1\",OP_PORT_TYPE_OBJECT));\n\n    this.fade=this.addInPort(new Port(this,\"fade\",OP_PORT_TYPE_VALUE,{display:'range'}));\n    this.fade.onValueChanged=function(){ if(uniFade)uniFade.setValue(self.fade.val); };\n\n    var geom=null;\n    var mesh=null;\n    var shader=null;\n    var uniFade;\n    \n    var srcHeadVert=''\n        .endl()+'attribute vec3 attrMorphTargetA;'\n        .endl()+'uniform float {{mod}}_fade;'\n        .endl();\n\n    var srcBodyVert=''\n        .endl()+'   pos = vec4( vPosition*{{mod}}_fade+attrMorphTargetA*(1.0-{{mod}}_fade), 1. );'\n        .endl();\n\n    function removeModule()\n    {\n        if(shader && module)\n        {\n            shader.removeModule(module);\n            shader=null;\n        }\n    }\n\n    this.render.onLinkChanged=removeModule;\n\n    this.render.onTriggered=function()\n    {\n        if(!mesh)return;\n\n\n        if(cgl.getShader()!=shader)\n        {\n            if(shader) removeModule();\n\n            shader=cgl.getShader();\n\n            module=shader.addModule(\n                {\n                    name:'MODULE_VERTEX_POSITION',\n                    srcHeadVert:srcHeadVert,\n                    srcBodyVert:srcBodyVert\n                });\n\n            console.log('morph module inited');\n        \n            uniFade=new CGL.Uniform(shader,'f',module.prefix+'_fade',self.fade.val);\n        }\n\n        mesh.render(cgl.getShader());\n    };\n\n    function rebuild()\n    {\n        if(self.geometry0.val && self.geometry1.val)\n        {\n            console.log('self.geometry0.val',self.geometry0.val);\n            var g=self.geometry0.val;\n            var geom=JSON.parse(JSON.stringify(g));\n\n            console.log('g',geom);\n\n            geom.morphTargets[0]=JSON.parse(JSON.stringify( self.geometry1.val.vertices ));\n\n            console.log('geom.morphTargets[0].length',self.geometry0.val.vertices.length);\n            console.log('geom.morphTargets[0].length',self.geometry1.val.vertices.length);\n\n            mesh=new CGL.Mesh(cgl,geom);\n        }\n        else\n        {\n            mesh=null;\n        }\n    }\n\n    this.geometry0.onValueChanged=rebuild;\n    this.geometry1.onValueChanged=rebuild;\n\n\n};\n\nOps.Gl.ShaderEffects.MeshMorphTargets.prototype = new Op();\nOps.Gl.Meshes.MorphMesh = Ops.Gl.ShaderEffects.MeshMorphTargets;\n\n","// https://github.com/automat/foam-gl\n// http://howlerjs.com/\n//http://learningwebgl.com/lessons/lesson01/index.html\n\nOps.Log = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='logger';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.input=this.addInPort(new Port(this,\"input\"));\n    this.input.val='';\n\n    this.exec=function()\n    {\n        console.log(\"[log] \" + self.input.val);\n    };\n\n    this.exe.onTriggered=this.exec;\n    this.input.onValueChanged=this.exec;\n};\nOps.Log.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.Profiler = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Profiler';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.input=this.addInPort(new Port(this,\"input\"));\n    this.input.val='';\n\n    this.exec=function()\n    {\n        console.log(\"[log] \" + self.input.val);\n    };\n\n    this.exe.onTriggered=this.exec;\n    this.input.onValueChanged=this.exec;\n};\nOps.Profiler.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.CallsPerSecond = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='CallsPerSecond';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.cps=this.addOutPort(new Port(this,\"cps\",OP_PORT_TYPE_VALUE));\n\n    this.timeStart=0;\n    this.cpsCount=0;\n\n    this.exe.onTriggered=function()\n    {\n        if(self.timeStart===0)self.timeStart=Date.now();\n        var now = Date.now();\n\n        if(now-self.timeStart>1000)\n        {\n            self.timeStart=Date.now();\n            // console.log('cps: '+self.cps);\n            self.cps.val=self.cpsCount;\n            self.cpsCount=0;\n        }\n\n        self.cpsCount++;\n    };\n};\nOps.CallsPerSecond.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.Value = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Value';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.v=this.addInPort(new Port(this,\"value\",OP_PORT_TYPE_VALUE));\n\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    function frame(time)\n    {\n        self.updateAnims();\n        self.exec();\n    }\n\n    this.exec=function()\n    {\n        if(self.result.val!=self.v.val) self.result.val=self.v.val;\n    };\n\n    this.exe.onTriggered=this.exec;\n\n    this.v.onValueChanged=this.exec;\n    // this.onAnimFrame=function(){};\n};\n\nOps.Value.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\nOps.Value2d = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Value2d';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.x=this.addInPort(new Port(this,\"value x\",OP_PORT_TYPE_VALUE));\n    this.y=this.addInPort(new Port(this,\"value y\",OP_PORT_TYPE_VALUE));\n\n    this.resultX=this.addOutPort(new Port(this,\"result x\"));\n    this.resultY=this.addOutPort(new Port(this,\"result y\"));\n\n    function frame(time)\n    {\n        self.updateAnims();\n        self.exec();\n    }\n\n    this.exec=function()\n    {\n        if(self.resultX.val!=self.x.val) self.resultX.val=self.x.val;\n        if(self.resultY.val!=self.y.val) self.resultY.val=self.y.val;\n    };\n\n    this.exe.onTriggered=this.exec;\n\n    this.x.onValueChanged=this.exec;\n    this.y.onValueChanged=this.exec;\n    // this.onAnimFrame=function(){};\n};\n\nOps.Value2d.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.Value3d = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Value3d';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.x=this.addInPort(new Port(this,\"value x\",OP_PORT_TYPE_VALUE));\n    this.y=this.addInPort(new Port(this,\"value y\",OP_PORT_TYPE_VALUE));\n    this.z=this.addInPort(new Port(this,\"value z\",OP_PORT_TYPE_VALUE));\n\n    this.resultX=this.addOutPort(new Port(this,\"result x\"));\n    this.resultY=this.addOutPort(new Port(this,\"result y\"));\n    this.resultZ=this.addOutPort(new Port(this,\"result z\"));\n\n    function frame(time)\n    {\n        self.updateAnims();\n        self.exec();\n    }\n\n    this.exec=function()\n    {\n        if(self.resultX.val!=self.x.val) self.resultX.val=self.x.val;\n        if(self.resultY.val!=self.y.val) self.resultY.val=self.y.val;\n        if(self.resultZ.val!=self.z.val) self.resultZ.val=self.z.val;\n    };\n\n    this.exe.onTriggered=this.exec;\n\n    this.x.onValueChanged=this.exec;\n    this.y.onValueChanged=this.exec;\n    this.z.onValueChanged=this.exec;\n\n    // this.onAnimFrame=function(){};\n};\n\nOps.Value3d.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.ColorValue = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    this.name='ColorValue';\n\n    this.g=this.addInPort(new Port(this,\"ignore\",OP_PORT_TYPE_FUNCTION,{display:'readonly'}));\n    this.r=this.addInPort(new Port(this,\"r\",OP_PORT_TYPE_VALUE,{ display:'range', colorPick:'true' }));\n    this.g=this.addInPort(new Port(this,\"g\",OP_PORT_TYPE_VALUE,{ display:'range' }));\n    this.b=this.addInPort(new Port(this,\"b\",OP_PORT_TYPE_VALUE,{ display:'range' }));\n    this.a=this.addInPort(new Port(this,\"a\",OP_PORT_TYPE_VALUE,{ display:'range' }));\n\n    this.outR=this.addOutPort(new Port(this,\"outr\",OP_PORT_TYPE_VALUE));\n    this.outG=this.addOutPort(new Port(this,\"outg\",OP_PORT_TYPE_VALUE));\n    this.outB=this.addOutPort(new Port(this,\"outb\",OP_PORT_TYPE_VALUE));\n    this.outA=this.addOutPort(new Port(this,\"outa\",OP_PORT_TYPE_VALUE));\n\n    var exec=function()\n    {\n        self.outR.val=self.r.val;\n        self.outG.val=self.g.val;\n        self.outB.val=self.b.val;\n        self.outA.val=self.a.val;\n    };\n\n    this.r.onValueChanged=exec;\n    this.g.onValueChanged=exec;\n    this.b.onValueChanged=exec;\n    this.a.onValueChanged=exec;\n};\n\nOps.ColorValue.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.TimeLineTime = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='TimeLineTime';\n    this.theTime=this.addOutPort(new Port(this,\"time\"));\n\n    this.onAnimFrame=function(time)\n    {\n        this.theTime.val=time;\n    };\n\n};\nOps.TimeLineTime.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.TimeLineDelay = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='TimeLineDelay';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.theTime=this.addOutPort(new Port(this,\"time\"));\n    this.delay=this.addInPort(new Port(this,\"delay\"));\n    this.delay.val=0.0;\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.exe.onTriggered=function()\n    {\n        self.patch.timer.pauseEvents(true);\n        self.patch.timer.setDelay(self.delay.val);\n        self.theTime.val=self.patch.timer.getTime();\n        self.trigger.trigger();\n        self.patch.timer.setDelay(0);\n        self.patch.timer.pauseEvents(false);\n\n    };\n\n};\nOps.TimeLineDelay.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.TimeLineDelayFrames = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='TimeLineDelayFrames';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.theTime=this.addOutPort(new Port(this,\"time\"));\n    this.delay=this.addInPort(new Port(this,\"delay\"));\n    this.delay.val=0.0;\n    \n    this.fps=this.addInPort(new Port(this,\"fps\"));\n    this.fps.val=30.0;\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.exe.onTriggered=function()\n    {\n        self.patch.timer.setDelay(self.delay.val/self.fps.val);\n        self.theTime.val=self.patch.timer.getTime();\n        self.trigger.trigger();\n        self.patch.timer.setDelay(0);\n    };\n\n};\nOps.TimeLineDelayFrames.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.TimeLineOverwrite = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='TimeLineOverwrite';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.newTime=this.addInPort(new Port(this,\"new time\"));\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n    this.theTime=this.addOutPort(new Port(this,\"time\"));\n    this.newTime.val=0.0;\n\n    var realTime=0;\n    this.exe.onTriggered=function()\n    {\n        realTime=self.patch.timer.getTime();\n\n        self.patch.timer.overwriteTime=self.newTime.val;\n        self.trigger.trigger();\n        self.patch.timer.overwriteTime=-1;\n    };\n};\n\nOps.TimeLineOverwrite.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.Repeat = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Repeat';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.num=this.addInPort(new Port(this,\"num\"));\n    this.num.val=5;\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n    this.idx=this.addOutPort(new Port(this,\"index\"));\n\n    this.exe.onTriggered=function()\n    {\n        for(var i=self.num.get()-1;i>-1;i--)\n        {\n            self.idx.set(i);\n            self.trigger.trigger();\n        }\n    };\n};\nOps.Repeat.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.ArrayIterator = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='ArrayIterator';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.arr=this.addInPort(new Port(this,\"array\",OP_PORT_TYPE_ARRAY));\n\n    this.num=this.addInPort(new Port(this,\"num\"));\n    this.num.val=5;\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n    this.idx=this.addOutPort(new Port(this,\"index\"));\n    this.val=this.addOutPort(new Port(this,\"value\"));\n\n    this.exe.onTriggered=function()\n    {\n        if(!self.arr.val)return;\n        for(var i in self.arr.val)\n        {\n            self.idx.val=i;\n            self.val.val=self.arr.val[i];\n            self.trigger.trigger();\n        }\n    };\n};\nOps.ArrayIterator.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.IfTrueThen = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='if true then';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.bool=this.addInPort(new Port(this,\"boolean\"));\n    this.bool.val=false;\n\n    this.triggerThen=this.addOutPort(new Port(this,\"then\",OP_PORT_TYPE_FUNCTION));\n    this.triggerElse=this.addOutPort(new Port(this,\"else\",OP_PORT_TYPE_FUNCTION));\n\n    this.exe.onTriggered=function()\n    {\n        if(self.bool.val || self.bool.val>=1 )\n        {\n            self.triggerThen.trigger();\n        }\n        else\n        {\n            self.triggerElse.trigger();\n        }\n    };\n};\n\nOps.IfTrueThen.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.IfBetweenThen = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='if between then';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.number=this.addInPort(new Port(this,\"number\"));\n    this.number.val=0;\n\n    this.min=this.addInPort(new Port(this,\"min\"));\n    this.min.val=0;\n\n    this.max=this.addInPort(new Port(this,\"max\"));\n    this.max.val=1;\n\n    this.triggerThen=this.addOutPort(new Port(this,\"then\",OP_PORT_TYPE_FUNCTION));\n    this.triggerElse=this.addOutPort(new Port(this,\"else\",OP_PORT_TYPE_FUNCTION));\n\n    this.exe.onTriggered=function()\n    {\n        if(self.number.get()>=self.min.get() && self.number.get()<self.max.get()) self.triggerThen.trigger();\n            else self.triggerElse.trigger();\n    };\n};\n\nOps.IfBetweenThen.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.ToggleBool = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='ToggleBool';\n\n    this.bool=this.addInPort(new Port(this,\"boolean\"));\n    this.bool.val=false;\n    this.boolOut=this.addOutPort(new Port(this,\"result\"));\n    this.boolOut.val=true;\n\n    this.bool.onValueChanged=function()\n    {\n        this.boolOut=!this.bool.val;\n    };\n};\n\nOps.ToggleBool.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.Group = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='group';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.triggers=[];\n\n    for(var i=0;i<10;i++)\n    {\n        this.triggers.push( this.addOutPort(new Port(this,\"trigger \"+i,OP_PORT_TYPE_FUNCTION)) );\n    }\n\n    this.exe.onTriggered=function()\n    {\n        for(var i in self.triggers)\n            self.triggers[i].trigger();\n    };\n\n    this.uiAttribs.warning='\"group\" is deprecated, please use \"sequence now\"';\n\n};\nOps.Group.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.Sequence = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='sequence';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.triggers=[];\n\n    for(var i=0;i<10;i++)\n    {\n        this.triggers.push( this.addOutPort(new Port(this,\"trigger \"+i,OP_PORT_TYPE_FUNCTION)) );\n    }\n\n    this.exe.onTriggered=function()\n    {\n        for(var i=0;i<self.triggers.length;i++)\n            self.triggers[i].trigger();\n    };\n\n};\nOps.Sequence.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.TimedSequence = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='TimedSequence';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.current=this.addInPort(new Port(this,\"current\",OP_PORT_TYPE_VALUE));\n    this.current.val=0;\n\n    this.overwriteTime=this.addInPort(new Port(this,\"overwriteTime\",OP_PORT_TYPE_VALUE,{ display:'bool' }));\n    this.overwriteTime.val=false;\n    this.ignoreInSubPatch=this.addInPort(new Port(this,\"ignoreInSubPatch\",OP_PORT_TYPE_VALUE,{display:\"bool\"}));\n    this.ignoreInSubPatch.val=false;\n\n    this.triggerAlways=this.addOutPort(new Port(this,\"triggerAlways\",OP_PORT_TYPE_FUNCTION));\n    this.currentKeyTime=this.addOutPort(new Port(this,\"currentKeyTime\",OP_PORT_TYPE_VALUE));\n\n    var triggers=[];\n\n    for(var i=0;i<30;i++)\n    {\n        triggers.push( this.addOutPort(new Port(this,\"trigger \"+i,OP_PORT_TYPE_FUNCTION)) );\n    }\n\n    this.onLoaded=function()\n    {\n\n        var i=0;\n        // console.log('TimedSequence loading---------------------------------------------');\n        // for(i=0;i<triggers.length;i++)\n        // {\n        //     cgl.gl.clear(cgl.gl.COLOR_BUFFER_BIT | cgl.gl.DEPTH_BUFFER_BIT);\n        //     triggers[i].trigger();\n        // }\n\n        // if(self.current.anim)\n        // {\n        //     for(i=0;i<self.current.anim.keys.length;i++)\n        //     {\n        //         preRenderTimes.push(self.current.anim.keys[i].time);\n        //         // var ii=i;\n        //         // cgl.gl.clear(cgl.gl.COLOR_BUFFER_BIT | cgl.gl.DEPTH_BUFFER_BIT);\n\n        //         // var time=self.current.anim.keys[ii].time+0.001;\n        //         // self.exe.onTriggered(time);\n        //         // console.log('timed pre init...');\n        //         // cgl.gl.flush();\n        //     }\n        // }\n\n        // self.triggerAlways.trigger();\n        // console.log('TimedSequence loaded---------------------------------------------');\n                \n    };\n\n    var lastUiValue=-1;\n    this.exe.onTriggered=function(_time)\n    {\n\n        if(window.gui)\n        {\n                    \n            if(self.current.val!=lastUiValue)\n            {\n                lastUiValue=parseInt(self.current.val,10);\n                for(var spl=0;spl<triggers.length;spl++)\n                {\n                    if(spl==lastUiValue) triggers[spl].setUiActiveState(true);\n                        else triggers[spl].setUiActiveState(false);\n                }\n                \n            }\n        }\n\n        if(self.current.anim)\n        {\n            var time=_time;\n            if(_time===undefined) time=self.current.parent.patch.timer.getTime();\n\n            self.currentKeyTime.val=time-self.current.anim.getKey(time).time;\n\n            if(self.current.isAnimated())\n            {\n                if(self.overwriteTime.val)\n                {\n                    self.current.parent.patch.timer.overwriteTime=self.currentKeyTime.val;  // todo  why current ? why  not self ?\n                }\n            }\n        }\n\n        if(self.patch.gui && self.ignoreInSubPatch.val )\n        {\n            for(var i=0;i<triggers.length;i++)\n            {\n                for(var spl=0;spl<triggers[i].links.length;spl++)\n                {\n                    if(triggers[i].links[spl])\n                    {\n                        if(triggers[i].links[spl].portIn.parent.patchId)\n                        {\n                            if(gui.patch().getCurrentSubPatch() == triggers[i].links[spl].portIn.parent.patchId.val)\n                            {\n                                self.patch.timer.overwriteTime=-1;\n                                triggers[i].trigger();\n                                return;\n                            }\n                            // console.log(triggers[i].links[spl].portIn.parent.patchId.val);\n                        }\n                    }\n                }\n            }\n        }\n\n        var outIndex=Math.round(self.current.val-0.5);\n        if(outIndex>=0 && outIndex<triggers.length)\n        {\n            triggers[outIndex].trigger();\n        }\n\n        self.patch.timer.overwriteTime=-1;\n        self.triggerAlways.trigger();\n    };\n\n};\nOps.TimedSequence.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.Interval = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='Interval';\n    this.timeOutId=-1;\n    this.interval=this.addInPort(new Port(this,\"interval\"));\n    this.interval.val=1000;\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.exec=function()\n    {\n        if(this.timeOutId!=-1)return;\n        var self=this;\n\n        this.timeOutId=setTimeout(function()\n        {\n            self.timeOutId=-1;\n            self.trigger.trigger();\n            self.exec();\n        },\n        this.interval.val );\n    };\n\n    this.exec();\n\n};\n\nOps.Interval.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.Anim={};\n\nOps.Anim.SinusAnim = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='SinusAnim';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.phase=this.addInPort(new Port(this,\"phase\",OP_PORT_TYPE_VALUE));\n    this.mul=this.addInPort(new Port(this,\"frequency\",OP_PORT_TYPE_VALUE));\n    this.amplitude=this.addInPort(new Port(this,\"amplitude\",OP_PORT_TYPE_VALUE));\n\n    var self=this;\n\n    this.exe.onTriggered=function()\n    {\n        self.result.val = self.amplitude.val*Math.sin( ( Date.now()/1000.0 * self.mul.val ) + parseFloat(self.phase.val) );\n    };\n\n    this.mul.val=1.0;\n    this.amplitude.val=1.0;\n    this.phase.val=1;\n    this.exe.onTriggered();\n};\n\nOps.Anim.SinusAnim.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Anim.RelativeTime = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='RelativeTime';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    var self=this;\n    var startTime=Date.now()/1000.0;\n\n    this.exe.onTriggered=function()\n    {\n        self.result.val=Date.now()/1000.0-startTime;\n    };\n\n    this.exe.onTriggered();\n\n};\n\nOps.Anim.RelativeTime.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Anim.Frequency = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='Frequency';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.frequency=this.addInPort(new Port(this,\"frequency\",OP_PORT_TYPE_VALUE));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    var self=this;\n    var startTime=0;\n\n    this.exe.onTriggered=function()\n    {\n        if(Date.now()-startTime>self.frequency.val)\n        {\n            startTime=Date.now();\n            self.trigger.trigger();\n        }\n    };\n};\n\nOps.Anim.Frequency.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\nOps.Anim.TimeDiff = function()\n{\n    Op.apply(this, arguments);\n\n    this.name='TimeDiff';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    var self=this;\n    var lastTime=Date.now();\n\n    this.exe.onTriggered=function()\n    {\n        self.result.val=(Date.now()-lastTime);\n        lastTime=Date.now();\n        self.trigger.trigger();\n    };\n\n    this.exe.onTriggered();\n\n};\n\nOps.Anim.TimeDiff.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nvar cableVars={};\n\nOps.Anim.Variable = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='Variable';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n\n    this.varName=this.addInPort(new Port(this,\"name\"));\n    this.val=this.addInPort(new Port(this,\"value\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    function changed()\n    {\n        cableVars[self.varName.val]=self.val.val;\n        self.result.val=self.val.val;\n    }\n\n    function readValue()\n    {\n        self.val.val=cableVars[self.varName.val];\n    }\n\n    this.val.onValueChanged=changed;\n    this.varName.onValueChanged=changed;\n    this.exe.onTriggered=readValue;\n};\n\nOps.Anim.Variable.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.String=Ops.String || {};\n\nOps.String.concat = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='concat';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.string1=this.addInPort(new Port(this,\"string1\",OP_PORT_TYPE_VALUE,{type:'string'}));\n    this.string2=this.addInPort(new Port(this,\"string2\",OP_PORT_TYPE_VALUE,{type:'string'}));\n\n    this.exec= function()\n    {\n        self.result.val=self.string1.val+self.string2.val;\n    };\n\n    this.string1.onValueChanged=this.exec;\n    this.string2.onValueChanged=this.exec;\n\n    this.string1.val='wurst';\n    this.string2.val='tuete';\n};\n\nOps.String.concat.prototype = new Op();\n\n// ----------------------------------------------------------------------\n\nOps.LoadingStatus = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=this.patch.cgl;\n\n    this.name='loadingStatus';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.finished=this.addOutPort(new Port(this,\"finished\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"status\",OP_PORT_TYPE_VALUE));\n    this.preRenderStatus=this.addOutPort(new Port(this,\"preRenderStatus\",OP_PORT_TYPE_VALUE));\n    this.preRenderTimeFrames=this.addInPort(new Port(this,\"preRenderTimes\",OP_PORT_TYPE_VALUE));\n    this.preRenderStatus.val=0;\n    this.numAssets=this.addOutPort(new Port(this,\"numAssets\",OP_PORT_TYPE_VALUE));\n    this.loading=this.addOutPort(new Port(this,\"loading\",OP_PORT_TYPE_FUNCTION));\n\n    var finishedLoading=false;\n\n    var preRenderInc=0;\n    var preRenderDone=0;\n    var preRenderTime=0;\n    var preRenderTimes=[];\n    var firstTime=true;\n\n    var identTranslate=vec3.create();\n    vec3.set(identTranslate, 0,0,-2);\n\n    var preRenderAnimFrame=function(time)\n    {\n        self.patch.timer.setTime(preRenderTime);\n        self.finished.trigger();\n        // cgl.gl.flush();\n\n        Ops.Gl.Renderer.renderStart(cgl,identTranslate);\n\n        cgl.gl.clearColor(0,0,0,1);\n        cgl.gl.clear(cgl.gl.COLOR_BUFFER_BIT | cgl.gl.DEPTH_BUFFER_BIT);\n\n        self.loading.trigger();\n        // console.log('pre anim');\n        \n        Ops.Gl.Renderer.renderEnd(cgl);\n        preRenderDone=preRenderInc;\n    };\n\n    this.onAnimFrame=function(){};\n\n    function checkPreRender()\n    {\n        // console.log(' checkprerender ',preRenderTimes.length,preRenderInc,preRenderDone);\n\n        if(preRenderTimes.length>0)\n        {\n            if(preRenderInc==preRenderDone)\n            {\n                preRenderInc++;\n                preRenderTime=preRenderTimes[preRenderInc];\n            }\n        }\n        self.preRenderStatus.val=preRenderInc/preRenderTimes.length;\n\n        if(preRenderTimes.length===0 || preRenderDone==preRenderTimes.length-1 )\n        {\n            // self.patch.timer.setTime(0);\n            // self.patch.timer.pause();\n\n            self.onAnimFrame=function(){};\n            CGL.decrementLoadingAssets();\n            finishedLoading=true;\n\n        }\n        else\n            setTimeout(checkPreRender,30);\n\n    }\n\n    this.exe.onTriggered= function()\n    {\n        self.result.val=CGL.getLoadingStatus();\n        self.numAssets.val=CGL.numMaxLoadingAssets;\n\n        if(!finishedLoading && this.onAnimFrame!=preRenderAnimFrame)\n        {\n            self.onAnimFrame=preRenderAnimFrame;\n        }\n\n        if(finishedLoading)\n        {\n            if(firstTime)\n            {\n                CGL.incrementLoadingAssets();\n                console.log('finished loading complete...', CGL.getLoadingStatus());\n                self.patch.timer.setTime(0);\n                self.patch.timer.play();\n                CGL.decrementLoadingAssets();\n                        \n                firstTime=false;\n            }\n\n            self.finished.trigger();\n        }\n        else\n        {\n            self.loading.trigger();\n            self.patch.timer.pause();\n\n            if(self.result.val>=1.0 || CGL.numMaxLoadingAssets===0)\n            {\n                CGL.incrementLoadingAssets();\n\n                var i=0;\n                for(i=0;i<self.patch.ops.length;i++)\n                {\n                    if(self.patch.ops[i].onLoaded)self.patch.ops[i].onLoaded();\n                }\n\n                // cgl.canvasWidth=cgl.canvas.clientWidth;\n                // cgl.canvasHeight=cgl.canvas.clientHeight;\n        \n                if(self.preRenderTimeFrames.isAnimated())\n                {\n                    for(i=0;i<self.preRenderTimeFrames.anim.keys.length;i++)\n                        preRenderTimes.push( self.preRenderTimeFrames.anim.keys[i].time );\n                }\n                preRenderTimes.push(0);\n\n                checkPreRender();\n            }\n        }\n    };\n};\n\nOps.LoadingStatus.prototype = new Op();\n\n// ---------------\n\nOps.TriggerCounter = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='TriggerCounter';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.reset=this.addInPort(new Port(this,\"reset\",OP_PORT_TYPE_FUNCTION));\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n    this.num=this.addOutPort(new Port(this,\"timesTriggered\",OP_PORT_TYPE_VALUE));\n\n    var num=0;\n\n    this.exe.onTriggered= function()\n    {\n        num++;\n        self.num.val=num;\n        self.trigger.trigger();\n    };\n    this.reset.onTriggered= function()\n    {\n        num=0;\n        self.num.val=num;\n    };\n\n};\n\nOps.TriggerCounter.prototype = new Op();\n\n","\nOps.Json=Ops.Json || {};\n\n\nOps.Json.jsonValue = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='jsonValue';\n\n    this.data=this.addInPort(new Port(this,\"data\",OP_PORT_TYPE_OBJECT ));\n    this.key=this.addInPort(new Port(this,\"key\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.data.onValueChanged=function()\n    {\n        if(self.data.val && self.data.val.hasOwnProperty(self.key.val))\n        {\n            self.result.val=self.data.val[self.key.val];\n        }\n    };\n};\n\nOps.Json.jsonValue.prototype = new Op();\n\n// -------------------------------------------------------------\n\nOps.Json.jsonFile = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='jsonFile';\n\n    this.filename=this.addInPort(new Port(this,\"file\",OP_PORT_TYPE_VALUE,{ display:'file',type:'string',filter:'json' } ));\n    this.result=this.addOutPort(new Port(this,\"result\",OP_PORT_TYPE_OBJECT));\n\n    var reload=function()\n    {\n        ajaxRequest(self.patch.getFilePath(self.filename.val),function(data)\n        {\n            self.result.val=data;\n            console.log('data',data);\n\n        });\n    };\n\n    this.filename.onValueChanged=reload;\n};\n\nOps.Json.jsonFile.prototype = new Op();\n\n// -------------------------------------------------------------\n","\nOps.Json3d=Ops.Json3d || {};\n\n\n\nOps.Json3d.json3dFile = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=this.patch.cgl;\n\n    this.name='json3dFile';\n    var scene=new CABLES.Variable();\n\n    cgl.frameStore.currentScene=null;\n\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.filename=this.addInPort(new Port(this,\"file\",OP_PORT_TYPE_VALUE,{ display:'file',type:'string',filter:'json' } ));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    function render()\n    {\n        var oldScene=cgl.frameStore.currentScene;\n        cgl.frameStore.currentScene=scene;\n        self.trigger.trigger();\n        cgl.frameStore.currentScene=oldScene;\n    }\n\n    this.exe.onTriggered=render;\n\n    var maxx=-3;\n    var row=0;\n    function addChild(x,y,parentOp,parentPort,ch)\n    {\n\n        if(ch.hasOwnProperty('transformation'))\n        {\n            maxx=Math.max(x,maxx);\n\n            var posx=self.uiAttribs.translate.x+x*130;\n            if(ch.children && ch.children.length>1) posx=posx+(ch.children.length+1)*130/2;// center\n            var posy=self.uiAttribs.translate.y+y*50;\n\n            var transOp=self.patch.addOp('Ops.Gl.Matrix.MatrixMul',{translate:{x:posx,y:posy}});\n            var mat=ch.transformation;\n            mat4.transpose(mat,mat);\n            transOp.matrix.val=ch.transformation;\n\n            if(ch.name)\n            {\n                transOp.uiAttribs.title=transOp.name=ch.name;\n            }\n\n            if(ch.children)console.log('ch ',ch.name,ch.children.length);\n                    \n\n            self.patch.link(parentOp,parentPort,transOp,'render');\n\n            var i=0;\n            if(ch.hasOwnProperty('meshes'))\n            {\n                for(i=0;i<ch.meshes.length;i++)\n                {\n                    var index=ch.meshes[i];\n\n                    var meshOp=self.patch.addOp('Ops.Json3d.Mesh',{translate:{x:posx,y:posy+50}});\n                    meshOp.index.val=index;\n\n                    meshOp.uiAttribs.title=meshOp.name=transOp.name+' Mesh';\n                    // scene.meshes[index].name=meshOp.name;\n\n                    self.patch.link(transOp,'trigger',meshOp,'render');\n                }\n            }\n\n            if(ch.hasOwnProperty('children'))\n            {\n                y++;\n                for(i=0;i<ch.children.length;i++)\n                {\n                    var xx=maxx;\n                    if(ch.children.length>1)xx++;\n                    addChild(xx,y,transOp,'trigger',ch.children[i]);\n                }\n            }\n        }\n    }\n\n\n\n    var reload=function()\n    {\n        if(!self.filename.val)return;\n\n        CGL.incrementLoadingAssets();\n\n        // console.log('load ajax'+self.patch.getFilePath(self.filename.val));\n\n        CABLES.ajax(self.patch.getFilePath(self.filename.val),\n            function(err,_data,xhr)\n            {\n\n                if(err)\n                {\n                    console.log('ajax error:',err);\n                    CGL.decrementLoadingAssets();\n                    return;\n                }\n                var data=JSON.parse(_data);\n                scene.setValue(data);\n\n                if(!self.trigger.isLinked())\n                {\n                    console.log('data.meshes '+data.meshes.length);\n                    var root=self.patch.addOp('Ops.Sequence',{translate:{x:self.uiAttribs.translate.x,y:self.uiAttribs.translate.y+50}});\n                    self.patch.link(self,'trigger',root,'exe');\n\n                    for(var i=0;i<data.rootnode.children.length;i++)\n                    {\n                        addChild(maxx-2,3,root,'trigger 0',data.rootnode.children[i]);\n                    }\n                }\n\n                render();\n                CGL.decrementLoadingAssets();\n            });\n\n    };\n\n    this.filename.onValueChanged=reload;\n};\n\nOps.Json3d.json3dFile.prototype = new Op();\n\n\n\n\n// -------------------------------------------------------------\n\nOps.Json3d.Mesh=function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    var cgl=this.patch.cgl;\n\n    this.name='json3d Mesh';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION ));\n    this.index=this.addInPort(new Port(this,\"mesh index\",OP_PORT_TYPE_VALUE,{type:'string'} ));\n    this.centerPivot=this.addInPort(new Port(this,\"center pivot\",OP_PORT_TYPE_VALUE,{display:'bool'} ));\n    this.centerPivot.val=false;\n\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.geometryOut=this.addOutPort(new Port(this,\"geometry\",OP_PORT_TYPE_OBJECT ));\n    this.geometryOut.ignoreValueSerialize=true;\n\n    var mesh=null;\n    var currentIndex=-1;\n\n    function render()\n    {\n        if(!mesh && cgl.frameStore.currentScene && cgl.frameStore.currentScene.getValue() || currentIndex!=self.index.val)\n        {\n            reload();\n        }\n        if(mesh!==null)\n            mesh.render(cgl.getShader());\n\n        self.trigger.trigger();\n    }\n\n    function reload()\n    {\n        if(cgl.frameStore.currentScene && cgl.frameStore.currentScene.getValue())\n        {\n            // console.log(' has '+cgl.frameStore.currentScene.getValue().meshes.length+' meshes ');\n            // console.log('reload');\n            self.uiAttr({warning:''});\n            self.uiAttr({info:''});\n\n            var jsonMesh=null;\n\n            currentIndex=self.index.val;\n\n            if(isNumeric(self.index.val))\n            {\n                if(self.index.val<0 || self.index.val>=cgl.frameStore.currentScene.getValue().meshes.length)\n                {\n                    self.uiAttr({warning:'mesh not found - index out of range '});\n                    return;\n                }\n\n                jsonMesh=cgl.frameStore.currentScene.getValue().meshes[parseInt(self.index.val,10) ];\n            }\n            else\n            {\n                var scene=cgl.frameStore.currentScene.getValue();\n            }\n\n            if(!jsonMesh)\n            {\n                mesh=null;\n                self.uiAttr({warning:'mesh not found'});\n                return;\n            }\n            self.uiAttribs.warning='';\n\n            var i=0;\n\n            var verts=JSON.parse(JSON.stringify(jsonMesh.vertices));\n\n            if(self.centerPivot.val)\n            {\n                var max=[-998999999,-998999999,-998999999];\n                var min=[998999999,998999999,998999999];\n\n                for(i=0;i<verts.length;i+=3)\n                {\n                    max[0]=Math.max( max[0] , verts[i+0] );\n                    max[1]=Math.max( max[1] , verts[i+1] );\n                    max[2]=Math.max( max[2] , verts[i+2] );\n\n                    min[0]=Math.min( min[0] , verts[i+0] );\n                    min[1]=Math.min( min[1] , verts[i+1] );\n                    min[2]=Math.min( min[2] , verts[i+2] );\n                }\n\n                console.log('max',max);\n                console.log('min',min);\n\n                var off=[\n                    Math.abs(Math.abs(max[0])-Math.abs(min[0])),\n                    Math.abs(Math.abs(max[1])-Math.abs(min[1])),\n                    Math.abs(Math.abs(max[2])-Math.abs(min[2]))\n                ];\n\n                console.log('off',off);\n\n                for(i=0;i<verts.length;i+=3)\n                {\n                    verts[i+0]+=(off[0] );\n                    verts[i+1]+=(off[1] );\n                    verts[i+2]+=(off[2] );\n                }\n\n\n\n                max=[-998999999,-998999999,-998999999];\n                min=[998999999,998999999,998999999];\n\n                for(i=0;i<verts.length;i+=3)\n                {\n                    max[0]=Math.max( max[0] , verts[i+0] );\n                    max[1]=Math.max( max[1] , verts[i+1] );\n                    max[2]=Math.max( max[2] , verts[i+2] );\n\n                    min[0]=Math.min( min[0] , verts[i+0] );\n                    min[1]=Math.min( min[1] , verts[i+1] );\n                    min[2]=Math.min( min[2] , verts[i+2] );\n                }\n\n                console.log('after max',max);\n                console.log('after min',min);\n\n\n\n\n            }\n\n\n            var geom=new CGL.Geometry();\n            geom.calcNormals=true;\n            geom.vertices=verts;\n            geom.vertexNormals=jsonMesh.normals;\n            if(jsonMesh.texturecoords) geom.texCoords = jsonMesh.texturecoords[0];\n            geom.verticesIndices=[];\n\n            for(i=0;i<jsonMesh.faces.length;i++)\n                geom.verticesIndices=geom.verticesIndices.concat(jsonMesh.faces[i]);\n\n            var nfo='';\n            nfo += geom.verticesIndices.length+' faces <br/>';\n            nfo += geom.vertices.length+' vertices <br/>';\n            nfo += geom.texCoords.length+' texturecoords <br/>';\n            nfo += geom.vertexNormals.length+' normals <br/>';\n            self.uiAttr({info:nfo});\n\n            self.geometryOut.val=geom;\n            mesh=new CGL.Mesh(cgl,geom);\n        }\n        else\n        {\n            // console.log('no meshes found');\n            // console.log(cgl.frameStore.currentScene);\n        }\n    }\n\n    this.render.onTriggered=render;\n    this.centerPivot.onValueChanged=function()\n    {\n        mesh=null;\n    };\n    // this.index.onValueChanged=reload;\n\n};\n\nOps.Json3d.Mesh.prototype = new Op();\n\n\n\n\n\n","\n// TODO: CLAMP!\n\nOps.Math=Ops.Math || {};\n\n\nOps.Math.Random = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='random';\n    this.exe=this.addInPort(new Port(this,\"exe\",OP_PORT_TYPE_FUNCTION));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.minusPlusOne=this.addInPort(new Port(this,\"0 to x / -x to x \",OP_PORT_TYPE_VALUE,{display:'bool'}));\n\n    this.max=this.addInPort(new Port(this,\"max\"));\n\n    this.exe.onTriggered=function()\n    {\n        if(self.minusPlusOne.val) self.result.val=(Math.random()*self.max.val)*2-self.max.val/2;\n            else self.result.val=Math.random()*self.max.val;\n    };\n\n    this.exe.onTriggered();\n    this.max.val=1.0;\n};\n\nOps.Math.Random.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Clamp = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='Clamp';\n    this.val=this.addInPort(new Port(this,\"val\"));\n    this.min=this.addInPort(new Port(this,\"min\"));\n    this.max=this.addInPort(new Port(this,\"max\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    function clamp()\n    {\n        self.updateAnims();\n        self.result.val= Math.min(Math.max(self.val.val, self.min.val), self.max.val);\n    }\n\n    this.min.val=0;\n    this.max.val=1;\n\n    this.val.onValueChanged=clamp;\n    this.min.onValueChanged=clamp;\n    this.max.onValueChanged=clamp;\n\n    this.val.val=0.5;\n};\n\nOps.Math.Clamp.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\nOps.Math.SmoothStep = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='SmoothStep';\n    this.val=this.addInPort(new Port(this,\"val\"));\n    this.min=this.addInPort(new Port(this,\"min\"));\n    this.max=this.addInPort(new Port(this,\"max\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    function smoothstep ()\n    {\n        self.updateAnims();\n        var x = Math.max(0,Math.min(1,(self.val.val-self.min.val)/(self.max.val-self.min.val)));\n        self.result.val=x*x*(3-2*x);\n    }\n\n    this.min.val=0;\n    this.max.val=1;\n    \n    this.val.onValueChanged=smoothstep;\n    this.min.onValueChanged=smoothstep;\n    this.max.onValueChanged=smoothstep;\n\n    this.val.val=0.5;\n};\n\nOps.Math.SmoothStep.prototype = new Op();\n\n// ----------------------------------------------------------------------------\n\nOps.Math.SmootherStep = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='SmootherStep';\n    this.val=this.addInPort(new Port(this,\"val\"));\n    this.min=this.addInPort(new Port(this,\"min\"));\n    this.max=this.addInPort(new Port(this,\"max\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    function smootherstep ()\n    {\n        var x = Math.max(0, Math.min(1, (self.val.val-self.min.val)/(self.max.val-self.min.val)));\n        self.result.val= x*x*x*(x*(x*6 - 15) + 10); // smootherstep\n        // return linear(self.val.val,this,key2);\n    }\n\n    this.min.val=0;\n    this.max.val=1;\n    \n    this.val.onValueChanged=smootherstep;\n    this.min.onValueChanged=smootherstep;\n    this.max.onValueChanged=smootherstep;\n\n    this.val.val=0.5;\n};\n\nOps.Math.SmootherStep.prototype = new Op();\n\n// ----------------------------------------------------------------------------\n\n\nOps.Math.MapRange = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='map value range';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.v=this.addInPort(new Port(this,\"value\"));\n    this.old_min=this.addInPort(new Port(this,\"old min\"));\n    this.old_max=this.addInPort(new Port(this,\"old max\"));\n    this.new_min=this.addInPort(new Port(this,\"new min\"));\n    this.new_max=this.addInPort(new Port(this,\"new max\"));\n\n    this.exec= function()\n    {\n        self.updateAnims();\n\n        if(self.v.val>self.old_max.val)\n        {\n            self.result.val=self.new_max.val;\n            return;\n        }\n        else\n        if(self.v.val<self.old_min.val)\n        {\n            self.result.val=self.new_min.val;\n            return;\n        }\n\n        var nMin=parseFloat(self.new_min.val);\n        var nMax=parseFloat(self.new_max.val);\n        var oMin=parseFloat(self.old_min.val);\n        var oMax=parseFloat(self.old_max.val);\n        var x=parseFloat(self.v.val);\n\n        var reverseInput = false;\n        var oldMin = Math.min( oMin, oMax );\n        var oldMax = Math.max( oMin, oMax );\n        if(oldMin!= oMin) reverseInput = true;\n\n        var reverseOutput = false;\n        var newMin = Math.min( nMin, nMax );\n        var newMax = Math.max( nMin, nMax );\n        if(newMin != nMin) reverseOutput = true;\n\n        var portion=0;\n\n        if(reverseInput) portion = (oldMax-x)*(newMax-newMin)/(oldMax-oldMin);\n            else portion = (x-oldMin)*(newMax-newMin)/(oldMax-oldMin);\n        \n        if(reverseOutput) self.result.val = newMax - portion;\n            else self.result.val = portion + newMin;\n\n    };\n\n    this.v.val=0;\n    this.old_min.val=-1;\n    this.old_max.val=1;\n    this.new_min.val=0;\n    this.new_max.val=1;\n\n\n    this.v.onValueChanged=this.exec;\n    this.old_min.onValueChanged=this.exec;\n    this.old_max.onValueChanged=this.exec;\n    this.new_min.onValueChanged=this.exec;\n    this.new_max.onValueChanged=this.exec;\n\n    this.exec();\n\n};\n\nOps.Math.MapRange.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Abs = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    this.name='abs';\n    this.number=this.addInPort(new Port(this,\"number\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.number.onValueChanged=function()\n    {\n        self.result.val=Math.abs(self.number.val);\n    };\n};\n\nOps.Math.Abs.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Sin = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n    this.name='Sinus';\n    this.number=this.addInPort(new Port(this,\"number\"));\n    this.result=this.addOutPort(new Port(this,\"result\"));\n\n    this.number.onValueChanged=function()\n    {\n        self.result.val=Math.sin(self.number.val);\n    };\n};\n\nOps.Math.Sin.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\nOps.Math.SmoothStep = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='SmoothStep';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number=this.addInPort(new Port(this,\"number\"));\n    this.min=this.addInPort(new Port(this,\"min\"));\n    this.max=this.addInPort(new Port(this,\"max\"));\n\n    var min=0;\n    var max=1;\n    var subAdd=0;\n\n    this.exec= function()\n    {\n        var val=self.number.val;\n\n        // todo negative min ?\n\n        var x = Math.max(0, Math.min(1, (val-min)/(max-min)));\n        self.result.val= x*x*(3 - 2*x); // smoothstep\n        // return x*x*x*(x*(x*6 - 15) + 10); // smootherstep\n\n    };\n\n    this.min.val=0;\n    this.max.val=1;\n    this.number.val=0;\n\n    function setValues()\n    {\n        min=self.min.val;\n        max=self.max.val;\n\n        // if(min<0)\n        // {\n        //     subAdd=min*-1;\n        //     min+=subAdd;\n        //     max+=subAdd;\n        // }\n        // else subAdd=0;\n    }\n\n    this.number.onValueChanged=this.exec;\n    this.max.onValueChanged=setValues;\n    this.min.onValueChanged=setValues;\n\n    setValues();\n};\n\nOps.Math.SmoothStep.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\nOps.Math.Sum = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='sum';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.updateAnims();\n        var v=parseFloat(self.number1.get())+parseFloat(self.number2.get());\n        if(!isNaN(v)) self.result.set( v );\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n\n    this.number1.set(1);\n    this.number2.set(1);\n};\n\nOps.Math.Sum.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Subtract = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='subtract';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    function exec()\n    {\n        self.updateAnims();\n        var v=parseFloat(self.number1.get())-parseFloat(self.number2.get());\n        if(!isNaN(v)) self.result.set( v );\n    }\n\n    this.number1.onValueChanged=exec;\n    this.number2.onValueChanged=exec;\n\n    this.number1.set(1);\n    this.number2.set(1);\n};\n\nOps.Math.Subtract.prototype = new Op();\n\n\n\n// ---------------------------------------------------------------------------\n\n\nOps.Math.Multiply = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='multiply';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.updateAnims();\n        self.result.set(self.number1.get()*self.number2.get() );\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n\n    this.number1.set(1);\n    this.number2.set(2);\n};\n\nOps.Math.Multiply.prototype = new Op();\n\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Modulo = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Modulo';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n    this.pingpong=this.addInPort(new Port(this,\"pingpong\",OP_PORT_TYPE_VALUE,{display:'bool'}));\n\n    var doPingPong=false;\n\n    this.exec= function()\n    {\n        self.updateAnims();\n\n        if(doPingPong)\n        {\n            self.result.val=(self.number1.val%self.number2.val*2) ;\n            if(self.result.val>self.number2.val)\n                self.result.val=self.number2.val*2.0-self.result.val;\n\n            return;\n        }\n        \n        self.result.val=self.number1.val%self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n\n    this.number1.val=1;\n    this.number2.val=2;\n\n    this.pingpong.onValueChanged=function()\n    {\n        doPingPong=self.pingpong.val;\n    };\n\n};\n\nOps.Math.Modulo.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\nOps.Math.Divide = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Divide';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.updateAnims();\n        self.result.val=self.number1.val/self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Divide.prototype = new Op();\n\n// ---------------------------------------------------------------------------\n\n\nOps.Math.Compare={};\n\n\n\n\nOps.Math.Compare.IsEven = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='isEven';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n\n    this.exec= function()\n    {\n        self.result.val=!( self.number1.val & 1 );\n    };\n\n    this.number1.onValueChanged=this.exec;\n};\n\nOps.Math.Compare.IsEven.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Math.Compare.Greater = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Greater';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.updateAnims();\n        self.result.val=self.number1.val>self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Compare.Greater.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Math.Compare.Between = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Between';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number=this.addInPort(new Port(this,\"value\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n    this.number.val=2.0;\n    this.number1.val=1.0;\n    this.number2.val=3.0;\n\n    this.exec= function()\n    {\n        self.updateAnims();\n        self.result.val=\n            (\n                self.number.val>Math.min(self.number1.val,self.number2.val) &&\n                self.number.val<Math.max(self.number1.val,self.number2.val)\n            );\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n    this.number.onValueChanged=this.exec;\n};\nOps.Math.Compare.Between.prototype = new Op();\n\n// --------------------------------------------------------------------------\n\n\nOps.Math.Compare.Lesser = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Lesser';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.updateAnims();\n        self.result.val=self.number1.val<self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n\n};\n\nOps.Math.Compare.Lesser.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n\n\nOps.Math.Compare.Equals = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    this.name='Equals';\n    this.result=this.addOutPort(new Port(this,\"result\"));\n    this.number1=this.addInPort(new Port(this,\"number1\"));\n    this.number2=this.addInPort(new Port(this,\"number2\"));\n\n    this.exec= function()\n    {\n        self.updateAnims();\n        self.result.val=self.number1.val==self.number2.val ;\n    };\n\n    this.number1.onValueChanged=this.exec;\n    this.number2.onValueChanged=this.exec;\n};\n\nOps.Math.Compare.Equals.prototype = new Op();\n\n\n","\nOps.Net=Ops.Net || {};\n\nOps.Net.Websocket = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='Websocket';\n    this.url=this.addInPort(new Port(this,\"url\",OP_PORT_TYPE_VALUE,{type:'string'}));\n    this.result=this.addOutPort(new Port(this,\"result\", OP_PORT_TYPE_OBJECT));\n    this.connected=this.addOutPort(new Port(this,\"connected\"));\n\n    var connection=null;\n    var timeout=null;\n    var connectedTo='';\n\n    function checkConnection()\n    {\n        if(self.connected.val===false)\n        {\n            connect();\n        }\n        timeout=setTimeout(checkConnection,1000);\n    }\n\n    function connect()\n    {\n        if(self.connected.val===true && connectedTo==self.url.val) return;\n        if(self.connected.val===true)connection.close();\n\n        window.WebSocket = window.WebSocket || window.MozWebSocket;\n     \n         if (!window.WebSocket)\n            console.error('Sorry, but your browser doesn\\'t support WebSockets.');\n\n        try\n        {\n            if(connection!=null)connection.close();\n            connection = new WebSocket(self.url.val);\n        }catch (e)\n        {\n            console.log('could not connect to',self.url.val);\n        }\n        \n        connection.onerror = function (message)\n        {\n            self.connected.val=false;\n        };\n\n        connection.onclose = function (message)\n        {\n            self.connected.val=false;\n        };\n\n        connection.onopen = function (message)\n        {\n            self.connected.val=true;\n            connectedTo=self.url.val;\n        };\n\n        connection.onmessage = function (message)\n        {\n            try\n            {\n                var json = JSON.parse(message.data);\n                self.result.val=json;\n                        \n            } catch (e) {\n                console.log('This doesn\\'t look like a valid JSON: ', message.data);\n                return;\n            }\n        };\n\n        \n        \n    }\n\n    this.url.onValueChanged=connect;\n    timeout=setTimeout(checkConnection,1000);\n\n    this.url.val='ws://127.0.0.1:1337';\n};\n\nOps.Net.Websocket.prototype = new Op();\n\n// -------------------------------------------------------------\n","\nOps = Ops || {};\nOps.Ui = Ops.Ui || {};\n\nOps.Ui.Comment = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='Comment';\n    this.title=this.addInPort(new Port(this,\"title\"));\n    this.text=this.addInPort(new Port(this,\"text\"));\n};\n\nOps.Ui.Comment.prototype = new Op();\n\n// -------------------\n\nOps.Ui.Patch = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='Patch';\n    this.patchId=this.addInPort(new Port(this,\"patchId\",OP_PORT_TYPE_VALUE,{ display:'readonly' }));\n\n\n    var hasDynamicPort=function()\n    {\n        for(var i in self.portsIn)\n        {\n            if(self.portsIn[i].type==OP_PORT_TYPE_DYNAMIC)\n            {\n                        // console.log('hasDynamicPort');\n                return true;\n            }\n            if(self.portsIn[i].getName()=='dyn')\n            {\n                // console.log('hasDynamicPort');\n                return true;\n            }\n\n        }\n                \n        return false;\n    };\n\n    var getNewDynamicPort=function(name)\n    {\n\n        for(var i in this.portsIn)\n        {\n            if(this.portsIn[i].type==OP_PORT_TYPE_DYNAMIC)\n            {\n                this.portsIn[i].name=name;\n                // console.log('found dyn port, change name...');\n                        \n                return this.portsIn[i];\n            }\n        }\n\n        var p=self.addInPort(new Port(self,name,OP_PORT_TYPE_DYNAMIC));\n        p.shouldLink=self.shouldLink;\n        return p;\n    };\n\n    this.getPort=function(name)\n    {\n        for(var ipi in self.portsIn)\n        {\n            if(self.portsIn[ipi].getName()==name)\n            {\n                return self.portsIn[ipi];\n            }\n        }\n\n        var p=getNewDynamicPort(name);\n        \n        return p;\n    };\n\n    var getSubPatchInputOp=function()\n    {\n        var patchInputOP=self.patch.getSubPatchOp(self.patchId.val,'Ops.Ui.PatchInput');\n\n        if(!patchInputOP)\n        {\n            console.log('no patchinput!');\n            self.patch.addOp('Ops.Ui.PatchInput',{'subPatch':self.patchId.val} );\n\n            patchInputOP=self.patch.getSubPatchOp(self.patchId.val,'Ops.Ui.PatchInput');\n\n            if(!patchInputOP)\n            {\n                console.warn('no patchinput2!');\n            }\n        }\n\n        return patchInputOP;\n    };\n\n    this.shouldLink=function(p1,p2)\n    {\n        if(p1.type!=OP_PORT_TYPE_DYNAMIC && p2.type!=OP_PORT_TYPE_DYNAMIC) return true;\n\n        // console.log('shouldlink');\n        // console.log('p1 p2',p1.getName(),p2.getName());\n\n        var dynPort=p2;\n        var otherPort=p1;\n\n        if(p1.type==OP_PORT_TYPE_DYNAMIC)\n        {\n            dynPort=p1;\n            otherPort=p2;\n        }\n\n        dynPort.type=otherPort.type;\n        dynPort.name='in_'+otherPort.getName();\n\n        var patchInputOP=getSubPatchInputOp();\n        var pOut=patchInputOP.addOutPort(new Port(self,\"out_\"+otherPort.getName(),dynPort.type));\n\n        if(dynPort.type==OP_PORT_TYPE_FUNCTION)\n        {\n            dynPort.onTriggered=function()\n            {\n                pOut.trigger();\n            };\n            dynPort.onTriggered();\n        }\n        else\n        {\n            dynPort.onValueChanged=function()\n            {\n                pOut.val=dynPort.val;\n            };\n            dynPort.onValueChanged();\n        }\n\n        if (CABLES.UI)gui.patch().updateSubPatches();\n        if(!hasDynamicPort())getNewDynamicPort('dyn');\n\n\n\n        // console.log('port list');\n        // for(var i in self.portsIn)\n        // {\n        //     console.log(' ',self.portsIn[i].getName(),self.portsIn[i].type);\n        // }\n        // console.log('  ',self.portsIn.length+' ports');\n        \n\n        return true;\n    };\n\n    this.patchId.onValueChanged=function()\n    {\n        Ops.Ui.Patch.maxPatchId=Math.max(Ops.Ui.Patch.maxPatchId,self.patchId.val);\n    };\n\n    this.patchId.val=Ops.Ui.Patch.maxPatchId+1;\n\n\n    this.onCreate=function()\n    {\n        if(!hasDynamicPort())getNewDynamicPort('dyn');\n        getSubPatchInputOp();\n\n        if (CABLES.UI) gui.patch().updateSubPatches();\n    };\n\n    this.onDelete=function()\n    {\n        for (var i = 0; i < self.patch.ops.length; i++)\n            if(self.patch.ops[i].uiAttribs && self.patch.ops[i].uiAttribs.subPatch==self.patchId.val)\n                self.patch.deleteOp(self.patch.ops[i].id);\n    };\n\n\n};\nOps.Ui.Patch.maxPatchId=0;\n\nOps.Ui.Patch.prototype = new Op();\n\n// -------------------\n\nOps.Ui.PatchInput = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='PatchInput';\n\n    this.getPatchOp=function()\n    {\n\n        // console.log('...'+self.patch.ops.length);\n        \n        // console.log(self.uiAttribs.subPatch);\n\n        for(var i in self.patch.ops)\n        {\n            if(self.patch.ops[i].patchId)\n            {\n                if(self.patch.ops[i].patchId.val==self.uiAttribs.subPatch)\n                {\n                    // console.log('FOUND PATCHOP' ,self.patch.ops[i].patchId.val );\n                    return self.patch.ops[i];\n                }\n                 \n            }\n\n            // if(self.patch.ops[i].uiAttribs && self.patch.ops[i].objName=='Ops.Ui.Patch')\n            // {\n                            \n                            \n            //     }\n            // }\n        }\n\n        console.log('NOT FOUND PATCHOP');\n\n\n    };\n\n\n\n    // this.getPort=function(name)\n    // {\n    //     for(var ipi in self.portsIn)\n    //         if(self.portsIn[ipi].getName()==name)return self.portsIn[ipi];\n\n    //     var p=getNewDynamicPort(name);\n        \n    //     return p;\n    // };\n\n    // this.addOutput=this.addOutPort(new Port(this,\"new output\",OP_PORT_TYPE_DYNAMIC));\n    \n    // this.addOutput.shouldLink=function(p1,p2)\n    // {\n    //     // console.log('shouldlink!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!');\n\n    //     // console.log(p1.getName() );\n    //     // console.log(p2.getName() );\n        \n\n    //     // // for(var i in self.portsOut)\n    //     // // {\n    //     // //     if(p2.getName()==self.portsOut[i].getName()) \n    //     // //         {\n    //     // //             // found=true;\n    //     // //             return true;\n    //     // //         }\n    //     // // }\n\n    //     // theP=p2;\n    //     // if(p1.type==OP_PORT_TYPE_DYNAMIC) theP=p1;\n\n    //     // var pOut=self.addOutPort(new Port(self,\"new output\"+inPorts.length,theP.type));\n\n\n\n\n\n    //     //     if(p2.getName()==self.portsOut[i].getName())\n    //     //     {\n\n    //     // console.log(self.portsOut[i].getName());\n    //     // console.log(p1.getName());\n    //     // console.log(p2.getName());\n    //     // console.log('---', self.portsOut[i].getName());\n\n    //     // console.log(p1.type);\n    //     // console.log(self.portsOut[i].type);\n        \n\n    //     //         self.patch.link(p1.parent,p1.getName(),self,self.portsOut[i].getName());\n    //     //     }\n\n    //     //     // if(p2.getName()==self.portsOut[i].getName())\n    //     //     // {\n    //     //     //     self.patch.link(self,self.portsOut[i].getName(),p1.parent,p1.getName());\n    //     //     // }\n\n            \n    //     // }\n\n\n    //     console.log('shouldlink!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!');\n    //     console.log('p1',p1);\n\n    //     return true;\n    // };\n\n};\n\nOps.Ui.PatchInput.prototype = new Op();\n\n// -------------------\n\nOps.Ui.PatchOutput = function()\n{\n    var self=this;\n    Op.apply(this, arguments);\n\n    this.name='PatchOutput';\n    this.patchOutput=this.addInPort(new Port(this,\"out\"));\n};\n\nOps.Ui.PatchOutput.prototype = new Op();\n\n\n","\n\n// --------------------------------------------------------------------------\n\nOps.Gl.Matrix.WASDCamera = function()\n{\n    Op.apply(this, arguments);\n    var self=this;\n\n    var DEG2RAD=3.14159/180.0;\n\n\n    this.name='WASDCamera';\n    this.render=this.addInPort(new Port(this,\"render\",OP_PORT_TYPE_FUNCTION));\n    this.trigger=this.addOutPort(new Port(this,\"trigger\",OP_PORT_TYPE_FUNCTION));\n\n    this.isLocked=this.addOutPort(new Port(this,\"isLocked\",OP_PORT_TYPE_VALUE));\n    this.isLocked.val=false;\n\n    var vPos=vec3.create();\n\n    // var posX=0,posZ=0,posY=0;\n    // var rotX=0,rotY=0,rotZ=0;\n    var speedx=0,speedy=0,speedz=0;\n\n    var movementSpeedFactor = 0.5;\n\n    this.posX=this.addInPort(new Port(this,\"posX\",OP_PORT_TYPE_VALUE));\n    this.posY=this.addInPort(new Port(this,\"posY\",OP_PORT_TYPE_VALUE));\n    this.posZ=this.addInPort(new Port(this,\"posZ\",OP_PORT_TYPE_VALUE));\n\n    this.rotX=this.addInPort(new Port(this,\"rotX\",OP_PORT_TYPE_VALUE));\n    this.rotY=this.addInPort(new Port(this,\"rotY\",OP_PORT_TYPE_VALUE));\n\n    this.outPosX=this.addOutPort(new Port(this,\"posX\",OP_PORT_TYPE_VALUE));\n    this.outPosY=this.addOutPort(new Port(this,\"posY\",OP_PORT_TYPE_VALUE));\n    this.outPosZ=this.addOutPort(new Port(this,\"posZ\",OP_PORT_TYPE_VALUE));\n    self.outPosX.val=-self.posX.val;\n    self.outPosY.val=-self.posY.val;\n    self.outPosZ.val=-self.posZ.val;\n\n    var viewMatrix = mat4.create();\n\n\n    this.render.onTriggered=function()\n    {\n        calcCameraMovement();\n        move();\n\n        if(speedx!==0.0 || speedy!==0.0 || speedz!==0)\n        {\n            self.outPosX.val=-self.posX.val;\n            self.outPosY.val=-self.posY.val;\n            self.outPosZ.val=-self.posZ.val;\n        }\n\n        cgl.pushMvMatrix();\n\n        vec3.set(vPos, -self.posX.val,-self.posY.val,-self.posZ.val);\n\n        mat4.rotateX( cgl.mvMatrix ,cgl.mvMatrix,DEG2RAD*self.rotX.val);\n        mat4.rotateY( cgl.mvMatrix ,cgl.mvMatrix,DEG2RAD*self.rotY.val);\n        mat4.translate( cgl.mvMatrix ,cgl.mvMatrix,vPos);\n\n        \n        self.trigger.trigger();\n        cgl.popMvMatrix();\n    };\n\n    //--------------\n\n    function calcCameraMovement()\n    {\n        var camMovementXComponent = 0.0,\n            camMovementYComponent = 0.0,\n            camMovementZComponent = 0.0,\n            pitchFactor=0,\n            yawFactor=0;\n\n        if (pressedW)\n        {\n            // Control X-Axis movement\n            pitchFactor = Math.cos(DEG2RAD*self.rotX.val);\n                    \n            camMovementXComponent += ( movementSpeedFactor * (Math.sin(DEG2RAD*self.rotY.val)) ) * pitchFactor;\n\n            // Control Y-Axis movement\n            camMovementYComponent += movementSpeedFactor * (Math.sin(DEG2RAD*self.rotX.val)) * -1.0;\n\n            // Control Z-Axis movement\n            yawFactor = (Math.cos(DEG2RAD*self.rotX.val));\n            camMovementZComponent += ( movementSpeedFactor * (Math.cos(DEG2RAD*self.rotY.val)) * -1.0 ) * yawFactor;\n        }\n\n        if (pressedS)\n        {\n            // Control X-Axis movement\n            pitchFactor = Math.cos(DEG2RAD*self.rotX.val);\n            camMovementXComponent += ( movementSpeedFactor * (Math.sin(DEG2RAD*self.rotY.val)) * -1.0) * pitchFactor;\n\n            // Control Y-Axis movement\n            camMovementYComponent += movementSpeedFactor * (Math.sin(DEG2RAD*self.rotX.val));\n\n            // Control Z-Axis movement\n            yawFactor = (Math.cos(DEG2RAD*self.rotX.val));\n            camMovementZComponent += ( movementSpeedFactor * (Math.cos(DEG2RAD*self.rotY.val)) ) * yawFactor;\n        }\n\n        if (pressedA)\n        {\n            // Calculate our Y-Axis rotation in radians once here because we use it twice\n            var yRotRad = DEG2RAD*self.rotY.val;\n\n            camMovementXComponent += -movementSpeedFactor * (Math.cos(yRotRad));\n            camMovementZComponent += -movementSpeedFactor * (Math.sin(yRotRad));\n        }\n\n        if (pressedD)\n        {\n            // Calculate our Y-Axis rotation in radians once here because we use it twice\n            var yRotRad = DEG2RAD*self.rotY.val;\n\n            camMovementXComponent += movementSpeedFactor * (Math.cos(yRotRad));\n            camMovementZComponent += movementSpeedFactor * (Math.sin(yRotRad));\n        }\n\n        speedx = camMovementXComponent;\n        speedy = camMovementYComponent;\n        speedz = camMovementZComponent;\n\n        if (speedx > movementSpeedFactor) speedx = movementSpeedFactor;\n        if (speedx < -movementSpeedFactor) speedx = -movementSpeedFactor;\n\n        if (speedy > movementSpeedFactor) speedy = movementSpeedFactor;\n        if (speedy < -movementSpeedFactor) speedy = -movementSpeedFactor;\n\n        if (speedz > movementSpeedFactor) speedz = movementSpeedFactor;\n        if (speedz < -movementSpeedFactor) speedz = -movementSpeedFactor;\n    }\n\n    function moveCallback(e)\n    {\n        var mouseSensitivity=0.1;\n        self.rotX.val+=e.movementY*mouseSensitivity;\n        self.rotY.val+=e.movementX*mouseSensitivity;\n\n        if (self.rotX.val < -90.0) self.rotX.val = -90.0;\n        if (self.rotX.val > 90.0) self.rotX.val = 90.0;\n        if (self.rotY.val < -180.0) self.rotY.val += 360.0;\n        if (self.rotY.val > 180.0) self.rotY.val -= 360.0;\n    }\n\n    var canvas = document.getElementById(\"glcanvas\");\n\n     function lockChangeCallback(e)\n     {\n        if (document.pointerLockElement === canvas ||\n                document.mozPointerLockElement === canvas ||\n                document.webkitPointerLockElement === canvas)\n        {\n            document.addEventListener(\"mousemove\", moveCallback, false);\n            document.addEventListener(\"keydown\", keyDown, false);\n            document.addEventListener(\"keyup\", keyUp, false);\n            console.log('lock start');\n            // isLocked=true;\n            self.isLocked.val=true;\n\n        }\n        else\n        {\n            document.removeEventListener(\"mousemove\", moveCallback, false);\n            document.removeEventListener(\"keydown\", keyDown, false);\n            document.removeEventListener(\"keyup\", keyUp, false);\n            // isLocked=false;\n            self.isLocked.val=false;\n            pressedW=false;\n            pressedA=false;\n            pressedS=false;\n            pressedD=false;\n\n            console.log('lock exit');\n        }\n    }\n       \n    document.addEventListener('pointerlockchange', lockChangeCallback, false);\n    document.addEventListener('mozpointerlockchange', lockChangeCallback, false);\n    document.addEventListener('webkitpointerlockchange', lockChangeCallback, false);\n\n    document.getElementById('glcanvas').addEventListener('mousedown',function()\n    {\n        document.addEventListener(\"mousemove\", moveCallback, false);\n        canvas.requestPointerLock = canvas.requestPointerLock ||\n                                    canvas.mozRequestPointerLock ||\n                                    canvas.webkitRequestPointerLock;\n        canvas.requestPointerLock();\n\n    });\n\n    var lastMove=0;\n    function move()\n    {\n        var timeOffset = window.performance.now()-lastMove;\n\n        self.posX.val+=speedx;\n        self.posY.val+=speedy;\n        self.posZ.val+=speedz;\n\n        lastMove = window.performance.now();\n    }\n\n    var pressedW=false;\n    var pressedA=false;\n    var pressedS=false;\n    var pressedD=false;\n\n    function keyDown(e)\n    {\n        switch(e.which)\n        {\n            case 87:\n                pressedW=true;\n            break;\n            case 65:\n                pressedA=true;\n            break;\n            case 83:\n                pressedS=true;\n            break;\n            case 68:\n                pressedD=true;\n            break;\n\n            default:\n                console.log('key:',e.which);\n            break;\n        }\n    }\n\n    function keyUp(e)\n    {\n        console.log('key');\n                \n        switch(e.which)\n        {\n            case 87:\n                pressedW=false;\n            break;\n            case 65:\n                pressedA=false;\n            break;\n            case 83:\n                pressedS=false;\n            break;\n            case 68:\n                pressedD=false;\n            break;\n        }\n    }\n\n\n};\n\nOps.Gl.Matrix.WASDCamera.prototype = new Op();\n\n\n// --------------------------------------------------------------------------\n"],"sourceRoot":"/source/"}